{
  "address": "0xD44DCcb44f53Db5813B4EC6b6fed0ecE6498EFb6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_bytecode",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "middleware",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "LOG_MIDDLEWARE",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "LOG_USER_VAULT",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "LogNewCrp",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "bytecodes",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "isCrp",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factoryAddress",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "poolTokenSymbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "poolTokenName",
              "type": "string"
            },
            {
              "internalType": "address[]",
              "name": "constituentTokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenBalances",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenWeights",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "swapFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "managerFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "redeemFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "issueFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "perfermanceFee",
              "type": "uint256"
            },
            {
              "internalType": "enum IConfigurableRightsPool.Etypes",
              "name": "etype",
              "type": "uint8"
            }
          ],
          "internalType": "struct IConfigurableRightsPool.PoolParams",
          "name": "poolParams",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "canPauseSwapping",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canChangeSwapFee",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canChangeWeights",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canAddRemoveTokens",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canWhitelistLPs",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canTokenWhiteLists",
              "type": "bool"
            }
          ],
          "internalType": "struct RightsManager.Rights",
          "name": "rights",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "firstLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "secondLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "thirdLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "fourLevel",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SmartPoolManager.feeParams",
              "name": "managerFee",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "firstLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "secondLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "thirdLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "fourLevel",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SmartPoolManager.feeParams",
              "name": "issueFee",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "firstLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "secondLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "thirdLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "fourLevel",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SmartPoolManager.feeParams",
              "name": "redeemFee",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "firstLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "secondLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "thirdLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "fourLevel",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SmartPoolManager.feeParams",
              "name": "perfermanceFee",
              "type": "tuple"
            }
          ],
          "internalType": "struct SmartPoolManager.KolPoolParams",
          "name": "kolPoolParams",
          "type": "tuple"
        },
        {
          "internalType": "address[]",
          "name": "owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ownerPercentage",
          "type": "uint256[]"
        }
      ],
      "name": "newCrp",
      "outputs": [
        {
          "internalType": "contract IConfigurableRightsPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_bytecodes",
          "type": "bytes"
        }
      ],
      "name": "setByteCodes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newVault",
          "type": "address"
        }
      ],
      "name": "setUserVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "userVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7f1ab3349b1ca8275b002b0933834d0768bd2d88708b6dc150ca877246daea56",
  "receipt": {
    "to": null,
    "from": "0x595b85b4A418e3B8df897D02F5BD49167D00862F",
    "contractAddress": "0xD44DCcb44f53Db5813B4EC6b6fed0ecE6498EFb6",
    "transactionIndex": 0,
    "gasUsed": "18542219",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x2fcdf2a8f6ab493b7cd0cbd6307d0001e3aebf4f659bc6f8e4d550824c1d80e0",
    "transactionHash": "0x7f1ab3349b1ca8275b002b0933834d0768bd2d88708b6dc150ca877246daea56",
    "logs": [],
    "blockNumber": 8102508,
    "cumulativeGasUsed": "18542219",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x60806040526107086022553480156200001757600080fd5b5060405162006099380380620060998339810160408190526200003a91620001ce565b815182908290620000539060039060208501906200008b565b508051620000699060049060208401906200008b565b5050600580546001600160a01b0319163317905550506001600b555062000235565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620000ce57805160ff1916838001178555620000fe565b82800160010185558215620000fe579182015b82811115620000fe578251825591602001919060010190620000e1565b506200010c92915062000110565b5090565b5b808211156200010c576000815560010162000111565b600082601f83011262000138578081fd5b81516001600160401b03808211156200014f578283fd5b6040516020601f8401601f191682018101838111838210171562000171578586fd5b806040525081945083825286818588010111156200018e57600080fd5b600092505b83831015620001b2578583018101518284018201529182019162000193565b83831115620001c45760008185840101525b5050505092915050565b60008060408385031215620001e1578182fd5b82516001600160401b0380821115620001f8578384fd5b620002068683870162000127565b935060208501519150808211156200021c578283fd5b506200022b8582860162000127565b9150509250929050565b615e5480620002456000396000f3fe608060405234801561001057600080fd5b50600436106102985760003560e01c80637228c87b116101635780637228c87b1461049c57806372ba9acd146104bb57806373a9855c146104dc57806374983a0d146104f15780637dc2cd98146104f9578063806c6f871461050157806391a806c91461051457806392eefe9b1461052757806395d89b411461053a578063980e8db614610542578063992f6ba51461055c5780639d829c2b1461056f578063a0e67e2b14610577578063a3f4df7e1461058c578063a6c245c414610594578063a89ae4ba146105a7578063a9059cbb146105af578063b02f0b73146105c2578063b61d27f6146105d5578063b64ef17b146105e8578063c5318d0f146105f0578063c83a1c2d14610603578063d29986c114610616578063d2fed42e1461061e578063d73dd62314610626578063dd62ed3e14610639578063e2762d4b1461064c578063f3b085721461065f57610298565b8063025e7c271461029d57806306fdde03146102c65780630892b93d146102db578063095dcccc146102f0578063095ea7b3146103035780630a16594014610323578063173825d91461032b57806318160ddd1461033e578063220eb7601461035357806323b872dd1461036657806327304dfd146103795780632e0f26251461038c5780633018205f146103a1578063309a042c146103a9578063313ce567146103be57806337c6f4d9146103c65780633befcde8146103d95780633ef14479146103ec578063430bf08a146103ff57806347786d37146104075780634ba578821461041a5780635468d6d71461042d57806355b190551461043557806355c32a231461044857806356fb3bd61461045b57806366188463146104635780636e49db1c1461047657806370a0823114610489575b600080fd5b6102b06102ab366004614e48565b610667565b6040516102bd9190615148565b60405180910390f35b6102ce61068e565b6040516102bd91906153e1565b6102ee6102e9366004614f1d565b610724565b005b6102ee6102fe366004614b25565b610bdb565b610316610311366004614b25565b610c08565b6040516102bd919061534a565b6102b0610c61565b6102ee6103393660046148c5565b610c70565b610346610e52565b6040516102bd9190615bfa565b6102ee610361366004614e48565b610e58565b610316610374366004614935565b610e83565b6103166103873660046148c5565b610fad565b610394610fc2565b6040516102bd9190615cf5565b6102b0610fc7565b6103b1610fd6565b6040516102bd9190615337565b61039461102d565b6103166103d4366004614e29565b611032565b6102ee6103e7366004614ec1565b6110c7565b6102ee6103fa366004614c6b565b611981565b6102b0611aa4565b6102ee610415366004614e48565b611ab3565b6102ee610428366004614e48565b611be1565b610316611c09565b6102ee6104433660046149ba565b611c19565b6102ee610456366004614b25565b61200c565b610316612035565b610316610471366004614b25565b612045565b6102ee610484366004614975565b61211f565b6103466104973660046148c5565b6124c9565b6104a46124e4565b6040516102bd9b9a99989796959493929190615ca7565b6104ce6104c93660046148c5565b612508565b6040516102bd929190615c1a565b6104e4612521565b6040516102bd9190615630565b6102b061252a565b610346612542565b61031661050f3660046148c5565b612548565b6104ce6105223660046148c5565b612641565b6102ee6105353660046148c5565b61265a565b6102ce6127c0565b61054a612821565b6040516102bd96959493929190615376565b6102ee61056a366004614b25565b61285a565b6102b0612983565b61057f61299b565b6040516102bd919061528d565b6102ce6129fc565b6102ee6105a2366004614d4e565b612a28565b6102b0612bdb565b6103166105bd366004614b25565b612bea565b6102ee6105d0366004614e78565b612c26565b6102ce6105e3366004614b50565b613406565b6102b06135ca565b6103466105fe366004614e48565b6135d9565b6102ee6106113660046148c5565b6135f7565b610346613713565b6102ee613719565b610316610634366004614b25565b6139fd565b6103466106473660046148fd565b613a71565b6102ee61065a3660046148c5565b613a9c565b6102b0613bd1565b6007818154811061067457fe5b6000918252602090912001546001600160a01b0316905081565b60048054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561071a5780601f106106ef5761010080835404028352916020019161071a565b820191906000526020600020905b8154815290600101906020018083116106fd57829003601f168201915b5050505050905090565b6005546001600160a01b031633146107575760405162461bcd60e51b815260040161074e90615693565b60405180910390fd5b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516107899291906153c5565b60405180910390a26002600b5414156107b45760405162461bcd60e51b815260040161074e906158b4565b6002600b55600f54604080516358c3de9360e11b815290516001600160a01b039092169163b187bd2691600480820192602092909190829003018186803b1580156107fe57600080fd5b505afa158015610812573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108369190614da4565b156108535760405162461bcd60e51b815260040161074e90615869565b600160275460ff16600181111561086657fe5b1415610bc757601654604051633e9fc0bd60e01b8152730314725E3312e6453f745467572283E617881A8991633e9fc0bd916108a89187918990600401615c28565b60006040518083038186803b1580156108c057600080fd5b505af41580156108d4573d6000803e3d6000fd5b5050601654601754601f805492945090925061091b916000906108f357fe5b9060005260206000200154610915856020015189613be990919063ffffffff16565b90613c66565b601655601f8054610949919060009061093057fe5b6000918252602090912001548451610915908990613be9565b60175560405161095890615126565b60405190819003812060165490913391600080516020615dbf83398151915291610983918791615c1a565b60405180910390a360405161099790615137565b60405190819003812060175490913391600080516020615dbf833981519152916109c2918691615c1a565b60405180910390a36000428601818660028111156109dc57fe5b14156109ec57610e109150610a13565b60018660028111156109fa57fe5b1415610a0b5762ed4e009150610a13565b6301da9c0091505b601287905560138190556014829055808201601581905560245460405163108ad9bd60e21b81526000916001600160a01b03169063422b66f490610a5f90601e90601f90600401615312565b602060405180830381600087803b158015610a7957600080fd5b505af1158015610a8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab19190614e60565b9050600f60009054906101000a90046001600160a01b03166001600160a01b031663703a9ec96040518163ffffffff1660e01b815260040160206040518083038186803b158015610b0157600080fd5b505afa158015610b15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3991906148e1565b6001600160a01b031663d7256c703333601e601f6040518563ffffffff1660e01b8152600401610b6c949392919061515c565b600060405180830381600087803b158015610b8657600080fd5b505af1158015610b9a573d6000803e3d6000fd5b505050506000811115610bc0573360009081526025602052604090208a81556001018190555b5050505050505b610bd084613cf7565b50506001600b555050565b333014610bfa5760405162461bcd60e51b815260040161074e90615693565b610c04828261402b565b5050565b3360008181526002602090815260408083206001600160a01b03871680855292528083208590555191929091600080516020615dff83398151915290610c4f908690615bfa565b60405180910390a35060015b92915050565b600f546001600160a01b031681565b6005546001600160a01b03163314610c9a5760405162461bcd60e51b815260040161074e90615693565b6001600160a01b0381166000908152600660205260408120805460ff19169055805b600754811015610dbe57826001600160a01b031660078281548110610cdd57fe5b6000918252602090912001546001600160a01b03161415610db657600780546000198101908110610d0a57fe5b600091825260209091200154600780546001600160a01b039092169183908110610d3057fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060088181548110610d6b57fe5b90600052602060002001549150600860016008805490500381548110610d8d57fe5b906000526020600020015460088281548110610da557fe5b600091825260209091200155610dbe565b600101610cbc565b506007805480610dca57fe5b600082815260209020810160001990810180546001600160a01b03191690550190556008805480610df757fe5b600082815260208120820160001990810182905590910190915560098054839003905560405182916001600160a01b038516917f7b0884b4b6bb4e0c1385ad42168fa556c14d4d799c1bf22f081aff3efff6ea0c9190a35050565b60005490565b333014610e775760405162461bcd60e51b815260040161074e90615693565b610e8081614036565b50565b60006001600160a01b038316610eab5760405162461bcd60e51b815260040161074e9061579b565b336001600160a01b0385161480610ee557506001600160a01b03841660009081526002602090815260408083203384529091529020548211155b610f015760405162461bcd60e51b815260040161074e906159d2565b610f0c84848461409e565b6001600160a01b0384166000818152600260209081526040808320338085529252909120549114801590610f4257506000198114155b15610fa057610f51818461413d565b6001600160a01b03861660008181526002602090815260408083203380855292529182902084905590519092600080516020615dff83398151915291610f979190615bfa565b60405180910390a35b60019150505b9392505050565b60066020526000908152604090205460ff1681565b601281565b6005546001600160a01b031690565b6060600880548060200260200160405190810160405280929190818152602001828054801561071a57602002820191906000526020600020905b815481526020019060010190808311611010575050505050905090565b601290565b6040516322c1aa2560e11b81526000907311D61d0855aCfB43b3C9275b70403EcCC721253690634583544a9061106f906011908690600401615b74565b60206040518083038186803b15801561108757600080fd5b505af415801561109b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110bf9190614da4565b90505b919050565b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516110f99291906153c5565b60405180910390a26002600b5414156111245760405162461bcd60e51b815260040161074e906158b4565b6002600b556010546001600160a01b03166111515760405162461bcd60e51b815260040161074e906157f8565b600f60009054906101000a90046001600160a01b03166001600160a01b031663b187bd266040518163ffffffff1660e01b815260040160206040518083038186803b15801561119f57600080fd5b505afa1580156111b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d79190614da4565b156111f45760405162461bcd60e51b815260040161074e90615869565b60115433600090815260216020526040902054730314725E3312e6453f745467572283E617881A899163dba4989a9160ff600160201b90920482169116600160275460ff16600181111561124457fe5b146012600101546040518563ffffffff1660e01b815260040161126a94939291906153a6565b60006040518083038186803b15801561128257600080fd5b505af4158015611296573d6000803e3d6000fd5b5050601154600160281b900460ff161591506112d29050576112b6614176565b6112d25760405162461bcd60e51b815260040161074e90615b16565b601054601a5460405163b78e0bc960e01b8152606092730314725E3312e6453f745467572283E617881A899263b78e0bc9926113259230926001600160a01b03909116918b918b918b91906004016155e9565b60006040518083038186803b15801561133d57600080fd5b505af4158015611351573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113799190810190614ccb565b90506060601060009054906101000a90046001600160a01b03166001600160a01b031663cc77828d6040518163ffffffff1660e01b815260040160006040518083038186803b1580156113cb57600080fd5b505afa1580156113df573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114079190810190614bd3565b9050606081516001600160401b038111801561142257600080fd5b5060405190808252806020026020018201604052801561144c578160200160208202803683370190505b50601a54909150600090600160275460ff16600181111561146957fe5b14156115f75760245460405163108ad9bd60e21b81526001600160a01b039091169063422b66f4906114a190879089906004016152a0565b602060405180830381600087803b1580156114bb57600080fd5b505af11580156114cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f39190614e60565b9150600f60009054906101000a90046001600160a01b03166001600160a01b031663703a9ec96040518163ffffffff1660e01b815260040160206040518083038186803b15801561154357600080fd5b505afa158015611557573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157b91906148e1565b6001600160a01b031663d7256c70873387896040518563ffffffff1660e01b81526004016115ac94939291906151e3565b600060405180830381600087803b1580156115c657600080fd5b505af11580156115da573d6000803e3d6000fd5b5050602454600160b01b900460ff16151591506115f79050575060005b60005b8451811015611763576000730314725E3312e6453f745467572283E617881A8963d378778c30601060009054906101000a90046001600160a01b031689868151811061164257fe5b60200260200101518b878151811061165657fe5b6020026020010151886040518663ffffffff1660e01b815260040161167f9594939291906154b9565b60206040518083038186803b15801561169757600080fd5b505af41580156116ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116cf9190614e60565b90508582815181106116dd57fe5b60200260200101516001600160a01b0316336001600160a01b03167fea39e3b35c5cd8937999ed5f7fbab30acd562a931fc4a887fed2a47c3074aa7289858151811061172557fe5b602002602001015160405161173a9190615bfa565b60405180910390a38085838151811061174f57fe5b6020908102919091010152506001016115fa565b5080156117d457602354604051631483d99d60e01b81526001600160a01b0390911690631483d99d906117a1908790879081906000906004016152c5565b600060405180830381600087803b1580156117bb57600080fd5b505af11580156117cf573d6000803e3d6000fd5b505050505b6117dd89611c00565b6117e7338a610bfa565b811561182e573360009081526025602052604090208054611808908b614191565b8155336000908152602560205260409020600101546118279084614191565b6001909101555b6000600160275460ff16600181111561184357fe5b1480156118c55750601260050154306001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561188a57600080fd5b505afa15801561189e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c29190614e60565b10155b80156118db5750602454600160b01b900460ff16155b90508015611970576024805460ff60b01b1916600160b01b179055601054601a54604051630ff4d58d60e01b8152730314725E3312e6453f745467572283E617881A8992630ff4d58d9261193f9230926001600160a01b0316918b9160040161552e565b60006040518083038186803b15801561195757600080fd5b505af415801561196b573d6000803e3d6000fd5b505050505b50506001600b555050505050505050565b6005546001600160a01b031633146119ab5760405162461bcd60e51b815260040161074e90615693565b80518251146119cc5760405162461bcd60e51b815260040161074e90615849565b600a5460ff16156119ef5760405162461bcd60e51b815260040161074e906156e6565b60005b8251811015611a6a57818181518110611a0757fe5b6020026020010151600960008282540192505081905550600160066000858481518110611a3057fe5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790556001016119f2565b508151611a7e9060079060208501906145e3565b508051611a92906008906020840190614648565b5050600a805460ff1916600117905550565b6023546001600160a01b031681565b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051611ae59291906153c5565b60405180910390a26002600b541415611b105760405162461bcd60e51b815260040161074e906158b4565b6002600b556010546001600160a01b0316611b3d5760405162461bcd60e51b815260040161074e906157f8565b6005546001600160a01b03163314611b675760405162461bcd60e51b815260040161074e90615693565b600060275460ff166001811115611b7a57fe5b14611b975760405162461bcd60e51b815260040161074e90615b49565b604051611ba390615126565b60405190819003812060165490913391600080516020615dbf83398151915291611bcf91908690615c1a565b60405180910390a36016556001600b55565b333014611c005760405162461bcd60e51b815260040161074e90615693565b610e80816141b6565b602454600160b01b900460ff1681565b730314725E3312e6453f745467572283E617881A896380681cab8360a001518460c001518561010001518660e001518761012001518860600151518960800151518a6040015151602460159054906101000a900460ff166040518a63ffffffff1660e01b8152600401611c9499989796959493929190615c66565b60006040518083038186803b158015611cac57600080fd5b505af4158015611cc0573d6000803e3d6000fd5b50506024805460ff60a81b1916600160a81b17905550508051601180546020808501516040808701516060880151608089015160a08a01511515600160281b0260ff60281b19911515600160201b0260ff60201b1993151563010000000263ff00000019951515620100000262ff0000199815156101000261ff00199d151560ff19909c169b909b179c909c169990991796909616999099179290921695909517949094169190911792909216939093179091558301518051611d8792601e9201906145e3565b5060608201518051611da191601f91602090910190614648565b5060808201518051611db99160209190820190614648565b506040805161016081018252600080825260208201819052918101829052606081018290526000196080820181905260a0820183905260c08581015190830181905260e0808701519084018190526101008088015190850181905261012080890151908601819052426101409687018190526012889055601388905560148890556015889055601695909555601796909655601892909255601955601a55601b92909255601c919091558201516027805460ff191660018381811115611e7b57fe5b0217905550600f80546001600160a01b0319166001600160a01b0385811691909117918290556040805163b18b78dd60e01b81529051929091169163b18b78dd91600480820192602092909190829003018186803b158015611edc57600080fd5b505afa158015611ef0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f1491906148e1565b602480546001600160a01b0319166001600160a01b03928316179055600f54604080516311b2515f60e31b815290519190921691638d928af8916004808301926020929190829003018186803b158015611f6d57600080fd5b505afa158015611f81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fa591906148e1565b602380546001600160a01b0319166001600160a01b0392909216919091179055601954601a54601854601b546040517f3d6667963e842e2b5ff1d4feab2c9b92f17c9003592e2ad229952eeb9a293fd091611fff91615bfa565b60405180910390a4505050565b33301461202b5760405162461bcd60e51b815260040161074e90615693565b610c0482826141e3565b602454600160a81b900460ff1681565b3360009081526002602090815260408083206001600160a01b0386168452909152812054808310612099573360009081526002602090815260408083206001600160a01b03881684529091528120556120c8565b6120a3818461413d565b3360009081526002602090815260408083206001600160a01b03891684529091529020555b3360008181526002602090815260408083206001600160a01b038916808552925291829020549151909291600080516020615dff8339815191529161210d9190615bfa565b60405180910390a35060019392505050565b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516121519291906153c5565b60405180910390a26002600b54141561217c5760405162461bcd60e51b815260040161074e906158b4565b6002600b553360009081526006602052604090205460ff16806121a957506005546001600160a01b031633145b6121c55760405162461bcd60e51b815260040161074e90615670565b6010546001600160a01b03166121ed5760405162461bcd60e51b815260040161074e906157f8565b600f60009054906101000a90046001600160a01b03166001600160a01b031663b187bd266040518163ffffffff1660e01b815260040160206040518083038186803b15801561223b57600080fd5b505afa15801561224f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122739190614da4565b156122905760405162461bcd60e51b815260040161074e90615869565b601054602454730314725E3312e6453f745467572283E617881A899163a782948d916001600160a01b0390911690600160b01b900460ff16600160275460ff1660018111156122db57fe5b60135460155460115460405160e089901b6001600160e01b031916815261231a97969594909414936201000090910460ff16908d908d906004016153f4565b60006040518083038186803b15801561233257600080fd5b505af4158015612346573d6000803e3d6000fd5b50505050612353836141ee565b60235460405163607e58b360e11b81526000916001600160a01b03169063c0fcb16690612384903090600401615148565b60206040518083038186803b15801561239c57600080fd5b505afa1580156123b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123d49190614da4565b9050801561243f5760235460405163edb12adf60e01b81526001600160a01b039091169063edb12adf9061240c903090600401615148565b600060405180830381600087803b15801561242657600080fd5b505af115801561243a573d6000803e3d6000fd5b505050505b6010546040516350884c9160e01b8152730314725E3312e6453f745467572283E617881A89916350884c919161248d9130916001600160a01b03909116908a908a908a908a9060040161547f565b60006040518083038186803b1580156124a557600080fd5b505af41580156124b9573d6000803e3d6000fd5b50506001600b5550505050505050565b6001600160a01b031660009081526001602052604090205490565b601254601354601454601554601654601754601854601954601a54601b54601c548b565b6026602052600090815260409020805460019091015482565b60275460ff1681565b7311D61d0855aCfB43b3C9275b70403EcCC721253690565b60225481565b601154600090600160201b900460ff161561262f576001600160a01b03821660009081526021602052604090205460ff168061259c57506001600160a01b03821660009081526006602052604090205460ff165b806126285750306001600160a01b0316633018205f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156125db57600080fd5b505afa1580156125ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061261391906148e1565b6001600160a01b0316826001600160a01b0316145b90506110c2565b506001600160a01b03811615156110c2565b6025602052600090815260409020805460019091015482565b6005546001600160a01b031633146126845760405162461bcd60e51b815260040161074e90615693565b6001600160a01b0381166126aa5760405162461bcd60e51b815260040161074e9061579b565b6005546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360005b60075481101561276e57600554600780546001600160a01b03909216918390811061270e57fe5b6000918252602090912001546001600160a01b0316141561276657816007828154811061273757fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b6001016126e7565b50600580546001600160a01b03908116600090815260066020526040808220805460ff1990811690915594909216808252919020805490931660011790925580546001600160a01b0319169091179055565b60038054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561071a5780601f106106ef5761010080835404028352916020019161071a565b60115460ff80821691610100810482169162010000820481169163010000008104821691600160201b8204811691600160281b90041686565b6005546001600160a01b031633146128845760405162461bcd60e51b815260040161074e90615693565b6001600160a01b03821660009081526006602052604090205460ff16156128bd5760405162461bcd60e51b815260040161074e9061573c565b6001600160a01b038216600081815260066020526040808220805460ff19166001908117909155600780548083019091557fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880180546001600160a01b0319168517905560088054918201815583527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee3018490556009805485019055518392917fbd5dcf0b25226117c4a68a0129ffdd4b0541ef5e482ad7de9a96ccb6d6a8ebde91a35050565b730314725E3312e6453f745467572283E617881A8990565b6060600780548060200260200160405190810160405280929190818152602001828054801561071a57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116129d5575050505050905090565b6040518060400160405280601081526020016f11195cde5b8814db585c9d08141bdbdb60821b81525081565b6005546001600160a01b03163314612a525760405162461bcd60e51b815260040161074e90615693565b601154600160281b900460ff168015612a755750602454600160a01b900460ff16155b612a915760405162461bcd60e51b815260040161074e906156bf565b8051825114612ab25760405162461bcd60e51b815260040161074e90615a02565b60005b8151811015612bc357600f5483516000916001600160a01b031690638f49f44d90869085908110612ae257fe5b6020026020010151858581518110612af657fe5b60200260200101516040518363ffffffff1660e01b8152600401612b1b929190615c03565b60206040518083038186803b158015612b3357600080fd5b505afa158015612b47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b6b9190614da4565b905080612b8a5760405162461bcd60e51b815260040161074e906157c5565b612bba848381518110612b9957fe5b6020026020010151848481518110612bad57fe5b60200260200101516142c1565b50600101612ab5565b50506024805460ff60a01b1916600160a01b17905550565b6024546001600160a01b031681565b60006001600160a01b038316612c125760405162461bcd60e51b815260040161074e9061579b565b612c1d33848461409e565b50600192915050565b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051612c589291906153c5565b60405180910390a26002600b541415612c835760405162461bcd60e51b815260040161074e906158b4565b6002600b556010546001600160a01b0316612cb05760405162461bcd60e51b815260040161074e906157f8565b600f60009054906101000a90046001600160a01b03166001600160a01b031663b187bd266040518163ffffffff1660e01b815260040160206040518083038186803b158015612cfe57600080fd5b505afa158015612d12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d369190614da4565b15612d535760405162461bcd60e51b815260040161074e90615869565b6000730314725E3312e6453f745467572283E617881A8963c026fa3d30600160275460ff166001811115612d8357fe5b60245460155460135433600090815260256020526040908190208054600190910154915160e08a901b6001600160e01b0319168152612ddb98979690961495600160b01b90950460ff16949091908e9060040161543e565b60606040518083038186803b158015612df357600080fd5b505af4158015612e07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e2b9190614f8a565b3360009081526025602052604090819020600181019390935592909155601054915163151c70f960e21b8152909250606091730314725E3312e6453f745467572283E617881A8991635471c3e491612e979130916001600160a01b03169087908a908a906004016155b5565b60006040518083038186803b158015612eaf57600080fd5b505af4158015612ec3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612eeb9190810190614ccb565b9050612ef7338361202b565b612f0082610e77565b6010546040805163cc77828d60e01b815290516060926001600160a01b03169163cc77828d916004808301926000929190829003018186803b158015612f4557600080fd5b505afa158015612f59573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612f819190810190614bd3565b9050606081516001600160401b0381118015612f9c57600080fd5b50604051908082528060200260200182016040528015612fc6578160200160208202803683370190505b509050600080600160275460ff166001811115612fdf57fe5b148015612fee57506015544210155b1561307a5760245460405163108ad9bd60e21b81526001600160a01b039091169063422b66f49061302590879089906004016152a0565b602060405180830381600087803b15801561303f57600080fd5b505af1158015613053573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130779190614e60565b91505b601954600160275460ff16600181111561309057fe5b14156130c457602454600090600160b01b900460ff161580156130b557506013544210155b905080156130c257600091505b505b821561319f57336000908152602660209081526040808320805460019182015460259094529382902080549101549151633796ed7f60e21b81528b94730314725E3312e6453f745467572283E617881A899463de5bb5fc9461313194929391929188908c90600401615c3e565b60606040518083038186803b15801561314957600080fd5b505af415801561315d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131819190614f8a565b33600090815260266020526040902060018101929092559190559250505b606085516001600160401b03811180156131b857600080fd5b506040519080825280602002602001820160405280156131e2578160200160208202803683370190505b50905060005b865181101561336a576000806000730314725E3312e6453f745467572283E617881A8963e844db6f30601060009054906101000a90046001600160a01b03168d888151811061323357fe5b60200260200101518f898151811061324757fe5b60200260200101518b8d6012600901546040518863ffffffff1660e01b815260040161327997969594939291906154ed565b60606040518083038186803b15801561329157600080fd5b505af41580156132a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132c99190614f8a565b925092509250808585815181106132dc57fe5b602002602001018181525050828985815181106132f557fe5b60200260200101818152505089848151811061330d57fe5b60200260200101516001600160a01b0316336001600160a01b03167fc62fc35ac75e3bff532648e2859a3e1694002cfa357614ae8e034df7f83db5e9846040516133579190615bfa565b60405180910390a35050506001016131e8565b508115158061338557506000831180156133855750601b5415155b156133f457602354604051631483d99d60e01b81526001600160a01b0390911690631483d99d906133c1908990899086906001906004016152c5565b600060405180830381600087803b1580156133db57600080fd5b505af11580156133ef573d6000803e3d6000fd5b505050505b50506001600b55505050505050505050565b6060336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405161343a9291906153c5565b60405180910390a26002600b5414156134655760405162461bcd60e51b815260040161074e906158b4565b6002600b556010546001600160a01b03166134925760405162461bcd60e51b815260040161074e906157f8565b600f546040516338f0d24560e01b81526001600160a01b03909116906338f0d245906134c490309033906004016151c9565b60206040518083038186803b1580156134dc57600080fd5b505afa1580156134f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135149190614da4565b6135305760405162461bcd60e51b815260040161074e9061570c565b601054604051635b0e93fb60e11b81526001600160a01b039091169063b61d27f69061356690889088908890889060040161523a565b600060405180830381600087803b15801561358057600080fd5b505af1158015613594573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526135bc9190810190614dc0565b6001600b5595945050505050565b6010546001600160a01b031681565b600881815481106135e657fe5b600091825260209091200154905081565b6005546001600160a01b031633146136215760405162461bcd60e51b815260040161074e90615693565b6002600b5414156136445760405162461bcd60e51b815260040161074e906158b4565b6002600b556040513390600080356001600160e01b03191691613669919036906153c5565b60405180910390a2601154604051630d3aa47160e41b8152730314725E3312e6453f745467572283E617881A899163d3aa4710916136b991600160201b900460ff16906001908690600401615355565b60006040518083038186803b1580156136d157600080fd5b505af41580156136e5573d6000803e3d6000fd5b505050506001600160a01b03166000908152602160205260409020805460ff19166001908117909155600b55565b60095481565b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405161374b9291906153c5565b60405180910390a26002600b5414156137765760405162461bcd60e51b815260040161074e906158b4565b6002600b553360009081526006602052604090205460ff16806137a357506005546001600160a01b031633145b6137bf5760405162461bcd60e51b815260040161074e90615670565b6010546001600160a01b03166137e75760405162461bcd60e51b815260040161074e906157f8565b600160275460ff1660018111156137fa57fe5b141561382957602454600160b01b900460ff166138295760405162461bcd60e51b815260040161074e90615644565b600061383a426012600a015461413d565b905060225481101561385e5760405162461bcd60e51b815260040161074e906158d9565b6010546040805163cc77828d60e01b815290516060926001600160a01b03169163cc77828d916004808301926000929190829003018186803b1580156138a357600080fd5b505afa1580156138b7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526138df9190810190614bd3565b601054601854602254604051631abc9a6960e11b8152939450606093730314725E3312e6453f745467572283E617881A899363357934d2936139369330936001600160a01b03909316928992918b9160040161556b565b60006040518083038186803b15801561394e57600080fd5b505af4158015613962573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261398a9190810190614ccb565b602354604051630bac7b8160e01b81529192506001600160a01b031690630bac7b81906139bd90859085906004016152a0565b600060405180830381600087803b1580156139d757600080fd5b505af11580156139eb573d6000803e3d6000fd5b505042601c5550506001600b55505050565b3360009081526002602090815260408083206001600160a01b0386168452909152812054613a2b9083614191565b3360008181526002602090815260408083206001600160a01b03891680855292529182902084905590519092600080516020615dff83398151915291610c4f9190615bfa565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b6005546001600160a01b03163314613ac65760405162461bcd60e51b815260040161074e90615693565b6002600b541415613ae95760405162461bcd60e51b815260040161074e906158b4565b6002600b556040513390600080356001600160e01b03191691613b0e919036906153c5565b60405180910390a26011546001600160a01b03821660009081526021602052604090819020549051630d3aa47160e41b8152730314725E3312e6453f745467572283E617881A899263d3aa471092613b7b92600160201b90920460ff908116929116908690600401615355565b60006040518083038186803b158015613b9357600080fd5b505af4158015613ba7573d6000803e3d6000fd5b505050506001600160a01b03166000908152602160205260409020805460ff191690556001600b55565b734E9FA6fE9C793CC0864AB331b2c13EEAeAcd467990565b600082613bf857506000610c5b565b82820282848281613c0557fe5b0414613c235760405162461bcd60e51b815260040161074e9061591c565b6706f05b59d3b20000810181811015613c4e5760405162461bcd60e51b815260040161074e9061591c565b6000670de0b6b3a7640000825b049695505050505050565b600081613c855760405162461bcd60e51b815260040161074e9061597d565b82613c9257506000610c5b565b670de0b6b3a764000083810290848281613ca857fe5b0414613cc65760405162461bcd60e51b815260040161074e9061588a565b60028304810181811015613cec5760405162461bcd60e51b815260040161074e9061588a565b6000848281613c5b57fe5b6010546001600160a01b031615613d205760405162461bcd60e51b815260040161074e90615821565b613d2981611c00565b613d333382610bfa565b600f60009054906101000a90046001600160a01b03166001600160a01b03166391cefde46040518163ffffffff1660e01b8152600401602060405180830381600087803b158015613d8357600080fd5b505af1158015613d97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613dbb91906148e1565b601080546001600160a01b0319166001600160a01b03928316179081905560405163d03f2a0f60e01b8152730314725E3312e6453f745467572283E617881A899263d03f2a0f92613e13929116908590600401615221565b60006040518083038186803b158015613e2b57600080fd5b505af4158015613e3f573d6000803e3d6000fd5b5050505060005b601e54811015613fef576000601e8281548110613e5f57fe5b6000918252602082200154601f80546001600160a01b0390921693509084908110613e8657fe5b90600052602060002001549050600060208481548110613ea257fe5b90600052602060002001549050613eb8836141ee565b6040516323b872dd60e01b81526000906001600160a01b038516906323b872dd90613eeb903390309088906004016151a5565b602060405180830381600087803b158015613f0557600080fd5b505af1158015613f19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f3d9190614da4565b905080613f5c5760405162461bcd60e51b815260040161074e90615a33565b601054613f78906001600160a01b03868116911660001961439b565b50601054604051631c9c3ca760e31b81526001600160a01b039091169063e4e1e53890613fad9087908790879060040161526c565b600060405180830381600087803b158015613fc757600080fd5b505af1158015613fdb573d6000803e3d6000fd5b505060019096019550613e46945050505050565b505b601e5415610e8057601e80548061400457fe5b600082815260209020810160001990810180546001600160a01b0319169055019055613ff1565b610c0430838361409e565b30600090815260016020526040902054614050908261413d565b306000908152600160205260408120919091555461406e908261413d565b60009081556040513090600080516020615ddf83398151915290614093908590615bfa565b60405180910390a350565b6001600160a01b0383166000908152600160205260409020546140c1908261413d565b6001600160a01b0380851660009081526001602052604080822093909355908416815220546140f09082614191565b6001600160a01b038084166000818152600160205260409081902093909355915190851690600080516020615ddf83398151915290614130908590615bfa565b60405180910390a3505050565b600080600061414c8585614542565b91509150801561416e5760405162461bcd60e51b815260040161074e90615ac1565b509392505050565b6000600c5460001461418957600161418c565b60005b905090565b600082820183811015610fa65760405162461bcd60e51b815260040161074e90615aec565b6141bf81614567565b6016546000541115610e805760405162461bcd60e51b815260040161074e906159a3565b610c0482308361409e565b600f5460405163db7ca46b60e01b81526001600160a01b039091169063db7ca46b9061421e908490600401615148565b60206040518083038186803b15801561423657600080fd5b505afa15801561424a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061426e9190614da4565b61428a5760405162461bcd60e51b815260040161074e90615946565b602454600160a01b900460ff1615610e80576142a5816145c5565b610e805760405162461bcd60e51b815260040161074e90615766565b6001600160a01b0381166142e75760405162461bcd60e51b815260040161074e90615a5c565b6142f0816145c5565b1561430d5760405162461bcd60e51b815260040161074e90615a8f565b6000828152600e602090815260408083206001600160a01b038516845282528083208054600160ff199182168117909255600d9093529281902080549092168317909155600c8054909201909155513390839030907f5ab6a0d7af8e86f78c34acea4f8aff1be027227ce1bc29e03f57f39b788f4b049061438f908690615148565b60405180910390a45050565b600080846001600160a01b031663dd62ed3e30866040518363ffffffff1660e01b81526004016143cc9291906151c9565b60206040518083038186803b1580156143e457600080fd5b505afa1580156143f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061441c9190614e60565b905082811415614430576001915050610fa6565b80156144b95760405163095ea7b360e01b81526001600160a01b0386169063095ea7b390614465908790600090600401615221565b602060405180830381600087803b15801561447f57600080fd5b505af1158015614493573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144b79190614da4565b505b60405163095ea7b360e01b81526001600160a01b0386169063095ea7b3906144e79087908790600401615221565b602060405180830381600087803b15801561450157600080fd5b505af1158015614515573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145399190614da4565b95945050505050565b6000808383116145585750508082036000614560565b505081810360015b9250929050565b306000908152600160205260409020546145819082614191565b306000908152600160205260408120919091555461459f9082614191565b6000908155604051309190600080516020615ddf83398151915290614093908590615bfa565b6001600160a01b03166000908152600d602052604090205460ff1690565b828054828255906000526020600020908101928215614638579160200282015b8281111561463857825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190614603565b5061464492915061468f565b5090565b828054828255906000526020600020908101928215614683579160200282015b82811115614683578251825591602001919060010190614668565b506146449291506146ae565b5b808211156146445780546001600160a01b0319168155600101614690565b5b8082111561464457600081556001016146af565b600082601f8301126146d3578081fd5b81356146e66146e182615d29565b615d03565b81815291506020808301908481018184028601820187101561470757600080fd5b60005b8481101561472f57813561471d81615d9b565b8452928201929082019060010161470a565b505050505092915050565b60008083601f84011261474b578182fd5b5081356001600160401b03811115614761578182fd5b602083019150836020808302850101111561456057600080fd5b600082601f83011261478b578081fd5b81356147996146e182615d29565b8181529150602080830190848101818402860182018710156147ba57600080fd5b60005b8481101561472f578135845292820192908201906001016147bd565b803560028110610c5b57600080fd5b600082601f8301126147f8578081fd5b81356148066146e182615d48565b915080825283602082850101111561481d57600080fd5b8060208401602084013760009082016020015292915050565b600060c08284031215614847578081fd5b61485160c0615d03565b9050813561485e81615db0565b8152602082013561486e81615db0565b6020820152604082013561488181615db0565b6040820152606082013561489481615db0565b606082015260808201356148a781615db0565b608082015260a08201356148ba81615db0565b60a082015292915050565b6000602082840312156148d6578081fd5b8135610fa681615d9b565b6000602082840312156148f2578081fd5b8151610fa681615d9b565b6000806040838503121561490f578081fd5b823561491a81615d9b565b9150602083013561492a81615d9b565b809150509250929050565b600080600060608486031215614949578081fd5b833561495481615d9b565b9250602084013561496481615d9b565b929592945050506040919091013590565b6000806000806080858703121561498a578182fd5b843561499581615d9b565b935060208501356149a581615d9b565b93969395505050506040820135916060013590565b60008060006101008085870312156149d0578182fd5b84356149db81615d9b565b935060208501356001600160401b03808211156149f6578384fd5b818701915061016080838a031215614a0c578485fd5b614a1581615d03565b9050823582811115614a25578586fd5b614a318a8286016147e8565b825250602083013582811115614a45578586fd5b614a518a8286016147e8565b602083015250604083013582811115614a68578586fd5b614a748a8286016146c3565b604083015250606083013582811115614a8b578586fd5b614a978a82860161477b565b606083015250608083013582811115614aae578586fd5b614aba8a82860161477b565b60808301525060a083013560a082015260c083013560c082015260e083013560e08201528383013584820152610120935083830135848201526101409350614b04898585016147d9565b8482015280955050505050614b1c8560408601614836565b90509250925092565b60008060408385031215614b37578182fd5b8235614b4281615d9b565b946020939093013593505050565b60008060008060608587031215614b65578182fd5b8435614b7081615d9b565b93506020850135925060408501356001600160401b0380821115614b92578384fd5b818701915087601f830112614ba5578384fd5b813581811115614bb3578485fd5b886020828501011115614bc4578485fd5b95989497505060200194505050565b60006020808385031215614be5578182fd5b82516001600160401b03811115614bfa578283fd5b8301601f81018513614c0a578283fd5b8051614c186146e182615d29565b8181528381019083850185840285018601891015614c34578687fd5b8694505b83851015614c5f578051614c4b81615d9b565b835260019490940193918501918501614c38565b50979650505050505050565b60008060408385031215614c7d578182fd5b82356001600160401b0380821115614c93578384fd5b614c9f868387016146c3565b93506020850135915080821115614cb4578283fd5b50614cc18582860161477b565b9150509250929050565b60006020808385031215614cdd578182fd5b82516001600160401b03811115614cf2578283fd5b8301601f81018513614d02578283fd5b8051614d106146e182615d29565b8181528381019083850185840285018601891015614d2c578687fd5b8694505b83851015614c5f578051835260019490940193918501918501614d30565b60008060408385031215614d60578182fd5b82356001600160401b0380821115614d76578384fd5b614d828683870161477b565b93506020850135915080821115614d97578283fd5b50614cc1858286016146c3565b600060208284031215614db5578081fd5b8151610fa681615db0565b600060208284031215614dd1578081fd5b81516001600160401b03811115614de6578182fd5b8201601f81018413614df6578182fd5b8051614e046146e182615d48565b818152856020838501011115614e18578384fd5b614539826020830160208601615d6b565b600060208284031215614e3a578081fd5b813560068110610fa6578182fd5b600060208284031215614e59578081fd5b5035919050565b600060208284031215614e71578081fd5b5051919050565b600080600060408486031215614e8c578081fd5b8335925060208401356001600160401b03811115614ea8578182fd5b614eb48682870161473a565b9497909650939450505050565b60008060008060608587031215614ed6578182fd5b8435935060208501356001600160401b03811115614ef2578283fd5b614efe8782880161473a565b9094509250506040850135614f1281615d9b565b939692955090935050565b60008060008084860360a0811215614f33578283fd5b8535945060208601359350604086013560038110614f4f578384fd5b92506040605f1982011215614f62578182fd5b50614f6d6040615d03565b606086013581526080909501356020860152509194909350909190565b600080600060608486031215614f9e578081fd5b8351925060208401519150604084015190509250925092565b6000815180845260208085019450808401835b83811015614fef5781516001600160a01b031687529582019590820190600101614fca565b509495945050505050565b6000815480845260208085019450838352808320835b83811015614fef5781546001600160a01b031687529582019560019182019101615010565b81835260006001600160fb1b0383111561504d578081fd5b6020830280836020870137939093016020019283525090919050565b6000815180845260208085019450808401835b83811015614fef5781518752958201959082019060010161507c565b6000815480845260208085019450838352808320835b83811015614fef578154875295820195600191820191016150ae565b15159052565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008151808452615112816020860160208601615d6b565b601f01601f19169290920160200192915050565b642aa82822a960d91b815260050190565b64232627a7a960d91b815260050190565b6001600160a01b0391909116815260200190565b6001600160a01b0385811682528416602082015260806040820181905260009061518890830185614ffa565b828103606084015261519a8185615098565b979650505050505050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b0385811682528416602082015260806040820181905260009061520f90830185614fb7565b828103606084015261519a8185615069565b6001600160a01b03929092168252602082015260400190565b600060018060a01b0386168252846020830152606060408301526152626060830184866150d0565b9695505050505050565b6001600160a01b039390931683526020830191909152604082015260600190565b600060208252610fa66020830184614fb7565b6000604082526152b36040830185614fb7565b82810360208401526145398185615069565b6000608082526152d86080830187614fb7565b82810360208401526152ea8187615069565b905082810360408401526152fe8186615069565b915050821515606083015295945050505050565b6000604082526153256040830185614ffa565b82810360208401526145398185615098565b600060208252610fa66020830184615069565b901515815260200190565b921515835290151560208301526001600160a01b0316604082015260600190565b9515158652931515602086015291151560408501521515606084015215156080830152151560a082015260c00190565b9315158452911515602084015215156040830152606082015260800190565b6000602082526153d96020830184866150d0565b949350505050565b600060208252610fa660208301846150fa565b6001600160a01b0398891681529615156020880152941515604087015260608601939093526080850191909152151560a0840152831660c083015290911660e08201526101000190565b6001600160a01b03989098168852951515602088015293151560408701526060860192909252608085015260a084015260c083015260e08201526101000190565b6001600160a01b0396871681529486166020860152928516604085015293166060830152608082019290925260a081019190915260c00190565b6001600160a01b03958616815293851660208501529190931660408301526060820192909252608081019190915260a00190565b6001600160a01b03978816815295871660208701529390951660408501526060840191909152608083015260a082019290925260c081019190915260e00190565b6001600160a01b0385811682528416602082015260806040820181905260009061555a90830185614fb7565b905082606083015295945050505050565b6001600160a01b0387811682528616602082015260c06040820181905260009061559790830187614fb7565b606083019590955250608081019290925260a0909101529392505050565b6001600160a01b038681168252851660208201526040810184905260806060820181905260009061519a9083018486615035565b6001600160a01b038781168252861660208201526040810185905260a06060820181905260009061561d9083018587615035565b9050826080830152979650505050505050565b602081016002831061563e57fe5b91905290565b602080825260129082015271436f6c6c656374696f6e206661696c65642160701b604082015260600190565b60208082526009908201526837b7363ca0b236b4b760b91b604082015260600190565b60208082526012908201527122a9292fa727aa2fa1a7a72a2927a62622a960711b604082015260600190565b6020808252600d908201526c4552525f4e4f5f52494748545360981b604082015260600190565b6020808252600c908201526b696e697469616c697a65642160a01b604082015260600190565b60208082526016908201527526a7a22aa6229024a9902727aa102922a3a4a9aa22a960511b604082015260600190565b60208082526010908201526f20b2323932b9b99034b99027bbb732b960811b604082015260600190565b6020808252601b908201527a11549497d393d517d5d212551157d513d2d15397d25397d413d3d3602a1b604082015260600190565b60208082526010908201526f4552525f5a45524f5f4144445245535360801b604082015260600190565b602080825260199082015278544f4b454e5f4d5553545f494e5f57484954455f4c4953545360381b604082015260600190565b6020808252600f908201526e11549497d393d517d0d49150551151608a1b604082015260600190565b6020808252600e908201526d11549497d254d7d0d4915055115160921b604082015260600190565b60208082526006908201526506f776e6572560d41b604082015260600190565b602080825260079082015266085c185d5cd95960ca1b604082015260600190565b60208082526010908201526f11549497d1125597d25395115493905360821b604082015260600190565b6020808252600b908201526a4552525f5245454e54525960a81b604082015260600190565b60208082526023908201527f54686520636f6c6c656374696f6e206379636c65206973206e6f7420726561636040820152621a195960ea1b606082015260800190565b60208082526010908201526f4552525f4d554c5f4f564552464c4f5760801b604082015260600190565b6020808252601e908201527f4552525f4e4f545f57484954455f544f4b454e5f494e5f464143544f52590000604082015260600190565b6020808252600c908201526b4552525f4449565f5a45524f60a01b604082015260600190565b60208082526015908201527411549497d0d05417d31253525517d4915050d21151605a1b604082015260600190565b60208082526016908201527522a9292fa821aa27a5a2a72fa120a22fa1a0a62622a960511b604082015260600190565b60208082526017908201527608aa4a4bea69ea4a8bea89e968a9cbe9a92a69a82a8869604b1b604082015260600190565b6020808252600f908201526e4552525f45524332305f46414c534560881b604082015260600190565b6020808252601990820152784552525f494e56414c49445f544f4b454e5f4144445245535360381b604082015260600190565b6020808252601890820152774552525f4841535f4245454e5f41444445445f574849544560401b604082015260600190565b6020808252601190820152704552525f5355425f554e444552464c4f5760781b604082015260600190565b60208082526010908201526f4552525f4144445f4f564552464c4f5760801b604082015260600190565b60208082526019908201527822a9292fa9a427aaa6222fa9a2aa2faba424aa22aa27a5a2a760391b604082015260600190565b60208082526011908201527022a9292fa6aaa9aa2fa7a822a72fa2aa2360791b604082015260600190565b600060e082019050835460ff80821615158452615b9960208501828460081c166150ca565b615bab60408501828460101c166150ca565b615bbd60608501828460181c166150ca565b615bcf60808501828460201c166150ca565b615be160a08501828460281c166150ca565b505060068310615bed57fe5b8260c08301529392505050565b90815260200190565b9182526001600160a01b0316602082015260400190565b918252602082015260400190565b9283526020830191909152604082015260600190565b958652602086019490945260408501929092526060840152608083015260a082015260c00190565b988952602089019790975260408801959095526060870193909352608086019190915260a085015260c084015260e083015215156101008201526101200190565b9a8b5260208b019990995260408a01979097526060890195909552608088019390935260a087019190915260c086015260e08501526101008401526101208301526101408201526101600190565b60ff91909116815260200190565b6040518181016001600160401b0381118282101715615d2157600080fd5b604052919050565b60006001600160401b03821115615d3e578081fd5b5060209081020190565b60006001600160401b03821115615d5d578081fd5b50601f01601f191660200190565b60005b83811015615d86578181015183820152602001615d6e565b83811115615d95576000848401525b50505050565b6001600160a01b0381168114610e8057600080fd5b8015158114610e8057600080fdfe345c44e0d6869c4baccff8ecb8279bca00e6436947fce2da5beffcc9e5cabefbddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925a264697066735822122078792eb2c6fbe0bddd6ef7f3862978ad06ec22e1f7408b01eac93ef463a1761564736f6c634300060c0033"
  ],
  "numDeployments": 1,
  "solcInputHash": "c6e8b1faa34d5d48d0982392945c24ca",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytecode\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"middleware\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"LOG_MIDDLEWARE\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"LOG_USER_VAULT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"LogNewCrp\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bytecodes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isCrp\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factoryAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"poolTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"poolTokenName\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"constituentTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenBalances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenWeights\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"managerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"issueFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perfermanceFee\",\"type\":\"uint256\"},{\"internalType\":\"enum IConfigurableRightsPool.Etypes\",\"name\":\"etype\",\"type\":\"uint8\"}],\"internalType\":\"struct IConfigurableRightsPool.PoolParams\",\"name\":\"poolParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"canPauseSwapping\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canChangeSwapFee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canChangeWeights\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canAddRemoveTokens\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canWhitelistLPs\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canTokenWhiteLists\",\"type\":\"bool\"}],\"internalType\":\"struct RightsManager.Rights\",\"name\":\"rights\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"managerFee\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"issueFee\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"redeemFee\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"perfermanceFee\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.KolPoolParams\",\"name\":\"kolPoolParams\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ownerPercentage\",\"type\":\"uint256[]\"}],\"name\":\"newCrp\",\"outputs\":[{\"internalType\":\"contract IConfigurableRightsPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytecodes\",\"type\":\"bytes\"}],\"name\":\"setByteCodes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newVault\",\"type\":\"address\"}],\"name\":\"setUserVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Desyn Labs\",\"details\":\"Rights are held in a corresponding struct in ConfigurableRightsPool      Index values are as follows:      0: canPauseSwapping - can setPublicSwap back to false after turning it on                            by default, it is off on initialization and can only be turned on      1: canChangeSwapFee - can setSwapFee after initialization (by default, it is fixed at create time)      2: canChangeWeights - can bind new token weights (allowed by default in base pool)      3: canAddRemoveTokens - can bind/unbind tokens (allowed by default in base pool)      4: canWhitelistLPs - if set, only whitelisted addresses can join pools                           (enables private pools with more than one LP)      5: canChangeCap - can change the BSP cap (max # of pool tokens)\",\"kind\":\"dev\",\"methods\":{\"isCrp(address)\":{\"params\":{\"addr\":\"- address to check\"},\"returns\":{\"_0\":\"boolean indicating whether it is a CRP\"}},\"newCrp(address,(string,string,address[],uint256[],uint256[],uint256,uint256,uint256,uint256,uint256,uint8),(bool,bool,bool,bool,bool,bool),(((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256)),((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256)),((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256)),((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256))),address[],uint256[])\":{\"details\":\"emits a LogNewCRP event\",\"params\":{\"factoryAddress\":\"- the BFactory instance used to create the underlying pool\",\"poolParams\":\"- struct containing the names, tokens, weights, balances, and swap fee\",\"rights\":\"- struct of permissions, configuring this CRP instance (see above for definitions)\"}}},\"title\":\"Configurable Rights Pool Factory - create parameterized smart pools\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isCrp(address)\":{\"notice\":\"Check to see if a given address is a CRP\"},\"newCrp(address,(string,string,address[],uint256[],uint256[],uint256,uint256,uint256,uint256,uint256,uint8),(bool,bool,bool,bool,bool,bool),(((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256)),((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256)),((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256)),((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256))),address[],uint256[])\":{\"notice\":\"Create a new CRP\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/deploy/CRPFactory.sol\":\"CRPFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"contracts/deploy/CRPFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\nimport {RightsManager} from \\\"../libraries/RightsManager.sol\\\";\\nimport {SmartPoolManager} from \\\"../libraries/SmartPoolManager.sol\\\";\\n// Needed to handle structures externally\\npragma experimental ABIEncoderV2;\\n\\n// Imports\\nabstract contract IConfigurableRightsPool {\\n    enum Etypes {\\n        OPENED,\\n        CLOSED\\n    }\\n    enum Period {\\n        HALF,\\n        ONE,\\n        TWO\\n    }\\n\\n    struct PoolParams {\\n        string poolTokenSymbol;\\n        string poolTokenName;\\n        address[] constituentTokens;\\n        uint[] tokenBalances;\\n        uint[] tokenWeights;\\n        uint swapFee;\\n        uint managerFee;\\n        uint redeemFee;\\n        uint issueFee;\\n        uint perfermanceFee;\\n        Etypes etype;\\n    }\\n\\n    struct CrpParams {\\n        uint initialSupply;\\n        uint collectPeriod;\\n        Period period;\\n    }\\n\\n    function setController(address owner) external virtual;\\n\\n    function init(\\n        address factoryAddress,\\n        IConfigurableRightsPool.PoolParams calldata poolParams,\\n        RightsManager.Rights calldata rights\\n    ) external virtual;\\n\\n    function initHandle(address[] memory owners, uint[] memory ownerPercentage) external virtual;\\n}\\n\\ninterface IUserVault {\\n    function setPoolParams(address pool, SmartPoolManager.KolPoolParams memory kolPoolParams) external;\\n}\\n\\n// Contracts\\n\\n/**\\n * @author Desyn Labs\\n * @title Configurable Rights Pool Factory - create parameterized smart pools\\n * @dev Rights are held in a corresponding struct in ConfigurableRightsPool\\n *      Index values are as follows:\\n *      0: canPauseSwapping - can setPublicSwap back to false after turning it on\\n *                            by default, it is off on initialization and can only be turned on\\n *      1: canChangeSwapFee - can setSwapFee after initialization (by default, it is fixed at create time)\\n *      2: canChangeWeights - can bind new token weights (allowed by default in base pool)\\n *      3: canAddRemoveTokens - can bind/unbind tokens (allowed by default in base pool)\\n *      4: canWhitelistLPs - if set, only whitelisted addresses can join pools\\n *                           (enables private pools with more than one LP)\\n *      5: canChangeCap - can change the BSP cap (max # of pool tokens)\\n */\\ncontract CRPFactory {\\n    // State variables\\n\\n    // Keep a list of all Configurable Rights Pools\\n    mapping(address => bool) private _isCrp;\\n\\n    // Event declarations\\n\\n    // Log the address of each new smart pool, and its creator\\n    event LogNewCrp(address indexed caller, address indexed pool);\\n    event LOG_USER_VAULT(address indexed vault, address indexed caller);\\n    event LOG_MIDDLEWARE(address indexed middleware, address indexed caller);\\n    uint private counters;\\n\\n    bytes public bytecodes;\\n    address private _blabs;\\n    address public userVault;\\n\\n    constructor(bytes memory _bytecode) public {\\n        bytecodes = _bytecode;\\n        _blabs = msg.sender;\\n    }\\n\\n    function createPool(IConfigurableRightsPool.PoolParams calldata poolParams) internal returns (address base) {\\n        bytes memory bytecode = bytecodes;\\n        bytes memory deploymentData = abi.encodePacked(bytecode, abi.encode(poolParams.poolTokenSymbol, poolParams.poolTokenName));\\n        bytes32 salt = keccak256(abi.encodePacked(counters++));\\n        assembly {\\n            base := create2(0, add(deploymentData, 32), mload(deploymentData), salt)\\n            if iszero(extcodesize(base)) {\\n                revert(0, 0)\\n            }\\n        }\\n    }\\n\\n    // Function declarations\\n    /**\\n     * @notice Create a new CRP\\n     * @dev emits a LogNewCRP event\\n     * @param factoryAddress - the BFactory instance used to create the underlying pool\\n     * @param poolParams - struct containing the names, tokens, weights, balances, and swap fee\\n     * @param rights - struct of permissions, configuring this CRP instance (see above for definitions)\\n     */\\n    function newCrp(\\n        address factoryAddress,\\n        IConfigurableRightsPool.PoolParams calldata poolParams,\\n        RightsManager.Rights calldata rights,\\n        SmartPoolManager.KolPoolParams calldata kolPoolParams,\\n        address[] memory owners,\\n        uint[] memory ownerPercentage\\n    ) external returns (IConfigurableRightsPool) {\\n        // require(poolParams.constituentTokens.length >= DesynConstants.MIN_ASSET_LIMIT, \\\"ERR_TOO_FEW_TOKENS\\\");\\n\\n        // Arrays must be parallel\\n        // require(poolParams.tokenBalances.length == poolParams.constituentTokens.length, \\\"ERR_START_BALANCES_MISMATCH\\\");\\n        // require(poolParams.tokenWeights.length == poolParams.constituentTokens.length, \\\"ERR_START_WEIGHTS_MISMATCH\\\");\\n\\n        address crp = createPool(poolParams);\\n        emit LogNewCrp(msg.sender, crp);\\n\\n        _isCrp[crp] = true;\\n        IConfigurableRightsPool(crp).init(factoryAddress, poolParams, rights);\\n        IUserVault(userVault).setPoolParams(crp, kolPoolParams);\\n        // The caller is the controller of the CRP\\n        // The CRP will be the controller of the underlying Core BPool\\n        IConfigurableRightsPool(crp).initHandle(owners, ownerPercentage);\\n        IConfigurableRightsPool(crp).setController(msg.sender);\\n\\n        return IConfigurableRightsPool(crp);\\n    }\\n\\n    modifier onlyBlabs() {\\n        require(msg.sender == _blabs, \\\"ERR_NOT_BLABS\\\");\\n        _;\\n    }\\n\\n    function setUserVault(address newVault) external onlyBlabs {\\n        userVault = newVault;\\n        emit LOG_USER_VAULT(newVault, msg.sender);\\n    }\\n\\n    function setByteCodes(bytes memory _bytecodes) external onlyBlabs {\\n        bytecodes = _bytecodes;\\n    }\\n\\n    /**\\n     * @notice Check to see if a given address is a CRP\\n     * @param addr - address to check\\n     * @return boolean indicating whether it is a CRP\\n     */\\n    function isCrp(address addr) external view returns (bool) {\\n        return _isCrp[addr];\\n    }\\n}\\n\",\"keccak256\":\"0x3f3b6389ee01465eca320433af5b8e0ef74fdce1b88aba9ffb54327aff41ab70\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IBFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\nimport \\\"../libraries/SmartPoolManager.sol\\\";\\n\\ninterface IBPool {\\n    function rebind(\\n        address token,\\n        uint balance,\\n        uint denorm\\n    ) external;\\n\\n    function rebindSmart(\\n        address tokenA,\\n        address tokenB,\\n        uint deltaWeight,\\n        uint deltaBalance,\\n        bool isSoldout,\\n        uint minAmountOut\\n    ) external;\\n\\n    function execute(\\n        address _target,\\n        uint _value,\\n        bytes calldata _data\\n    ) external returns (bytes memory _returnValue);\\n\\n    function bind(\\n        address token,\\n        uint balance,\\n        uint denorm\\n    ) external;\\n\\n    function unbind(address token) external;\\n\\n    function unbindPure(address token) external;\\n\\n    function isBound(address token) external view returns (bool);\\n\\n    function getBalance(address token) external view returns (uint);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function getSwapFee() external view returns (uint);\\n\\n    function isPublicSwap() external view returns (bool);\\n\\n    function getDenormalizedWeight(address token) external view returns (uint);\\n\\n    function getTotalDenormalizedWeight() external view returns (uint);\\n\\n    function EXIT_FEE() external view returns (uint);\\n\\n    function getCurrentTokens() external view returns (address[] memory tokens);\\n\\n    function setController(address owner) external;\\n}\\n\\ninterface IBFactory {\\n    function newLiquidityPool() external returns (IBPool);\\n\\n    function setBLabs(address b) external;\\n\\n    function collect(IBPool pool) external;\\n\\n    function isBPool(address b) external view returns (bool);\\n\\n    function getBLabs() external view returns (address);\\n\\n    function getSwapRouter() external view returns (address);\\n\\n    function getVault() external view returns (address);\\n\\n    function getUserVault() external view returns (address);\\n\\n    function getVaultAddress() external view returns (address);\\n\\n    function getOracleAddress() external view returns (address);\\n\\n    function getManagerOwner() external view returns (address);\\n\\n    function isTokenWhitelistedForVerify(uint sort, address token) external view returns (bool);\\n\\n    function isTokenWhitelistedForVerify(address token) external view returns (bool);\\n\\n    function getModuleStatus(address etf, address module) external view returns (bool);\\n\\n    function isPaused() external view returns (bool);\\n}\\n\\ninterface IVault {\\n    function depositManagerToken(address[] calldata poolTokens, uint[] calldata tokensAmount) external;\\n\\n    function depositIssueRedeemPToken(\\n        address[] calldata poolTokens,\\n        uint[] calldata tokensAmount,\\n        uint[] calldata tokensAmountP,\\n        bool isPerfermance\\n    ) external;\\n\\n    function managerClaim(address pool) external;\\n\\n    function getManagerClaimBool(address pool) external view returns (bool);\\n}\\n\\ninterface IUserVault {\\n    function recordTokenInfo(\\n        address kol,\\n        address user,\\n        address[] calldata poolTokens,\\n        uint[] calldata tokensAmount\\n    ) external;\\n}\\n\\ninterface Oracles {\\n    function getPrice(address tokenAddress) external returns (uint price);\\n\\n    function getAllPrice(address[] calldata poolTokens, uint[] calldata tokensAmount) external returns (uint);\\n}\",\"keccak256\":\"0xc2cc32bdf691ceddab7a647a98bd481adcf9ae8393d8663a916bf032ef0dbbc6\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IConfigurableRightsPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Interface declarations\\n\\n// Introduce to avoid circularity (otherwise, the CRP and SmartPoolManager include each other)\\n// Removing circularity allows flattener tools to work, which enables Etherscan verification\\ninterface IConfigurableRightsPool {\\n    function mintPoolShareFromLib(uint amount) external;\\n\\n    function pushPoolShareFromLib(address to, uint amount) external;\\n\\n    function pullPoolShareFromLib(address from, uint amount) external;\\n\\n    function burnPoolShareFromLib(uint amount) external;\\n\\n    function balanceOf(address account) external view returns (uint);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function getController() external view returns (address);\\n\\n    function vaultAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0x1326889b57f63cc031e7c9e383b0fd3b172a9b86eb623cf0faba32c0768c4ec4\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Interface declarations\\n\\n/* solhint-disable func-order */\\n\\ninterface IERC20 {\\n    // Emitted when the allowance of a spender for an owner is set by a call to approve.\\n    // Value is the new allowance\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n\\n    // Emitted when value tokens are moved from one account (from) to another (to).\\n    // Note that value may be zero\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    // Returns the amount of tokens in existence\\n    function totalSupply() external view returns (uint);\\n\\n    // Returns the amount of tokens owned by account\\n    function balanceOf(address account) external view returns (uint);\\n\\n    // Returns the decimals of tokens\\n    function decimals() external view returns (uint8);\\n\\n    function symbol() external view returns (string memory);\\n\\n    // Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner\\n    // through transferFrom. This is zero by default\\n    // This value changes when approve or transferFrom are called\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    // Sets amount as the allowance of spender over the caller\\u2019s tokens\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits an Approval event.\\n    function approve(address spender, uint amount) external returns (bool);\\n\\n    // Moves amount tokens from the caller\\u2019s account to recipient\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits a Transfer event.\\n    function transfer(address recipient, uint amount) external returns (bool);\\n\\n    // Moves amount tokens from sender to recipient using the allowance mechanism\\n    // Amount is then deducted from the caller\\u2019s allowance\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits a Transfer event\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xfe22b6d6029b400b9cce7f9b39c546f99cd6922b2fd926e480e2b4d476ab26f8\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/DesynConstants.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n/**\\n * @author Desyn Labs\\n * @title Put all the constants in one place\\n */\\n\\nlibrary DesynConstants {\\n    // State variables (must be constant in a library)\\n\\n    // B \\\"ONE\\\" - all math is in the \\\"realm\\\" of 10 ** 18;\\n    // where numeric 1 = 10 ** 18\\n    uint public constant BONE = 10**18;\\n    uint public constant MIN_WEIGHT = BONE;\\n    uint public constant MAX_WEIGHT = BONE * 50;\\n    uint public constant MAX_TOTAL_WEIGHT = BONE * 50;\\n    uint public constant MIN_BALANCE = 0;\\n    uint public constant MAX_BALANCE = BONE * 10**12;\\n    uint public constant MIN_POOL_SUPPLY = BONE * 100;\\n    uint public constant MAX_POOL_SUPPLY = BONE * 10**9;\\n    uint public constant MIN_FEE = BONE / 10**6;\\n    uint public constant MAX_FEE = BONE / 10;\\n    //Fee Set\\n    uint public constant MANAGER_MIN_FEE = 0;\\n    uint public constant MANAGER_MAX_FEE = BONE / 10;\\n    uint public constant ISSUE_MIN_FEE = BONE / 1000;\\n    uint public constant ISSUE_MAX_FEE = BONE / 10;\\n    uint public constant REDEEM_MIN_FEE = 0;\\n    uint public constant REDEEM_MAX_FEE = BONE / 10;\\n    uint public constant PERFERMANCE_MIN_FEE = 0;\\n    uint public constant PERFERMANCE_MAX_FEE = BONE / 2;\\n    // EXIT_FEE must always be zero, or ConfigurableRightsPool._pushUnderlying will fail\\n    uint public constant EXIT_FEE = 0;\\n    uint public constant MAX_IN_RATIO = BONE / 2;\\n    uint public constant MAX_OUT_RATIO = (BONE / 3) + 1 wei;\\n    // Must match BConst.MIN_BOUND_TOKENS and BConst.MAX_BOUND_TOKENS\\n    uint public constant MIN_ASSET_LIMIT = 1;\\n    uint public constant MAX_ASSET_LIMIT = 16;\\n    uint public constant MAX_UINT = uint(-1);\\n    uint public constant MAX_COLLECT_PERIOD = 60 days;\\n}\\n\",\"keccak256\":\"0xbc396253a5541cd3cc080ca207dfdd2d2bdf963de26e005db36bd752524c1d66\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/DesynSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Imports\\n\\nimport \\\"./DesynConstants.sol\\\";\\n\\n/**\\n * @author Desyn Labs\\n * @title SafeMath - wrap Solidity operators to prevent underflow/overflow\\n * @dev badd and bsub are basically identical to OpenZeppelin SafeMath; mul/div have extra checks\\n */\\nlibrary DesynSafeMath {\\n    /**\\n     * @notice Safe addition\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev if we are adding b to a, the resulting sum must be greater than a\\n     * @return - sum of operands; throws if overflow\\n     */\\n    function badd(uint a, uint b) internal pure returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, \\\"ERR_ADD_OVERFLOW\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned subtraction\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Do a signed subtraction, and check that it produces a positive value\\n     *      (i.e., a - b is valid if b <= a)\\n     * @return - a - b; throws if underflow\\n     */\\n    function bsub(uint a, uint b) internal pure returns (uint) {\\n        (uint c, bool negativeResult) = bsubSign(a, b);\\n        require(!negativeResult, \\\"ERR_SUB_UNDERFLOW\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Safe signed subtraction\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Do a signed subtraction\\n     * @return - difference between a and b, and a flag indicating a negative result\\n     *           (i.e., a - b if a is greater than or equal to b; otherwise b - a)\\n     */\\n    function bsubSign(uint a, uint b) internal pure returns (uint, bool) {\\n        if (b <= a) {\\n            return (a - b, false);\\n        } else {\\n            return (b - a, true);\\n        }\\n    }\\n\\n    /**\\n     * @notice Safe multiplication\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Multiply safely (and efficiently), rounding down\\n     * @return - product of operands; throws if overflow or rounding error\\n     */\\n    function bmul(uint a, uint b) internal pure returns (uint) {\\n        // Gas optimization (see github.com/OpenZeppelin/openzeppelin-contracts/pull/522)\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // Standard overflow check: a/a*b=b\\n        uint c0 = a * b;\\n        require(c0 / a == b, \\\"ERR_MUL_OVERFLOW\\\");\\n\\n        // Round to 0 if x*y < BONE/2?\\n        uint c1 = c0 + (DesynConstants.BONE / 2);\\n        require(c1 >= c0, \\\"ERR_MUL_OVERFLOW\\\");\\n        uint c2 = c1 / DesynConstants.BONE;\\n        return c2;\\n    }\\n\\n    /**\\n     * @notice Safe division\\n     * @param dividend - first operand\\n     * @param divisor - second operand\\n     * @dev Divide safely (and efficiently), rounding down\\n     * @return - quotient; throws if overflow or rounding error\\n     */\\n    function bdiv(uint dividend, uint divisor) internal pure returns (uint) {\\n        require(divisor != 0, \\\"ERR_DIV_ZERO\\\");\\n\\n        // Gas optimization\\n        if (dividend == 0) {\\n            return 0;\\n        }\\n\\n        uint c0 = dividend * DesynConstants.BONE;\\n        require(c0 / dividend == DesynConstants.BONE, \\\"ERR_DIV_INTERNAL\\\"); // bmul overflow\\n\\n        uint c1 = c0 + (divisor / 2);\\n        require(c1 >= c0, \\\"ERR_DIV_INTERNAL\\\"); //  badd require\\n\\n        uint c2 = c1 / divisor;\\n        return c2;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer modulo\\n     * @dev Returns the remainder of dividing two unsigned integers.\\n     *      Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * @param dividend - first operand\\n     * @param divisor - second operand -- cannot be zero\\n     * @return - quotient; throws if overflow or rounding error\\n     */\\n    function bmod(uint dividend, uint divisor) internal pure returns (uint) {\\n        require(divisor != 0, \\\"ERR_MODULO_BY_ZERO\\\");\\n\\n        return dividend % divisor;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer max\\n     * @dev Returns the greater of the two input values\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the maximum of a and b\\n     */\\n    function bmax(uint a, uint b) internal pure returns (uint) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer min\\n     * @dev returns b, if b < a; otherwise returns a\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the lesser of the two input values\\n     */\\n    function bmin(uint a, uint b) internal pure returns (uint) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer average\\n     * @dev Guard against (a+b) overflow by dividing each operand separately\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the average of the two values\\n     */\\n    function baverage(uint a, uint b) internal pure returns (uint) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\\n    }\\n\\n    /**\\n     * @notice Babylonian square root implementation\\n     * @dev (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n     * @param y - operand\\n     * @return z - the square root result\\n     */\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9baf30b98a5f3a8c13ac9c4d5d4b176eabfd936aba8f5172c95b7c568fba68f3\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/RightsManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Needed to handle structures externally\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @author Desyn Labs\\n * @title Manage Configurable Rights for the smart pool\\n *      canPauseSwapping - can setPublicSwap back to false after turning it on\\n *                         by default, it is off on initialization and can only be turned on\\n *      canChangeSwapFee - can setSwapFee after initialization (by default, it is fixed at create time)\\n *      canChangeWeights - can bind new token weights (allowed by default in base pool)\\n *      canAddRemoveTokens - can bind/unbind tokens (allowed by default in base pool)\\n *      canWhitelistLPs - can limit liquidity providers to a given set of addresses\\n *      canChangeCap - can change the BSP cap (max # of pool tokens)\\n *      canChangeFloor - can change the BSP floor for Closure ETF (min # of pool tokens)\\n */\\nlibrary RightsManager {\\n    // Type declarations\\n\\n    enum Permissions {\\n        PAUSE_SWAPPING,\\n        CHANGE_SWAP_FEE,\\n        CHANGE_WEIGHTS,\\n        ADD_REMOVE_TOKENS,\\n        WHITELIST_LPS,\\n        TOKEN_WHITELISTS\\n        // CHANGE_CAP,\\n        // CHANGE_FLOOR\\n    }\\n\\n    struct Rights {\\n        bool canPauseSwapping;\\n        bool canChangeSwapFee;\\n        bool canChangeWeights;\\n        bool canAddRemoveTokens;\\n        bool canWhitelistLPs;\\n        bool canTokenWhiteLists;\\n        // bool canChangeCap;\\n        // bool canChangeFloor;\\n    }\\n\\n    // State variables (can only be constants in a library)\\n    bool public constant DEFAULT_CAN_PAUSE_SWAPPING = false;\\n    bool public constant DEFAULT_CAN_CHANGE_SWAP_FEE = true;\\n    bool public constant DEFAULT_CAN_CHANGE_WEIGHTS = true;\\n    bool public constant DEFAULT_CAN_ADD_REMOVE_TOKENS = false;\\n    bool public constant DEFAULT_CAN_WHITELIST_LPS = false;\\n    bool public constant DEFAULT_CAN_TOKEN_WHITELISTS = false;\\n\\n    // bool public constant DEFAULT_CAN_CHANGE_CAP = false;\\n    // bool public constant DEFAULT_CAN_CHANGE_FLOOR = false;\\n\\n    // Functions\\n\\n    /**\\n     * @notice create a struct from an array (or return defaults)\\n     * @dev If you pass an empty array, it will construct it using the defaults\\n     * @param a - array input\\n     * @return Rights struct\\n     */\\n    function constructRights(bool[] calldata a) external pure returns (Rights memory) {\\n        if (a.length < 6) {\\n            return\\n                Rights(\\n                    DEFAULT_CAN_PAUSE_SWAPPING,\\n                    DEFAULT_CAN_CHANGE_SWAP_FEE,\\n                    DEFAULT_CAN_CHANGE_WEIGHTS,\\n                    DEFAULT_CAN_ADD_REMOVE_TOKENS,\\n                    DEFAULT_CAN_WHITELIST_LPS,\\n                    DEFAULT_CAN_TOKEN_WHITELISTS\\n                    // DEFAULT_CAN_CHANGE_CAP,\\n                    // DEFAULT_CAN_CHANGE_FLOOR\\n                );\\n        } else {\\n            // return Rights(a[0], a[1], a[2], a[3], a[4], a[5], a[6]);\\n            return Rights(a[0], a[1], a[2], a[3], a[4], a[5]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Convert rights struct to an array (e.g., for events, GUI)\\n     * @dev avoids multiple calls to hasPermission\\n     * @param rights - the rights struct to convert\\n     * @return boolean array containing the rights settings\\n     */\\n    function convertRights(Rights calldata rights) external pure returns (bool[] memory) {\\n        bool[] memory result = new bool[](6);\\n\\n        result[0] = rights.canPauseSwapping;\\n        result[1] = rights.canChangeSwapFee;\\n        result[2] = rights.canChangeWeights;\\n        result[3] = rights.canAddRemoveTokens;\\n        result[4] = rights.canWhitelistLPs;\\n        result[5] = rights.canTokenWhiteLists;\\n        // result[5] = rights.canChangeCap;\\n        // result[6] = rights.canChangeFloor;\\n\\n        return result;\\n    }\\n\\n    // Though it is actually simple, the number of branches triggers code-complexity\\n    /* solhint-disable code-complexity */\\n\\n    /**\\n     * @notice Externally check permissions using the Enum\\n     * @param self - Rights struct containing the permissions\\n     * @param permission - The permission to check\\n     * @return Boolean true if it has the permission\\n     */\\n    function hasPermission(Rights calldata self, Permissions permission) external pure returns (bool) {\\n        if (Permissions.PAUSE_SWAPPING == permission) {\\n            return self.canPauseSwapping;\\n        } else if (Permissions.CHANGE_SWAP_FEE == permission) {\\n            return self.canChangeSwapFee;\\n        } else if (Permissions.CHANGE_WEIGHTS == permission) {\\n            return self.canChangeWeights;\\n        } else if (Permissions.ADD_REMOVE_TOKENS == permission) {\\n            return self.canAddRemoveTokens;\\n        } else if (Permissions.WHITELIST_LPS == permission) {\\n            return self.canWhitelistLPs;\\n        } else if (Permissions.TOKEN_WHITELISTS == permission) {\\n            return self.canTokenWhiteLists;\\n        }\\n        // else if (Permissions.CHANGE_CAP == permission) {\\n        //     return self.canChangeCap;\\n        // } else if (Permissions.CHANGE_FLOOR == permission) {\\n        //     return self.canChangeFloor;\\n        // }\\n    }\\n\\n    /* solhint-enable code-complexity */\\n}\\n\",\"keccak256\":\"0x398bbfe72673fa1c42a7d59fb5f7b2a46332887e105bf6fdff234a9a83247d0e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/SafeApprove.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Imports\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n// Libraries\\n\\n/**\\n * @author PieDAO (ported to Desyn Labs)\\n * @title SafeApprove - set approval for tokens that require 0 prior approval\\n * @dev Perhaps to address the known ERC20 race condition issue\\n *      See https://github.com/crytic/not-so-smart-contracts/tree/master/race_condition\\n *      Some tokens - notably KNC - only allow approvals to be increased from 0\\n */\\nlibrary SafeApprove {\\n    /**\\n     * @notice handle approvals of tokens that require approving from a base of 0\\n     * @param token - the token we're approving\\n     * @param spender - entity the owner (sender) is approving to spend his tokens\\n     * @param amount - number of tokens being approved\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint amount\\n    ) internal returns (bool) {\\n        uint currentAllowance = token.allowance(address(this), spender);\\n\\n        // Do nothing if allowance is already set to this value\\n        if (currentAllowance == amount) {\\n            return true;\\n        }\\n\\n        // If approval is not zero reset it to zero first\\n        if (currentAllowance != 0) {\\n            token.approve(spender, 0);\\n        }\\n\\n        // do the actual approval\\n        return token.approve(spender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xa51ebf770f2676085b89b1636688cc086289cfe27f614dfd0c15142535c26752\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint a, uint b) internal pure returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint a, uint b) internal pure returns (uint) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint a,\\n        uint b,\\n        string memory errorMessage\\n    ) internal pure returns (uint) {\\n        require(b <= a, errorMessage);\\n        uint c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint a, uint b) internal pure returns (uint) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint a, uint b) internal pure returns (uint) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint a,\\n        uint b,\\n        string memory errorMessage\\n    ) internal pure returns (uint) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint a, uint b) internal pure returns (uint) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint a,\\n        uint b,\\n        string memory errorMessage\\n    ) internal pure returns (uint) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x7ce3fd7d17047f684821e1a20b4f5989630f6755a377b12c087dfde359f710d6\",\"license\":\"agpl-3.0\"},\"contracts/libraries/SmartPoolManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Needed to pass in structs\\npragma experimental ABIEncoderV2;\\n\\n// Imports\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IConfigurableRightsPool.sol\\\";\\nimport \\\"../interfaces/IBFactory.sol\\\"; // unused\\nimport \\\"./DesynSafeMath.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./SafeApprove.sol\\\";\\n\\n/**\\n * @author Desyn Labs\\n * @title Factor out the weight updates\\n */\\nlibrary SmartPoolManager {\\n    using SafeApprove for IERC20;\\n    using DesynSafeMath for uint;\\n    using SafeMath for uint;\\n\\n    //kol pool params\\n    struct levelParams {\\n        uint level;\\n        uint ratio;\\n    }\\n\\n    struct feeParams {\\n        levelParams firstLevel;\\n        levelParams secondLevel;\\n        levelParams thirdLevel;\\n        levelParams fourLevel;\\n    }\\n    struct KolPoolParams {\\n        feeParams managerFee;\\n        feeParams issueFee;\\n        feeParams redeemFee;\\n        feeParams perfermanceFee;\\n    }\\n\\n    // Type declarations\\n    enum Etypes {\\n        OPENED,\\n        CLOSED\\n    }\\n\\n    enum Period {\\n        HALF,\\n        ONE,\\n        TWO\\n    }\\n\\n    // updateWeight and pokeWeights are unavoidably long\\n    /* solhint-disable function-max-lines */\\n    struct Status {\\n        uint collectPeriod;\\n        uint collectEndTime;\\n        uint closurePeriod;\\n        uint closureEndTime;\\n        uint upperCap;\\n        uint floorCap;\\n        uint managerFee;\\n        uint redeemFee;\\n        uint issueFee;\\n        uint perfermanceFee;\\n        uint startClaimFeeTime;\\n    }\\n\\n    struct PoolParams {\\n        // Desyn Pool Token (representing shares of the pool)\\n        string poolTokenSymbol;\\n        string poolTokenName;\\n        // Tokens inside the Pool\\n        address[] constituentTokens;\\n        uint[] tokenBalances;\\n        uint[] tokenWeights;\\n        uint swapFee;\\n        uint managerFee;\\n        uint redeemFee;\\n        uint issueFee;\\n        uint perfermanceFee;\\n        Etypes etype;\\n    }\\n\\n    struct PoolTokenRange {\\n        uint bspFloor;\\n        uint bspCap;\\n    }\\n\\n    struct Fund {\\n        uint etfAmount;\\n        uint fundAmount;\\n    }\\n\\n    function initRequire(\\n        uint swapFee,\\n        uint managerFee,\\n        uint issueFee,\\n        uint redeemFee,\\n        uint perfermanceFee,\\n        uint tokenBalancesLength,\\n        uint tokenWeightsLength,\\n        uint constituentTokensLength,\\n        bool initBool\\n    ) external pure {\\n        // We don't have a pool yet; check now or it will fail later (in order of likelihood to fail)\\n        // (and be unrecoverable if they don't have permission set to change it)\\n        // Most likely to fail, so check first\\n        require(!initBool, \\\"Init fail\\\");\\n        require(swapFee >= DesynConstants.MIN_FEE, \\\"ERR_INVALID_SWAP_FEE\\\");\\n        require(swapFee <= DesynConstants.MAX_FEE, \\\"ERR_INVALID_SWAP_FEE\\\");\\n        require(managerFee >= DesynConstants.MANAGER_MIN_FEE, \\\"ERR_INVALID_MANAGER_FEE\\\");\\n        require(managerFee <= DesynConstants.MANAGER_MAX_FEE, \\\"ERR_INVALID_MANAGER_FEE\\\");\\n        require(issueFee >= DesynConstants.ISSUE_MIN_FEE, \\\"ERR_INVALID_ISSUE_MIN_FEE\\\");\\n        require(issueFee <= DesynConstants.ISSUE_MAX_FEE, \\\"ERR_INVALID_ISSUE_MAX_FEE\\\");\\n        require(redeemFee >= DesynConstants.REDEEM_MIN_FEE, \\\"ERR_INVALID_REDEEM_MIN_FEE\\\");\\n        require(redeemFee <= DesynConstants.REDEEM_MAX_FEE, \\\"ERR_INVALID_REDEEM_MAX_FEE\\\");\\n        require(perfermanceFee >= DesynConstants.PERFERMANCE_MIN_FEE, \\\"ERR_INVALID_PERFERMANCE_MIN_FEE\\\");\\n        require(perfermanceFee <= DesynConstants.PERFERMANCE_MAX_FEE, \\\"ERR_INVALID_PERFERMANCE_MAX_FEE\\\");\\n\\n        // Arrays must be parallel\\n        require(tokenBalancesLength == constituentTokensLength, \\\"ERR_START_BALANCES_MISMATCH\\\");\\n        require(tokenWeightsLength == constituentTokensLength, \\\"ERR_START_WEIGHTS_MISMATCH\\\");\\n        // Cannot have too many or too few - technically redundant, since BPool.bind() would fail later\\n        // But if we don't check now, we could have a useless contract with no way to create a pool\\n\\n        require(constituentTokensLength >= DesynConstants.MIN_ASSET_LIMIT, \\\"ERR_TOO_FEW_TOKENS\\\");\\n        require(constituentTokensLength <= DesynConstants.MAX_ASSET_LIMIT, \\\"ERR_TOO_MANY_TOKENS\\\");\\n        // There are further possible checks (e.g., if they use the same token twice), but\\n        // we can let bind() catch things like that (i.e., not things that might reasonably work)\\n    }\\n\\n    /**\\n     * @notice Update the weight of an existing token\\n     * @dev Refactored to library to make CRPFactory deployable\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param tokenA - token to sell\\n     * @param tokenB - token to buy\\n     */\\n    function rebalance(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address tokenA,\\n        address tokenB,\\n        uint deltaWeight,\\n        uint minAmountOut\\n    ) external {\\n        uint currentWeightA = bPool.getDenormalizedWeight(tokenA);\\n        uint currentBalanceA = bPool.getBalance(tokenA);\\n        // uint currentWeightB = bPool.getDenormalizedWeight(tokenB);\\n\\n        require(deltaWeight <= currentWeightA, \\\"ERR_DELTA_WEIGHT_TOO_BIG\\\");\\n\\n        // deltaBalance = currentBalance * (deltaWeight / currentWeight)\\n        uint deltaBalanceA = DesynSafeMath.bmul(currentBalanceA, DesynSafeMath.bdiv(deltaWeight, currentWeightA));\\n\\n        // uint currentBalanceB = bPool.getBalance(tokenB);\\n\\n        // uint deltaWeight = DesynSafeMath.bsub(newWeight, currentWeightA);\\n\\n        // uint newWeightB = DesynSafeMath.bsub(currentWeightB, deltaWeight);\\n        // require(newWeightB >= 0, \\\"ERR_INCORRECT_WEIGHT_B\\\");\\n        bool soldout;\\n        if (deltaWeight == currentWeightA) {\\n            // reduct token A\\n            bPool.unbindPure(tokenA);\\n            soldout = true;\\n        }\\n\\n        // Now with the tokens this contract can bind them to the pool it controls\\n        bPool.rebindSmart(tokenA, tokenB, deltaWeight, deltaBalanceA, soldout, minAmountOut);\\n    }\\n\\n    /**\\n     * @notice Non ERC20-conforming tokens are problematic; don't allow them in pools\\n     * @dev Will revert if invalid\\n     * @param token - The prospective token to verify\\n     */\\n    function verifyTokenCompliance(address token) external {\\n        verifyTokenComplianceInternal(token);\\n    }\\n\\n    /**\\n     * @notice Non ERC20-conforming tokens are problematic; don't allow them in pools\\n     * @dev Will revert if invalid - overloaded to save space in the main contract\\n     * @param tokens - The prospective tokens to verify\\n     */\\n    function verifyTokenCompliance(address[] calldata tokens) external {\\n        for (uint i = 0; i < tokens.length; i++) {\\n            verifyTokenComplianceInternal(tokens[i]);\\n        }\\n    }\\n\\n    function createPoolInternalHandle(IBPool bPool, uint initialSupply) external view {\\n        require(initialSupply >= DesynConstants.MIN_POOL_SUPPLY, \\\"ERR_INIT_SUPPLY_MIN\\\");\\n        require(initialSupply <= DesynConstants.MAX_POOL_SUPPLY, \\\"ERR_INIT_SUPPLY_MAX\\\");\\n        require(bPool.EXIT_FEE() == 0, \\\"ERR_NONZERO_EXIT_FEE\\\");\\n        // EXIT_FEE must always be zero, or ConfigurableRightsPool._pushUnderlying will fail\\n        require(DesynConstants.EXIT_FEE == 0, \\\"ERR_NONZERO_EXIT_FEE\\\");\\n    }\\n\\n    function createPoolHandle(\\n        uint collectPeriod,\\n        uint upperCap,\\n        uint initialSupply\\n    ) external pure {\\n        require(collectPeriod <= DesynConstants.MAX_COLLECT_PERIOD, \\\"ERR_EXCEEDS_FUND_RAISING_PERIOD\\\");\\n        require(upperCap >= initialSupply, \\\"ERR_CAP_BIGGER_THAN_INITSUPPLY\\\");\\n    }\\n\\n    function exitPoolHandle(\\n        uint _endEtfAmount,\\n        uint _endFundAmount,\\n        uint _beginEtfAmount,\\n        uint _beginFundAmount,\\n        uint poolAmountIn,\\n        uint totalEnd\\n    )\\n        external\\n        pure\\n        returns (\\n            uint endEtfAmount,\\n            uint endFundAmount,\\n            uint profitRate\\n        )\\n    {\\n        endEtfAmount = DesynSafeMath.badd(_endEtfAmount, poolAmountIn);\\n        endFundAmount = DesynSafeMath.badd(_endFundAmount, totalEnd);\\n        uint amount1 = DesynSafeMath.bdiv(endFundAmount, endEtfAmount);\\n        uint amount2 = DesynSafeMath.bdiv(_beginFundAmount, _beginEtfAmount);\\n        if (amount1 > amount2) {\\n            profitRate = DesynSafeMath.bdiv(\\n                DesynSafeMath.bmul(DesynSafeMath.bsub(DesynSafeMath.bdiv(endFundAmount, endEtfAmount), DesynSafeMath.bdiv(_beginFundAmount, _beginEtfAmount)), poolAmountIn),\\n                totalEnd\\n            );\\n        }\\n    }\\n\\n    function exitPoolHandleA(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address poolToken,\\n        uint _tokenAmountOut,\\n        uint redeemFee,\\n        uint profitRate,\\n        uint perfermanceFee\\n    )\\n        external\\n        returns (\\n            uint redeemAndPerformanceFeeReceived,\\n            uint finalAmountOut,\\n            uint redeemFeeReceived\\n        )\\n    {\\n        // redeem fee\\n        redeemFeeReceived = DesynSafeMath.bmul(_tokenAmountOut, redeemFee);\\n\\n        // performance fee\\n        uint performanceFeeReceived = DesynSafeMath.bmul(DesynSafeMath.bmul(_tokenAmountOut, profitRate), perfermanceFee);\\n        \\n        // redeem fee and performance fee\\n        redeemAndPerformanceFeeReceived = DesynSafeMath.badd(performanceFeeReceived, redeemFeeReceived);\\n\\n        // final amount the user got\\n        finalAmountOut = DesynSafeMath.bsub(_tokenAmountOut, redeemAndPerformanceFeeReceived);\\n\\n        _pushUnderlying(bPool, poolToken, msg.sender, finalAmountOut);\\n\\n        if (redeemFee != 0 || (profitRate > 0 && perfermanceFee != 0)) {\\n            _pushUnderlying(bPool, poolToken, address(this), redeemAndPerformanceFeeReceived);\\n            IERC20(poolToken).safeApprove(self.vaultAddress(), redeemAndPerformanceFeeReceived);\\n        }\\n    }\\n\\n    function exitPoolHandleB(\\n        IConfigurableRightsPool self,\\n        bool bools,\\n        bool isCompletedCollect,\\n        uint closureEndTime,\\n        uint collectEndTime,\\n        uint _etfAmount,\\n        uint _fundAmount,\\n        uint poolAmountIn\\n    ) external view returns (uint etfAmount, uint fundAmount, uint actualPoolAmountIn) {\\n        actualPoolAmountIn = poolAmountIn;\\n        if (bools) {\\n            bool isCloseEtfCollectEndWithFailure = isCompletedCollect == false && block.timestamp >= collectEndTime;\\n            bool isCloseEtfClosureEnd = block.timestamp >= closureEndTime;\\n            require(isCloseEtfCollectEndWithFailure || isCloseEtfClosureEnd, \\\"ERR_CLOSURE_TIME_NOT_ARRIVED!\\\");\\n\\n            actualPoolAmountIn = self.balanceOf(msg.sender);\\n        }\\n        fundAmount = _fundAmount;\\n        etfAmount = _etfAmount;\\n    }\\n\\n    function joinPoolHandle(\\n        bool canWhitelistLPs,\\n        bool isList,\\n        bool bools,\\n        uint collectEndTime\\n    ) external view {\\n        require(!canWhitelistLPs || isList, \\\"ERR_NOT_ON_WHITELIST\\\");\\n\\n        if (bools) {\\n            require(block.timestamp <= collectEndTime, \\\"ERR_COLLECT_PERIOD_FINISHED!\\\");\\n        }\\n    }\\n\\n    function rebalanceHandle(\\n        IBPool bPool,\\n        bool isCompletedCollect,\\n        bool bools,\\n        uint collectEndTime,\\n        uint closureEndTime,\\n        bool canChangeWeights,\\n        address tokenA,\\n        address tokenB\\n    ) external {\\n        require(bPool.isBound(tokenA), \\\"ERR_TOKEN_NOT_BOUND\\\");\\n        if (bools) {\\n            require(isCompletedCollect, \\\"ERROR_COLLECTION_FAILED\\\");\\n            require(block.timestamp > collectEndTime && block.timestamp < closureEndTime, \\\"ERR_NOT_REBALANCE_PERIOD\\\");\\n        }\\n\\n        if (!bPool.isBound(tokenB)) {\\n            bool returnValue = IERC20(tokenB).safeApprove(address(bPool), DesynConstants.MAX_UINT);\\n            require(returnValue, \\\"ERR_ERC20_FALSE\\\");\\n        }\\n\\n        require(canChangeWeights, \\\"ERR_NOT_CONFIGURABLE_WEIGHTS\\\");\\n        require(tokenA != tokenB, \\\"ERR_TOKENS_SAME\\\");\\n    }\\n\\n    /**\\n     * @notice Join a pool\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param poolAmountOut - number of pool tokens to receive\\n     * @param maxAmountsIn - Max amount of asset tokens to spend\\n     * @return actualAmountsIn - calculated values of the tokens to pull in\\n     */\\n    function joinPool(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        uint poolAmountOut,\\n        uint[] calldata maxAmountsIn,\\n        uint issueFee\\n    ) external view returns (uint[] memory actualAmountsIn) {\\n        address[] memory tokens = bPool.getCurrentTokens();\\n\\n        require(maxAmountsIn.length == tokens.length, \\\"ERR_AMOUNTS_MISMATCH\\\");\\n\\n        uint poolTotal = self.totalSupply();\\n        // Subtract  1 to ensure any rounding errors favor the pool\\n        uint ratio = DesynSafeMath.bdiv(poolAmountOut, DesynSafeMath.bsub(poolTotal, 1));\\n\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        // We know the length of the array; initialize it, and fill it below\\n        // Cannot do \\\"push\\\" in memory\\n        actualAmountsIn = new uint[](tokens.length);\\n\\n        // This loop contains external calls\\n        // External calls are to math libraries or the underlying pool, so low risk\\n        uint issueFeeRate = issueFee.bmul(1000);\\n        for (uint i = 0; i < tokens.length; i++) {\\n            address t = tokens[i];\\n            uint bal = bPool.getBalance(t);\\n            // Add 1 to ensure any rounding errors favor the pool\\n            uint virtualTokenAmountIn = DesynSafeMath.bmul(ratio, DesynSafeMath.badd(bal, 1));\\n            uint base = bal.badd(1).bmul(poolAmountOut * uint(1000));\\n            uint tokenAmountIn = base.bdiv(poolTotal.bsub(1) * (uint(1000).bsub(issueFeeRate)));\\n\\n            require(tokenAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountIn <= maxAmountsIn[i], \\\"ERR_LIMIT_IN\\\");\\n\\n            actualAmountsIn[i] = tokenAmountIn;\\n        }\\n    }\\n\\n    /**\\n     * @notice Exit a pool - redeem pool tokens for underlying assets\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param poolAmountIn - amount of pool tokens to redeem\\n     * @param minAmountsOut - minimum amount of asset tokens to receive\\n     * @return actualAmountsOut - calculated amounts of each token to pull\\n     */\\n    function exitPool(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        uint poolAmountIn,\\n        uint[] calldata minAmountsOut\\n    ) external view returns (uint[] memory actualAmountsOut) {\\n        address[] memory tokens = bPool.getCurrentTokens();\\n\\n        require(minAmountsOut.length == tokens.length, \\\"ERR_AMOUNTS_MISMATCH\\\");\\n\\n        uint poolTotal = self.totalSupply();\\n\\n        uint ratio = DesynSafeMath.bdiv(poolAmountIn, DesynSafeMath.badd(poolTotal, 1));\\n\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        actualAmountsOut = new uint[](tokens.length);\\n\\n        // This loop contains external calls\\n        // External calls are to math libraries or the underlying pool, so low risk\\n        for (uint i = 0; i < tokens.length; i++) {\\n            address t = tokens[i];\\n            uint bal = bPool.getBalance(t);\\n            // Subtract 1 to ensure any rounding errors favor the pool\\n            uint tokenAmountOut = DesynSafeMath.bmul(ratio, DesynSafeMath.bsub(bal, 1));\\n\\n            require(tokenAmountOut != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountOut >= minAmountsOut[i], \\\"ERR_LIMIT_OUT\\\");\\n\\n            actualAmountsOut[i] = tokenAmountOut;\\n        }\\n    }\\n\\n    // Internal functions\\n    // Check for zero transfer, and make sure it returns true to returnValue\\n    function verifyTokenComplianceInternal(address token) internal {\\n        bool returnValue = IERC20(token).transfer(msg.sender, 0);\\n        require(returnValue, \\\"ERR_NONCONFORMING_TOKEN\\\");\\n    }\\n\\n    function handleTransferInTokens(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address poolToken,\\n        uint actualAmountIn,\\n        uint _actualIssueFee\\n    ) external returns (uint issueFeeReceived) {\\n        issueFeeReceived = DesynSafeMath.bmul(actualAmountIn, _actualIssueFee);\\n        uint amount = DesynSafeMath.bsub(actualAmountIn, issueFeeReceived);\\n\\n        _pullUnderlying(bPool, poolToken, msg.sender, amount);\\n\\n        if (_actualIssueFee != 0) {\\n            bool xfer = IERC20(poolToken).transferFrom(msg.sender, address(this), issueFeeReceived);\\n            require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n\\n            IERC20(poolToken).safeApprove(self.vaultAddress(), issueFeeReceived);\\n        }\\n    }\\n\\n    function handleClaim(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address[] calldata poolTokens,\\n        uint managerFee,\\n        uint timeElapsed,\\n        uint claimPeriod\\n    ) external returns (uint[] memory) {\\n        uint[] memory tokensAmount = new uint[](poolTokens.length);\\n        for (uint i = 0; i < poolTokens.length; i++) {\\n            address t = poolTokens[i];\\n            uint tokenBalance = bPool.getBalance(t);\\n            uint tokenAmountOut = tokenBalance.bmul(managerFee).mul(timeElapsed).div(claimPeriod).div(12);\\n            _pushUnderlying(bPool, t, address(this), tokenAmountOut);\\n\\n            IERC20(t).safeApprove(self.vaultAddress(), tokenAmountOut);\\n            tokensAmount[i] = tokenAmountOut;\\n        }\\n\\n        return tokensAmount;\\n    }\\n\\n    function handleCollectionCompleted(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address[] calldata poolTokens,\\n        uint issueFee\\n    ) external {\\n        if (issueFee != 0) {\\n            uint[] memory tokensAmount = new uint[](poolTokens.length);\\n\\n            for (uint i = 0; i < poolTokens.length; i++) {\\n                address t = poolTokens[i];\\n                uint currentAmount = bPool.getBalance(t);\\n                uint currentAmountFee = DesynSafeMath.bmul(currentAmount, issueFee);\\n\\n                _pushUnderlying(bPool, t, address(this), currentAmountFee);\\n                tokensAmount[i] = currentAmountFee;\\n                IERC20(t).safeApprove(self.vaultAddress(), currentAmountFee);\\n            }\\n\\n            IVault(self.vaultAddress()).depositIssueRedeemPToken(poolTokens, tokensAmount, tokensAmount, false);\\n        }\\n    }\\n\\n    function WhitelistHandle(\\n        bool bool1,\\n        bool bool2,\\n        address adr\\n    ) external pure {\\n        require(bool1, \\\"ERR_CANNOT_WHITELIST_LPS\\\");\\n        require(bool2, \\\"ERR_LP_NOT_WHITELISTED\\\");\\n        require(adr != address(0), \\\"ERR_INVALID_ADDRESS\\\");\\n    }\\n\\n    function _pullUnderlying(\\n        IBPool bPool,\\n        address erc20,\\n        address from,\\n        uint amount\\n    ) internal {\\n        uint tokenBalance = bPool.getBalance(erc20);\\n        uint tokenWeight = bPool.getDenormalizedWeight(erc20);\\n\\n        bool xfer = IERC20(erc20).transferFrom(from, address(this), amount);\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n        bPool.rebind(erc20, DesynSafeMath.badd(tokenBalance, amount), tokenWeight);\\n    }\\n\\n    function _pushUnderlying(\\n        IBPool bPool,\\n        address erc20,\\n        address to,\\n        uint amount\\n    ) internal {\\n        uint tokenBalance = bPool.getBalance(erc20);\\n        uint tokenWeight = bPool.getDenormalizedWeight(erc20);\\n        bPool.rebind(erc20, DesynSafeMath.bsub(tokenBalance, amount), tokenWeight);\\n\\n        bool xfer = IERC20(erc20).transfer(to, amount);\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xdd07884c7f67ffa146daa3dc4bb11e46c5f607214a430bd9b32748917d839cc9\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620010e9380380620010e98339810160408190526200003491620000ff565b80516200004990600290602084019062000063565b5050600380546001600160a01b03191633179055620001c2565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620000a657805160ff1916838001178555620000d6565b82800160010185558215620000d6579182015b82811115620000d6578251825591602001919060010190620000b9565b50620000e4929150620000e8565b5090565b5b80821115620000e45760008155600101620000e9565b6000602080838503121562000112578182fd5b82516001600160401b038082111562000129578384fd5b818501915085601f8301126200013d578384fd5b8151818111156200014c578485fd5b604051601f8201601f19168101850183811182821017156200016c578687fd5b604052818152838201850188101562000183578586fd5b8592505b81831015620001a6578383018501518184018601529184019162000187565b81831115620001b757858583830101525b979650505050505050565b610f1780620001d26000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806308463965146100675780638b0e8e67146100855780639daafec71461009a578063b2ebfea5146100af578063dc19e842146100c2578063e9543720146100e2575b600080fd5b61006f6100f5565b60405161007c9190610cd4565b60405180910390f35b61009861009336600461074f565b610180565b005b6100a2610200565b60405161007c9190610a82565b6100986100bd366004610836565b61020f565b6100d56100d036600461074f565b610250565b60405161007c9190610cc9565b6100a26100f0366004610771565b61026e565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156101785780601f1061014d57610100808354040283529160200191610178565b820191906000526020600020905b81548152906001019060200180831161015b57829003601f168201915b505050505081565b6003546001600160a01b031633146101b35760405162461bcd60e51b81526004016101aa90610d39565b60405180910390fd5b600480546001600160a01b0319166001600160a01b0383169081179091556040513391907fbe29361fcb0d6d7a528b06b7e3c978b225c152a431ac559470986926fe26692590600090a350565b6004546001600160a01b031681565b6003546001600160a01b031633146102395760405162461bcd60e51b81526004016101aa90610d39565b805161024c9060029060208401906105a2565b5050565b6001600160a01b031660009081526020819052604090205460ff1690565b60008061027a8761045a565b6040519091506001600160a01b0382169033907f8aaa45dbe91f274e1c80489691f3d62dbf595d587fcc6a989fa27696e7c2a23290600090a36001600160a01b03811660008181526020819052604090819020805460ff19166001179055516355b1905560e01b81526355b19055906102fb908b908b908b90600401610aea565b600060405180830381600087803b15801561031557600080fd5b505af1158015610329573d6000803e3d6000fd5b505060048054604051634660c5a560e01b81526001600160a01b039091169350634660c5a5925061035e9185918a9101610a96565b600060405180830381600087803b15801561037857600080fd5b505af115801561038c573d6000803e3d6000fd5b5050604051633ef1447960e01b81526001600160a01b0384169250633ef1447991506103be9087908790600401610c3b565b600060405180830381600087803b1580156103d857600080fd5b505af11580156103ec573d6000803e3d6000fd5b50506040516392eefe9b60e01b81526001600160a01b03841692506392eefe9b915061041c903390600401610a82565b600060405180830381600087803b15801561043657600080fd5b505af115801561044a573d6000803e3d6000fd5b50929a9950505050505050505050565b6002805460408051602060018416156101000260001901909316849004601f8101849004840282018401909252818152600093606093919290918301828280156104e55780601f106104ba576101008083540402835291602001916104e5565b820191906000526020600020905b8154815290600101906020018083116104c857829003601f168201915b505050505090506060818480600001906104ff9190610d60565b61050c6020880188610d60565b60405160200161051f9493929190610d07565b60408051601f198184030181529082905261053d9291602001610a4a565b60408051601f19818403018152908290526001805480820190915590925060009161056b9190602001610a79565b604051602081830303815290604052805190602001209050808251602084016000f59350833b61059a57600080fd5b505050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106105e357805160ff1916838001178555610610565b82800160010185558215610610579182015b828111156106105782518255916020019190600101906105f5565b5061061c929150610620565b5090565b5b8082111561061c5760008155600101610621565b80356001600160a01b038116811461064c57600080fd5b92915050565b600082601f830112610662578081fd5b813561067561067082610dd1565b610dab565b81815291506020808301908481018184028601820187101561069657600080fd5b60005b848110156106bd576106ab8883610635565b84529282019290820190600101610699565b505050505092915050565b600082601f8301126106d8578081fd5b81356106e661067082610dd1565b81815291506020808301908481018184028601820187101561070757600080fd5b60005b848110156106bd5781358452928201929082019060010161070a565b60006104008284031215610738578081fd5b50919050565b600060c08284031215610738578081fd5b600060208284031215610760578081fd5b61076a8383610635565b9392505050565b600080600080600080610540878903121561078a578182fd5b863561079581610ebb565b955060208701356001600160401b03808211156107b0578384fd5b90880190610160828b0312156107c4578384fd5b8196506107d48a60408b0161073e565b95506107e48a6101008b01610726565b94506105008901359150808211156107fa578384fd5b6108068a838b01610652565b935061052089013591508082111561081c578283fd5b5061082989828a016106c8565b9150509295509295509295565b60006020808385031215610848578182fd5b82356001600160401b038082111561085e578384fd5b818501915085601f830112610871578384fd5b81358181111561087f578485fd5b610891601f8201601f19168501610dab565b915080825286848285010111156108a6578485fd5b80848401858401378101909201929092529392505050565b815260200190565b6001600160a01b03169052565b60008284526020808501945082825b85811015610910578183016001600160a01b036108ff8285610635565b1688529683019691506001016108e2565b509495945050505050565b81835260006001600160fb1b03831115610933578081fd5b6020830280836020870137939093016020019283525090919050565b6002811061095957fe5b9052565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b803561099281610ed3565b1515825260208101356109a481610ed3565b1515602083015260408101356109b981610ed3565b1515604083015260608101356109ce81610ed3565b1515606083015260808101356109e381610ed3565b1515608083015260a08101356109f881610ed3565b80151560a0840152505050565b610a0f8282610a3b565b610a1f6040830160408301610a3b565b610a2f6080830160808301610a3b565b61024c60c0830160c083015b80358252602090810135910152565b60008351610a5c818460208801610e8b565b835190830190610a70818360208801610e8b565b01949350505050565b90815260200190565b6001600160a01b0391909116815260200190565b6001600160a01b03831681526104208101610ab46020830184610a05565b610ac661012083016101008501610a05565b610ad861022083016102008501610a05565b61076a61032083016103008501610a05565b6001600160a01b038416815261010060208201819052600090610b0d8580610e47565b6101608084870152610b246102608701838561095d565b9250610b336020890189610e47565b925060ff196101208189870301818a0152610b4f86868561095d565b9550610b5e60408c018c610df0565b95509250610140828a880301818b0152610b798787866108d3565b9650610b8860608d018d610df0565b96509350828a880301858b0152610ba087878661091b565b9650610baf60808d018d610df0565b96509450828a8803016101808b0152610bc987878761091b565b965060a08c01356101a08b015260c08c01356101c08b015260e08c01356101e08b0152878c01356102008b0152818c01356102208b0152610c0c818d018d610e37565b9750505050505050610c2261024085018361094f565b9150610c3390506040830184610987565b949350505050565b604080825283519082018190526000906020906060840190828701845b82811015610c7b57610c6b8483516108c6565b9284019290840190600101610c58565b50505083810382850152808551610c928184610a79565b91508387019250845b81811015610cbc57610cae8385516108be565b938501939250600101610c9b565b5090979650505050505050565b901515815260200190565b6000602082528251806020840152610cf3816040850160208701610e8b565b601f01601f19169190910160400192915050565b600060408252610d1b60408301868861095d565b8281036020840152610d2e81858761095d565b979650505050505050565b6020808252600d908201526c4552525f4e4f545f424c41425360981b604082015260600190565b6000808335601e19843603018112610d76578283fd5b8301803591506001600160401b03821115610d8f578283fd5b602001915036819003821315610da457600080fd5b9250929050565b6040518181016001600160401b0381118282101715610dc957600080fd5b604052919050565b60006001600160401b03821115610de6578081fd5b5060209081020190565b6000808335601e19843603018112610e06578283fd5b83016020810192503590506001600160401b03811115610e2557600080fd5b602081023603831315610da457600080fd5b600082356002811061076a578182fd5b6000808335601e19843603018112610e5d578283fd5b83016020810192503590506001600160401b03811115610e7c57600080fd5b803603831315610da457600080fd5b60005b83811015610ea6578181015183820152602001610e8e565b83811115610eb5576000848401525b50505050565b6001600160a01b0381168114610ed057600080fd5b50565b8015158114610ed057600080fdfea2646970667358221220c7aaa2bfe1445b98842cdf778252f813a52b0699e43a666af10bff521a479f0d64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c806308463965146100675780638b0e8e67146100855780639daafec71461009a578063b2ebfea5146100af578063dc19e842146100c2578063e9543720146100e2575b600080fd5b61006f6100f5565b60405161007c9190610cd4565b60405180910390f35b61009861009336600461074f565b610180565b005b6100a2610200565b60405161007c9190610a82565b6100986100bd366004610836565b61020f565b6100d56100d036600461074f565b610250565b60405161007c9190610cc9565b6100a26100f0366004610771565b61026e565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156101785780601f1061014d57610100808354040283529160200191610178565b820191906000526020600020905b81548152906001019060200180831161015b57829003601f168201915b505050505081565b6003546001600160a01b031633146101b35760405162461bcd60e51b81526004016101aa90610d39565b60405180910390fd5b600480546001600160a01b0319166001600160a01b0383169081179091556040513391907fbe29361fcb0d6d7a528b06b7e3c978b225c152a431ac559470986926fe26692590600090a350565b6004546001600160a01b031681565b6003546001600160a01b031633146102395760405162461bcd60e51b81526004016101aa90610d39565b805161024c9060029060208401906105a2565b5050565b6001600160a01b031660009081526020819052604090205460ff1690565b60008061027a8761045a565b6040519091506001600160a01b0382169033907f8aaa45dbe91f274e1c80489691f3d62dbf595d587fcc6a989fa27696e7c2a23290600090a36001600160a01b03811660008181526020819052604090819020805460ff19166001179055516355b1905560e01b81526355b19055906102fb908b908b908b90600401610aea565b600060405180830381600087803b15801561031557600080fd5b505af1158015610329573d6000803e3d6000fd5b505060048054604051634660c5a560e01b81526001600160a01b039091169350634660c5a5925061035e9185918a9101610a96565b600060405180830381600087803b15801561037857600080fd5b505af115801561038c573d6000803e3d6000fd5b5050604051633ef1447960e01b81526001600160a01b0384169250633ef1447991506103be9087908790600401610c3b565b600060405180830381600087803b1580156103d857600080fd5b505af11580156103ec573d6000803e3d6000fd5b50506040516392eefe9b60e01b81526001600160a01b03841692506392eefe9b915061041c903390600401610a82565b600060405180830381600087803b15801561043657600080fd5b505af115801561044a573d6000803e3d6000fd5b50929a9950505050505050505050565b6002805460408051602060018416156101000260001901909316849004601f8101849004840282018401909252818152600093606093919290918301828280156104e55780601f106104ba576101008083540402835291602001916104e5565b820191906000526020600020905b8154815290600101906020018083116104c857829003601f168201915b505050505090506060818480600001906104ff9190610d60565b61050c6020880188610d60565b60405160200161051f9493929190610d07565b60408051601f198184030181529082905261053d9291602001610a4a565b60408051601f19818403018152908290526001805480820190915590925060009161056b9190602001610a79565b604051602081830303815290604052805190602001209050808251602084016000f59350833b61059a57600080fd5b505050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106105e357805160ff1916838001178555610610565b82800160010185558215610610579182015b828111156106105782518255916020019190600101906105f5565b5061061c929150610620565b5090565b5b8082111561061c5760008155600101610621565b80356001600160a01b038116811461064c57600080fd5b92915050565b600082601f830112610662578081fd5b813561067561067082610dd1565b610dab565b81815291506020808301908481018184028601820187101561069657600080fd5b60005b848110156106bd576106ab8883610635565b84529282019290820190600101610699565b505050505092915050565b600082601f8301126106d8578081fd5b81356106e661067082610dd1565b81815291506020808301908481018184028601820187101561070757600080fd5b60005b848110156106bd5781358452928201929082019060010161070a565b60006104008284031215610738578081fd5b50919050565b600060c08284031215610738578081fd5b600060208284031215610760578081fd5b61076a8383610635565b9392505050565b600080600080600080610540878903121561078a578182fd5b863561079581610ebb565b955060208701356001600160401b03808211156107b0578384fd5b90880190610160828b0312156107c4578384fd5b8196506107d48a60408b0161073e565b95506107e48a6101008b01610726565b94506105008901359150808211156107fa578384fd5b6108068a838b01610652565b935061052089013591508082111561081c578283fd5b5061082989828a016106c8565b9150509295509295509295565b60006020808385031215610848578182fd5b82356001600160401b038082111561085e578384fd5b818501915085601f830112610871578384fd5b81358181111561087f578485fd5b610891601f8201601f19168501610dab565b915080825286848285010111156108a6578485fd5b80848401858401378101909201929092529392505050565b815260200190565b6001600160a01b03169052565b60008284526020808501945082825b85811015610910578183016001600160a01b036108ff8285610635565b1688529683019691506001016108e2565b509495945050505050565b81835260006001600160fb1b03831115610933578081fd5b6020830280836020870137939093016020019283525090919050565b6002811061095957fe5b9052565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b803561099281610ed3565b1515825260208101356109a481610ed3565b1515602083015260408101356109b981610ed3565b1515604083015260608101356109ce81610ed3565b1515606083015260808101356109e381610ed3565b1515608083015260a08101356109f881610ed3565b80151560a0840152505050565b610a0f8282610a3b565b610a1f6040830160408301610a3b565b610a2f6080830160808301610a3b565b61024c60c0830160c083015b80358252602090810135910152565b60008351610a5c818460208801610e8b565b835190830190610a70818360208801610e8b565b01949350505050565b90815260200190565b6001600160a01b0391909116815260200190565b6001600160a01b03831681526104208101610ab46020830184610a05565b610ac661012083016101008501610a05565b610ad861022083016102008501610a05565b61076a61032083016103008501610a05565b6001600160a01b038416815261010060208201819052600090610b0d8580610e47565b6101608084870152610b246102608701838561095d565b9250610b336020890189610e47565b925060ff196101208189870301818a0152610b4f86868561095d565b9550610b5e60408c018c610df0565b95509250610140828a880301818b0152610b798787866108d3565b9650610b8860608d018d610df0565b96509350828a880301858b0152610ba087878661091b565b9650610baf60808d018d610df0565b96509450828a8803016101808b0152610bc987878761091b565b965060a08c01356101a08b015260c08c01356101c08b015260e08c01356101e08b0152878c01356102008b0152818c01356102208b0152610c0c818d018d610e37565b9750505050505050610c2261024085018361094f565b9150610c3390506040830184610987565b949350505050565b604080825283519082018190526000906020906060840190828701845b82811015610c7b57610c6b8483516108c6565b9284019290840190600101610c58565b50505083810382850152808551610c928184610a79565b91508387019250845b81811015610cbc57610cae8385516108be565b938501939250600101610c9b565b5090979650505050505050565b901515815260200190565b6000602082528251806020840152610cf3816040850160208701610e8b565b601f01601f19169190910160400192915050565b600060408252610d1b60408301868861095d565b8281036020840152610d2e81858761095d565b979650505050505050565b6020808252600d908201526c4552525f4e4f545f424c41425360981b604082015260600190565b6000808335601e19843603018112610d76578283fd5b8301803591506001600160401b03821115610d8f578283fd5b602001915036819003821315610da457600080fd5b9250929050565b6040518181016001600160401b0381118282101715610dc957600080fd5b604052919050565b60006001600160401b03821115610de6578081fd5b5060209081020190565b6000808335601e19843603018112610e06578283fd5b83016020810192503590506001600160401b03811115610e2557600080fd5b602081023603831315610da457600080fd5b600082356002811061076a578182fd5b6000808335601e19843603018112610e5d578283fd5b83016020810192503590506001600160401b03811115610e7c57600080fd5b803603831315610da457600080fd5b60005b83811015610ea6578181015183820152602001610e8e565b83811115610eb5576000848401525b50505050565b6001600160a01b0381168114610ed057600080fd5b50565b8015158114610ed057600080fdfea2646970667358221220c7aaa2bfe1445b98842cdf778252f813a52b0699e43a666af10bff521a479f0d64736f6c634300060c0033",
  "libraries": {
    "DesynSafeMath": "0x4E9FA6fE9C793CC0864AB331b2c13EEAeAcd4679",
    "RightsManager": "0x11D61d0855aCfB43b3C9275b70403EcCC7212536",
    "SmartPoolManager": "0x0314725E3312e6453f745467572283E617881A89"
  },
  "devdoc": {
    "author": "Desyn Labs",
    "details": "Rights are held in a corresponding struct in ConfigurableRightsPool      Index values are as follows:      0: canPauseSwapping - can setPublicSwap back to false after turning it on                            by default, it is off on initialization and can only be turned on      1: canChangeSwapFee - can setSwapFee after initialization (by default, it is fixed at create time)      2: canChangeWeights - can bind new token weights (allowed by default in base pool)      3: canAddRemoveTokens - can bind/unbind tokens (allowed by default in base pool)      4: canWhitelistLPs - if set, only whitelisted addresses can join pools                           (enables private pools with more than one LP)      5: canChangeCap - can change the BSP cap (max # of pool tokens)",
    "kind": "dev",
    "methods": {
      "isCrp(address)": {
        "params": {
          "addr": "- address to check"
        },
        "returns": {
          "_0": "boolean indicating whether it is a CRP"
        }
      },
      "newCrp(address,(string,string,address[],uint256[],uint256[],uint256,uint256,uint256,uint256,uint256,uint8),(bool,bool,bool,bool,bool,bool),(((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256)),((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256)),((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256)),((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256))),address[],uint256[])": {
        "details": "emits a LogNewCRP event",
        "params": {
          "factoryAddress": "- the BFactory instance used to create the underlying pool",
          "poolParams": "- struct containing the names, tokens, weights, balances, and swap fee",
          "rights": "- struct of permissions, configuring this CRP instance (see above for definitions)"
        }
      }
    },
    "title": "Configurable Rights Pool Factory - create parameterized smart pools",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "isCrp(address)": {
        "notice": "Check to see if a given address is a CRP"
      },
      "newCrp(address,(string,string,address[],uint256[],uint256[],uint256,uint256,uint256,uint256,uint256,uint8),(bool,bool,bool,bool,bool,bool),(((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256)),((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256)),((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256)),((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256))),address[],uint256[])": {
        "notice": "Create a new CRP"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7837,
        "contract": "contracts/deploy/CRPFactory.sol:CRPFactory",
        "label": "_isCrp",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7857,
        "contract": "contracts/deploy/CRPFactory.sol:CRPFactory",
        "label": "counters",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 7859,
        "contract": "contracts/deploy/CRPFactory.sol:CRPFactory",
        "label": "bytecodes",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes_storage"
      },
      {
        "astId": 7861,
        "contract": "contracts/deploy/CRPFactory.sol:CRPFactory",
        "label": "_blabs",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 7863,
        "contract": "contracts/deploy/CRPFactory.sol:CRPFactory",
        "label": "userVault",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
