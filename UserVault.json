{
  "address": "0x7Bf73846e3413Cba0735f465b6412dD389059746",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AddAdmin",
      "type": "event"
    },
    {
      "anonymous": true,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes4",
          "name": "sig",
          "type": "bytes4"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "LOG_CALL",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "LogVaultAdr",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RemoveAdmin",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "RATIO_TOTAL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "kol",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "types",
          "type": "uint256"
        }
      ],
      "name": "_computeReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "adminClaimToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "adminList",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allOwnerPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "claimKolReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "types",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "poolTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokensAmount",
          "type": "uint256[]"
        }
      ],
      "name": "depositToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getAllKolReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBNB",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getController",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getKolTokenList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokenList",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getKolsAdr",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getManagerClaimBool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "bools",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "maragerAdr",
          "type": "address"
        }
      ],
      "name": "getManagerReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getManagerReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwnerPercentage",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwners",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getPoolAllFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "kol",
          "type": "address"
        }
      ],
      "name": "getPoolKolTotalAmounts",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "kol",
          "type": "address"
        }
      ],
      "name": "getPoolKolUserInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "userAdr",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "userAmount",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct UserVault.KolUserInfo[]",
          "name": "info",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getPoolTokenInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "tokenList",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "issueTokens",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "redeemTokens",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "perfermanceTokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "managerAmount",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "issueAmount",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "redeemAmount",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "perfermanceAmount",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct UserVault.PoolTokens",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getUnManagerReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "maragerAdr",
          "type": "address"
        }
      ],
      "name": "getUnManagerReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_ownerPercentage",
          "type": "uint256[]"
        }
      ],
      "name": "initHandle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "initTotalAmountList",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "isClosePool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "kol",
          "type": "address"
        }
      ],
      "name": "kolClaimTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "kolClaimedList",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "kolTokenList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "kolTotalAmountList",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "kol",
          "type": "address"
        }
      ],
      "name": "kolUnClaimAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "kolUserInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "userAdr",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "managerClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "managerClaimList",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "decimals",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct UserVault.ClaimTokenInfo[1]",
          "name": "",
          "type": "tuple[1]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "managerClaimRecordList",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "time",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct UserVault.ClaimTokenInfo[]",
              "name": "tokens",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct UserVault.ClaimRecordInfo[]",
          "name": "claimRecordInfos",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "managerClaimedList",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ownerPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "owners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolManangerHasClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "recordList",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "recordNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "kol",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "poolTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokensAmount",
          "type": "uint256[]"
        }
      ],
      "name": "recordTokenInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "removeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_ownerPercentage",
          "type": "uint256"
        }
      ],
      "name": "setAddAdminList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "bools",
          "type": "bool"
        }
      ],
      "name": "setBlackList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "setController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adr",
          "type": "address"
        }
      ],
      "name": "setCrpFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "firstLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "secondLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "thirdLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "fourLevel",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SmartPoolManager.feeParams",
              "name": "managerFee",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "firstLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "secondLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "thirdLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "fourLevel",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SmartPoolManager.feeParams",
              "name": "issueFee",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "firstLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "secondLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "thirdLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "fourLevel",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SmartPoolManager.feeParams",
              "name": "redeemFee",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "firstLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "secondLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "thirdLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "fourLevel",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SmartPoolManager.feeParams",
              "name": "perfermanceFee",
              "type": "tuple"
            }
          ],
          "internalType": "struct SmartPoolManager.KolPoolParams",
          "name": "_poolParams",
          "type": "tuple"
        }
      ],
      "name": "setPoolParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adr",
          "type": "address"
        }
      ],
      "name": "setVaultAdr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userIndexList",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userKolList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x9c253f8b8bd9135961c7c1709784453268d6874a9b6e14fefb26b3834e3bdfdd",
  "receipt": {
    "to": null,
    "from": "0x595b85b4A418e3B8df897D02F5BD49167D00862F",
    "contractAddress": "0x7Bf73846e3413Cba0735f465b6412dD389059746",
    "transactionIndex": 2,
    "gasUsed": "5362174",
    "logsBloom": "0x
    "blockHash": "0x1301fa3daee984a8195abeac805faeb9ea129ef894c81e43abba7a0585047cc0",
    "transactionHash": "0x9c253f8b8bd9135961c7c1709784453268d6874a9b6e14fefb26b3834e3bdfdd",
    "logs": [],
    "blockNumber": 8126938,
    "cumulativeGasUsed": "5499462",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0e997af3b88dbcb9772d4d5054dabb5f",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddAdmin\",\"type\":\"event\"},{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"LOG_CALL\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"LogVaultAdr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RemoveAdmin\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RATIO_TOTAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"kol\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"types\",\"type\":\"uint256\"}],\"name\":\"_computeReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"adminClaimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"adminList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allOwnerPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"claimKolReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"types\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"poolTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokensAmount\",\"type\":\"uint256[]\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getAllKolReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBNB\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getKolTokenList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenList\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getKolsAdr\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getManagerClaimBool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"bools\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maragerAdr\",\"type\":\"address\"}],\"name\":\"getManagerReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getManagerReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwnerPercentage\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolAllFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"kol\",\"type\":\"address\"}],\"name\":\"getPoolKolTotalAmounts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"kol\",\"type\":\"address\"}],\"name\":\"getPoolKolUserInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"userAdr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"userAmount\",\"type\":\"uint256[]\"}],\"internalType\":\"struct UserVault.KolUserInfo[]\",\"name\":\"info\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolTokenInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"tokenList\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"issueTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"redeemTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"perfermanceTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"managerAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"issueAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"redeemAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"perfermanceAmount\",\"type\":\"uint256[]\"}],\"internalType\":\"struct UserVault.PoolTokens\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getUnManagerReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maragerAdr\",\"type\":\"address\"}],\"name\":\"getUnManagerReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ownerPercentage\",\"type\":\"uint256[]\"}],\"name\":\"initHandle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"initTotalAmountList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isClosePool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"kol\",\"type\":\"address\"}],\"name\":\"kolClaimTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"kolClaimedList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"kolTokenList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"kolTotalAmountList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"kol\",\"type\":\"address\"}],\"name\":\"kolUnClaimAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"kolUserInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"userAdr\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"managerClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"managerClaimList\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct UserVault.ClaimTokenInfo[1]\",\"name\":\"\",\"type\":\"tuple[1]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"managerClaimRecordList\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct UserVault.ClaimTokenInfo[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct UserVault.ClaimRecordInfo[]\",\"name\":\"claimRecordInfos\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"managerClaimedList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolManangerHasClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"recordList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"recordNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"kol\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"poolTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokensAmount\",\"type\":\"uint256[]\"}],\"name\":\"recordTokenInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ownerPercentage\",\"type\":\"uint256\"}],\"name\":\"setAddAdminList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"bools\",\"type\":\"bool\"}],\"name\":\"setBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setCrpFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"managerFee\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"issueFee\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"redeemFee\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"perfermanceFee\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.KolPoolParams\",\"name\":\"_poolParams\",\"type\":\"tuple\"}],\"name\":\"setPoolParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setVaultAdr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userIndexList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userKolList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Desyn Labs\",\"kind\":\"dev\",\"methods\":{\"getController()\":{\"details\":\"external for gas optimization\",\"returns\":{\"_0\":\"address - of the owner (AKA controller)\"}},\"removeOwner(address)\":{\"details\":\"Allows to remove an owner. Transaction has to be sent by wallet.\",\"params\":{\"owner\":\"Address of owner.\"}},\"setAddAdminList(address,uint256)\":{\"details\":\"external for gas optimization\",\"params\":{\"newOwner\":\"- address of new owner\"}},\"setController(address)\":{\"details\":\"external for gas optimization\",\"params\":{\"newOwner\":\"- address of new owner\"}}},\"title\":\"Vault managerFee\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getController()\":{\"notice\":\"Returns the address of the current owner\"},\"setAddAdminList(address,uint256)\":{\"notice\":\"Transfers ownership of the contract to a new account (`newOwner`).         Can only be called by the current owner\"},\"setController(address)\":{\"notice\":\"Transfers ownership of the contract to a new account (`newOwner`).         Can only be called by the current owner\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/deploy/UserVault.sol\":\"UserVault\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"contracts/base/Logs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\ncontract Logs {\\n    event LOG_CALL(bytes4 indexed sig, address indexed caller, bytes data) anonymous;\\n\\n    modifier _logs_() {\\n        emit LOG_CALL(msg.sig, msg.sender, msg.data);\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x942b3c172dd3f0910c3589d703b4f224c94c76a13cc84d7add6318206cff512e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/deploy/UserVault.sol\":{\"content\":\"pragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IDSProxy.sol\\\";\\nimport \\\"../utils/DesynOwnable.sol\\\";\\nimport \\\"../libraries/SmartPoolManager.sol\\\";\\nimport \\\"../libraries/EnumerableSet.sol\\\";\\nimport \\\"../libraries/SafeMath.sol\\\";\\nimport \\\"../libraries/Address.sol\\\";\\nimport \\\"../libraries/SafeERC20.sol\\\";\\nimport \\\"../base/Logs.sol\\\";\\n\\ninterface ICRPPool {\\n    function getController() external view returns (address);\\n\\n    enum Etypes {\\n        OPENED,\\n        CLOSED\\n    }\\n\\n    function etype() external view returns (Etypes);\\n\\n    function isCompletedCollect() external view returns (bool);\\n}\\n\\ninterface ICRPFactory {\\n    function isCrp(address addr) external view returns (bool);\\n}\\n\\n/**\\n * @author Desyn Labs\\n * @title Vault managerFee\\n */\\ncontract UserVault is DesynOwnable, Logs {\\n    using SafeMath for uint;\\n    using Address for address;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using SafeERC20 for IERC20;\\n\\n    ICRPFactory crpFactory;\\n    address public vaultAddress;\\n\\n    event LogVaultAdr(address indexed manager, address indexed caller);\\n\\n    struct ClaimTokenInfo {\\n        address token;\\n        uint decimals;\\n        uint amount;\\n    }\\n\\n    struct ClaimRecordInfo {\\n        uint time;\\n        ClaimTokenInfo[] tokens;\\n    }\\n\\n    // pool of tokens\\n    struct PoolTokens {\\n        address[] tokenList;\\n        address[] issueTokens;\\n        address[] redeemTokens;\\n        address[] perfermanceTokens;\\n        uint[] managerAmount;\\n        uint[] issueAmount;\\n        uint[] redeemAmount;\\n        uint[] perfermanceAmount;\\n    }\\n\\n    struct PoolStatus {\\n        bool couldManagerClaim;\\n        bool isBlackList;\\n        bool isSetParams;\\n        SmartPoolManager.KolPoolParams kolPoolConfig;\\n    }\\n\\n    // kol list\\n    struct KolUserInfo {\\n        address userAdr;\\n        uint[] userAmount;\\n    }\\n\\n    //pool=>manager\\n    mapping(address => address) public poolManager;\\n\\n    // pool tokens\\n    mapping(address => PoolTokens) poolsTokens;\\n    mapping(address => PoolStatus) poolsStatus;\\n\\n    //history record\\n    mapping(address => uint) public recordNumber;\\n    mapping(address => mapping(uint => ClaimRecordInfo)) public recordList;\\n\\n    //pool => tokenList\\n    mapping(address => address[]) public kolTokenList;\\n\\n    //pool => initTotalAmount[]\\n    mapping(address => uint) public initTotalAmountList;\\n    //pool => manager => uint\\n    mapping(address => mapping(address => uint)) public managerClaimedList;\\n    mapping(address => uint) public poolManangerHasClaimed;\\n\\n    //pool => kol[]\\n    mapping(address => EnumerableSet.AddressSet) kolsList;\\n    //pool => kol =>uint\\n    mapping(address => mapping(address => uint)) public kolClaimedList;\\n    //pool => kol => totalAmount[]\\n    mapping(address => mapping(address => uint[])) public kolTotalAmountList;\\n    // pool => kol => KolUserInfo[]\\n    mapping(address => mapping(address => KolUserInfo[])) public kolUserInfo;\\n\\n    //pool => user => index\\n    mapping(address => mapping(address => uint)) public userIndexList;\\n    // pool => user => kol\\n    mapping(address => mapping(address => address)) public userKolList;\\n\\n    uint public RATIO_TOTAL = 100;\\n\\n    receive() external payable {}\\n\\n    function depositToken(\\n        address pool,\\n        uint types,\\n        address[] calldata poolTokens,\\n        uint[] calldata tokensAmount\\n    ) external onlyVault {\\n        require(poolTokens.length == tokensAmount.length, \\\"ERR_TOKEN_LENGTH_NOT_MATCH\\\");\\n        if (poolManager[pool] == address(0)) {\\n            poolManager[pool] = ICRPPool(pool).getController();\\n        }\\n        (address[] memory _poolTokenList, uint[] memory _poolTokenAmount) = createTokenParams(pool, types);\\n        (address[] memory newPoolTokenList, uint[] memory newPoolTokenAmount) = communaldepositToken(poolTokens, tokensAmount, pool, _poolTokenList, _poolTokenAmount);\\n        setResult(pool, types, newPoolTokenList, newPoolTokenAmount);\\n        poolsStatus[pool].couldManagerClaim = true;\\n    }\\n\\n    function claimKolReward(address pool) external {\\n        if (this.isClosePool(pool)) {\\n            require(crpFactory.isCrp(pool), \\\"ERR_INVALID_POOL_ADDRESS\\\");\\n            require(ICRPPool(pool).isCompletedCollect(), \\\"ERR_NOT_COMPLETED_COLLECT\\\");\\n            uint totalAmount = this.kolUnClaimAmount(pool, msg.sender);\\n            require(totalAmount > 0, \\\"ERR_HAS_NO_REWARD\\\");\\n\\n            kolClaimedList[pool][msg.sender] += totalAmount;\\n            if (address(msg.sender).isContract()) {\\n                IERC20(kolTokenList[pool][0]).safeTransfer(IDSProxy(msg.sender).owner(), totalAmount);\\n            } else {\\n                IERC20(kolTokenList[pool][0]).safeTransfer(msg.sender, totalAmount);\\n            }\\n        }\\n    }\\n\\n    // for all manager\\n    function managerClaim(address pool) external {\\n        if (this.isClosePool(pool)) {\\n            require(crpFactory.isCrp(pool), \\\"ERR_INVALID_POOL_ADDRESS\\\");\\n            require(ICRPPool(pool).isCompletedCollect(), \\\"ERR_NOT_COMPLETED_COLLECT\\\");\\n            require(DesynOwnable(pool).adminList(msg.sender) || DesynOwnable(pool).getController() == msg.sender, \\\"Not Owner\\\");\\n            uint totalAmount = this.getUnManagerReward(pool); // for all manager unclaim\\n            require(totalAmount > 0, \\\"ERR_HAS_NO_REWARD\\\");\\n            poolsStatus[pool].couldManagerClaim = false;\\n\\n            poolManangerHasClaimed[pool] += totalAmount; // for all manager\\n            \\n            uint newIndex = recordNumber[pool].add(1);\\n            address issueToken = kolTokenList[pool][0];\\n\\n            ClaimTokenInfo memory recordToken;\\n            recordToken.decimals = IERC20(issueToken).decimals();\\n            recordToken.token = issueToken;\\n            recordToken.amount = totalAmount;\\n            \\n            _transferHandle(pool, msg.sender, issueToken, totalAmount);\\n            // record manager claim history\\n            recordNumber[pool] = newIndex;\\n            recordList[pool][newIndex].time = block.timestamp;\\n            recordList[pool][newIndex].tokens.push(recordToken);\\n        }\\n    }\\n\\n    function _transferHandle(\\n        address pool,\\n        address manager_address,\\n        address t,\\n        uint balance\\n    ) internal {\\n        address[] memory managerAddressList = DesynOwnable(pool).getOwners();\\n        uint[] memory ownerPercentage = DesynOwnable(pool).getOwnerPercentage();\\n        uint allOwnerPercentage = DesynOwnable(pool).allOwnerPercentage();\\n\\n        for (uint k = 0; k < managerAddressList.length; k++) {\\n            uint distributed = balance.mul(ownerPercentage[k]).div(allOwnerPercentage);\\n            managerClaimedList[pool][manager_address] += distributed;\\n\\n            address reciver = address(managerAddressList[k]).isContract()? IDSProxy(managerAddressList[k]).owner(): managerAddressList[k];\\n            IERC20(t).safeTransfer(reciver, distributed);\\n        }\\n    }\\n\\n    function managerClaimRecordList(address pool) external view returns (ClaimRecordInfo[] memory claimRecordInfos) {\\n        uint num = recordNumber[pool];\\n        ClaimRecordInfo[] memory records = new ClaimRecordInfo[](num);\\n        for (uint i = 1; i < num + 1; i++) {\\n            ClaimRecordInfo memory record;\\n            record = recordList[pool][i];\\n            records[i.sub(1)] = record;\\n        }\\n        return records;\\n    }\\n\\n    // for all manager\\n    function getManagerReward(address pool) external view returns (uint) {\\n        return this.getPoolAllFee(pool).sub(this.getAllKolReward(pool));\\n    }\\n    // for all manager\\n    function getUnManagerReward(address pool) external view returns (uint) {\\n        return this.getManagerReward(pool).sub(poolManangerHasClaimed[pool]);\\n    }\\n    // for all manager\\n    function managerClaimList(address pool) external view returns (ClaimTokenInfo[1] memory) {\\n        ClaimTokenInfo memory token;\\n        address issueToken = kolTokenList[pool][0];\\n\\n        token.token = issueToken;\\n        token.amount = this.getUnManagerReward(pool);\\n        token.decimals = IERC20(issueToken).decimals();\\n        ClaimTokenInfo[1] memory tokens = [token]; // for front-end call same as vault\\n        return tokens;\\n    }\\n\\n    // for the manager\\n    function getManagerReward(address pool, address maragerAdr) external view returns (uint) {\\n        uint totalAmount = this.getManagerReward(pool);\\n        address[] memory managerAddressList = DesynOwnable(pool).getOwners();\\n        uint[] memory ownerPercentage = DesynOwnable(pool).getOwnerPercentage();\\n        uint allOwnerPercentage = DesynOwnable(pool).allOwnerPercentage();\\n        for (uint k = 0; k < managerAddressList.length; k++) {\\n            if (maragerAdr == managerAddressList[k]) {\\n                return totalAmount.mul(ownerPercentage[k]).div(allOwnerPercentage);\\n            }\\n        }\\n    }\\n    // for the manager\\n    function getUnManagerReward(address pool, address maragerAdr) external view returns (uint) {\\n        return this.getManagerReward(pool, maragerAdr).sub(managerClaimedList[pool][maragerAdr]);\\n    }\\n\\n    function getPoolAllFee(address pool) external view returns (uint totalAmount) {\\n        PoolTokens memory tokens = poolsTokens[pool];\\n        totalAmount += tokens.managerAmount.length > 0 ? tokens.managerAmount[0] : 0;\\n        totalAmount += tokens.issueAmount.length > 0 ? tokens.issueAmount[0] : 0;\\n        totalAmount += tokens.redeemAmount.length > 0 ? tokens.redeemAmount[0] : 0;\\n        totalAmount += tokens.perfermanceAmount.length > 0 ? tokens.perfermanceAmount[0] : 0;\\n    }\\n\\n    function getAllKolReward(address pool) external view returns (uint totalAmount) {\\n        EnumerableSet.AddressSet storage list = kolsList[pool];\\n        uint len = list.length();\\n        for (uint i = 0; i < len; i++) {\\n            totalAmount += this.kolClaimTotal(pool, list.at(i));\\n        }\\n    }\\n\\n    function kolUnClaimAmount(address pool, address kol) external view returns (uint) {\\n        uint totalClaim = this.kolClaimTotal(pool, kol);\\n        uint totalClaimed = kolClaimedList[pool][kol];\\n        return totalClaim.sub(totalClaimed);\\n    }\\n\\n    function kolClaimTotal(address pool, address kol) external view returns (uint) {\\n        uint totalFee;\\n        if (kolTotalAmountList[pool][kol].length == 0) return totalFee;\\n        totalFee = totalFee.add(this._computeReward(pool, kol, 0));\\n        totalFee = totalFee.add(this._computeReward(pool, kol, 1));\\n        totalFee = totalFee.add(this._computeReward(pool, kol, 2));\\n        totalFee = totalFee.add(this._computeReward(pool, kol, 3));\\n        totalFee = totalFee.mul(kolTotalAmountList[pool][kol][0]).div(initTotalAmountList[pool]);\\n        return totalFee;\\n    }\\n\\n    function _computeReward(\\n        address pool,\\n        address kol,\\n        uint types\\n    ) external view returns (uint) {\\n        uint kolTotalAmount = kolTotalAmountList[pool][kol].length > 0 ? kolTotalAmountList[pool][kol][0] : 0;\\n        SmartPoolManager.KolPoolParams memory params = poolsStatus[pool].kolPoolConfig;\\n        uint totalFee;\\n\\n        PoolTokens memory tokens = poolsTokens[pool];\\n\\n        if(kolTotalAmount == 0){\\n            return 0;\\n        }\\n\\n        if (types == 0 && tokens.managerAmount.length > 0) {\\n            totalFee = tokens.managerAmount[0].mul(levelJudge(kolTotalAmount, params.managerFee)).div(RATIO_TOTAL);\\n        }  \\n        if (types == 1 && tokens.issueAmount.length > 0) {\\n            totalFee = tokens.issueAmount[0].mul(levelJudge(kolTotalAmount, params.issueFee)).div(RATIO_TOTAL);\\n        } \\n        if (types == 2 && tokens.redeemAmount.length > 0) {\\n            totalFee = tokens.redeemAmount[0].mul(levelJudge(kolTotalAmount, params.redeemFee)).div(RATIO_TOTAL);\\n        }  \\n        if (types == 3 && tokens.perfermanceAmount.length > 0) {\\n            totalFee = tokens.perfermanceAmount[0].mul(levelJudge(kolTotalAmount, params.perfermanceFee)).div(RATIO_TOTAL);\\n        }\\n        return totalFee;\\n    }\\n\\n    function levelJudge(uint amount, SmartPoolManager.feeParams memory _feeParams) internal view returns (uint) {\\n        if (_feeParams.firstLevel.level <= amount && amount < _feeParams.secondLevel.level) {\\n            return _feeParams.firstLevel.ratio;\\n        }\\n        if (_feeParams.secondLevel.level <= amount && amount < _feeParams.thirdLevel.level) {\\n            return _feeParams.secondLevel.ratio;\\n        }            \\n        if (_feeParams.thirdLevel.level <= amount && amount < _feeParams.fourLevel.level) {\\n            return _feeParams.thirdLevel.ratio;\\n        }\\n        if (_feeParams.fourLevel.level <= amount) {\\n            return _feeParams.fourLevel.ratio;\\n        }\\n        return 0;\\n    }\\n\\n    function setResult(\\n        address pool,\\n        uint types,\\n        address[] memory newPoolTokenList,\\n        uint[] memory newPoolTokenAmount\\n    ) internal {\\n        PoolTokens storage tokens = poolsTokens[pool];\\n        if (types == 0) {\\n            tokens.tokenList = newPoolTokenList;\\n            tokens.managerAmount = newPoolTokenAmount;\\n        }  \\n        if (types == 1) {\\n            tokens.issueTokens = newPoolTokenList;\\n            tokens.issueAmount = newPoolTokenAmount;\\n        }  \\n        if (types == 2) {\\n            tokens.redeemTokens = newPoolTokenList;\\n            tokens.redeemAmount = newPoolTokenAmount;\\n        }  \\n        if (types == 3) {\\n            tokens.perfermanceTokens = newPoolTokenList;\\n            tokens.perfermanceAmount = newPoolTokenAmount;\\n        }\\n    }\\n\\n    function createTokenParams(address pool, uint types) internal view returns (address[] memory _poolTokenList, uint[] memory _poolTokenAmount) {\\n        PoolTokens memory tokens = poolsTokens[pool];\\n        if (types == 0) {\\n            _poolTokenList = tokens.tokenList;\\n            _poolTokenAmount = tokens.managerAmount;\\n        }\\n        if (types == 1) {\\n            _poolTokenList = tokens.issueTokens;\\n            _poolTokenAmount = tokens.issueAmount;\\n        }\\n        if (types == 2) {\\n            _poolTokenList = tokens.redeemTokens;\\n            _poolTokenAmount = tokens.redeemAmount;\\n        }\\n        if (types == 3) {\\n            _poolTokenList = tokens.perfermanceTokens;\\n            _poolTokenAmount = tokens.perfermanceAmount;\\n        }\\n    }\\n\\n    function communaldepositToken(\\n        address[] calldata poolTokens,\\n        uint[] calldata tokensAmount,\\n        address poolAdr,\\n        address[] memory _poolTokenList,\\n        uint[] memory _poolTokenAmount\\n    ) internal view returns (address[] memory newPoolTokenList, uint[] memory newPoolTokenAmount) {\\n        uint len = poolTokens.length;\\n        //old\\n        //new\\n        newPoolTokenList = new address[](len);\\n        newPoolTokenAmount = new uint[](len);\\n        \\n        if (_poolTokenAmount.length == 0  && _poolTokenList.length == 0) {\\n            for (uint i = 0; i < len; i++) {\\n                // uint tokenBalance = tokensAmount[i];\\n                newPoolTokenList[i] = poolTokens[i];\\n                newPoolTokenAmount[i] = tokensAmount[i];\\n            }\\n        } else {\\n            for (uint k = 0; k < len; k++) {\\n                if (_poolTokenList[k] == poolTokens[k]) {\\n                    uint tokenBalance = tokensAmount[k];\\n                    newPoolTokenList[k] = poolTokens[k];\\n                    newPoolTokenAmount[k] = _poolTokenAmount[k].add(tokenBalance);\\n                }\\n            }\\n        }\\n        return (newPoolTokenList, newPoolTokenAmount);\\n    }\\n\\n    function recordTokenInfo(\\n        address kol,\\n        address user,\\n        address[] calldata poolTokens,\\n        uint[] calldata tokensAmount\\n    ) external {\\n        address pool = msg.sender;\\n        uint len = poolTokens.length;\\n        require(len == tokensAmount.length, \\\"ERR_TOKEN_LENGTH_NOT_MATCH\\\");\\n        require(crpFactory.isCrp(pool), \\\"ERR_INVALID_POOL_ADDRESS\\\");\\n        if (kolTokenList[pool].length == 0) {\\n            kolTokenList[pool] = poolTokens;\\n        }\\n        address newKol = userKolList[pool][user];\\n        if (userKolList[pool][user] == address(0)) {\\n            userKolList[pool][user] = kol;\\n            if (!kolsList[pool].contains(kol)) {\\n                kolsList[pool].addValue(kol);\\n            }\\n            newKol = kol;\\n        }\\n        require(newKol != address(0), \\\"ERR_INVALID_KOL_ADDRESS\\\");\\n        //total amount record\\n        initTotalAmountList[pool] = initTotalAmountList[pool].add(tokensAmount[0]);\\n        uint[] memory totalAmounts = new uint[](len);\\n        for (uint i = 0; i < len; i++) {\\n            if (kolTotalAmountList[pool][newKol].length == 0) {\\n                totalAmounts[i] = tokensAmount[i];\\n            } else {\\n                totalAmounts[i] = tokensAmount[i].add(kolTotalAmountList[pool][newKol][i]);\\n            }\\n        }\\n        kolTotalAmountList[pool][newKol] = totalAmounts;\\n        //kol user info record\\n        KolUserInfo[] storage userInfoArray = kolUserInfo[pool][newKol];\\n        uint index = userIndexList[pool][user];\\n        if (index == 0) {\\n            KolUserInfo memory userInfo;\\n            userInfo.userAdr = user;\\n            userInfo.userAmount = tokensAmount;\\n            userInfoArray.push(userInfo);\\n            userIndexList[pool][user] = userInfoArray.length;\\n        } else {\\n            KolUserInfo storage userInfo = kolUserInfo[pool][newKol][index - 1];\\n            for (uint a = 0; a < userInfo.userAmount.length; a++) {\\n                userInfo.userAmount[a] = userInfo.userAmount[a].add(tokensAmount[a]);\\n            }\\n        }\\n    }\\n\\n    function setPoolParams(address pool, SmartPoolManager.KolPoolParams memory _poolParams) external onlyCrpFactory {\\n        PoolStatus storage status = poolsStatus[pool];\\n        require(crpFactory.isCrp(pool), \\\"ERR_INVALID_POOL_ADDRESS\\\");\\n        require(!status.isSetParams, \\\"ERR_HAS_SETED\\\");\\n\\n        status.isSetParams = true;\\n        status.kolPoolConfig = _poolParams;\\n    }\\n\\n    function isClosePool(address pool) external view returns (bool) {\\n        return ICRPPool(pool).etype() == ICRPPool.Etypes.CLOSED;\\n    }\\n\\n    function getKolsAdr(address pool) external view returns (address[] memory) {\\n        return kolsList[pool].values();\\n    }\\n\\n    function getKolTokenList(address pool) external view returns (address[] memory tokenList) {\\n        return kolTokenList[pool];\\n    }\\n\\n    // function getPoolUserKolAdr(address pool, address user) external view returns (address tokenAddress) {\\n    //     return userKolList[pool][user];\\n    // }\\n\\n    function getPoolKolUserInfo(address pool, address kol) external view returns (KolUserInfo[] memory info) {\\n        return kolUserInfo[pool][kol];\\n    }\\n\\n    function getPoolKolTotalAmounts(address pool, address kol) external view returns (uint[] memory) {\\n        return kolTotalAmountList[pool][kol];\\n    }\\n\\n    function getPoolTokenInfo(address pool) external view returns (PoolTokens memory) {\\n        return poolsTokens[pool];\\n    }\\n\\n    function getManagerClaimBool(address pool) external view returns (bool bools) {\\n        bools = poolsStatus[pool].couldManagerClaim;\\n    }\\n\\n    function setBlackList(address pool, bool bools) external onlyOwner _logs_ {\\n        poolsStatus[pool].isBlackList = bools;\\n    }\\n\\n    function setCrpFactory(address adr) external onlyOwner _logs_ {\\n        crpFactory = ICRPFactory(adr);\\n    }\\n\\n    function adminClaimToken(\\n        address token,\\n        address user,\\n        uint amount\\n    ) external onlyOwner {\\n        IERC20(token).safeTransfer(user, amount);\\n    }\\n\\n    function getBNB() external payable onlyOwner {\\n        msg.sender.transfer(address(this).balance);\\n    }\\n\\n    function setVaultAdr(address adr) external onlyOwner {\\n        vaultAddress = adr;\\n        emit LogVaultAdr(adr, msg.sender);\\n    }\\n\\n    modifier onlyCrpFactory() {\\n        require(address(crpFactory) == msg.sender, \\\"ERR_NOT_CRP_FACTORY\\\");\\n        _;\\n    }\\n\\n    modifier onlyVault() {\\n        require(vaultAddress == msg.sender, \\\"ERR_NOT_CONTROLLER\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x30458e0517a7b6ab00f10afd5181daff8f57b8d2783fdb8bf75e38503e6a9815\"},\"contracts/interfaces/IBFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\nimport \\\"../libraries/SmartPoolManager.sol\\\";\\n\\ninterface IBPool {\\n    function rebind(\\n        address token,\\n        uint balance,\\n        uint denorm\\n    ) external;\\n\\n    function rebindSmart(\\n        address tokenA,\\n        address tokenB,\\n        uint deltaWeight,\\n        uint deltaBalance,\\n        bool isSoldout,\\n        uint minAmountOut\\n    ) external;\\n\\n    function execute(\\n        address _target,\\n        uint _value,\\n        bytes calldata _data\\n    ) external returns (bytes memory _returnValue);\\n\\n    function bind(\\n        address token,\\n        uint balance,\\n        uint denorm\\n    ) external;\\n\\n    function unbind(address token) external;\\n\\n    function unbindPure(address token) external;\\n\\n    function isBound(address token) external view returns (bool);\\n\\n    function getBalance(address token) external view returns (uint);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function getSwapFee() external view returns (uint);\\n\\n    function isPublicSwap() external view returns (bool);\\n\\n    function getDenormalizedWeight(address token) external view returns (uint);\\n\\n    function getTotalDenormalizedWeight() external view returns (uint);\\n\\n    function EXIT_FEE() external view returns (uint);\\n\\n    function getCurrentTokens() external view returns (address[] memory tokens);\\n\\n    function setController(address owner) external;\\n}\\n\\ninterface IBFactory {\\n    function newLiquidityPool() external returns (IBPool);\\n\\n    function setBLabs(address b) external;\\n\\n    function collect(IBPool pool) external;\\n\\n    function isBPool(address b) external view returns (bool);\\n\\n    function getBLabs() external view returns (address);\\n\\n    function getSwapRouter() external view returns (address);\\n\\n    function getVault() external view returns (address);\\n\\n    function getUserVault() external view returns (address);\\n\\n    function getVaultAddress() external view returns (address);\\n\\n    function getOracleAddress() external view returns (address);\\n\\n    function getManagerOwner() external view returns (address);\\n\\n    function isTokenWhitelistedForVerify(uint sort, address token) external view returns (bool);\\n\\n    function isTokenWhitelistedForVerify(address token) external view returns (bool);\\n\\n    function getModuleStatus(address etf, address module) external view returns (bool);\\n\\n    function isPaused() external view returns (bool);\\n}\\n\\ninterface IVault {\\n    function depositManagerToken(address[] calldata poolTokens, uint[] calldata tokensAmount) external;\\n\\n    function depositIssueRedeemPToken(\\n        address[] calldata poolTokens,\\n        uint[] calldata tokensAmount,\\n        uint[] calldata tokensAmountP,\\n        bool isPerfermance\\n    ) external;\\n\\n    function managerClaim(address pool) external;\\n\\n    function getManagerClaimBool(address pool) external view returns (bool);\\n}\\n\\ninterface IUserVault {\\n    function recordTokenInfo(\\n        address kol,\\n        address user,\\n        address[] calldata poolTokens,\\n        uint[] calldata tokensAmount\\n    ) external;\\n}\\n\\ninterface Oracles {\\n    function getPrice(address tokenAddress) external returns (uint price);\\n\\n    function getAllPrice(address[] calldata poolTokens, uint[] calldata tokensAmount) external returns (uint);\\n}\",\"keccak256\":\"0xc2cc32bdf691ceddab7a647a98bd481adcf9ae8393d8663a916bf032ef0dbbc6\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IConfigurableRightsPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Interface declarations\\n\\n// Introduce to avoid circularity (otherwise, the CRP and SmartPoolManager include each other)\\n// Removing circularity allows flattener tools to work, which enables Etherscan verification\\ninterface IConfigurableRightsPool {\\n    function mintPoolShareFromLib(uint amount) external;\\n\\n    function pushPoolShareFromLib(address to, uint amount) external;\\n\\n    function pullPoolShareFromLib(address from, uint amount) external;\\n\\n    function burnPoolShareFromLib(uint amount) external;\\n\\n    function balanceOf(address account) external view returns (uint);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function getController() external view returns (address);\\n\\n    function vaultAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0x1326889b57f63cc031e7c9e383b0fd3b172a9b86eb623cf0faba32c0768c4ec4\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IDSProxy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\ninterface IDSProxy {\\n    function owner() external view returns(address);\\n}\",\"keccak256\":\"0xe330359819e40d60365ba92005c9b8b1eccdf18ae583352a0cff0a2a4cf7ff14\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Interface declarations\\n\\n/* solhint-disable func-order */\\n\\ninterface IERC20 {\\n    // Emitted when the allowance of a spender for an owner is set by a call to approve.\\n    // Value is the new allowance\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n\\n    // Emitted when value tokens are moved from one account (from) to another (to).\\n    // Note that value may be zero\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    // Returns the amount of tokens in existence\\n    function totalSupply() external view returns (uint);\\n\\n    // Returns the amount of tokens owned by account\\n    function balanceOf(address account) external view returns (uint);\\n\\n    // Returns the decimals of tokens\\n    function decimals() external view returns (uint8);\\n\\n    function symbol() external view returns (string memory);\\n\\n    // Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner\\n    // through transferFrom. This is zero by default\\n    // This value changes when approve or transferFrom are called\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    // Sets amount as the allowance of spender over the caller\\u2019s tokens\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits an Approval event.\\n    function approve(address spender, uint amount) external returns (bool);\\n\\n    // Moves amount tokens from the caller\\u2019s account to recipient\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits a Transfer event.\\n    function transfer(address recipient, uint amount) external returns (bool);\\n\\n    // Moves amount tokens from sender to recipient using the allowance mechanism\\n    // Amount is then deducted from the caller\\u2019s allowance\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits a Transfer event\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xfe22b6d6029b400b9cce7f9b39c546f99cd6922b2fd926e480e2b4d476ab26f8\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            codehash := extcodehash(account)\\n        }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint weiValue,\\n        string memory errorMessage\\n    ) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2f31de87a6037a6a1ab4cefb32f22352df92b082dde0c182801bf421bacc303c\",\"license\":\"agpl-3.0\"},\"contracts/libraries/DesynConstants.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n/**\\n * @author Desyn Labs\\n * @title Put all the constants in one place\\n */\\n\\nlibrary DesynConstants {\\n    // State variables (must be constant in a library)\\n\\n    // B \\\"ONE\\\" - all math is in the \\\"realm\\\" of 10 ** 18;\\n    // where numeric 1 = 10 ** 18\\n    uint public constant BONE = 10**18;\\n    uint public constant MIN_WEIGHT = BONE;\\n    uint public constant MAX_WEIGHT = BONE * 50;\\n    uint public constant MAX_TOTAL_WEIGHT = BONE * 50;\\n    uint public constant MIN_BALANCE = 0;\\n    uint public constant MAX_BALANCE = BONE * 10**12;\\n    uint public constant MIN_POOL_SUPPLY = BONE * 100;\\n    uint public constant MAX_POOL_SUPPLY = BONE * 10**9;\\n    uint public constant MIN_FEE = BONE / 10**6;\\n    uint public constant MAX_FEE = BONE / 10;\\n    //Fee Set\\n    uint public constant MANAGER_MIN_FEE = 0;\\n    uint public constant MANAGER_MAX_FEE = BONE / 10;\\n    uint public constant ISSUE_MIN_FEE = BONE / 1000;\\n    uint public constant ISSUE_MAX_FEE = BONE / 10;\\n    uint public constant REDEEM_MIN_FEE = 0;\\n    uint public constant REDEEM_MAX_FEE = BONE / 10;\\n    uint public constant PERFERMANCE_MIN_FEE = 0;\\n    uint public constant PERFERMANCE_MAX_FEE = BONE / 2;\\n    // EXIT_FEE must always be zero, or ConfigurableRightsPool._pushUnderlying will fail\\n    uint public constant EXIT_FEE = 0;\\n    uint public constant MAX_IN_RATIO = BONE / 2;\\n    uint public constant MAX_OUT_RATIO = (BONE / 3) + 1 wei;\\n    // Must match BConst.MIN_BOUND_TOKENS and BConst.MAX_BOUND_TOKENS\\n    uint public constant MIN_ASSET_LIMIT = 1;\\n    uint public constant MAX_ASSET_LIMIT = 16;\\n    uint public constant MAX_UINT = uint(-1);\\n    uint public constant MAX_COLLECT_PERIOD = 60 days;\\n}\\n\",\"keccak256\":\"0xbc396253a5541cd3cc080ca207dfdd2d2bdf963de26e005db36bd752524c1d66\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/DesynSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Imports\\n\\nimport \\\"./DesynConstants.sol\\\";\\n\\n/**\\n * @author Desyn Labs\\n * @title SafeMath - wrap Solidity operators to prevent underflow/overflow\\n * @dev badd and bsub are basically identical to OpenZeppelin SafeMath; mul/div have extra checks\\n */\\nlibrary DesynSafeMath {\\n    /**\\n     * @notice Safe addition\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev if we are adding b to a, the resulting sum must be greater than a\\n     * @return - sum of operands; throws if overflow\\n     */\\n    function badd(uint a, uint b) internal pure returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, \\\"ERR_ADD_OVERFLOW\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned subtraction\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Do a signed subtraction, and check that it produces a positive value\\n     *      (i.e., a - b is valid if b <= a)\\n     * @return - a - b; throws if underflow\\n     */\\n    function bsub(uint a, uint b) internal pure returns (uint) {\\n        (uint c, bool negativeResult) = bsubSign(a, b);\\n        require(!negativeResult, \\\"ERR_SUB_UNDERFLOW\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Safe signed subtraction\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Do a signed subtraction\\n     * @return - difference between a and b, and a flag indicating a negative result\\n     *           (i.e., a - b if a is greater than or equal to b; otherwise b - a)\\n     */\\n    function bsubSign(uint a, uint b) internal pure returns (uint, bool) {\\n        if (b <= a) {\\n            return (a - b, false);\\n        } else {\\n            return (b - a, true);\\n        }\\n    }\\n\\n    /**\\n     * @notice Safe multiplication\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Multiply safely (and efficiently), rounding down\\n     * @return - product of operands; throws if overflow or rounding error\\n     */\\n    function bmul(uint a, uint b) internal pure returns (uint) {\\n        // Gas optimization (see github.com/OpenZeppelin/openzeppelin-contracts/pull/522)\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // Standard overflow check: a/a*b=b\\n        uint c0 = a * b;\\n        require(c0 / a == b, \\\"ERR_MUL_OVERFLOW\\\");\\n\\n        // Round to 0 if x*y < BONE/2?\\n        uint c1 = c0 + (DesynConstants.BONE / 2);\\n        require(c1 >= c0, \\\"ERR_MUL_OVERFLOW\\\");\\n        uint c2 = c1 / DesynConstants.BONE;\\n        return c2;\\n    }\\n\\n    /**\\n     * @notice Safe division\\n     * @param dividend - first operand\\n     * @param divisor - second operand\\n     * @dev Divide safely (and efficiently), rounding down\\n     * @return - quotient; throws if overflow or rounding error\\n     */\\n    function bdiv(uint dividend, uint divisor) internal pure returns (uint) {\\n        require(divisor != 0, \\\"ERR_DIV_ZERO\\\");\\n\\n        // Gas optimization\\n        if (dividend == 0) {\\n            return 0;\\n        }\\n\\n        uint c0 = dividend * DesynConstants.BONE;\\n        require(c0 / dividend == DesynConstants.BONE, \\\"ERR_DIV_INTERNAL\\\"); // bmul overflow\\n\\n        uint c1 = c0 + (divisor / 2);\\n        require(c1 >= c0, \\\"ERR_DIV_INTERNAL\\\"); //  badd require\\n\\n        uint c2 = c1 / divisor;\\n        return c2;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer modulo\\n     * @dev Returns the remainder of dividing two unsigned integers.\\n     *      Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * @param dividend - first operand\\n     * @param divisor - second operand -- cannot be zero\\n     * @return - quotient; throws if overflow or rounding error\\n     */\\n    function bmod(uint dividend, uint divisor) internal pure returns (uint) {\\n        require(divisor != 0, \\\"ERR_MODULO_BY_ZERO\\\");\\n\\n        return dividend % divisor;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer max\\n     * @dev Returns the greater of the two input values\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the maximum of a and b\\n     */\\n    function bmax(uint a, uint b) internal pure returns (uint) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer min\\n     * @dev returns b, if b < a; otherwise returns a\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the lesser of the two input values\\n     */\\n    function bmin(uint a, uint b) internal pure returns (uint) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer average\\n     * @dev Guard against (a+b) overflow by dividing each operand separately\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the average of the two values\\n     */\\n    function baverage(uint a, uint b) internal pure returns (uint) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\\n    }\\n\\n    /**\\n     * @notice Babylonian square root implementation\\n     * @dev (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n     * @param y - operand\\n     * @return z - the square root result\\n     */\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9baf30b98a5f3a8c13ac9c4d5d4b176eabfd936aba8f5172c95b7c568fba68f3\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/EnumerableSet.sol\":{\"content\":\"pragma solidity 0.6.12;\\n\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint toDeleteIndex = valueIndex - 1;\\n            uint lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function addValue(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint index) internal view returns (address) {\\n        return address(uint160(uint(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\",\"keccak256\":\"0x266663c9f7ac75da579023b7da19f37ee20a4cb869f2a5fcb848b6cf16a99903\"},\"contracts/libraries/SafeApprove.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Imports\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n// Libraries\\n\\n/**\\n * @author PieDAO (ported to Desyn Labs)\\n * @title SafeApprove - set approval for tokens that require 0 prior approval\\n * @dev Perhaps to address the known ERC20 race condition issue\\n *      See https://github.com/crytic/not-so-smart-contracts/tree/master/race_condition\\n *      Some tokens - notably KNC - only allow approvals to be increased from 0\\n */\\nlibrary SafeApprove {\\n    /**\\n     * @notice handle approvals of tokens that require approving from a base of 0\\n     * @param token - the token we're approving\\n     * @param spender - entity the owner (sender) is approving to spend his tokens\\n     * @param amount - number of tokens being approved\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint amount\\n    ) internal returns (bool) {\\n        uint currentAllowance = token.allowance(address(this), spender);\\n\\n        // Do nothing if allowance is already set to this value\\n        if (currentAllowance == amount) {\\n            return true;\\n        }\\n\\n        // If approval is not zero reset it to zero first\\n        if (currentAllowance != 0) {\\n            token.approve(spender, 0);\\n        }\\n\\n        // do the actual approval\\n        return token.approve(spender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xa51ebf770f2676085b89b1636688cc086289cfe27f614dfd0c15142535c26752\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\nimport {SafeMath} from \\\"./SafeMath.sol\\\";\\nimport {Address} from \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint value\\n    ) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint value\\n    ) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint value\\n    ) internal {\\n        require((value == 0) || (token.allowance(address(this), spender) == 0), \\\"SafeERC20: approve from non-zero to non-zero allowance\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdb66e9e24513d153d62e792a46c723eeff7ad7c93215a56aa3a27f1143d95ae9\",\"license\":\"MIT\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint a, uint b) internal pure returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint a, uint b) internal pure returns (uint) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint a,\\n        uint b,\\n        string memory errorMessage\\n    ) internal pure returns (uint) {\\n        require(b <= a, errorMessage);\\n        uint c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint a, uint b) internal pure returns (uint) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint a, uint b) internal pure returns (uint) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint a,\\n        uint b,\\n        string memory errorMessage\\n    ) internal pure returns (uint) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint a, uint b) internal pure returns (uint) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint a,\\n        uint b,\\n        string memory errorMessage\\n    ) internal pure returns (uint) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x7ce3fd7d17047f684821e1a20b4f5989630f6755a377b12c087dfde359f710d6\",\"license\":\"agpl-3.0\"},\"contracts/libraries/SmartPoolManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Needed to pass in structs\\npragma experimental ABIEncoderV2;\\n\\n// Imports\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IConfigurableRightsPool.sol\\\";\\nimport \\\"../interfaces/IBFactory.sol\\\"; // unused\\nimport \\\"./DesynSafeMath.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./SafeApprove.sol\\\";\\n\\n/**\\n * @author Desyn Labs\\n * @title Factor out the weight updates\\n */\\nlibrary SmartPoolManager {\\n    using SafeApprove for IERC20;\\n    using DesynSafeMath for uint;\\n    using SafeMath for uint;\\n\\n    //kol pool params\\n    struct levelParams {\\n        uint level;\\n        uint ratio;\\n    }\\n\\n    struct feeParams {\\n        levelParams firstLevel;\\n        levelParams secondLevel;\\n        levelParams thirdLevel;\\n        levelParams fourLevel;\\n    }\\n    struct KolPoolParams {\\n        feeParams managerFee;\\n        feeParams issueFee;\\n        feeParams redeemFee;\\n        feeParams perfermanceFee;\\n    }\\n\\n    // Type declarations\\n    enum Etypes {\\n        OPENED,\\n        CLOSED\\n    }\\n\\n    enum Period {\\n        HALF,\\n        ONE,\\n        TWO\\n    }\\n\\n    // updateWeight and pokeWeights are unavoidably long\\n    /* solhint-disable function-max-lines */\\n    struct Status {\\n        uint collectPeriod;\\n        uint collectEndTime;\\n        uint closurePeriod;\\n        uint closureEndTime;\\n        uint upperCap;\\n        uint floorCap;\\n        uint managerFee;\\n        uint redeemFee;\\n        uint issueFee;\\n        uint perfermanceFee;\\n        uint startClaimFeeTime;\\n    }\\n\\n    struct PoolParams {\\n        // Desyn Pool Token (representing shares of the pool)\\n        string poolTokenSymbol;\\n        string poolTokenName;\\n        // Tokens inside the Pool\\n        address[] constituentTokens;\\n        uint[] tokenBalances;\\n        uint[] tokenWeights;\\n        uint swapFee;\\n        uint managerFee;\\n        uint redeemFee;\\n        uint issueFee;\\n        uint perfermanceFee;\\n        Etypes etype;\\n    }\\n\\n    struct PoolTokenRange {\\n        uint bspFloor;\\n        uint bspCap;\\n    }\\n\\n    struct Fund {\\n        uint etfAmount;\\n        uint fundAmount;\\n    }\\n\\n    function initRequire(\\n        uint swapFee,\\n        uint managerFee,\\n        uint issueFee,\\n        uint redeemFee,\\n        uint perfermanceFee,\\n        uint tokenBalancesLength,\\n        uint tokenWeightsLength,\\n        uint constituentTokensLength,\\n        bool initBool\\n    ) external pure {\\n        // We don't have a pool yet; check now or it will fail later (in order of likelihood to fail)\\n        // (and be unrecoverable if they don't have permission set to change it)\\n        // Most likely to fail, so check first\\n        require(!initBool, \\\"Init fail\\\");\\n        require(swapFee >= DesynConstants.MIN_FEE, \\\"ERR_INVALID_SWAP_FEE\\\");\\n        require(swapFee <= DesynConstants.MAX_FEE, \\\"ERR_INVALID_SWAP_FEE\\\");\\n        require(managerFee >= DesynConstants.MANAGER_MIN_FEE, \\\"ERR_INVALID_MANAGER_FEE\\\");\\n        require(managerFee <= DesynConstants.MANAGER_MAX_FEE, \\\"ERR_INVALID_MANAGER_FEE\\\");\\n        require(issueFee >= DesynConstants.ISSUE_MIN_FEE, \\\"ERR_INVALID_ISSUE_MIN_FEE\\\");\\n        require(issueFee <= DesynConstants.ISSUE_MAX_FEE, \\\"ERR_INVALID_ISSUE_MAX_FEE\\\");\\n        require(redeemFee >= DesynConstants.REDEEM_MIN_FEE, \\\"ERR_INVALID_REDEEM_MIN_FEE\\\");\\n        require(redeemFee <= DesynConstants.REDEEM_MAX_FEE, \\\"ERR_INVALID_REDEEM_MAX_FEE\\\");\\n        require(perfermanceFee >= DesynConstants.PERFERMANCE_MIN_FEE, \\\"ERR_INVALID_PERFERMANCE_MIN_FEE\\\");\\n        require(perfermanceFee <= DesynConstants.PERFERMANCE_MAX_FEE, \\\"ERR_INVALID_PERFERMANCE_MAX_FEE\\\");\\n\\n        // Arrays must be parallel\\n        require(tokenBalancesLength == constituentTokensLength, \\\"ERR_START_BALANCES_MISMATCH\\\");\\n        require(tokenWeightsLength == constituentTokensLength, \\\"ERR_START_WEIGHTS_MISMATCH\\\");\\n        // Cannot have too many or too few - technically redundant, since BPool.bind() would fail later\\n        // But if we don't check now, we could have a useless contract with no way to create a pool\\n\\n        require(constituentTokensLength >= DesynConstants.MIN_ASSET_LIMIT, \\\"ERR_TOO_FEW_TOKENS\\\");\\n        require(constituentTokensLength <= DesynConstants.MAX_ASSET_LIMIT, \\\"ERR_TOO_MANY_TOKENS\\\");\\n        // There are further possible checks (e.g., if they use the same token twice), but\\n        // we can let bind() catch things like that (i.e., not things that might reasonably work)\\n    }\\n\\n    /**\\n     * @notice Update the weight of an existing token\\n     * @dev Refactored to library to make CRPFactory deployable\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param tokenA - token to sell\\n     * @param tokenB - token to buy\\n     */\\n    function rebalance(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address tokenA,\\n        address tokenB,\\n        uint deltaWeight,\\n        uint minAmountOut\\n    ) external {\\n        uint currentWeightA = bPool.getDenormalizedWeight(tokenA);\\n        uint currentBalanceA = bPool.getBalance(tokenA);\\n        // uint currentWeightB = bPool.getDenormalizedWeight(tokenB);\\n\\n        require(deltaWeight <= currentWeightA, \\\"ERR_DELTA_WEIGHT_TOO_BIG\\\");\\n\\n        // deltaBalance = currentBalance * (deltaWeight / currentWeight)\\n        uint deltaBalanceA = DesynSafeMath.bmul(currentBalanceA, DesynSafeMath.bdiv(deltaWeight, currentWeightA));\\n\\n        // uint currentBalanceB = bPool.getBalance(tokenB);\\n\\n        // uint deltaWeight = DesynSafeMath.bsub(newWeight, currentWeightA);\\n\\n        // uint newWeightB = DesynSafeMath.bsub(currentWeightB, deltaWeight);\\n        // require(newWeightB >= 0, \\\"ERR_INCORRECT_WEIGHT_B\\\");\\n        bool soldout;\\n        if (deltaWeight == currentWeightA) {\\n            // reduct token A\\n            bPool.unbindPure(tokenA);\\n            soldout = true;\\n        }\\n\\n        // Now with the tokens this contract can bind them to the pool it controls\\n        bPool.rebindSmart(tokenA, tokenB, deltaWeight, deltaBalanceA, soldout, minAmountOut);\\n    }\\n\\n    /**\\n     * @notice Non ERC20-conforming tokens are problematic; don't allow them in pools\\n     * @dev Will revert if invalid\\n     * @param token - The prospective token to verify\\n     */\\n    function verifyTokenCompliance(address token) external {\\n        verifyTokenComplianceInternal(token);\\n    }\\n\\n    /**\\n     * @notice Non ERC20-conforming tokens are problematic; don't allow them in pools\\n     * @dev Will revert if invalid - overloaded to save space in the main contract\\n     * @param tokens - The prospective tokens to verify\\n     */\\n    function verifyTokenCompliance(address[] calldata tokens) external {\\n        for (uint i = 0; i < tokens.length; i++) {\\n            verifyTokenComplianceInternal(tokens[i]);\\n        }\\n    }\\n\\n    function createPoolInternalHandle(IBPool bPool, uint initialSupply) external view {\\n        require(initialSupply >= DesynConstants.MIN_POOL_SUPPLY, \\\"ERR_INIT_SUPPLY_MIN\\\");\\n        require(initialSupply <= DesynConstants.MAX_POOL_SUPPLY, \\\"ERR_INIT_SUPPLY_MAX\\\");\\n        require(bPool.EXIT_FEE() == 0, \\\"ERR_NONZERO_EXIT_FEE\\\");\\n        // EXIT_FEE must always be zero, or ConfigurableRightsPool._pushUnderlying will fail\\n        require(DesynConstants.EXIT_FEE == 0, \\\"ERR_NONZERO_EXIT_FEE\\\");\\n    }\\n\\n    function createPoolHandle(\\n        uint collectPeriod,\\n        uint upperCap,\\n        uint initialSupply\\n    ) external pure {\\n        require(collectPeriod <= DesynConstants.MAX_COLLECT_PERIOD, \\\"ERR_EXCEEDS_FUND_RAISING_PERIOD\\\");\\n        require(upperCap >= initialSupply, \\\"ERR_CAP_BIGGER_THAN_INITSUPPLY\\\");\\n    }\\n\\n    function exitPoolHandle(\\n        uint _endEtfAmount,\\n        uint _endFundAmount,\\n        uint _beginEtfAmount,\\n        uint _beginFundAmount,\\n        uint poolAmountIn,\\n        uint totalEnd\\n    )\\n        external\\n        pure\\n        returns (\\n            uint endEtfAmount,\\n            uint endFundAmount,\\n            uint profitRate\\n        )\\n    {\\n        endEtfAmount = DesynSafeMath.badd(_endEtfAmount, poolAmountIn);\\n        endFundAmount = DesynSafeMath.badd(_endFundAmount, totalEnd);\\n        uint amount1 = DesynSafeMath.bdiv(endFundAmount, endEtfAmount);\\n        uint amount2 = DesynSafeMath.bdiv(_beginFundAmount, _beginEtfAmount);\\n        if (amount1 > amount2) {\\n            profitRate = DesynSafeMath.bdiv(\\n                DesynSafeMath.bmul(DesynSafeMath.bsub(DesynSafeMath.bdiv(endFundAmount, endEtfAmount), DesynSafeMath.bdiv(_beginFundAmount, _beginEtfAmount)), poolAmountIn),\\n                totalEnd\\n            );\\n        }\\n    }\\n\\n    function exitPoolHandleA(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address poolToken,\\n        uint _tokenAmountOut,\\n        uint redeemFee,\\n        uint profitRate,\\n        uint perfermanceFee\\n    )\\n        external\\n        returns (\\n            uint redeemAndPerformanceFeeReceived,\\n            uint finalAmountOut,\\n            uint redeemFeeReceived\\n        )\\n    {\\n        // redeem fee\\n        redeemFeeReceived = DesynSafeMath.bmul(_tokenAmountOut, redeemFee);\\n\\n        // performance fee\\n        uint performanceFeeReceived = DesynSafeMath.bmul(DesynSafeMath.bmul(_tokenAmountOut, profitRate), perfermanceFee);\\n        \\n        // redeem fee and performance fee\\n        redeemAndPerformanceFeeReceived = DesynSafeMath.badd(performanceFeeReceived, redeemFeeReceived);\\n\\n        // final amount the user got\\n        finalAmountOut = DesynSafeMath.bsub(_tokenAmountOut, redeemAndPerformanceFeeReceived);\\n\\n        _pushUnderlying(bPool, poolToken, msg.sender, finalAmountOut);\\n\\n        if (redeemFee != 0 || (profitRate > 0 && perfermanceFee != 0)) {\\n            _pushUnderlying(bPool, poolToken, address(this), redeemAndPerformanceFeeReceived);\\n            IERC20(poolToken).safeApprove(self.vaultAddress(), redeemAndPerformanceFeeReceived);\\n        }\\n    }\\n\\n    function exitPoolHandleB(\\n        IConfigurableRightsPool self,\\n        bool bools,\\n        bool isCompletedCollect,\\n        uint closureEndTime,\\n        uint collectEndTime,\\n        uint _etfAmount,\\n        uint _fundAmount,\\n        uint poolAmountIn\\n    ) external view returns (uint etfAmount, uint fundAmount, uint actualPoolAmountIn) {\\n        actualPoolAmountIn = poolAmountIn;\\n        if (bools) {\\n            bool isCloseEtfCollectEndWithFailure = isCompletedCollect == false && block.timestamp >= collectEndTime;\\n            bool isCloseEtfClosureEnd = block.timestamp >= closureEndTime;\\n            require(isCloseEtfCollectEndWithFailure || isCloseEtfClosureEnd, \\\"ERR_CLOSURE_TIME_NOT_ARRIVED!\\\");\\n\\n            actualPoolAmountIn = self.balanceOf(msg.sender);\\n        }\\n        fundAmount = _fundAmount;\\n        etfAmount = _etfAmount;\\n    }\\n\\n    function joinPoolHandle(\\n        bool canWhitelistLPs,\\n        bool isList,\\n        bool bools,\\n        uint collectEndTime\\n    ) external view {\\n        require(!canWhitelistLPs || isList, \\\"ERR_NOT_ON_WHITELIST\\\");\\n\\n        if (bools) {\\n            require(block.timestamp <= collectEndTime, \\\"ERR_COLLECT_PERIOD_FINISHED!\\\");\\n        }\\n    }\\n\\n    function rebalanceHandle(\\n        IBPool bPool,\\n        bool isCompletedCollect,\\n        bool bools,\\n        uint collectEndTime,\\n        uint closureEndTime,\\n        bool canChangeWeights,\\n        address tokenA,\\n        address tokenB\\n    ) external {\\n        require(bPool.isBound(tokenA), \\\"ERR_TOKEN_NOT_BOUND\\\");\\n        if (bools) {\\n            require(isCompletedCollect, \\\"ERROR_COLLECTION_FAILED\\\");\\n            require(block.timestamp > collectEndTime && block.timestamp < closureEndTime, \\\"ERR_NOT_REBALANCE_PERIOD\\\");\\n        }\\n\\n        if (!bPool.isBound(tokenB)) {\\n            bool returnValue = IERC20(tokenB).safeApprove(address(bPool), DesynConstants.MAX_UINT);\\n            require(returnValue, \\\"ERR_ERC20_FALSE\\\");\\n        }\\n\\n        require(canChangeWeights, \\\"ERR_NOT_CONFIGURABLE_WEIGHTS\\\");\\n        require(tokenA != tokenB, \\\"ERR_TOKENS_SAME\\\");\\n    }\\n\\n    /**\\n     * @notice Join a pool\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param poolAmountOut - number of pool tokens to receive\\n     * @param maxAmountsIn - Max amount of asset tokens to spend\\n     * @return actualAmountsIn - calculated values of the tokens to pull in\\n     */\\n    function joinPool(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        uint poolAmountOut,\\n        uint[] calldata maxAmountsIn,\\n        uint issueFee\\n    ) external view returns (uint[] memory actualAmountsIn) {\\n        address[] memory tokens = bPool.getCurrentTokens();\\n\\n        require(maxAmountsIn.length == tokens.length, \\\"ERR_AMOUNTS_MISMATCH\\\");\\n\\n        uint poolTotal = self.totalSupply();\\n        // Subtract  1 to ensure any rounding errors favor the pool\\n        uint ratio = DesynSafeMath.bdiv(poolAmountOut, DesynSafeMath.bsub(poolTotal, 1));\\n\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        // We know the length of the array; initialize it, and fill it below\\n        // Cannot do \\\"push\\\" in memory\\n        actualAmountsIn = new uint[](tokens.length);\\n\\n        // This loop contains external calls\\n        // External calls are to math libraries or the underlying pool, so low risk\\n        uint issueFeeRate = issueFee.bmul(1000);\\n        for (uint i = 0; i < tokens.length; i++) {\\n            address t = tokens[i];\\n            uint bal = bPool.getBalance(t);\\n            // Add 1 to ensure any rounding errors favor the pool\\n            uint base = bal.badd(1).bmul(poolAmountOut * uint(1000));\\n            uint tokenAmountIn = base.bdiv(poolTotal.bsub(1) * (uint(1000).bsub(issueFeeRate)));\\n\\n            require(tokenAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountIn <= maxAmountsIn[i], \\\"ERR_LIMIT_IN\\\");\\n\\n            actualAmountsIn[i] = tokenAmountIn;\\n        }\\n    }\\n\\n    /**\\n     * @notice Exit a pool - redeem pool tokens for underlying assets\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param poolAmountIn - amount of pool tokens to redeem\\n     * @param minAmountsOut - minimum amount of asset tokens to receive\\n     * @return actualAmountsOut - calculated amounts of each token to pull\\n     */\\n    function exitPool(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        uint poolAmountIn,\\n        uint[] calldata minAmountsOut\\n    ) external view returns (uint[] memory actualAmountsOut) {\\n        address[] memory tokens = bPool.getCurrentTokens();\\n\\n        require(minAmountsOut.length == tokens.length, \\\"ERR_AMOUNTS_MISMATCH\\\");\\n\\n        uint poolTotal = self.totalSupply();\\n\\n        uint ratio = DesynSafeMath.bdiv(poolAmountIn, DesynSafeMath.badd(poolTotal, 1));\\n\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        actualAmountsOut = new uint[](tokens.length);\\n\\n        // This loop contains external calls\\n        // External calls are to math libraries or the underlying pool, so low risk\\n        for (uint i = 0; i < tokens.length; i++) {\\n            address t = tokens[i];\\n            uint bal = bPool.getBalance(t);\\n            // Subtract 1 to ensure any rounding errors favor the pool\\n            uint tokenAmountOut = DesynSafeMath.bmul(ratio, DesynSafeMath.bsub(bal, 1));\\n\\n            require(tokenAmountOut != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountOut >= minAmountsOut[i], \\\"ERR_LIMIT_OUT\\\");\\n\\n            actualAmountsOut[i] = tokenAmountOut;\\n        }\\n    }\\n\\n    // Internal functions\\n    // Check for zero transfer, and make sure it returns true to returnValue\\n    function verifyTokenComplianceInternal(address token) internal {\\n        bool returnValue = IERC20(token).transfer(msg.sender, 0);\\n        require(returnValue, \\\"ERR_NONCONFORMING_TOKEN\\\");\\n    }\\n\\n    function handleTransferInTokens(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address poolToken,\\n        uint actualAmountIn,\\n        uint _actualIssueFee\\n    ) external returns (uint issueFeeReceived) {\\n        issueFeeReceived = DesynSafeMath.bmul(actualAmountIn, _actualIssueFee);\\n        uint amount = DesynSafeMath.bsub(actualAmountIn, issueFeeReceived);\\n\\n        _pullUnderlying(bPool, poolToken, msg.sender, amount);\\n\\n        if (_actualIssueFee != 0) {\\n            bool xfer = IERC20(poolToken).transferFrom(msg.sender, address(this), issueFeeReceived);\\n            require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n\\n            IERC20(poolToken).safeApprove(self.vaultAddress(), issueFeeReceived);\\n        }\\n    }\\n\\n    function handleClaim(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address[] calldata poolTokens,\\n        uint managerFee,\\n        uint timeElapsed,\\n        uint claimPeriod\\n    ) external returns (uint[] memory) {\\n        uint[] memory tokensAmount = new uint[](poolTokens.length);\\n        for (uint i = 0; i < poolTokens.length; i++) {\\n            address t = poolTokens[i];\\n            uint tokenBalance = bPool.getBalance(t);\\n            uint tokenAmountOut = tokenBalance.bmul(managerFee).mul(timeElapsed).div(claimPeriod).div(12);\\n            _pushUnderlying(bPool, t, address(this), tokenAmountOut);\\n\\n            IERC20(t).safeApprove(self.vaultAddress(), tokenAmountOut);\\n            tokensAmount[i] = tokenAmountOut;\\n        }\\n\\n        return tokensAmount;\\n    }\\n\\n    function handleCollectionCompleted(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address[] calldata poolTokens,\\n        uint issueFee\\n    ) external {\\n        if (issueFee != 0) {\\n            uint[] memory tokensAmount = new uint[](poolTokens.length);\\n\\n            for (uint i = 0; i < poolTokens.length; i++) {\\n                address t = poolTokens[i];\\n                uint currentAmount = bPool.getBalance(t);\\n                uint currentAmountFee = DesynSafeMath.bmul(currentAmount, issueFee);\\n\\n                _pushUnderlying(bPool, t, address(this), currentAmountFee);\\n                tokensAmount[i] = currentAmountFee;\\n                IERC20(t).safeApprove(self.vaultAddress(), currentAmountFee);\\n            }\\n\\n            IVault(self.vaultAddress()).depositIssueRedeemPToken(poolTokens, tokensAmount, tokensAmount, false);\\n        }\\n    }\\n\\n    function WhitelistHandle(\\n        bool bool1,\\n        bool bool2,\\n        address adr\\n    ) external pure {\\n        require(bool1, \\\"ERR_CANNOT_WHITELIST_LPS\\\");\\n        require(bool2, \\\"ERR_LP_NOT_WHITELISTED\\\");\\n        require(adr != address(0), \\\"ERR_INVALID_ADDRESS\\\");\\n    }\\n\\n    function _pullUnderlying(\\n        IBPool bPool,\\n        address erc20,\\n        address from,\\n        uint amount\\n    ) internal {\\n        uint tokenBalance = bPool.getBalance(erc20);\\n        uint tokenWeight = bPool.getDenormalizedWeight(erc20);\\n\\n        bool xfer = IERC20(erc20).transferFrom(from, address(this), amount);\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n        bPool.rebind(erc20, DesynSafeMath.badd(tokenBalance, amount), tokenWeight);\\n    }\\n\\n    function _pushUnderlying(\\n        IBPool bPool,\\n        address erc20,\\n        address to,\\n        uint amount\\n    ) internal {\\n        uint tokenBalance = bPool.getBalance(erc20);\\n        uint tokenWeight = bPool.getDenormalizedWeight(erc20);\\n        bPool.rebind(erc20, DesynSafeMath.bsub(tokenBalance, amount), tokenWeight);\\n\\n        bool xfer = IERC20(erc20).transfer(to, amount);\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x81470e3b0120ebd1472e032045904a32105bee68d76b178d272535f3c2f3133d\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/DesynOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract DesynOwnable {\\n    // State variables\\n\\n    address private _owner;\\n    mapping(address => bool) public adminList;\\n    address[] public owners;\\n    uint[] public ownerPercentage;\\n    uint public allOwnerPercentage;\\n    bool private initialized;\\n    // Event declarations\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    event AddAdmin(address indexed newAdmin, uint indexed amount);\\n    event RemoveAdmin(address indexed oldAdmin, uint indexed amount);\\n\\n    // Modifiers\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"ERR_NOT_CONTROLLER\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(adminList[msg.sender] || msg.sender == _owner, \\\"onlyAdmin\\\");\\n        _;\\n    }\\n\\n    // Function declarations\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() internal {\\n        _owner = msg.sender;\\n    }\\n\\n    function initHandle(address[] memory _owners, uint[] memory _ownerPercentage) external onlyOwner {\\n        require(_owners.length == _ownerPercentage.length, \\\"ownerP\\\");\\n        require(!initialized, \\\"initialized!\\\");\\n        for (uint i; i < _owners.length; i++) {\\n            address newOwner = _owners[i];\\n            require(!adminList[newOwner], \\\"Address is Owner\\\");\\n            allOwnerPercentage += _ownerPercentage[i];\\n            adminList[newOwner] = true;\\n        }\\n        owners = _owners;\\n        ownerPercentage = _ownerPercentage;\\n\\n        initialized = true;\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n     *         Can only be called by the current owner\\n     * @dev external for gas optimization\\n     * @param newOwner - address of new owner\\n     */\\n    function setController(address newOwner) external onlyOwner {\\n        require(newOwner != address(0), \\\"ERR_ZERO_ADDRESS\\\");\\n\\n        emit OwnershipTransferred(_owner, newOwner);\\n\\n        for (uint i;i < owners.length; i++) {\\n            if (owners[i] == _owner) {\\n                owners[i] = newOwner;\\n            }\\n        }\\n\\n        adminList[_owner] = false;\\n        adminList[newOwner] = true;\\n        _owner = newOwner;\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n     *         Can only be called by the current owner\\n     * @dev external for gas optimization\\n     * @param newOwner - address of new owner\\n     */\\n    function setAddAdminList(address newOwner, uint _ownerPercentage) external onlyOwner {\\n        require(!adminList[newOwner], \\\"Address is Owner\\\");\\n\\n        adminList[newOwner] = true;\\n        owners.push(newOwner);\\n        ownerPercentage.push(_ownerPercentage);\\n        allOwnerPercentage += _ownerPercentage;\\n        emit AddAdmin(newOwner, _ownerPercentage);\\n    }\\n\\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\\n    /// @param owner Address of owner.\\n    function removeOwner(address owner) external onlyOwner {\\n        require(adminList[owner], \\\"ERR_NOT_OWNER\\\");\\n        adminList[owner] = false;\\n        uint amount = 0;\\n        for (uint i = 0; i < owners.length; i++) {\\n            if (owners[i] == owner) {\\n                owners[i] = owners[owners.length - 1];\\n                amount = ownerPercentage[i];\\n                ownerPercentage[i] = ownerPercentage[ownerPercentage.length - 1];\\n                break;\\n            }\\n        }\\n        owners.pop();\\n        ownerPercentage.pop();\\n        allOwnerPercentage -= amount;\\n        emit RemoveAdmin(owner, amount);\\n    }\\n\\n    // @dev Returns list of owners.\\n    // @return List of owner addresses.\\n    function getOwners() external view returns (address[] memory) {\\n        return owners;\\n    }\\n\\n    // @dev Returns list of owners.\\n    // @return List of owner addresses.\\n    function getOwnerPercentage() external view returns (uint[] memory) {\\n        return ownerPercentage;\\n    }\\n\\n    /**\\n     * @notice Returns the address of the current owner\\n     * @dev external for gas optimization\\n     * @return address - of the owner (AKA controller)\\n     */\\n    function getController() external view returns (address) {\\n        return _owner;\\n    }\\n}\\n\",\"keccak256\":\"0xf205bb1dda18a4fca535dd18f8f10ab361b173f32810f789b3adfc3b02b941fa\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x6080604052606460165534801561001557600080fd5b50600080546001600160a01b03191633179055615f3780620000386000396000f3fe60806040526004361061026e5760003560e01c80638da901ba1161014b5780638da901ba146105e95780639155dae714610609578063921850541461062957806392eefe9b14610649578063990cc58614610669578063992f6ba51461068957806399e44181146106a9578063a0e67e2b146106c9578063a74f1524146106de578063bb408f2d146106fe578063c0fcb1661461071e578063c1e576221461073e578063c5318d0f1461075e578063c90361dd1461077e578063cf4fe6351461079e578063cfa11d7e146107cb578063d29986c1146107eb578063d6b485a514610800578063d7256c7014610820578063e65065d914610840578063ebee7bcc14610860578063ec7a4b5214610880578063ece23143146108a0578063edb12adf146108c0578063f26bee8a146108e0578063f36ed92814610900578063f8b24b091461092057610275565b8063025e7c271461027a5780630b83e629146102b05780630e99089c146102dd57806314b60ee71461030a578063154726b21461032a578063173825d91461034a5780631cc9a5791461036c5780631eae039c146103995780631f70e80b146103b957806327304dfd146103ce5780633018205f146103fb578063309a042c146104105780633ef1447914610425578063430bf08a146104455780634660c5a51461045a57806346bead891461047a5780634934d18f1461049a5780634d4ae12d146104ba5780635834bac4146104e75780636429866a1461050757806367e0e0761461053457806368092bd9146105615780636936674d146105815780636fd4ba9c146105a15780637234100a146105c157806378a619de146105e157610275565b3661027557005b600080fd5b34801561028657600080fd5b5061029a61029536600461569b565b610940565b6040516102a791906157a1565b60405180910390f35b3480156102bc57600080fd5b506102d06102cb36600461524c565b610967565b6040516102a7919061596a565b3480156102e957600080fd5b506102fd6102f8366004615214565b6109e1565b6040516102a79190615e64565b34801561031657600080fd5b506102fd610325366004615413565b610db3565b34801561033657600080fd5b506102fd61034536600461524c565b610dd0565b34801561035657600080fd5b5061036a610365366004615214565b610e86565b005b34801561037857600080fd5b5061038c610387366004615214565b6110a9565b6040516102a7919061581f565b3480156103a557600080fd5b5061036a6103b4366004615315565b611215565b3480156103c557600080fd5b506102fd611258565b3480156103da57600080fd5b506103ee6103e9366004615214565b61125e565b6040516102a7919061597d565b34801561040757600080fd5b5061029a611273565b34801561041c57600080fd5b506102d0611282565b34801561043157600080fd5b5061036a61044036600461551b565b6112da565b34801561045157600080fd5b5061029a611430565b34801561046657600080fd5b5061036a610475366004615382565b61143f565b34801561048657600080fd5b506102fd61049536600461524c565b611696565b3480156104a657600080fd5b5061029a6104b5366004615214565b6118ff565b3480156104c657600080fd5b506104da6104d5366004615214565b61191a565b6040516102a791906158c7565b3480156104f357600080fd5b506102fd610502366004615315565b611a7a565b34801561051357600080fd5b50610527610522366004615214565b61215c565b6040516102a7919061580c565b34801561054057600080fd5b5061055461054f366004615214565b6121d2565b6040516102a79190615d6f565b34801561056d57600080fd5b5061036a61057c366004615355565b6124e6565b34801561058d57600080fd5b5061036a61059c366004615214565b61257b565b3480156105ad57600080fd5b506102fd6105bc366004615214565b6128e5565b3480156105cd57600080fd5b506102fd6105dc366004615214565b61297c565b61036a612a19565b3480156105f557600080fd5b506103ee610604366004615214565b612a6f565b34801561061557600080fd5b5061036a61062436600461543e565b612af6565b34801561063557600080fd5b506102fd610644366004615214565b612c61565b34801561065557600080fd5b5061036a610664366004615214565b612c73565b34801561067557600080fd5b5061029a610684366004615413565b612dd5565b34801561069557600080fd5b5061036a6106a4366004615413565b612e0a565b3480156106b557600080fd5b506102fd6106c436600461524c565b612f33565b3480156106d557600080fd5b50610527612f50565b3480156106ea57600080fd5b506102fd6106f936600461524c565b612fb1565b34801561070a57600080fd5b5061029a61071936600461524c565b612fce565b34801561072a57600080fd5b506103ee610739366004615214565b612ff4565b34801561074a57600080fd5b5061036a610759366004615214565b613012565b34801561076a57600080fd5b506102fd61077936600461569b565b61309e565b34801561078a57600080fd5b50610527610799366004615214565b6130bc565b3480156107aa57600080fd5b506107be6107b936600461524c565b6130e0565b6040516102a791906158fe565b3480156107d757600080fd5b5061029a6107e6366004615315565b6131c5565b3480156107f757600080fd5b506102fd61320c565b34801561080c57600080fd5b5061036a61081b366004615214565b613212565b34801561082c57600080fd5b5061036a61083b366004615284565b613289565b34801561084c57600080fd5b506102fd61085b36600461524c565b613809565b34801561086c57600080fd5b506102fd61087b366004615315565b6139b3565b34801561088c57600080fd5b506102fd61089b36600461524c565b6139ee565b3480156108ac57600080fd5b506102fd6108bb366004615214565b613a40565b3480156108cc57600080fd5b5061036a6108db366004615214565b613a52565b3480156108ec57600080fd5b506102fd6108fb36600461524c565b613f4f565b34801561090c57600080fd5b506102fd61091b366004615214565b613f6c565b34801561092c57600080fd5b506102fd61093b366004615214565b61402d565b6002818154811061094d57fe5b6000918252602090912001546001600160a01b0316905081565b6001600160a01b0380831660009081526012602090815260408083209385168352928152908290208054835181840281018401909452808452606093928301828280156109d357602002820191906000526020600020905b8154815260200190600101908083116109bf575b505050505090505b92915050565b60006109eb614e42565b6001600160a01b038316600090815260086020908152604091829020825181546101209381028201840190945261010081018481529093919284928491840182828015610a6157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610a43575b5050505050815260200160018201805480602002602001604051908101604052809291908181526020018280548015610ac357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610aa5575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015610b2557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610b07575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015610b8757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610b69575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015610bdf57602002820191906000526020600020905b815481526020019060010190808311610bcb575b5050505050815260200160058201805480602002602001604051908101604052809291908181526020018280548015610c3757602002820191906000526020600020905b815481526020019060010190808311610c23575b5050505050815260200160068201805480602002602001604051908101604052809291908181526020018280548015610c8f57602002820191906000526020600020905b815481526020019060010190808311610c7b575b5050505050815260200160078201805480602002602001604051908101604052809291908181526020018280548015610ce757602002820191906000526020600020905b815481526020019060010190808311610cd3575b5050505050815250509050600081608001515111610d06576000610d20565b8060800151600081518110610d1757fe5b60200260200101515b60a082015151920191610d34576000610d4e565b8060a00151600081518110610d4557fe5b60200260200101515b60c082015151920191610d62576000610d7c565b8060c00151600081518110610d7357fe5b60200260200101515b60e082015151920191610d90576000610daa565b8060e00151600081518110610da157fe5b60200260200101515b90910192915050565b600b60209081526000928352604080842090915290825290205481565b60405163e65065d960e01b81526000908190309063e65065d990610dfa90879087906004016157b5565b60206040518083038186803b158015610e1257600080fd5b505afa158015610e26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4a91906156b3565b6001600160a01b03808616600090815260116020908152604080832093881683529290522054909150610e7d828261403f565b95945050505050565b6000546001600160a01b03163314610eb95760405162461bcd60e51b8152600401610eb0906159ea565b60405180910390fd5b6001600160a01b03811660009081526001602052604090205460ff16610ef15760405162461bcd60e51b8152600401610eb090615a43565b6001600160a01b0381166000908152600160205260408120805460ff19169055805b60025481101561101557826001600160a01b031660028281548110610f3457fe5b6000918252602090912001546001600160a01b0316141561100d57600280546000198101908110610f6157fe5b600091825260209091200154600280546001600160a01b039092169183908110610f8757fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060038181548110610fc257fe5b90600052602060002001549150600360016003805490500381548110610fe457fe5b906000526020600020015460038281548110610ffc57fe5b600091825260209091200155611015565b600101610f13565b50600280548061102157fe5b600082815260209020810160001990810180546001600160a01b0319169055019055600380548061104e57fe5b600082815260208120820160001990810182905590910190915560048054839003905560405182916001600160a01b038516917f7b0884b4b6bb4e0c1385ad42168fa556c14d4d799c1bf22f081aff3efff6ea0c9190a35050565b6001600160a01b0381166000908152600a602052604090205460609081816001600160401b03811180156110dc57600080fd5b5060405190808252806020026020018201604052801561111657816020015b611103614e87565b8152602001906001900390816110fb5790505b50905060015b8260010181101561120d5761112f614e87565b6001600160a01b0386166000908152600b60209081526040808320858452825280832081518083018352815481526001820180548451818702810187019095528085529195929486810194939192919084015b828210156111d7576000848152602090819020604080516060810182526003860290920180546001600160a01b0316835260018082015484860152600290910154918301919091529083529092019101611182565b505050915250909150819050836111ef84600161403f565b815181106111f957fe5b60209081029190910101525060010161111c565b509392505050565b6000546001600160a01b0316331461123f5760405162461bcd60e51b8152600401610eb0906159ea565b6112536001600160a01b0384168383614081565b505050565b60165481565b60016020526000908152604090205460ff1681565b6000546001600160a01b031690565b606060038054806020026020016040519081016040528092919081815260200182805480156112d057602002820191906000526020600020905b8154815260200190600101908083116112bc575b5050505050905090565b6000546001600160a01b031633146113045760405162461bcd60e51b8152600401610eb0906159ea565b80518251146113255760405162461bcd60e51b8152600401610eb090615c01565b60055460ff16156113485760405162461bcd60e51b8152600401610eb090615aca565b60005b82518110156113f657600083828151811061136257fe5b6020908102919091018101516001600160a01b0381166000908152600190925260409091205490915060ff16156113ab5760405162461bcd60e51b8152600401610eb090615b24565b8282815181106113b757fe5b6020908102919091018101516004805490910190556001600160a01b03909116600090815260019182905260409020805460ff1916821790550161134b565b50815161140a906002906020850190614ea1565b50805161141e906003906020840190614f06565b50506005805460ff1916600117905550565b6006546001600160a01b031681565b60055461010090046001600160a01b0316331461146e5760405162461bcd60e51b8152600401610eb090615a16565b6001600160a01b03808316600090815260096020526040908190206005549151636e0cf42160e11b815290926101009092049091169063dc19e842906114b89086906004016157a1565b60206040518083038186803b1580156114d057600080fd5b505afa1580156114e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115089190615660565b6115245760405162461bcd60e51b8152600401610eb090615c21565b805462010000900460ff161561154c5760405162461bcd60e51b8152600401610eb090615c94565b805462ff0000191662010000178155815180518051600184015560209081015160028401558082015180516003850155810151600484015560408083015180516005860155820151600685015560609283015180516007860155820151600885015581850151805180516009870155830151600a860155808301518051600b870155830151600c860155808201518051600d870155830151600e8601558301518051600f8601558201516010850155808501518051805160118701558301516012860155808301518051601387015583015160148601558082015180516015870155830151601686015583015180516017860155820151601885015593820151805180516019860155820151601a850155808201518051601b860155820151601c850155938401518051601d850155810151601e8401559201518051601f83015582015191015550565b60405163391a080560e11b815260009081903090637234100a906116be9087906004016157a1565b60206040518083038186803b1580156116d657600080fd5b505afa1580156116ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170e91906156b3565b90506060846001600160a01b031663a0e67e2b6040518163ffffffff1660e01b815260040160006040518083038186803b15801561174b57600080fd5b505afa15801561175f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526117879190810190615483565b90506060856001600160a01b031663309a042c6040518163ffffffff1660e01b815260040160006040518083038186803b1580156117c457600080fd5b505afa1580156117d8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261180091908101906155dd565b90506000866001600160a01b031663d29986c16040518163ffffffff1660e01b815260040160206040518083038186803b15801561183d57600080fd5b505afa158015611851573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061187591906156b3565b905060005b83518110156118f45783818151811061188f57fe5b60200260200101516001600160a01b0316876001600160a01b031614156118ec576118e0826118da8584815181106118c357fe5b6020026020010151886140d790919063ffffffff16565b90614111565b955050505050506109db565b60010161187a565b505050505092915050565b6007602052600090815260409020546001600160a01b031681565b611922614f4d565b61192a614f7a565b6001600160a01b0383166000908152600c602052604081208054829061194c57fe5b6000918252602090912001546001600160a01b0316808352604051631bf52ea760e21b81529091503090636fd4ba9c9061198a9087906004016157a1565b60206040518083038186803b1580156119a257600080fd5b505afa1580156119b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119da91906156b3565b826040018181525050806001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611a1c57600080fd5b505afa158015611a30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a5491906156cb565b60ff166020830152611a64614f4d565b5050604080516020810190915290815292915050565b6001600160a01b0380841660009081526012602090815260408083209386168352929052908120548190611aaf576000611aed565b6001600160a01b03808616600090815260126020908152604080832093881683529290529081208054909190611ae157fe5b90600052602060002001545b9050611af7614fa4565b506001600160a01b03851660009081526009602081815260408084208151610140810183526001820154610100820190815260028301546101208301526080808301918252845180860186526003850154815260048501548188015260a080850191909152855180870187526005860154815260068601548189015260c08086019190915286518088018852600787015481526008870154818a015260e08601529284528551808401875297850154888301908152600a86015489830152885285518087018752600b8601548152600c860154818901528888015285518087018752600d8601548152600e860154818901528887015285518087018752600f860154815260108601548189015260608981019190915284880198909852855180840187526011860154818401908152601287015482840152815286518088018852601387015481526014870154818a01528189015286518088018852601587015481526016870154818a01528188015286518088018852601787015481526018870154818a0152818a015284870152855192830186526019850154918301918252601a85015490830152815283518085018552601b8401548152601c840154818701528186015283518085018552601d8401548152601e84015481870152818501528351808501909452601f83015484529184015493830193909352808401919091529181019190915290611d0a614e42565b6001600160a01b038816600090815260086020908152604091829020825181546101209381028201840190945261010081018481529093919284928491840182828015611d8057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611d62575b5050505050815260200160018201805480602002602001604051908101604052809291908181526020018280548015611de257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611dc4575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015611e4457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611e26575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015611ea657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611e88575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015611efe57602002820191906000526020600020905b815481526020019060010190808311611eea575b5050505050815260200160058201805480602002602001604051908101604052809291908181526020018280548015611f5657602002820191906000526020600020905b815481526020019060010190808311611f42575b5050505050815260200160068201805480602002602001604051908101604052809291908181526020018280548015611fae57602002820191906000526020600020905b815481526020019060010190808311611f9a575b505050505081526020016007820180548060200260200160405190810160405280929190818152602001828054801561200657602002820191906000526020600020905b815481526020019060010190808311611ff2575b50505050508152505090508360001415612027576000945050505050612155565b8515801561203a57506000816080015151115b156120805761207d6016546118da612056878760000151614150565b846080015160008151811061206757fe5b60200260200101516140d790919063ffffffff16565b91505b856001148015612095575060008160a0015151115b156120c5576120c26016546118da6120b1878760200151614150565b8460a0015160008151811061206757fe5b91505b8560021480156120da575060008160c0015151115b1561210a576121076016546118da6120f6878760400151614150565b8460c0015160008151811061206757fe5b91505b85600314801561211f575060008160e0015151115b1561214f5761214c6016546118da61213b878760600151614150565b8460e0015160008151811061206757fe5b91505b50925050505b9392505050565b6001600160a01b0381166000908152600c60209081526040918290208054835181840281018401909452808452606093928301828280156121c657602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116121a8575b50505050509050919050565b6121da614e42565b6001600160a01b03821660009081526008602090815260409182902082518154610120938102820184019094526101008101848152909391928492849184018282801561225057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612232575b50505050508152602001600182018054806020026020016040519081016040528092919081815260200182805480156122b257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612294575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561231457602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116122f6575b505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561237657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612358575b50505050508152602001600482018054806020026020016040519081016040528092919081815260200182805480156123ce57602002820191906000526020600020905b8154815260200190600101908083116123ba575b505050505081526020016005820180548060200260200160405190810160405280929190818152602001828054801561242657602002820191906000526020600020905b815481526020019060010190808311612412575b505050505081526020016006820180548060200260200160405190810160405280929190818152602001828054801561247e57602002820191906000526020600020905b81548152602001906001019080831161246a575b50505050508152602001600782018054806020026020016040519081016040528092919081815260200182805480156124d657602002820191906000526020600020905b8154815260200190600101908083116124c2575b5050505050815250509050919050565b6000546001600160a01b031633146125105760405162461bcd60e51b8152600401610eb0906159ea565b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051612542929190615988565b60405180910390a26001600160a01b03909116600090815260096020526040902080549115156101000261ff0019909216919091179055565b6040516346d480dd60e11b81523090638da901ba9061259e9084906004016157a1565b60206040518083038186803b1580156125b657600080fd5b505afa1580156125ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125ee9190615660565b156128e257600554604051636e0cf42160e11b81526101009091046001600160a01b03169063dc19e842906126279084906004016157a1565b60206040518083038186803b15801561263f57600080fd5b505afa158015612653573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126779190615660565b6126935760405162461bcd60e51b8152600401610eb090615c21565b806001600160a01b0316635468d6d76040518163ffffffff1660e01b815260040160206040518083038186803b1580156126cc57600080fd5b505afa1580156126e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127049190615660565b6127205760405162461bcd60e51b8152600401610eb090615cbb565b604051630aa3935960e11b8152600090309063154726b29061274890859033906004016157b5565b60206040518083038186803b15801561276057600080fd5b505afa158015612774573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061279891906156b3565b9050600081116127ba5760405162461bcd60e51b8152600401610eb090615a6a565b6001600160a01b03821660009081526011602090815260408083203380855292529091208054830190556127ed906141f7565b156128aa576128a5336001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561282e57600080fd5b505afa158015612842573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128669190615230565b6001600160a01b0384166000908152600c60205260408120805485929061288957fe5b6000918252602090912001546001600160a01b03169190614081565b6128e0565b6128e03382600c6000866001600160a01b03166001600160a01b0316815260200190815260200160002060008154811061288957fe5b505b50565b6001600160a01b0381166000908152600f602052604080822054905163391a080560e11b81526109db91903090637234100a906129269087906004016157a1565b60206040518083038186803b15801561293e57600080fd5b505afa158015612952573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061297691906156b3565b9061403f565b604051631e6ddb2560e31b81526000906109db90309063f36ed928906129a69086906004016157a1565b60206040518083038186803b1580156129be57600080fd5b505afa1580156129d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129f691906156b3565b6040516303a6422760e21b81523090630e99089c906129269087906004016157a1565b6000546001600160a01b03163314612a435760405162461bcd60e51b8152600401610eb0906159ea565b60405133904780156108fc02916000818181858888f193505050501580156128e2573d6000803e3d6000fd5b60006001826001600160a01b03166373a9855c6040518163ffffffff1660e01b815260040160206040518083038186803b158015612aac57600080fd5b505afa158015612ac0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ae4919061567c565b6001811115612aef57fe5b1492915050565b6006546001600160a01b03163314612b205760405162461bcd60e51b8152600401610eb0906159ea565b828114612b3f5760405162461bcd60e51b8152600401610eb090615af0565b6001600160a01b0386811660009081526007602052604090205416612bff57856001600160a01b0316633018205f6040518163ffffffff1660e01b815260040160206040518083038186803b158015612b9757600080fd5b505afa158015612bab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bcf9190615230565b6001600160a01b03878116600090815260076020526040902080546001600160a01b031916929091169190911790555b606080612c0c8888614230565b91509150606080612c22888888888e89896145a8565b91509150612c328a8a84846147ea565b5050506001600160a01b039096166000908152600960205260409020805460ff19166001179055505050505050565b600a6020526000908152604090205481565b6000546001600160a01b03163314612c9d5760405162461bcd60e51b8152600401610eb0906159ea565b6001600160a01b038116612cc35760405162461bcd60e51b8152600401610eb090615bb4565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a360005b600254811015612d8657600054600280546001600160a01b039092169183908110612d2657fe5b6000918252602090912001546001600160a01b03161415612d7e578160028281548110612d4f57fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b600101612cff565b50600080546001600160a01b039081168252600160208190526040808420805460ff199081169091559490921680845291832080549094161790925580546001600160a01b0319169091179055565b600c6020528160005260406000208181548110612dee57fe5b6000918252602090912001546001600160a01b03169150829050565b6000546001600160a01b03163314612e345760405162461bcd60e51b8152600401610eb0906159ea565b6001600160a01b03821660009081526001602052604090205460ff1615612e6d5760405162461bcd60e51b8152600401610eb090615b24565b6001600160a01b0382166000818152600160208190526040808320805460ff191683179055600280548084019091557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319168517905560038054928301815583527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b9091018490556004805485019055518392917fbd5dcf0b25226117c4a68a0129ffdd4b0541ef5e482ad7de9a96ccb6d6a8ebde91a35050565b601460209081526000928352604080842090915290825290205481565b606060028054806020026020016040519081016040528092919081815260200182805480156112d057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612f8a575050505050905090565b601160209081526000928352604080842090915290825290205481565b60156020908152600092835260408084209091529082529020546001600160a01b031681565b6001600160a01b031660009081526009602052604090205460ff1690565b6000546001600160a01b0316331461303c5760405162461bcd60e51b8152600401610eb0906159ea565b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405161306e929190615988565b60405180910390a2600580546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b600381815481106130ab57fe5b600091825260209091200154905081565b6001600160a01b03811660009081526010602052604090206060906109db906148da565b6001600160a01b0380831660009081526013602090815260408083209385168352928152828220805484518184028101840190955280855260609493919290919084015b828210156131b95760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156131a157602002820191906000526020600020905b81548152602001906001019080831161318d575b50505050508152505081526020019060010190613124565b50505050905092915050565b601360205282600052604060002060205281600052604060002081815481106131ea57fe5b60009182526020909120600290910201546001600160a01b0316925083915050565b60045481565b6000546001600160a01b0316331461323c5760405162461bcd60e51b8152600401610eb0906159ea565b600680546001600160a01b0319166001600160a01b0383169081179091556040513391907fc138928eab767a64470bc0dd3d04bce552ce80a6ceb398aa7e37f6dd9891fc1590600090a350565b33838281146132aa5760405162461bcd60e51b8152600401610eb090615af0565b600554604051636e0cf42160e11b81526101009091046001600160a01b03169063dc19e842906132de9085906004016157a1565b60206040518083038186803b1580156132f657600080fd5b505afa15801561330a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061332e9190615660565b61334a5760405162461bcd60e51b8152600401610eb090615c21565b6001600160a01b0382166000908152600c602052604090205461338c576001600160a01b0382166000908152600c6020526040902061338a908787614fe3565b505b6001600160a01b0382811660009081526015602090815260408083208b851684529091529020541680613433576001600160a01b0383811660008181526015602090815260408083208d86168452825280832080546001600160a01b031916958f1695909517909455918152601090915220613408908a6148e6565b613430576001600160a01b038316600090815260106020526040902061342e908a6148fb565b505b50875b6001600160a01b0381166134595760405162461bcd60e51b8152600401610eb090615b4e565b6134918585600081811061346957fe5b6001600160a01b0387166000908152600d602090815260409091205493910201359050614910565b6001600160a01b0384166000908152600d60205260409020556060826001600160401b03811180156134c257600080fd5b506040519080825280602002602001820160405280156134ec578160200160208202803683370190505b50905060005b838110156135d7576001600160a01b038086166000908152601260209081526040808320938716835292905220546135545786868281811061353057fe5b9050602002013582828151811061354357fe5b6020026020010181815250506135cf565b6001600160a01b03808616600090815260126020908152604080832093871683529290522080546135b691908390811061358a57fe5b90600052602060002001548888848181106135a157fe5b9050602002013561491090919063ffffffff16565b8282815181106135c257fe5b6020026020010181815250505b6001016134f2565b506001600160a01b0380851660009081526012602090815260408083209386168352928152919020825161360d92840190614f06565b506001600160a01b0380851660008181526013602090815260408083208786168452825280832093835260148252808320948e16835293905291909120548061374157613658615036565b6001600160a01b038c168152604080516020808b0282810182019093528a825290918b918b91829185019084908082843760009201829052506020868101958652885460018082018b558a845292829020885160029092020180546001600160a01b0319166001600160a01b0390921691909117815595518051889796506136e7955092860193500190614f06565b505050828054905060146000896001600160a01b03166001600160a01b0316815260200190815260200160002060008e6001600160a01b03166001600160a01b0316815260200190815260200160002081905550506137fb565b6001600160a01b03808716600090815260136020908152604080832093881683529290529081208054600019840190811061377857fe5b9060005260206000209060020201905060005b60018201548110156137f8576137d58a8a838181106137a657fe5b905060200201358360010183815481106137bc57fe5b906000526020600020015461491090919063ffffffff16565b8260010182815481106137e457fe5b60009182526020909120015560010161378b565b50505b505050505050505050505050565b6001600160a01b038083166000908152601260209081526040808320938516835292905290812054819061383e5790506109db565b60405163160d2eb160e21b81526138c1903090635834bac49061386a90889088906000906004016157cf565b60206040518083038186803b15801561388257600080fd5b505afa158015613896573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138ba91906156b3565b8290614910565b60405163160d2eb160e21b81529091506138f0903090635834bac49061386a90889088906001906004016157cf565b60405163160d2eb160e21b815290915061391f903090635834bac49061386a90889088906002906004016157cf565b60405163160d2eb160e21b815290915061394e903090635834bac49061386a90889088906003906004016157cf565b6001600160a01b038086166000908152600d602090815260408083205460128352818420948916845293909152812080549394506139ab936118da929061399157fe5b9060005260206000200154846140d790919063ffffffff16565b949350505050565b601260205282600052604060002060205281600052604060002081815481106139d857fe5b9060005260206000200160009250925050505481565b6001600160a01b038083166000908152600e6020908152604080832093851683529290528181205491516346bead8960e01b815290916121559130906346bead899061292690889088906004016157b5565b600d6020526000908152604090205481565b6040516346d480dd60e11b81523090638da901ba90613a759084906004016157a1565b60206040518083038186803b158015613a8d57600080fd5b505afa158015613aa1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ac59190615660565b156128e257600554604051636e0cf42160e11b81526101009091046001600160a01b03169063dc19e84290613afe9084906004016157a1565b60206040518083038186803b158015613b1657600080fd5b505afa158015613b2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b4e9190615660565b613b6a5760405162461bcd60e51b8152600401610eb090615c21565b806001600160a01b0316635468d6d76040518163ffffffff1660e01b815260040160206040518083038186803b158015613ba357600080fd5b505afa158015613bb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bdb9190615660565b613bf75760405162461bcd60e51b8152600401610eb090615cbb565b6040516327304dfd60e01b81526001600160a01b038216906327304dfd90613c239033906004016157a1565b60206040518083038186803b158015613c3b57600080fd5b505afa158015613c4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c739190615660565b80613cff5750336001600160a01b0316816001600160a01b0316633018205f6040518163ffffffff1660e01b815260040160206040518083038186803b158015613cbc57600080fd5b505afa158015613cd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cf49190615230565b6001600160a01b0316145b613d1b5760405162461bcd60e51b8152600401610eb090615bde565b604051631bf52ea760e21b81526000903090636fd4ba9c90613d419085906004016157a1565b60206040518083038186803b158015613d5957600080fd5b505afa158015613d6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d9191906156b3565b905060008111613db35760405162461bcd60e51b8152600401610eb090615a6a565b6001600160a01b0382166000908152600960209081526040808320805460ff19169055600f8252808320805485019055600a909152812054613df6906001614910565b6001600160a01b0384166000908152600c60205260408120805492935090918290613e1d57fe5b6000918252602090912001546001600160a01b03169050613e3c614f7a565b816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015613e7557600080fd5b505afa158015613e89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ead91906156cb565b60ff1660208201526001600160a01b038216815260408101849052613ed485338487614935565b6001600160a01b039485166000908152600a60209081526040808320869055600b825280832095835294815284822042815560019081018054808301825590845292829020845160039094020180546001600160a01b0319169390981692909217875582015190860155909101516002909301929092555050565b600e60209081526000928352604080842090915290825290205481565b6001600160a01b038116600090815260106020526040812081613f8e82614bf8565b905060005b81811015614025573063e65065d986613fac8685614c03565b6040518363ffffffff1660e01b8152600401613fc99291906157b5565b60206040518083038186803b158015613fe157600080fd5b505afa158015613ff5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061401991906156b3565b90930192600101613f93565b505050919050565b600f6020526000908152604090205481565b600061215583836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250614c0f565b6112538363a9059cbb60e01b84846040516024016140a09291906157f3565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614c3b565b6000826140e6575060006109db565b828202828482816140f357fe5b04146121555760405162461bcd60e51b8152600401610eb090615c53565b600061215583836040518060400160405280601a815260200179536166654d6174683a206469766973696f6e206279207a65726f60301b815250614d26565b8051516000908310801590614169575060208201515183105b1561417a57508051602001516109db565b6020820151518310801590614193575060408201515183105b156141a6575060208082015101516109db565b60408201515183108015906141bf575060608201515183105b156141d357506040810151602001516109db565b60608201515183106141ee57506060810151602001516109db565b50600092915050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708181148015906139ab575050151592915050565b60608061423b614e42565b6001600160a01b0385166000908152600860209081526040918290208251815461012093810282018401909452610100810184815290939192849284918401828280156142b157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311614293575b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561431357602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116142f5575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561437557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311614357575b50505050508152602001600382018054806020026020016040519081016040528092919081815260200182805480156143d757602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116143b9575b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561442f57602002820191906000526020600020905b81548152602001906001019080831161441b575b505050505081526020016005820180548060200260200160405190810160405280929190818152602001828054801561448757602002820191906000526020600020905b815481526020019060010190808311614473575b50505050508152602001600682018054806020026020016040519081016040528092919081815260200182805480156144df57602002820191906000526020600020905b8154815260200190600101908083116144cb575b505050505081526020016007820180548060200260200160405190810160405280929190818152602001828054801561453757602002820191906000526020600020905b815481526020019060010190808311614523575b50505050508152505090508360001415614558578051608082015190935091505b836001141561457057806020015192508060a0015191505b836002141561458857806040015192508060c0015191505b83600314156145a057806060015192508060e0015191505b509250929050565b60608087806001600160401b03811180156145c257600080fd5b506040519080825280602002602001820160405280156145ec578160200160208202803683370190505b509250806001600160401b038111801561460557600080fd5b5060405190808252806020026020018201604052801561462f578160200160208202803683370190505b5091508351600014801561464257508451155b156146d75760005b818110156146d1578a8a8281811061465e57fe5b90506020020160208101906146739190615214565b84828151811061467f57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508888828181106146ab57fe5b905060200201358382815181106146be57fe5b602090810291909101015260010161464a565b506147dd565b60005b818110156147db578a8a828181106146ee57fe5b90506020020160208101906147039190615214565b6001600160a01b031686828151811061471857fe5b60200260200101516001600160a01b031614156147d357600089898381811061473d57fe5b9050602002013590508b8b8381811061475257fe5b90506020020160208101906147679190615214565b85838151811061477357fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506147b9818784815181106147a357fe5b602002602001015161491090919063ffffffff16565b8483815181106147c557fe5b602002602001018181525050505b6001016146da565b505b5097509795505050505050565b6001600160a01b0384166000908152600860205260409020836148315782516148199082906020860190614ea1565b50815161482f9060048301906020850190614f06565b505b836001141561486757825161484f9060018301906020860190614ea1565b5081516148659060058301906020850190614f06565b505b836002141561489d5782516148859060028301906020860190614ea1565b50815161489b9060068301906020850190614f06565b505b83600314156148d35782516148bb9060038301906020860190614ea1565b5081516148d19060078301906020850190614f06565b505b5050505050565b60608061215583614d5d565b6000612155836001600160a01b038416614db8565b6000612155836001600160a01b038416614dd0565b6000828201838110156121555760405162461bcd60e51b8152600401610eb090615a95565b6060846001600160a01b031663a0e67e2b6040518163ffffffff1660e01b815260040160006040518083038186803b15801561497057600080fd5b505afa158015614984573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526149ac9190810190615483565b90506060856001600160a01b031663309a042c6040518163ffffffff1660e01b815260040160006040518083038186803b1580156149e957600080fd5b505afa1580156149fd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052614a2591908101906155dd565b90506000866001600160a01b031663d29986c16040518163ffffffff1660e01b815260040160206040518083038186803b158015614a6257600080fd5b505afa158015614a76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a9a91906156b3565b905060005b8351811015614bee576000614ad4836118da868581518110614abd57fe5b6020026020010151896140d790919063ffffffff16565b6001600160a01b03808b166000908152600e60209081526040808320938d168352929052908120805483019055865191925090614b2d90879085908110614b1757fe5b60200260200101516001600160a01b03166141f7565b614b4a57858381518110614b3d57fe5b6020026020010151614bce565b858381518110614b5657fe5b60200260200101516001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015614b9657600080fd5b505afa158015614baa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614bce9190615230565b9050614be46001600160a01b0389168284614081565b5050600101614a9f565b5050505050505050565b60006109db82614e1a565b60006121558383614e1e565b60008184841115614c335760405162461bcd60e51b8152600401610eb091906159b7565b505050900390565b614c4d826001600160a01b03166141f7565b614c695760405162461bcd60e51b8152600401610eb090615d38565b60006060836001600160a01b031683604051614c859190615785565b6000604051808303816000865af19150503d8060008114614cc2576040519150601f19603f3d011682016040523d82523d6000602084013e614cc7565b606091505b509150915081614ce95760405162461bcd60e51b8152600401610eb090615b7f565b805115614d205780806020019051810190614d049190615660565b614d205760405162461bcd60e51b8152600401610eb090615cee565b50505050565b60008183614d475760405162461bcd60e51b8152600401610eb091906159b7565b506000838581614d5357fe5b0495945050505050565b6060816000018054806020026020016040519081016040528092919081815260200182805480156121c657602002820191906000526020600020905b815481526020019060010190808311614d995750505050509050919050565b60009081526001919091016020526040902054151590565b6000614ddc8383614db8565b614e12575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556109db565b5060006109db565b5490565b6000826000018281548110614e2f57fe5b9060005260206000200154905092915050565b60405180610100016040528060608152602001606081526020016060815260200160608152602001606081526020016060815260200160608152602001606081525090565b604051806040016040528060008152602001606081525090565b828054828255906000526020600020908101928215614ef6579160200282015b82811115614ef657825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190614ec1565b50614f0292915061504e565b5090565b828054828255906000526020600020908101928215614f41579160200282015b82811115614f41578251825591602001919060010190614f26565b50614f0292915061506d565b60405180602001604052806001905b614f64614f7a565b815260200190600190039081614f5c5790505090565b604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b6040518060800160405280614fb7615082565b8152602001614fc4615082565b8152602001614fd1615082565b8152602001614fde615082565b905290565b828054828255906000526020600020908101928215614ef6579160200282015b82811115614ef65781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190615003565b60408051808201909152600081526060602082015290565b5b80821115614f025780546001600160a01b031916815560010161504f565b5b80821115614f02576000815560010161506e565b60405180608001604052806150956150b8565b81526020016150a26150b8565b81526020016150af6150b8565b8152602001614fde5b604051806040016040528060008152602001600081525090565b60008083601f8401126150e3578182fd5b5081356001600160401b038111156150f9578182fd5b602083019150836020808302850101111561511357600080fd5b9250929050565b600082601f83011261512a578081fd5b813561513d61513882615e93565b615e6d565b81815291506020808301908481018184028601820187101561515e57600080fd5b60005b848110156118f457813584529282019290820190600101615161565b6000610100828403121561518f578081fd5b6151996080615e6d565b90506151a583836151e3565b81526151b483604084016151e3565b60208201526151c683608084016151e3565b60408201526151d88360c084016151e3565b606082015292915050565b6000604082840312156151f4578081fd5b6151fe6040615e6d565b9050813581526020820135602082015292915050565b600060208284031215615225578081fd5b813561215581615ede565b600060208284031215615241578081fd5b815161215581615ede565b6000806040838503121561525e578081fd5b823561526981615ede565b9150602083013561527981615ede565b809150509250929050565b6000806000806000806080878903121561529c578182fd5b86356152a781615ede565b955060208701356152b781615ede565b945060408701356001600160401b03808211156152d2578384fd5b6152de8a838b016150d2565b909650945060608901359150808211156152f6578384fd5b5061530389828a016150d2565b979a9699509497509295939492505050565b600080600060608486031215615329578283fd5b833561533481615ede565b9250602084013561534481615ede565b929592945050506040919091013590565b60008060408385031215615367578182fd5b823561537281615ede565b9150602083013561527981615ef3565b600080828403610420811215615396578283fd5b83356153a181615ede565b9250610400601f19820112156153b5578182fd5b506153c06080615e6d565b6153cd856020860161517d565b81526153dd85610120860161517d565b60208201526153f085610220860161517d565b604082015261540385610320860161517d565b6060820152809150509250929050565b60008060408385031215615425578182fd5b823561543081615ede565b946020939093013593505050565b60008060008060008060808789031215615456578384fd5b863561546181615ede565b95506020870135945060408701356001600160401b03808211156152d2578586fd5b60006020808385031215615495578182fd5b82516001600160401b038111156154aa578283fd5b8301601f810185136154ba578283fd5b80516154c861513882615e93565b81815283810190838501858402850186018910156154e4578687fd5b8694505b8385101561550f5780516154fb81615ede565b8352600194909401939185019185016154e8565b50979650505050505050565b6000806040838503121561552d578182fd5b82356001600160401b0380821115615543578384fd5b818501915085601f830112615556578384fd5b813561556461513882615e93565b80828252602080830192508086018a828387028901011115615584578889fd5b8896505b848710156155af57803561559b81615ede565b845260019690960195928101928101615588565b5090965087013593505050808211156155c6578283fd5b506155d38582860161511a565b9150509250929050565b600060208083850312156155ef578182fd5b82516001600160401b03811115615604578283fd5b8301601f81018513615614578283fd5b805161562261513882615e93565b818152838101908385018584028501860189101561563e578687fd5b8694505b8385101561550f578051835260019490940193918501918501615642565b600060208284031215615671578081fd5b815161215581615ef3565b60006020828403121561568d578081fd5b815160028110612155578182fd5b6000602082840312156156ac578081fd5b5035919050565b6000602082840312156156c4578081fd5b5051919050565b6000602082840312156156dc578081fd5b815160ff81168114612155578182fd5b80516001600160a01b03168252602080820151908301526040908101519082015260600190565b6000815180845260208085019450808401835b8381101561574b5781516001600160a01b031687529582019590820190600101615726565b509495945050505050565b6000815180845260208085019450808401835b8381101561574b57815187529582019590820190600101615769565b60008251615797818460208701615eb2565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6000602082526121556020830184615713565b60208082528251828201819052600091906040908185019080840286018301878501865b838110156158b957888303603f1901855281518051845287015187840187905280518785019081906158758183615e64565b938b01938c935091505b808310156158a4576158928285516156ec565b91508a8401935060018301925061587f565b50968901969450505090860190600101615843565b509098975050505050505050565b60608101818360005b60018110156158f5576158e48383516156ec565b9250602091909101906001016158d0565b50505092915050565b60208082528251828201819052600091906040908185019080840286018301878501865b838110156158b957888303603f19018552815180516001600160a01b0316845287015187840187905261595787850182615756565b9588019593505090860190600101615922565b6000602082526121556020830184615756565b901515815260200190565b60006020825282602083015282846040840137818301604090810191909152601f909201601f19160101919050565b60006020825282518060208401526159d6816040850160208701615eb2565b601f01601f19169190910160400192915050565b60208082526012908201527122a9292fa727aa2fa1a7a72a2927a62622a960711b604082015260600190565b6020808252601390820152724552525f4e4f545f4352505f464143544f525960681b604082015260600190565b6020808252600d908201526c22a9292fa727aa2fa7aba722a960991b604082015260600190565b60208082526011908201527011549497d21054d7d393d7d49155d05491607a1b604082015260600190565b6020808252601b908201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604082015260600190565b6020808252600c908201526b696e697469616c697a65642160a01b604082015260600190565b6020808252601a908201527908aa4a4bea89e968a9cbe988a9c8ea890be9c9ea8be9a82a886960331b604082015260600190565b60208082526010908201526f20b2323932b9b99034b99027bbb732b960811b604082015260600190565b6020808252601790820152764552525f494e56414c49445f4b4f4c5f4144445245535360481b604082015260600190565b6020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b60208082526010908201526f4552525f5a45524f5f4144445245535360801b604082015260600190565b6020808252600990820152682737ba1027bbb732b960b91b604082015260600190565b60208082526006908201526506f776e6572560d41b604082015260600190565b6020808252601890820152774552525f494e56414c49445f504f4f4c5f4144445245535360401b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252600d908201526c11549497d21054d7d4d1551151609a1b604082015260600190565b60208082526019908201527811549497d393d517d0d3d354131155115117d0d3d3131150d5603a1b604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b6020808252601f908201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604082015260600190565b6000602082528251610100806020850152615d8e610120850183615713565b91506020850151601f1980868503016040870152615dac8483615713565b93506040870151915080868503016060870152615dc98483615713565b93506060870151915080868503016080870152615de68483615713565b935060808701519150808685030160a0870152615e038483615756565b935060a08701519150808685030160c0870152615e208483615756565b935060c08701519150808685030160e0870152615e3d8483615756565b935060e0870151915080868503018387015250615e5a8382615756565b9695505050505050565b90815260200190565b6040518181016001600160401b0381118282101715615e8b57600080fd5b604052919050565b60006001600160401b03821115615ea8578081fd5b5060209081020190565b60005b83811015615ecd578181015183820152602001615eb5565b83811115614d205750506000910152565b6001600160a01b03811681146128e257600080fd5b80151581146128e257600080fdfea26469706673582212207118d0ac63a855d0d8be2198f88e04ac08511afea6dfcf80cc7d6a82d93d25b264736f6c634300060c0033",
  "deployedBytecode": "0x60806040526004361061026e5760003560e01c80638da901ba1161014b5780638da901ba146105e95780639155dae714610609578063921850541461062957806392eefe9b14610649578063990cc58614610669578063992f6ba51461068957806399e44181146106a9578063a0e67e2b146106c9578063a74f1524146106de578063bb408f2d146106fe578063c0fcb1661461071e578063c1e576221461073e578063c5318d0f1461075e578063c90361dd1461077e578063cf4fe6351461079e578063cfa11d7e146107cb578063d29986c1146107eb578063d6b485a514610800578063d7256c7014610820578063e65065d914610840578063ebee7bcc14610860578063ec7a4b5214610880578063ece23143146108a0578063edb12adf146108c0578063f26bee8a146108e0578063f36ed92814610900578063f8b24b091461092057610275565b8063025e7c271461027a5780630b83e629146102b05780630e99089c146102dd57806314b60ee71461030a578063154726b21461032a578063173825d91461034a5780631cc9a5791461036c5780631eae039c146103995780631f70e80b146103b957806327304dfd146103ce5780633018205f146103fb578063309a042c146104105780633ef1447914610425578063430bf08a146104455780634660c5a51461045a57806346bead891461047a5780634934d18f1461049a5780634d4ae12d146104ba5780635834bac4146104e75780636429866a1461050757806367e0e0761461053457806368092bd9146105615780636936674d146105815780636fd4ba9c146105a15780637234100a146105c157806378a619de146105e157610275565b3661027557005b600080fd5b34801561028657600080fd5b5061029a61029536600461569b565b610940565b6040516102a791906157a1565b60405180910390f35b3480156102bc57600080fd5b506102d06102cb36600461524c565b610967565b6040516102a7919061596a565b3480156102e957600080fd5b506102fd6102f8366004615214565b6109e1565b6040516102a79190615e64565b34801561031657600080fd5b506102fd610325366004615413565b610db3565b34801561033657600080fd5b506102fd61034536600461524c565b610dd0565b34801561035657600080fd5b5061036a610365366004615214565b610e86565b005b34801561037857600080fd5b5061038c610387366004615214565b6110a9565b6040516102a7919061581f565b3480156103a557600080fd5b5061036a6103b4366004615315565b611215565b3480156103c557600080fd5b506102fd611258565b3480156103da57600080fd5b506103ee6103e9366004615214565b61125e565b6040516102a7919061597d565b34801561040757600080fd5b5061029a611273565b34801561041c57600080fd5b506102d0611282565b34801561043157600080fd5b5061036a61044036600461551b565b6112da565b34801561045157600080fd5b5061029a611430565b34801561046657600080fd5b5061036a610475366004615382565b61143f565b34801561048657600080fd5b506102fd61049536600461524c565b611696565b3480156104a657600080fd5b5061029a6104b5366004615214565b6118ff565b3480156104c657600080fd5b506104da6104d5366004615214565b61191a565b6040516102a791906158c7565b3480156104f357600080fd5b506102fd610502366004615315565b611a7a565b34801561051357600080fd5b50610527610522366004615214565b61215c565b6040516102a7919061580c565b34801561054057600080fd5b5061055461054f366004615214565b6121d2565b6040516102a79190615d6f565b34801561056d57600080fd5b5061036a61057c366004615355565b6124e6565b34801561058d57600080fd5b5061036a61059c366004615214565b61257b565b3480156105ad57600080fd5b506102fd6105bc366004615214565b6128e5565b3480156105cd57600080fd5b506102fd6105dc366004615214565b61297c565b61036a612a19565b3480156105f557600080fd5b506103ee610604366004615214565b612a6f565b34801561061557600080fd5b5061036a61062436600461543e565b612af6565b34801561063557600080fd5b506102fd610644366004615214565b612c61565b34801561065557600080fd5b5061036a610664366004615214565b612c73565b34801561067557600080fd5b5061029a610684366004615413565b612dd5565b34801561069557600080fd5b5061036a6106a4366004615413565b612e0a565b3480156106b557600080fd5b506102fd6106c436600461524c565b612f33565b3480156106d557600080fd5b50610527612f50565b3480156106ea57600080fd5b506102fd6106f936600461524c565b612fb1565b34801561070a57600080fd5b5061029a61071936600461524c565b612fce565b34801561072a57600080fd5b506103ee610739366004615214565b612ff4565b34801561074a57600080fd5b5061036a610759366004615214565b613012565b34801561076a57600080fd5b506102fd61077936600461569b565b61309e565b34801561078a57600080fd5b50610527610799366004615214565b6130bc565b3480156107aa57600080fd5b506107be6107b936600461524c565b6130e0565b6040516102a791906158fe565b3480156107d757600080fd5b5061029a6107e6366004615315565b6131c5565b3480156107f757600080fd5b506102fd61320c565b34801561080c57600080fd5b5061036a61081b366004615214565b613212565b34801561082c57600080fd5b5061036a61083b366004615284565b613289565b34801561084c57600080fd5b506102fd61085b36600461524c565b613809565b34801561086c57600080fd5b506102fd61087b366004615315565b6139b3565b34801561088c57600080fd5b506102fd61089b36600461524c565b6139ee565b3480156108ac57600080fd5b506102fd6108bb366004615214565b613a40565b3480156108cc57600080fd5b5061036a6108db366004615214565b613a52565b3480156108ec57600080fd5b506102fd6108fb36600461524c565b613f4f565b34801561090c57600080fd5b506102fd61091b366004615214565b613f6c565b34801561092c57600080fd5b506102fd61093b366004615214565b61402d565b6002818154811061094d57fe5b6000918252602090912001546001600160a01b0316905081565b6001600160a01b0380831660009081526012602090815260408083209385168352928152908290208054835181840281018401909452808452606093928301828280156109d357602002820191906000526020600020905b8154815260200190600101908083116109bf575b505050505090505b92915050565b60006109eb614e42565b6001600160a01b038316600090815260086020908152604091829020825181546101209381028201840190945261010081018481529093919284928491840182828015610a6157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610a43575b5050505050815260200160018201805480602002602001604051908101604052809291908181526020018280548015610ac357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610aa5575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015610b2557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610b07575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015610b8757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610b69575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015610bdf57602002820191906000526020600020905b815481526020019060010190808311610bcb575b5050505050815260200160058201805480602002602001604051908101604052809291908181526020018280548015610c3757602002820191906000526020600020905b815481526020019060010190808311610c23575b5050505050815260200160068201805480602002602001604051908101604052809291908181526020018280548015610c8f57602002820191906000526020600020905b815481526020019060010190808311610c7b575b5050505050815260200160078201805480602002602001604051908101604052809291908181526020018280548015610ce757602002820191906000526020600020905b815481526020019060010190808311610cd3575b5050505050815250509050600081608001515111610d06576000610d20565b8060800151600081518110610d1757fe5b60200260200101515b60a082015151920191610d34576000610d4e565b8060a00151600081518110610d4557fe5b60200260200101515b60c082015151920191610d62576000610d7c565b8060c00151600081518110610d7357fe5b60200260200101515b60e082015151920191610d90576000610daa565b8060e00151600081518110610da157fe5b60200260200101515b90910192915050565b600b60209081526000928352604080842090915290825290205481565b60405163e65065d960e01b81526000908190309063e65065d990610dfa90879087906004016157b5565b60206040518083038186803b158015610e1257600080fd5b505afa158015610e26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4a91906156b3565b6001600160a01b03808616600090815260116020908152604080832093881683529290522054909150610e7d828261403f565b95945050505050565b6000546001600160a01b03163314610eb95760405162461bcd60e51b8152600401610eb0906159ea565b60405180910390fd5b6001600160a01b03811660009081526001602052604090205460ff16610ef15760405162461bcd60e51b8152600401610eb090615a43565b6001600160a01b0381166000908152600160205260408120805460ff19169055805b60025481101561101557826001600160a01b031660028281548110610f3457fe5b6000918252602090912001546001600160a01b0316141561100d57600280546000198101908110610f6157fe5b600091825260209091200154600280546001600160a01b039092169183908110610f8757fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060038181548110610fc257fe5b90600052602060002001549150600360016003805490500381548110610fe457fe5b906000526020600020015460038281548110610ffc57fe5b600091825260209091200155611015565b600101610f13565b50600280548061102157fe5b600082815260209020810160001990810180546001600160a01b0319169055019055600380548061104e57fe5b600082815260208120820160001990810182905590910190915560048054839003905560405182916001600160a01b038516917f7b0884b4b6bb4e0c1385ad42168fa556c14d4d799c1bf22f081aff3efff6ea0c9190a35050565b6001600160a01b0381166000908152600a602052604090205460609081816001600160401b03811180156110dc57600080fd5b5060405190808252806020026020018201604052801561111657816020015b611103614e87565b8152602001906001900390816110fb5790505b50905060015b8260010181101561120d5761112f614e87565b6001600160a01b0386166000908152600b60209081526040808320858452825280832081518083018352815481526001820180548451818702810187019095528085529195929486810194939192919084015b828210156111d7576000848152602090819020604080516060810182526003860290920180546001600160a01b0316835260018082015484860152600290910154918301919091529083529092019101611182565b505050915250909150819050836111ef84600161403f565b815181106111f957fe5b60209081029190910101525060010161111c565b509392505050565b6000546001600160a01b0316331461123f5760405162461bcd60e51b8152600401610eb0906159ea565b6112536001600160a01b0384168383614081565b505050565b60165481565b60016020526000908152604090205460ff1681565b6000546001600160a01b031690565b606060038054806020026020016040519081016040528092919081815260200182805480156112d057602002820191906000526020600020905b8154815260200190600101908083116112bc575b5050505050905090565b6000546001600160a01b031633146113045760405162461bcd60e51b8152600401610eb0906159ea565b80518251146113255760405162461bcd60e51b8152600401610eb090615c01565b60055460ff16156113485760405162461bcd60e51b8152600401610eb090615aca565b60005b82518110156113f657600083828151811061136257fe5b6020908102919091018101516001600160a01b0381166000908152600190925260409091205490915060ff16156113ab5760405162461bcd60e51b8152600401610eb090615b24565b8282815181106113b757fe5b6020908102919091018101516004805490910190556001600160a01b03909116600090815260019182905260409020805460ff1916821790550161134b565b50815161140a906002906020850190614ea1565b50805161141e906003906020840190614f06565b50506005805460ff1916600117905550565b6006546001600160a01b031681565b60055461010090046001600160a01b0316331461146e5760405162461bcd60e51b8152600401610eb090615a16565b6001600160a01b03808316600090815260096020526040908190206005549151636e0cf42160e11b815290926101009092049091169063dc19e842906114b89086906004016157a1565b60206040518083038186803b1580156114d057600080fd5b505afa1580156114e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115089190615660565b6115245760405162461bcd60e51b8152600401610eb090615c21565b805462010000900460ff161561154c5760405162461bcd60e51b8152600401610eb090615c94565b805462ff0000191662010000178155815180518051600184015560209081015160028401558082015180516003850155810151600484015560408083015180516005860155820151600685015560609283015180516007860155820151600885015581850151805180516009870155830151600a860155808301518051600b870155830151600c860155808201518051600d870155830151600e8601558301518051600f8601558201516010850155808501518051805160118701558301516012860155808301518051601387015583015160148601558082015180516015870155830151601686015583015180516017860155820151601885015593820151805180516019860155820151601a850155808201518051601b860155820151601c850155938401518051601d850155810151601e8401559201518051601f83015582015191015550565b60405163391a080560e11b815260009081903090637234100a906116be9087906004016157a1565b60206040518083038186803b1580156116d657600080fd5b505afa1580156116ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170e91906156b3565b90506060846001600160a01b031663a0e67e2b6040518163ffffffff1660e01b815260040160006040518083038186803b15801561174b57600080fd5b505afa15801561175f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526117879190810190615483565b90506060856001600160a01b031663309a042c6040518163ffffffff1660e01b815260040160006040518083038186803b1580156117c457600080fd5b505afa1580156117d8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261180091908101906155dd565b90506000866001600160a01b031663d29986c16040518163ffffffff1660e01b815260040160206040518083038186803b15801561183d57600080fd5b505afa158015611851573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061187591906156b3565b905060005b83518110156118f45783818151811061188f57fe5b60200260200101516001600160a01b0316876001600160a01b031614156118ec576118e0826118da8584815181106118c357fe5b6020026020010151886140d790919063ffffffff16565b90614111565b955050505050506109db565b60010161187a565b505050505092915050565b6007602052600090815260409020546001600160a01b031681565b611922614f4d565b61192a614f7a565b6001600160a01b0383166000908152600c602052604081208054829061194c57fe5b6000918252602090912001546001600160a01b0316808352604051631bf52ea760e21b81529091503090636fd4ba9c9061198a9087906004016157a1565b60206040518083038186803b1580156119a257600080fd5b505afa1580156119b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119da91906156b3565b826040018181525050806001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611a1c57600080fd5b505afa158015611a30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a5491906156cb565b60ff166020830152611a64614f4d565b5050604080516020810190915290815292915050565b6001600160a01b0380841660009081526012602090815260408083209386168352929052908120548190611aaf576000611aed565b6001600160a01b03808616600090815260126020908152604080832093881683529290529081208054909190611ae157fe5b90600052602060002001545b9050611af7614fa4565b506001600160a01b03851660009081526009602081815260408084208151610140810183526001820154610100820190815260028301546101208301526080808301918252845180860186526003850154815260048501548188015260a080850191909152855180870187526005860154815260068601548189015260c08086019190915286518088018852600787015481526008870154818a015260e08601529284528551808401875297850154888301908152600a86015489830152885285518087018752600b8601548152600c860154818901528888015285518087018752600d8601548152600e860154818901528887015285518087018752600f860154815260108601548189015260608981019190915284880198909852855180840187526011860154818401908152601287015482840152815286518088018852601387015481526014870154818a01528189015286518088018852601587015481526016870154818a01528188015286518088018852601787015481526018870154818a0152818a015284870152855192830186526019850154918301918252601a85015490830152815283518085018552601b8401548152601c840154818701528186015283518085018552601d8401548152601e84015481870152818501528351808501909452601f83015484529184015493830193909352808401919091529181019190915290611d0a614e42565b6001600160a01b038816600090815260086020908152604091829020825181546101209381028201840190945261010081018481529093919284928491840182828015611d8057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611d62575b5050505050815260200160018201805480602002602001604051908101604052809291908181526020018280548015611de257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611dc4575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015611e4457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611e26575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015611ea657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611e88575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015611efe57602002820191906000526020600020905b815481526020019060010190808311611eea575b5050505050815260200160058201805480602002602001604051908101604052809291908181526020018280548015611f5657602002820191906000526020600020905b815481526020019060010190808311611f42575b5050505050815260200160068201805480602002602001604051908101604052809291908181526020018280548015611fae57602002820191906000526020600020905b815481526020019060010190808311611f9a575b505050505081526020016007820180548060200260200160405190810160405280929190818152602001828054801561200657602002820191906000526020600020905b815481526020019060010190808311611ff2575b50505050508152505090508360001415612027576000945050505050612155565b8515801561203a57506000816080015151115b156120805761207d6016546118da612056878760000151614150565b846080015160008151811061206757fe5b60200260200101516140d790919063ffffffff16565b91505b856001148015612095575060008160a0015151115b156120c5576120c26016546118da6120b1878760200151614150565b8460a0015160008151811061206757fe5b91505b8560021480156120da575060008160c0015151115b1561210a576121076016546118da6120f6878760400151614150565b8460c0015160008151811061206757fe5b91505b85600314801561211f575060008160e0015151115b1561214f5761214c6016546118da61213b878760600151614150565b8460e0015160008151811061206757fe5b91505b50925050505b9392505050565b6001600160a01b0381166000908152600c60209081526040918290208054835181840281018401909452808452606093928301828280156121c657602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116121a8575b50505050509050919050565b6121da614e42565b6001600160a01b03821660009081526008602090815260409182902082518154610120938102820184019094526101008101848152909391928492849184018282801561225057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612232575b50505050508152602001600182018054806020026020016040519081016040528092919081815260200182805480156122b257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612294575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561231457602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116122f6575b505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561237657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612358575b50505050508152602001600482018054806020026020016040519081016040528092919081815260200182805480156123ce57602002820191906000526020600020905b8154815260200190600101908083116123ba575b505050505081526020016005820180548060200260200160405190810160405280929190818152602001828054801561242657602002820191906000526020600020905b815481526020019060010190808311612412575b505050505081526020016006820180548060200260200160405190810160405280929190818152602001828054801561247e57602002820191906000526020600020905b81548152602001906001019080831161246a575b50505050508152602001600782018054806020026020016040519081016040528092919081815260200182805480156124d657602002820191906000526020600020905b8154815260200190600101908083116124c2575b5050505050815250509050919050565b6000546001600160a01b031633146125105760405162461bcd60e51b8152600401610eb0906159ea565b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051612542929190615988565b60405180910390a26001600160a01b03909116600090815260096020526040902080549115156101000261ff0019909216919091179055565b6040516346d480dd60e11b81523090638da901ba9061259e9084906004016157a1565b60206040518083038186803b1580156125b657600080fd5b505afa1580156125ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125ee9190615660565b156128e257600554604051636e0cf42160e11b81526101009091046001600160a01b03169063dc19e842906126279084906004016157a1565b60206040518083038186803b15801561263f57600080fd5b505afa158015612653573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126779190615660565b6126935760405162461bcd60e51b8152600401610eb090615c21565b806001600160a01b0316635468d6d76040518163ffffffff1660e01b815260040160206040518083038186803b1580156126cc57600080fd5b505afa1580156126e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127049190615660565b6127205760405162461bcd60e51b8152600401610eb090615cbb565b604051630aa3935960e11b8152600090309063154726b29061274890859033906004016157b5565b60206040518083038186803b15801561276057600080fd5b505afa158015612774573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061279891906156b3565b9050600081116127ba5760405162461bcd60e51b8152600401610eb090615a6a565b6001600160a01b03821660009081526011602090815260408083203380855292529091208054830190556127ed906141f7565b156128aa576128a5336001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561282e57600080fd5b505afa158015612842573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128669190615230565b6001600160a01b0384166000908152600c60205260408120805485929061288957fe5b6000918252602090912001546001600160a01b03169190614081565b6128e0565b6128e03382600c6000866001600160a01b03166001600160a01b0316815260200190815260200160002060008154811061288957fe5b505b50565b6001600160a01b0381166000908152600f602052604080822054905163391a080560e11b81526109db91903090637234100a906129269087906004016157a1565b60206040518083038186803b15801561293e57600080fd5b505afa158015612952573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061297691906156b3565b9061403f565b604051631e6ddb2560e31b81526000906109db90309063f36ed928906129a69086906004016157a1565b60206040518083038186803b1580156129be57600080fd5b505afa1580156129d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129f691906156b3565b6040516303a6422760e21b81523090630e99089c906129269087906004016157a1565b6000546001600160a01b03163314612a435760405162461bcd60e51b8152600401610eb0906159ea565b60405133904780156108fc02916000818181858888f193505050501580156128e2573d6000803e3d6000fd5b60006001826001600160a01b03166373a9855c6040518163ffffffff1660e01b815260040160206040518083038186803b158015612aac57600080fd5b505afa158015612ac0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ae4919061567c565b6001811115612aef57fe5b1492915050565b6006546001600160a01b03163314612b205760405162461bcd60e51b8152600401610eb0906159ea565b828114612b3f5760405162461bcd60e51b8152600401610eb090615af0565b6001600160a01b0386811660009081526007602052604090205416612bff57856001600160a01b0316633018205f6040518163ffffffff1660e01b815260040160206040518083038186803b158015612b9757600080fd5b505afa158015612bab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bcf9190615230565b6001600160a01b03878116600090815260076020526040902080546001600160a01b031916929091169190911790555b606080612c0c8888614230565b91509150606080612c22888888888e89896145a8565b91509150612c328a8a84846147ea565b5050506001600160a01b039096166000908152600960205260409020805460ff19166001179055505050505050565b600a6020526000908152604090205481565b6000546001600160a01b03163314612c9d5760405162461bcd60e51b8152600401610eb0906159ea565b6001600160a01b038116612cc35760405162461bcd60e51b8152600401610eb090615bb4565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a360005b600254811015612d8657600054600280546001600160a01b039092169183908110612d2657fe5b6000918252602090912001546001600160a01b03161415612d7e578160028281548110612d4f57fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b600101612cff565b50600080546001600160a01b039081168252600160208190526040808420805460ff199081169091559490921680845291832080549094161790925580546001600160a01b0319169091179055565b600c6020528160005260406000208181548110612dee57fe5b6000918252602090912001546001600160a01b03169150829050565b6000546001600160a01b03163314612e345760405162461bcd60e51b8152600401610eb0906159ea565b6001600160a01b03821660009081526001602052604090205460ff1615612e6d5760405162461bcd60e51b8152600401610eb090615b24565b6001600160a01b0382166000818152600160208190526040808320805460ff191683179055600280548084019091557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319168517905560038054928301815583527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b9091018490556004805485019055518392917fbd5dcf0b25226117c4a68a0129ffdd4b0541ef5e482ad7de9a96ccb6d6a8ebde91a35050565b601460209081526000928352604080842090915290825290205481565b606060028054806020026020016040519081016040528092919081815260200182805480156112d057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612f8a575050505050905090565b601160209081526000928352604080842090915290825290205481565b60156020908152600092835260408084209091529082529020546001600160a01b031681565b6001600160a01b031660009081526009602052604090205460ff1690565b6000546001600160a01b0316331461303c5760405162461bcd60e51b8152600401610eb0906159ea565b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405161306e929190615988565b60405180910390a2600580546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b600381815481106130ab57fe5b600091825260209091200154905081565b6001600160a01b03811660009081526010602052604090206060906109db906148da565b6001600160a01b0380831660009081526013602090815260408083209385168352928152828220805484518184028101840190955280855260609493919290919084015b828210156131b95760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156131a157602002820191906000526020600020905b81548152602001906001019080831161318d575b50505050508152505081526020019060010190613124565b50505050905092915050565b601360205282600052604060002060205281600052604060002081815481106131ea57fe5b60009182526020909120600290910201546001600160a01b0316925083915050565b60045481565b6000546001600160a01b0316331461323c5760405162461bcd60e51b8152600401610eb0906159ea565b600680546001600160a01b0319166001600160a01b0383169081179091556040513391907fc138928eab767a64470bc0dd3d04bce552ce80a6ceb398aa7e37f6dd9891fc1590600090a350565b33838281146132aa5760405162461bcd60e51b8152600401610eb090615af0565b600554604051636e0cf42160e11b81526101009091046001600160a01b03169063dc19e842906132de9085906004016157a1565b60206040518083038186803b1580156132f657600080fd5b505afa15801561330a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061332e9190615660565b61334a5760405162461bcd60e51b8152600401610eb090615c21565b6001600160a01b0382166000908152600c602052604090205461338c576001600160a01b0382166000908152600c6020526040902061338a908787614fe3565b505b6001600160a01b0382811660009081526015602090815260408083208b851684529091529020541680613433576001600160a01b0383811660008181526015602090815260408083208d86168452825280832080546001600160a01b031916958f1695909517909455918152601090915220613408908a6148e6565b613430576001600160a01b038316600090815260106020526040902061342e908a6148fb565b505b50875b6001600160a01b0381166134595760405162461bcd60e51b8152600401610eb090615b4e565b6134918585600081811061346957fe5b6001600160a01b0387166000908152600d602090815260409091205493910201359050614910565b6001600160a01b0384166000908152600d60205260409020556060826001600160401b03811180156134c257600080fd5b506040519080825280602002602001820160405280156134ec578160200160208202803683370190505b50905060005b838110156135d7576001600160a01b038086166000908152601260209081526040808320938716835292905220546135545786868281811061353057fe5b9050602002013582828151811061354357fe5b6020026020010181815250506135cf565b6001600160a01b03808616600090815260126020908152604080832093871683529290522080546135b691908390811061358a57fe5b90600052602060002001548888848181106135a157fe5b9050602002013561491090919063ffffffff16565b8282815181106135c257fe5b6020026020010181815250505b6001016134f2565b506001600160a01b0380851660009081526012602090815260408083209386168352928152919020825161360d92840190614f06565b506001600160a01b0380851660008181526013602090815260408083208786168452825280832093835260148252808320948e16835293905291909120548061374157613658615036565b6001600160a01b038c168152604080516020808b0282810182019093528a825290918b918b91829185019084908082843760009201829052506020868101958652885460018082018b558a845292829020885160029092020180546001600160a01b0319166001600160a01b0390921691909117815595518051889796506136e7955092860193500190614f06565b505050828054905060146000896001600160a01b03166001600160a01b0316815260200190815260200160002060008e6001600160a01b03166001600160a01b0316815260200190815260200160002081905550506137fb565b6001600160a01b03808716600090815260136020908152604080832093881683529290529081208054600019840190811061377857fe5b9060005260206000209060020201905060005b60018201548110156137f8576137d58a8a838181106137a657fe5b905060200201358360010183815481106137bc57fe5b906000526020600020015461491090919063ffffffff16565b8260010182815481106137e457fe5b60009182526020909120015560010161378b565b50505b505050505050505050505050565b6001600160a01b038083166000908152601260209081526040808320938516835292905290812054819061383e5790506109db565b60405163160d2eb160e21b81526138c1903090635834bac49061386a90889088906000906004016157cf565b60206040518083038186803b15801561388257600080fd5b505afa158015613896573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138ba91906156b3565b8290614910565b60405163160d2eb160e21b81529091506138f0903090635834bac49061386a90889088906001906004016157cf565b60405163160d2eb160e21b815290915061391f903090635834bac49061386a90889088906002906004016157cf565b60405163160d2eb160e21b815290915061394e903090635834bac49061386a90889088906003906004016157cf565b6001600160a01b038086166000908152600d602090815260408083205460128352818420948916845293909152812080549394506139ab936118da929061399157fe5b9060005260206000200154846140d790919063ffffffff16565b949350505050565b601260205282600052604060002060205281600052604060002081815481106139d857fe5b9060005260206000200160009250925050505481565b6001600160a01b038083166000908152600e6020908152604080832093851683529290528181205491516346bead8960e01b815290916121559130906346bead899061292690889088906004016157b5565b600d6020526000908152604090205481565b6040516346d480dd60e11b81523090638da901ba90613a759084906004016157a1565b60206040518083038186803b158015613a8d57600080fd5b505afa158015613aa1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ac59190615660565b156128e257600554604051636e0cf42160e11b81526101009091046001600160a01b03169063dc19e84290613afe9084906004016157a1565b60206040518083038186803b158015613b1657600080fd5b505afa158015613b2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b4e9190615660565b613b6a5760405162461bcd60e51b8152600401610eb090615c21565b806001600160a01b0316635468d6d76040518163ffffffff1660e01b815260040160206040518083038186803b158015613ba357600080fd5b505afa158015613bb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bdb9190615660565b613bf75760405162461bcd60e51b8152600401610eb090615cbb565b6040516327304dfd60e01b81526001600160a01b038216906327304dfd90613c239033906004016157a1565b60206040518083038186803b158015613c3b57600080fd5b505afa158015613c4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c739190615660565b80613cff5750336001600160a01b0316816001600160a01b0316633018205f6040518163ffffffff1660e01b815260040160206040518083038186803b158015613cbc57600080fd5b505afa158015613cd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cf49190615230565b6001600160a01b0316145b613d1b5760405162461bcd60e51b8152600401610eb090615bde565b604051631bf52ea760e21b81526000903090636fd4ba9c90613d419085906004016157a1565b60206040518083038186803b158015613d5957600080fd5b505afa158015613d6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d9191906156b3565b905060008111613db35760405162461bcd60e51b8152600401610eb090615a6a565b6001600160a01b0382166000908152600960209081526040808320805460ff19169055600f8252808320805485019055600a909152812054613df6906001614910565b6001600160a01b0384166000908152600c60205260408120805492935090918290613e1d57fe5b6000918252602090912001546001600160a01b03169050613e3c614f7a565b816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015613e7557600080fd5b505afa158015613e89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ead91906156cb565b60ff1660208201526001600160a01b038216815260408101849052613ed485338487614935565b6001600160a01b039485166000908152600a60209081526040808320869055600b825280832095835294815284822042815560019081018054808301825590845292829020845160039094020180546001600160a01b0319169390981692909217875582015190860155909101516002909301929092555050565b600e60209081526000928352604080842090915290825290205481565b6001600160a01b038116600090815260106020526040812081613f8e82614bf8565b905060005b81811015614025573063e65065d986613fac8685614c03565b6040518363ffffffff1660e01b8152600401613fc99291906157b5565b60206040518083038186803b158015613fe157600080fd5b505afa158015613ff5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061401991906156b3565b90930192600101613f93565b505050919050565b600f6020526000908152604090205481565b600061215583836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250614c0f565b6112538363a9059cbb60e01b84846040516024016140a09291906157f3565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614c3b565b6000826140e6575060006109db565b828202828482816140f357fe5b04146121555760405162461bcd60e51b8152600401610eb090615c53565b600061215583836040518060400160405280601a815260200179536166654d6174683a206469766973696f6e206279207a65726f60301b815250614d26565b8051516000908310801590614169575060208201515183105b1561417a57508051602001516109db565b6020820151518310801590614193575060408201515183105b156141a6575060208082015101516109db565b60408201515183108015906141bf575060608201515183105b156141d357506040810151602001516109db565b60608201515183106141ee57506060810151602001516109db565b50600092915050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708181148015906139ab575050151592915050565b60608061423b614e42565b6001600160a01b0385166000908152600860209081526040918290208251815461012093810282018401909452610100810184815290939192849284918401828280156142b157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311614293575b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561431357602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116142f5575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561437557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311614357575b50505050508152602001600382018054806020026020016040519081016040528092919081815260200182805480156143d757602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116143b9575b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561442f57602002820191906000526020600020905b81548152602001906001019080831161441b575b505050505081526020016005820180548060200260200160405190810160405280929190818152602001828054801561448757602002820191906000526020600020905b815481526020019060010190808311614473575b50505050508152602001600682018054806020026020016040519081016040528092919081815260200182805480156144df57602002820191906000526020600020905b8154815260200190600101908083116144cb575b505050505081526020016007820180548060200260200160405190810160405280929190818152602001828054801561453757602002820191906000526020600020905b815481526020019060010190808311614523575b50505050508152505090508360001415614558578051608082015190935091505b836001141561457057806020015192508060a0015191505b836002141561458857806040015192508060c0015191505b83600314156145a057806060015192508060e0015191505b509250929050565b60608087806001600160401b03811180156145c257600080fd5b506040519080825280602002602001820160405280156145ec578160200160208202803683370190505b509250806001600160401b038111801561460557600080fd5b5060405190808252806020026020018201604052801561462f578160200160208202803683370190505b5091508351600014801561464257508451155b156146d75760005b818110156146d1578a8a8281811061465e57fe5b90506020020160208101906146739190615214565b84828151811061467f57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508888828181106146ab57fe5b905060200201358382815181106146be57fe5b602090810291909101015260010161464a565b506147dd565b60005b818110156147db578a8a828181106146ee57fe5b90506020020160208101906147039190615214565b6001600160a01b031686828151811061471857fe5b60200260200101516001600160a01b031614156147d357600089898381811061473d57fe5b9050602002013590508b8b8381811061475257fe5b90506020020160208101906147679190615214565b85838151811061477357fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506147b9818784815181106147a357fe5b602002602001015161491090919063ffffffff16565b8483815181106147c557fe5b602002602001018181525050505b6001016146da565b505b5097509795505050505050565b6001600160a01b0384166000908152600860205260409020836148315782516148199082906020860190614ea1565b50815161482f9060048301906020850190614f06565b505b836001141561486757825161484f9060018301906020860190614ea1565b5081516148659060058301906020850190614f06565b505b836002141561489d5782516148859060028301906020860190614ea1565b50815161489b9060068301906020850190614f06565b505b83600314156148d35782516148bb9060038301906020860190614ea1565b5081516148d19060078301906020850190614f06565b505b5050505050565b60608061215583614d5d565b6000612155836001600160a01b038416614db8565b6000612155836001600160a01b038416614dd0565b6000828201838110156121555760405162461bcd60e51b8152600401610eb090615a95565b6060846001600160a01b031663a0e67e2b6040518163ffffffff1660e01b815260040160006040518083038186803b15801561497057600080fd5b505afa158015614984573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526149ac9190810190615483565b90506060856001600160a01b031663309a042c6040518163ffffffff1660e01b815260040160006040518083038186803b1580156149e957600080fd5b505afa1580156149fd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052614a2591908101906155dd565b90506000866001600160a01b031663d29986c16040518163ffffffff1660e01b815260040160206040518083038186803b158015614a6257600080fd5b505afa158015614a76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a9a91906156b3565b905060005b8351811015614bee576000614ad4836118da868581518110614abd57fe5b6020026020010151896140d790919063ffffffff16565b6001600160a01b03808b166000908152600e60209081526040808320938d168352929052908120805483019055865191925090614b2d90879085908110614b1757fe5b60200260200101516001600160a01b03166141f7565b614b4a57858381518110614b3d57fe5b6020026020010151614bce565b858381518110614b5657fe5b60200260200101516001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015614b9657600080fd5b505afa158015614baa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614bce9190615230565b9050614be46001600160a01b0389168284614081565b5050600101614a9f565b5050505050505050565b60006109db82614e1a565b60006121558383614e1e565b60008184841115614c335760405162461bcd60e51b8152600401610eb091906159b7565b505050900390565b614c4d826001600160a01b03166141f7565b614c695760405162461bcd60e51b8152600401610eb090615d38565b60006060836001600160a01b031683604051614c859190615785565b6000604051808303816000865af19150503d8060008114614cc2576040519150601f19603f3d011682016040523d82523d6000602084013e614cc7565b606091505b509150915081614ce95760405162461bcd60e51b8152600401610eb090615b7f565b805115614d205780806020019051810190614d049190615660565b614d205760405162461bcd60e51b8152600401610eb090615cee565b50505050565b60008183614d475760405162461bcd60e51b8152600401610eb091906159b7565b506000838581614d5357fe5b0495945050505050565b6060816000018054806020026020016040519081016040528092919081815260200182805480156121c657602002820191906000526020600020905b815481526020019060010190808311614d995750505050509050919050565b60009081526001919091016020526040902054151590565b6000614ddc8383614db8565b614e12575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556109db565b5060006109db565b5490565b6000826000018281548110614e2f57fe5b9060005260206000200154905092915050565b60405180610100016040528060608152602001606081526020016060815260200160608152602001606081526020016060815260200160608152602001606081525090565b604051806040016040528060008152602001606081525090565b828054828255906000526020600020908101928215614ef6579160200282015b82811115614ef657825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190614ec1565b50614f0292915061504e565b5090565b828054828255906000526020600020908101928215614f41579160200282015b82811115614f41578251825591602001919060010190614f26565b50614f0292915061506d565b60405180602001604052806001905b614f64614f7a565b815260200190600190039081614f5c5790505090565b604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b6040518060800160405280614fb7615082565b8152602001614fc4615082565b8152602001614fd1615082565b8152602001614fde615082565b905290565b828054828255906000526020600020908101928215614ef6579160200282015b82811115614ef65781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190615003565b60408051808201909152600081526060602082015290565b5b80821115614f025780546001600160a01b031916815560010161504f565b5b80821115614f02576000815560010161506e565b60405180608001604052806150956150b8565b81526020016150a26150b8565b81526020016150af6150b8565b8152602001614fde5b604051806040016040528060008152602001600081525090565b60008083601f8401126150e3578182fd5b5081356001600160401b038111156150f9578182fd5b602083019150836020808302850101111561511357600080fd5b9250929050565b600082601f83011261512a578081fd5b813561513d61513882615e93565b615e6d565b81815291506020808301908481018184028601820187101561515e57600080fd5b60005b848110156118f457813584529282019290820190600101615161565b6000610100828403121561518f578081fd5b6151996080615e6d565b90506151a583836151e3565b81526151b483604084016151e3565b60208201526151c683608084016151e3565b60408201526151d88360c084016151e3565b606082015292915050565b6000604082840312156151f4578081fd5b6151fe6040615e6d565b9050813581526020820135602082015292915050565b600060208284031215615225578081fd5b813561215581615ede565b600060208284031215615241578081fd5b815161215581615ede565b6000806040838503121561525e578081fd5b823561526981615ede565b9150602083013561527981615ede565b809150509250929050565b6000806000806000806080878903121561529c578182fd5b86356152a781615ede565b955060208701356152b781615ede565b945060408701356001600160401b03808211156152d2578384fd5b6152de8a838b016150d2565b909650945060608901359150808211156152f6578384fd5b5061530389828a016150d2565b979a9699509497509295939492505050565b600080600060608486031215615329578283fd5b833561533481615ede565b9250602084013561534481615ede565b929592945050506040919091013590565b60008060408385031215615367578182fd5b823561537281615ede565b9150602083013561527981615ef3565b600080828403610420811215615396578283fd5b83356153a181615ede565b9250610400601f19820112156153b5578182fd5b506153c06080615e6d565b6153cd856020860161517d565b81526153dd85610120860161517d565b60208201526153f085610220860161517d565b604082015261540385610320860161517d565b6060820152809150509250929050565b60008060408385031215615425578182fd5b823561543081615ede565b946020939093013593505050565b60008060008060008060808789031215615456578384fd5b863561546181615ede565b95506020870135945060408701356001600160401b03808211156152d2578586fd5b60006020808385031215615495578182fd5b82516001600160401b038111156154aa578283fd5b8301601f810185136154ba578283fd5b80516154c861513882615e93565b81815283810190838501858402850186018910156154e4578687fd5b8694505b8385101561550f5780516154fb81615ede565b8352600194909401939185019185016154e8565b50979650505050505050565b6000806040838503121561552d578182fd5b82356001600160401b0380821115615543578384fd5b818501915085601f830112615556578384fd5b813561556461513882615e93565b80828252602080830192508086018a828387028901011115615584578889fd5b8896505b848710156155af57803561559b81615ede565b845260019690960195928101928101615588565b5090965087013593505050808211156155c6578283fd5b506155d38582860161511a565b9150509250929050565b600060208083850312156155ef578182fd5b82516001600160401b03811115615604578283fd5b8301601f81018513615614578283fd5b805161562261513882615e93565b818152838101908385018584028501860189101561563e578687fd5b8694505b8385101561550f578051835260019490940193918501918501615642565b600060208284031215615671578081fd5b815161215581615ef3565b60006020828403121561568d578081fd5b815160028110612155578182fd5b6000602082840312156156ac578081fd5b5035919050565b6000602082840312156156c4578081fd5b5051919050565b6000602082840312156156dc578081fd5b815160ff81168114612155578182fd5b80516001600160a01b03168252602080820151908301526040908101519082015260600190565b6000815180845260208085019450808401835b8381101561574b5781516001600160a01b031687529582019590820190600101615726565b509495945050505050565b6000815180845260208085019450808401835b8381101561574b57815187529582019590820190600101615769565b60008251615797818460208701615eb2565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6000602082526121556020830184615713565b60208082528251828201819052600091906040908185019080840286018301878501865b838110156158b957888303603f1901855281518051845287015187840187905280518785019081906158758183615e64565b938b01938c935091505b808310156158a4576158928285516156ec565b91508a8401935060018301925061587f565b50968901969450505090860190600101615843565b509098975050505050505050565b60608101818360005b60018110156158f5576158e48383516156ec565b9250602091909101906001016158d0565b50505092915050565b60208082528251828201819052600091906040908185019080840286018301878501865b838110156158b957888303603f19018552815180516001600160a01b0316845287015187840187905261595787850182615756565b9588019593505090860190600101615922565b6000602082526121556020830184615756565b901515815260200190565b60006020825282602083015282846040840137818301604090810191909152601f909201601f19160101919050565b60006020825282518060208401526159d6816040850160208701615eb2565b601f01601f19169190910160400192915050565b60208082526012908201527122a9292fa727aa2fa1a7a72a2927a62622a960711b604082015260600190565b6020808252601390820152724552525f4e4f545f4352505f464143544f525960681b604082015260600190565b6020808252600d908201526c22a9292fa727aa2fa7aba722a960991b604082015260600190565b60208082526011908201527011549497d21054d7d393d7d49155d05491607a1b604082015260600190565b6020808252601b908201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604082015260600190565b6020808252600c908201526b696e697469616c697a65642160a01b604082015260600190565b6020808252601a908201527908aa4a4bea89e968a9cbe988a9c8ea890be9c9ea8be9a82a886960331b604082015260600190565b60208082526010908201526f20b2323932b9b99034b99027bbb732b960811b604082015260600190565b6020808252601790820152764552525f494e56414c49445f4b4f4c5f4144445245535360481b604082015260600190565b6020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b60208082526010908201526f4552525f5a45524f5f4144445245535360801b604082015260600190565b6020808252600990820152682737ba1027bbb732b960b91b604082015260600190565b60208082526006908201526506f776e6572560d41b604082015260600190565b6020808252601890820152774552525f494e56414c49445f504f4f4c5f4144445245535360401b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252600d908201526c11549497d21054d7d4d1551151609a1b604082015260600190565b60208082526019908201527811549497d393d517d0d3d354131155115117d0d3d3131150d5603a1b604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b6020808252601f908201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604082015260600190565b6000602082528251610100806020850152615d8e610120850183615713565b91506020850151601f1980868503016040870152615dac8483615713565b93506040870151915080868503016060870152615dc98483615713565b93506060870151915080868503016080870152615de68483615713565b935060808701519150808685030160a0870152615e038483615756565b935060a08701519150808685030160c0870152615e208483615756565b935060c08701519150808685030160e0870152615e3d8483615756565b935060e0870151915080868503018387015250615e5a8382615756565b9695505050505050565b90815260200190565b6040518181016001600160401b0381118282101715615e8b57600080fd5b604052919050565b60006001600160401b03821115615ea8578081fd5b5060209081020190565b60005b83811015615ecd578181015183820152602001615eb5565b83811115614d205750506000910152565b6001600160a01b03811681146128e257600080fd5b80151581146128e257600080fdfea26469706673582212207118d0ac63a855d0d8be2198f88e04ac08511afea6dfcf80cc7d6a82d93d25b264736f6c634300060c0033",
  "libraries": {},
  "devdoc": {
    "author": "Desyn Labs",
    "kind": "dev",
    "methods": {
      "getController()": {
        "details": "external for gas optimization",
        "returns": {
          "_0": "address - of the owner (AKA controller)"
        }
      },
      "removeOwner(address)": {
        "details": "Allows to remove an owner. Transaction has to be sent by wallet.",
        "params": {
          "owner": "Address of owner."
        }
      },
      "setAddAdminList(address,uint256)": {
        "details": "external for gas optimization",
        "params": {
          "newOwner": "- address of new owner"
        }
      },
      "setController(address)": {
        "details": "external for gas optimization",
        "params": {
          "newOwner": "- address of new owner"
        }
      }
    },
    "title": "Vault managerFee",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getController()": {
        "notice": "Returns the address of the current owner"
      },
      "setAddAdminList(address,uint256)": {
        "notice": "Transfers ownership of the contract to a new account (`newOwner`).         Can only be called by the current owner"
      },
      "setController(address)": {
        "notice": "Transfers ownership of the contract to a new account (`newOwner`).         Can only be called by the current owner"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 17729,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 17733,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "adminList",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 17736,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "owners",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 17739,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "ownerPercentage",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 17741,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "allOwnerPercentage",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 17743,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "initialized",
        "offset": 0,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 9601,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "crpFactory",
        "offset": 1,
        "slot": "5",
        "type": "t_contract(ICRPFactory)9582"
      },
      {
        "astId": 9603,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "vaultAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 9666,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "poolManager",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 9670,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "poolsTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(PoolTokens)9647_storage)"
      },
      {
        "astId": 9674,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "poolsStatus",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_struct(PoolStatus)9656_storage)"
      },
      {
        "astId": 9678,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "recordNumber",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9684,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "recordList",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(ClaimRecordInfo)9622_storage))"
      },
      {
        "astId": 9689,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "kolTokenList",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 9693,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "initTotalAmountList",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9699,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "managerClaimedList",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 9703,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "poolManangerHasClaimed",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9707,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "kolsList",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_struct(AddressSet)15412_storage)"
      },
      {
        "astId": 9713,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "kolClaimedList",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 9720,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "kolTotalAmountList",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_mapping(t_address,t_array(t_uint256)dyn_storage))"
      },
      {
        "astId": 9727,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "kolUserInfo",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_mapping(t_address,t_array(t_struct(KolUserInfo)9662_storage)dyn_storage))"
      },
      {
        "astId": 9733,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "userIndexList",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 9739,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "userKolList",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 9742,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "RATIO_TOTAL",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(ClaimTokenInfo)9616_storage)dyn_storage": {
        "base": "t_struct(ClaimTokenInfo)9616_storage",
        "encoding": "dynamic_array",
        "label": "struct UserVault.ClaimTokenInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(KolUserInfo)9662_storage)dyn_storage": {
        "base": "t_struct(KolUserInfo)9662_storage",
        "encoding": "dynamic_array",
        "label": "struct UserVault.KolUserInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ICRPFactory)9582": {
        "encoding": "inplace",
        "label": "contract ICRPFactory",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_struct(KolUserInfo)9662_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct UserVault.KolUserInfo[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(KolUserInfo)9662_storage)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_array(t_struct(KolUserInfo)9662_storage)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct UserVault.KolUserInfo[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_struct(KolUserInfo)9662_storage)dyn_storage)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_array(t_uint256)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(ClaimRecordInfo)9622_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct UserVault.ClaimRecordInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(ClaimRecordInfo)9622_storage)"
      },
      "t_mapping(t_address,t_struct(AddressSet)15412_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)15412_storage"
      },
      "t_mapping(t_address,t_struct(PoolStatus)9656_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct UserVault.PoolStatus)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolStatus)9656_storage"
      },
      "t_mapping(t_address,t_struct(PoolTokens)9647_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct UserVault.PoolTokens)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolTokens)9647_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(ClaimRecordInfo)9622_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct UserVault.ClaimRecordInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(ClaimRecordInfo)9622_storage"
      },
      "t_struct(AddressSet)15412_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 15411,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)15225_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ClaimRecordInfo)9622_storage": {
        "encoding": "inplace",
        "label": "struct UserVault.ClaimRecordInfo",
        "members": [
          {
            "astId": 9618,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "time",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9621,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "tokens",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_struct(ClaimTokenInfo)9616_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ClaimTokenInfo)9616_storage": {
        "encoding": "inplace",
        "label": "struct UserVault.ClaimTokenInfo",
        "members": [
          {
            "astId": 9611,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 9613,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "decimals",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9615,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(KolPoolParams)16229_storage": {
        "encoding": "inplace",
        "label": "struct SmartPoolManager.KolPoolParams",
        "members": [
          {
            "astId": 16222,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "managerFee",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(feeParams)16220_storage"
          },
          {
            "astId": 16224,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "issueFee",
            "offset": 0,
            "slot": "8",
            "type": "t_struct(feeParams)16220_storage"
          },
          {
            "astId": 16226,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "redeemFee",
            "offset": 0,
            "slot": "16",
            "type": "t_struct(feeParams)16220_storage"
          },
          {
            "astId": 16228,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "perfermanceFee",
            "offset": 0,
            "slot": "24",
            "type": "t_struct(feeParams)16220_storage"
          }
        ],
        "numberOfBytes": "1024"
      },
      "t_struct(KolUserInfo)9662_storage": {
        "encoding": "inplace",
        "label": "struct UserVault.KolUserInfo",
        "members": [
          {
            "astId": 9658,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "userAdr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 9661,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "userAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PoolStatus)9656_storage": {
        "encoding": "inplace",
        "label": "struct UserVault.PoolStatus",
        "members": [
          {
            "astId": 9649,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "couldManagerClaim",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 9651,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "isBlackList",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 9653,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "isSetParams",
            "offset": 2,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 9655,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "kolPoolConfig",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(KolPoolParams)16229_storage"
          }
        ],
        "numberOfBytes": "1056"
      },
      "t_struct(PoolTokens)9647_storage": {
        "encoding": "inplace",
        "label": "struct UserVault.PoolTokens",
        "members": [
          {
            "astId": 9625,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "tokenList",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 9628,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "issueTokens",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 9631,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "redeemTokens",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 9634,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "perfermanceTokens",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 9637,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "managerAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 9640,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "issueAmount",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 9643,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "redeemAmount",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 9646,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "perfermanceAmount",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(Set)15225_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 15220,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 15224,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(feeParams)16220_storage": {
        "encoding": "inplace",
        "label": "struct SmartPoolManager.feeParams",
        "members": [
          {
            "astId": 16213,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "firstLevel",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(levelParams)16211_storage"
          },
          {
            "astId": 16215,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "secondLevel",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(levelParams)16211_storage"
          },
          {
            "astId": 16217,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "thirdLevel",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(levelParams)16211_storage"
          },
          {
            "astId": 16219,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "fourLevel",
            "offset": 0,
            "slot": "6",
            "type": "t_struct(levelParams)16211_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(levelParams)16211_storage": {
        "encoding": "inplace",
        "label": "struct SmartPoolManager.levelParams",
        "members": [
          {
            "astId": 16208,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "level",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 16210,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "ratio",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
