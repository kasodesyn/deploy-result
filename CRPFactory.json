{
  "address": "0x6dB7600498f9Da40DE669E66f042EC53dbb5fA2C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_bytecode",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "middleware",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "LOG_MIDDLEWARE",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "LOG_USER_VAULT",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "LogNewCrp",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "bytecodes",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "isCrp",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factoryAddress",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "poolTokenSymbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "poolTokenName",
              "type": "string"
            },
            {
              "internalType": "address[]",
              "name": "constituentTokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenBalances",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenWeights",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "swapFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "managerFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "redeemFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "issueFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "perfermanceFee",
              "type": "uint256"
            },
            {
              "internalType": "enum IConfigurableRightsPool.Etypes",
              "name": "etype",
              "type": "uint8"
            }
          ],
          "internalType": "struct IConfigurableRightsPool.PoolParams",
          "name": "poolParams",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "canPauseSwapping",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canChangeSwapFee",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canChangeWeights",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canAddRemoveTokens",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canWhitelistLPs",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canTokenWhiteLists",
              "type": "bool"
            }
          ],
          "internalType": "struct RightsManager.Rights",
          "name": "rights",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "firstLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "secondLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "thirdLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "fourLevel",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SmartPoolManager.feeParams",
              "name": "managerFee",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "firstLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "secondLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "thirdLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "fourLevel",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SmartPoolManager.feeParams",
              "name": "issueFee",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "firstLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "secondLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "thirdLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "fourLevel",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SmartPoolManager.feeParams",
              "name": "redeemFee",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "firstLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "secondLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "thirdLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "fourLevel",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SmartPoolManager.feeParams",
              "name": "perfermanceFee",
              "type": "tuple"
            }
          ],
          "internalType": "struct SmartPoolManager.KolPoolParams",
          "name": "kolPoolParams",
          "type": "tuple"
        },
        {
          "internalType": "address[]",
          "name": "owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ownerPercentage",
          "type": "uint256[]"
        }
      ],
      "name": "newCrp",
      "outputs": [
        {
          "internalType": "contract IConfigurableRightsPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_bytecodes",
          "type": "bytes"
        }
      ],
      "name": "setByteCodes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newVault",
          "type": "address"
        }
      ],
      "name": "setUserVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "userVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5be58a0492a0d24f46d8eac21b4cf50c2ab1ea511cbfa3b7ed48072637a682a9",
  "receipt": {
    "to": null,
    "from": "0x595b85b4A418e3B8df897D02F5BD49167D00862F",
    "contractAddress": "0x6dB7600498f9Da40DE669E66f042EC53dbb5fA2C",
    "transactionIndex": 20,
    "gasUsed": "18833462",
    "logsBloom": "0x
    "blockHash": "0xf94a22bce42e8ad81b7b577ae9dec8f4bad819568584d106ed2c9979c35aa7d6",
    "transactionHash": "0x5be58a0492a0d24f46d8eac21b4cf50c2ab1ea511cbfa3b7ed48072637a682a9",
    "logs": [],
    "blockNumber": 7920629,
    "cumulativeGasUsed": "21174925",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x608060405262278d006022553480156200001857600080fd5b5060405162006236380380620062368339810160408190526200003b91620001cf565b815182908290620000549060039060208501906200008c565b5080516200006a9060049060208401906200008c565b5050600580546001600160a01b0319163317905550506001600a555062000236565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620000cf57805160ff1916838001178555620000ff565b82800160010185558215620000ff579182015b82811115620000ff578251825591602001919060010190620000e2565b506200010d92915062000111565b5090565b5b808211156200010d576000815560010162000112565b600082601f83011262000139578081fd5b81516001600160401b038082111562000150578283fd5b6040516020601f8401601f191682018101838111838210171562000172578586fd5b806040525081945083825286818588010111156200018f57600080fd5b600092505b83831015620001b3578583018101518284018201529182019162000194565b83831115620001c55760008185840101525b5050505092915050565b60008060408385031215620001e2578182fd5b82516001600160401b0380821115620001f9578384fd5b620002078683870162000128565b935060208501519150808211156200021d578283fd5b506200022c8582860162000128565b9150509250929050565b615ff080620002466000396000f3fe608060405234801561001057600080fd5b50600436106102a35760003560e01c80637228c87b1161016e5780637228c87b146104a757806372ba9acd146104c657806373a9855c146104e757806374983a0d146104fc5780637dc2cd9814610504578063806c6f871461050c5780638259e6a01461051f57806391a806c91461053257806392eefe9b1461054557806395d89b4114610558578063980e8db614610560578063992f6ba51461057a5780639d829c2b1461058d578063a0e67e2b14610595578063a3f4df7e146105aa578063a6c245c4146105b2578063a89ae4ba146105c5578063a9059cbb146105cd578063b02f0b73146105e0578063b61d27f6146105f3578063b64ef17b14610606578063c5318d0f1461060e578063c83a1c2d14610621578063d29986c114610634578063d2fed42e1461063c578063d73dd62314610644578063dd62ed3e14610657578063e2762d4b1461066a578063f3b085721461067d576102a3565b8063025e7c27146102a857806306fdde03146102d15780630892b93d146102e6578063095dcccc146102fb578063095ea7b31461030e5780630a1659401461032e578063173825d91461033657806318160ddd14610349578063220eb7601461035e57806323b872dd1461037157806327304dfd146103845780632e0f2625146103975780633018205f146103ac578063309a042c146103b4578063313ce567146103c957806337c6f4d9146103d15780633befcde8146103e45780633ef14479146103f7578063430bf08a1461040a57806347786d37146104125780634ba57882146104255780635468d6d71461043857806355b190551461044057806355c32a231461045357806356fb3bd614610466578063661884631461046e5780636e49db1c1461048157806370a0823114610494575b600080fd5b6102bb6102b6366004615212565b610685565b6040516102c891906154dc565b60405180910390f35b6102d96106ac565b6040516102c89190615774565b6102f96102f4366004615344565b610742565b005b6102f9610309366004614f38565b6109b7565b61032161031c366004614f38565b6109e4565b6040516102c8919061567b565b6102bb610a3d565b6102f9610344366004614cd8565b610a4c565b610351610c2e565b6040516102c89190615d89565b6102f961036c366004615212565b610c34565b61032161037f366004614d48565b610c5f565b610321610392366004614cd8565b610d89565b61039f610d9e565b6040516102c89190615e91565b6102bb610da3565b6103bc610db2565b6040516102c89190615668565b61039f610e09565b6103216103df3660046151f3565b610e0e565b6102f96103f236600461528b565b610ea3565b6102f961040536600461507e565b611641565b6102bb611734565b6102f9610420366004615212565b611743565b6102f9610433366004615212565b611871565b610321611899565b6102f961044e366004614dcd565b6118a9565b6102f9610461366004614f38565b611c9c565b610321611cc5565b61032161047c366004614f38565b611cd5565b6102f961048f366004614d88565b611daf565b6103516104a2366004614cd8565b61215a565b6104af612175565b6040516102c89b9a99989796959493929190615e43565b6104d96104d4366004614cd8565b612199565b6040516102c8929190615831565b6104ef6121b2565b6040516102c8919061581d565b6102bb6121bb565b6103516121d3565b61032161051a366004614cd8565b6121d9565b6102f961052d366004615212565b612222565b6104d9610540366004614cd8565b6122bf565b6102f9610553366004614cd8565b6122d8565b6102d9612384565b6105686123e5565b6040516102c8969594939291906156a7565b6102f9610588366004614f38565b61241e565b6102bb612547565b61059d61255f565b6040516102c891906155e3565b6102d96125c0565b6102f96105c0366004615118565b6125ec565b6102bb61279f565b6103216105db366004614f38565b6127ae565b6102f96105ee366004615242565b6127ea565b6102d9610601366004614f63565b612f73565b6102bb613137565b61035161061c366004615212565b613146565b6102f961062f366004614cd8565b613164565b610351613280565b6102f9613286565b610321610652366004614f38565b613660565b610351610665366004614d10565b6136d4565b6102f9610678366004614cd8565b6136ff565b6102bb613834565b6007818154811061069257fe5b6000918252602090912001546001600160a01b0316905081565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156107385780601f1061070d57610100808354040283529160200191610738565b820191906000526020600020905b81548152906001019060200180831161071b57829003601f168201915b5050505050905090565b6005546001600160a01b031633146107755760405162461bcd60e51b815260040161076c90615862565b60405180910390fd5b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516107a7929190615760565b60405180910390a26002600a5414156107d25760405162461bcd60e51b815260040161076c90615a5e565b6002600a55600160275460ff1660018111156107ea57fe5b14156109a357601654604051633e9fc0bd60e01b815273D3090165Aa2A37e952Df395d95bd5305D811744591633e9fc0bd9161082c9187918990600401615da9565b60006040518083038186803b15801561084457600080fd5b505af4158015610858573d6000803e3d6000fd5b50505050610895601f60008154811061086d57fe5b906000526020600020015461088f83602001518761384c90919063ffffffff16565b906138c9565b601655601f80546108c391906000906108aa57fe5b600091825260209091200154825161088f90879061384c565b6017556040516108d2906154ba565b60405190819003812060165490913391600080516020615f5b833981519152916108fe91600091615831565b60405180910390a3604051610912906154cb565b60405190819003812060175490913391600080516020615f5b8339815191529161093e91600091615831565b60405180910390a360004284018184600281111561095857fe5b141561096757601e915061098f565b600184600281111561097557fe5b1415610987576301e13380915061098f565b6303c2670091505b601285905560138190556014829055016015555b6109ac8461395a565b50506001600a555050565b3330146109d65760405162461bcd60e51b815260040161076c90615862565b6109e08282613cac565b5050565b3360008181526002602090815260408083206001600160a01b03871680855292528083208590555191929091600080516020615f9b83398151915290610a2b908690615d89565b60405180910390a35060015b92915050565b600f546001600160a01b031681565b6005546001600160a01b03163314610a765760405162461bcd60e51b815260040161076c90615862565b6001600160a01b0381166000908152600660205260408120805460ff19169055805b600754811015610b9a57826001600160a01b031660078281548110610ab957fe5b6000918252602090912001546001600160a01b03161415610b9257600780546000198101908110610ae657fe5b600091825260209091200154600780546001600160a01b039092169183908110610b0c57fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060088181548110610b4757fe5b90600052602060002001549150600860016008805490500381548110610b6957fe5b906000526020600020015460088281548110610b8157fe5b600091825260209091200155610b9a565b600101610a98565b506007805480610ba657fe5b600082815260209020810160001990810180546001600160a01b03191690550190556008805480610bd357fe5b600082815260208120820160001990810182905590910190915560098054839003905560405182916001600160a01b038516917f7b0884b4b6bb4e0c1385ad42168fa556c14d4d799c1bf22f081aff3efff6ea0c9190a35050565b60005490565b333014610c535760405162461bcd60e51b815260040161076c90615862565b610c5c81613cb7565b50565b60006001600160a01b038316610c875760405162461bcd60e51b815260040161076c90615944565b336001600160a01b0385161480610cc157506001600160a01b03841660009081526002602090815260408083203384529091529020548211155b610cdd5760405162461bcd60e51b815260040161076c90615bad565b610ce8848484613d1f565b6001600160a01b0384166000818152600260209081526040808320338085529252909120549114801590610d1e57506000198114155b15610d7c57610d2d8184613dbe565b6001600160a01b03861660008181526002602090815260408083203380855292529182902084905590519092600080516020615f9b83398151915291610d739190615d89565b60405180910390a35b60019150505b9392505050565b60066020526000908152604090205460ff1681565b601281565b6005546001600160a01b031690565b6060600880548060200260200160405190810160405280929190818152602001828054801561073857602002820191906000526020600020905b815481526020019060010190808311610dec575050505050905090565b601290565b6040516322c1aa2560e11b8152600090732c05086fbc0701a179e05416e8142c8ff100f85f90634583544a90610e4b906011908690600401615d1c565b60206040518083038186803b158015610e6357600080fd5b505af4158015610e77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9b919061516e565b90505b919050565b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051610ed5929190615760565b60405180910390a26002600a541415610f005760405162461bcd60e51b815260040161076c90615a5e565b6002600a556010546001600160a01b0316610f2d5760405162461bcd60e51b815260040161076c906159c3565b6011543360009081526021602052604090205473D3090165Aa2A37e952Df395d95bd5305D81174459163dba4989a9160ff600160201b90920482169116600160275460ff166001811115610f7d57fe5b146012600101546040518563ffffffff1660e01b8152600401610fa394939291906156d7565b60006040518083038186803b158015610fbb57600080fd5b505af4158015610fcf573d6000803e3d6000fd5b505060105460405163a1925f1d60e01b81526060935073D3090165Aa2A37e952Df395d95bd5305D8117445925063a1925f1d916110209130916001600160a01b0316908a908a908a906004016157c1565b60006040518083038186803b15801561103857600080fd5b505af415801561104c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261107491908101906150de565b90506060601060009054906101000a90046001600160a01b03166001600160a01b031663cc77828d6040518163ffffffff1660e01b815260040160006040518083038186803b1580156110c657600080fd5b505afa1580156110da573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111029190810190614fe6565b9050606081516001600160401b038111801561111d57600080fd5b50604051908082528060200260200182016040528015611147578160200160208202803683370190505b50601a54909150600090600160275460ff16600181111561116457fe5b14156112f25760245460405163108ad9bd60e21b81526001600160a01b039091169063422b66f49061119c90879089906004016155f6565b602060405180830381600087803b1580156111b657600080fd5b505af11580156111ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ee919061522a565b9150600f60009054906101000a90046001600160a01b03166001600160a01b031663703a9ec96040518163ffffffff1660e01b815260040160206040518083038186803b15801561123e57600080fd5b505afa158015611252573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112769190614cf4565b6001600160a01b031663d7256c70873387896040518563ffffffff1660e01b81526004016112a7949392919061552e565b600060405180830381600087803b1580156112c157600080fd5b505af11580156112d5573d6000803e3d6000fd5b5050602454600160b01b900460ff16151591506112f29050575060005b60005b845181101561149557600085828151811061130c57fe5b60200260200101519050600087838151811061132457fe5b60200260200101519050816001600160a01b0316336001600160a01b03167fea39e3b35c5cd8937999ed5f7fbab30acd562a931fc4a887fed2a47c3074aa72836040516113719190615d89565b60405180910390a36000611385828661384c565b905061139b83336113968585613dbe565b613df7565b841561148a576040516323b872dd60e01b81526000906001600160a01b038516906323b872dd906113d4903390309087906004016154f0565b602060405180830381600087803b1580156113ee57600080fd5b505af1158015611402573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611426919061516e565b602354909150600090611446906001600160a01b03878116911685614040565b90508180156114525750805b61146e5760405162461bcd60e51b815260040161076c90615c0e565b8289878151811061147b57fe5b60200260200101818152505050505b5050506001016112f5565b50801561150657602354604051631483d99d60e01b81526001600160a01b0390911690631483d99d906114d39087908790819060009060040161561b565b600060405180830381600087803b1580156114ed57600080fd5b505af1158015611501573d6000803e3d6000fd5b505050505b61150f89611890565b611519338a6109d6565b811561156057336000908152602560205260409020805461153a908b6141e7565b81553360009081526025602052604090206001015461155990846141e7565b6001909101555b6000600160275460ff16600181111561157557fe5b1480156115f75750601260050154306001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156115bc57600080fd5b505afa1580156115d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f4919061522a565b10155b801561160d5750602454600160b01b900460ff16155b90508015611630576024805460ff60b01b1916600160b01b17905561163061420c565b50506001600a555050505050505050565b6005546001600160a01b0316331461166b5760405162461bcd60e51b815260040161076c90615862565b805182511461168c5760405162461bcd60e51b815260040161076c90615a14565b60005b8251811015611707578181815181106116a457fe5b60200260200101516009600082825401925050819055506001600660008584815181106116cd57fe5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905560010161168f565b50815161171b906007906020850190614998565b50805161172f9060089060208401906149fd565b505050565b6023546001600160a01b031681565b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051611775929190615760565b60405180910390a26002600a5414156117a05760405162461bcd60e51b815260040161076c90615a5e565b6002600a556010546001600160a01b03166117cd5760405162461bcd60e51b815260040161076c906159c3565b6005546001600160a01b031633146117f75760405162461bcd60e51b815260040161076c90615862565b600060275460ff16600181111561180a57fe5b146118275760405162461bcd60e51b815260040161076c90615cf1565b604051611833906154ba565b60405190819003812060165490913391600080516020615f5b8339815191529161185f91908690615831565b60405180910390a36016556001600a55565b3330146118905760405162461bcd60e51b815260040161076c90615862565b610c5c8161447b565b602454600160b01b900460ff1681565b73D3090165Aa2A37e952Df395d95bd5305D81174456380681cab8360a001518460c001518561010001518660e001518761012001518860600151518960800151518a6040015151602460159054906101000a900460ff166040518a63ffffffff1660e01b815260040161192499989796959493929190615e02565b60006040518083038186803b15801561193c57600080fd5b505af4158015611950573d6000803e3d6000fd5b50506024805460ff60a81b1916600160a81b17905550508051601180546020808501516040808701516060880151608089015160a08a01511515600160281b0260ff60281b19911515600160201b0260ff60201b1993151563010000000263ff00000019951515620100000262ff0000199815156101000261ff00199d151560ff19909c169b909b179c909c169990991796909616999099179290921695909517949094169190911792909216939093179091558301518051611a1792601e920190614998565b5060608201518051611a3191601f916020909101906149fd565b5060808201518051611a4991602091908201906149fd565b506040805161016081018252600080825260208201819052918101829052606081018290526000196080820181905260a0820183905260c08581015190830181905260e0808701519084018190526101008088015190850181905261012080890151908601819052426101409687018190526012889055601388905560148890556015889055601695909555601796909655601892909255601955601a55601b92909255601c919091558201516027805460ff191660018381811115611b0b57fe5b0217905550600f80546001600160a01b0319166001600160a01b0385811691909117918290556040805163b18b78dd60e01b81529051929091169163b18b78dd91600480820192602092909190829003018186803b158015611b6c57600080fd5b505afa158015611b80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba49190614cf4565b602480546001600160a01b0319166001600160a01b03928316179055600f54604080516311b2515f60e31b815290519190921691638d928af8916004808301926020929190829003018186803b158015611bfd57600080fd5b505afa158015611c11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c359190614cf4565b602380546001600160a01b0319166001600160a01b0392909216919091179055601954601a54601854601b546040517f3d6667963e842e2b5ff1d4feab2c9b92f17c9003592e2ad229952eeb9a293fd091611c8f91615d89565b60405180910390a4505050565b333014611cbb5760405162461bcd60e51b815260040161076c90615862565b6109e082826144a8565b602454600160a81b900460ff1681565b3360009081526002602090815260408083206001600160a01b0386168452909152812054808310611d29573360009081526002602090815260408083206001600160a01b0388168452909152812055611d58565b611d338184613dbe565b3360009081526002602090815260408083206001600160a01b03891684529091529020555b3360008181526002602090815260408083206001600160a01b038916808552925291829020549151909291600080516020615f9b83398151915291611d9d9190615d89565b60405180910390a35060019392505050565b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051611de1929190615760565b60405180910390a26002600a541415611e0c5760405162461bcd60e51b815260040161076c90615a5e565b6002600a553360009081526006602052604090205460ff1680611e3957506005546001600160a01b031633145b611e555760405162461bcd60e51b815260040161076c9061583f565b6010546001600160a01b0316611e7d5760405162461bcd60e51b815260040161076c906159c3565b73D3090165Aa2A37e952Df395d95bd5305D811744563eab73485600160275460ff166001811115611eaa57fe5b60135460155460115460405160e087901b6001600160e01b0319168152611ee79594909414936201000090910460ff16908b908b90600401615728565b60006040518083038186803b158015611eff57600080fd5b505af4158015611f13573d6000803e3d6000fd5b50505050611f20836144b3565b60235460405163607e58b360e11b81526000916001600160a01b03169063c0fcb16690611f519030906004016154dc565b60206040518083038186803b158015611f6957600080fd5b505afa158015611f7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fa1919061516e565b9050801561200c5760235460405163edb12adf60e01b81526001600160a01b039091169063edb12adf90611fd99030906004016154dc565b600060405180830381600087803b158015611ff357600080fd5b505af1158015612007573d6000803e3d6000fd5b505050505b601054604051630bcded8960e21b81526001600160a01b0390911690632f37b6249061203c9087906004016154dc565b60206040518083038186803b15801561205457600080fd5b505afa158015612068573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061208c919061516e565b6120d0576010546000906120af906001600160a01b038781169116600019614040565b9050806120ce5760405162461bcd60e51b815260040161076c90615c0e565b505b6010546040516350884c9160e01b815273D3090165Aa2A37e952Df395d95bd5305D8117445916350884c919161211e9130916001600160a01b03909116908a908a908a908a90600401615787565b60006040518083038186803b15801561213657600080fd5b505af415801561214a573d6000803e3d6000fd5b50506001600a5550505050505050565b6001600160a01b031660009081526001602052604090205490565b601254601354601454601554601654601754601854601954601a54601b54601c548b565b6026602052600090815260409020805460019091015482565b60275460ff1681565b732c05086fbc0701a179e05416e8142c8ff100f85f90565b60225481565b601154600090600160201b900460ff161561221057506001600160a01b03811660009081526021602052604090205460ff16610e9e565b506001600160a01b0381161515610e9e565b6005546001600160a01b0316331461224c5760405162461bcd60e51b815260040161076c90615862565b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405161227e929190615760565b60405180910390a26002600a5414156122a95760405162461bcd60e51b815260040161076c90615a5e565b6002600a556122b78161395a565b506001600a55565b6025602052600090815260409020805460019091015482565b6005546001600160a01b031633146123025760405162461bcd60e51b815260040161076c90615862565b6001600160a01b0381166123285760405162461bcd60e51b815260040161076c90615944565b6005546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b0319166001600160a01b0392909216919091179055565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156107385780601f1061070d57610100808354040283529160200191610738565b60115460ff80821691610100810482169162010000820481169163010000008104821691600160201b8204811691600160281b90041686565b6005546001600160a01b031633146124485760405162461bcd60e51b815260040161076c90615862565b6001600160a01b03821660009081526006602052604090205460ff16156124815760405162461bcd60e51b815260040161076c906158e5565b6001600160a01b038216600081815260066020526040808220805460ff19166001908117909155600780548083019091557fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880180546001600160a01b0319168517905560088054918201815583527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee3018490556009805485019055518392917fbd5dcf0b25226117c4a68a0129ffdd4b0541ef5e482ad7de9a96ccb6d6a8ebde91a35050565b73D3090165Aa2A37e952Df395d95bd5305D811744590565b6060600780548060200260200160405190810160405280929190818152602001828054801561073857602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612599575050505050905090565b6040518060400160405280601081526020016f11195cde5b8814db585c9d08141bdbdb60821b81525081565b6005546001600160a01b031633146126165760405162461bcd60e51b815260040161076c90615862565b601154600160281b900460ff1680156126395750602454600160a01b900460ff16155b6126555760405162461bcd60e51b815260040161076c9061588e565b80518251146126765760405162461bcd60e51b815260040161076c90615bdd565b60005b815181101561278757600f5483516000916001600160a01b031690638f49f44d908690859081106126a657fe5b60200260200101518585815181106126ba57fe5b60200260200101516040518363ffffffff1660e01b81526004016126df929190615d92565b60206040518083038186803b1580156126f757600080fd5b505afa15801561270b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061272f919061516e565b90508061274e5760405162461bcd60e51b815260040161076c9061596e565b61277e84838151811061275d57fe5b602002602001015184848151811061277157fe5b6020026020010151614586565b50600101612679565b50506024805460ff60a01b1916600160a01b17905550565b6024546001600160a01b031681565b60006001600160a01b0383166127d65760405162461bcd60e51b815260040161076c90615944565b6127e1338484613d1f565b50600192915050565b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405161281c929190615760565b60405180910390a26002600a5414156128475760405162461bcd60e51b815260040161076c90615a5e565b6002600a556010546001600160a01b03166128745760405162461bcd60e51b815260040161076c906159c3565b73D3090165Aa2A37e952Df395d95bd5305D8117445633468facb600160275460ff1660018111156128a157fe5b60245460155460135433600090815260256020526040908190208054600190910154915160e089901b6001600160e01b03191681526128f8979690961495600160b01b90950460ff16949091908c906004016156f6565b604080518083038186803b15801561290f57600080fd5b505af4158015612923573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129479190615321565b33600090815260256020526040808220600181019390935592909155601054915163151c70f960e21b8152909160609173D3090165Aa2A37e952Df395d95bd5305D811744591635471c3e4916129b39130916001600160a01b03909116908a908a908a906004016157c1565b60006040518083038186803b1580156129cb57600080fd5b505af41580156129df573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612a0791908101906152e7565b91509150612a153386611cbb565b612a1e82610c53565b6010546040805163cc77828d60e01b815290516060926001600160a01b03169163cc77828d916004808301926000929190829003018186803b158015612a6357600080fd5b505afa158015612a77573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612a9f9190810190614fe6565b9050606081516001600160401b0381118015612aba57600080fd5b50604051908082528060200260200182016040528015612ae4578160200160208202803683370190505b509050600080600160275460ff166001811115612afd57fe5b148015612b0c57506015544210155b15612b985760245460405163108ad9bd60e21b81526001600160a01b039091169063422b66f490612b4390879089906004016155f6565b602060405180830381600087803b158015612b5d57600080fd5b505af1158015612b71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b95919061522a565b91505b601954600160275460ff166001811115612bae57fe5b1415612be257602454600090600160b01b900460ff16158015612bd357506013544210155b90508015612be057600091505b505b8215612cbd57336000908152602660209081526040808320805460019182015460259094529382902080549101549151633796ed7f60e21b81528e9473D3090165Aa2A37e952Df395d95bd5305D81174459463de5bb5fc94612c4f94929391929188908c90600401615dda565b60606040518083038186803b158015612c6757600080fd5b505af4158015612c7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c9f91906153b1565b33600090815260266020526040902060018101929092559190559250505b606085516001600160401b0381118015612cd657600080fd5b50604051908082528060200260200182016040528015612d00578160200160208202803683370190505b50905060005b8651811015612ed7576000878281518110612d1d57fe5b60200260200101519050600080600073D3090165Aa2A37e952Df395d95bd5305D811744563c0dcb71f8d8781518110612d5257fe5b6020026020010151898b6012600901546040518563ffffffff1660e01b8152600401612d819493929190615dbf565b60606040518083038186803b158015612d9957600080fd5b505af4158015612dad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dd191906153b1565b92509250925080868681518110612de457fe5b602002602001018181525050836001600160a01b0316336001600160a01b03167fc62fc35ac75e3bff532648e2859a3e1694002cfa357614ae8e034df7f83db5e984604051612e339190615d89565b60405180910390a3612e4684338461468d565b86151580612e605750600088118015612e605750601b5415155b15612ec757612e7084308561468d565b602354600090612e8d906001600160a01b03878116911686614040565b905080612eac5760405162461bcd60e51b815260040161076c90615ac6565b838b8781518110612eb957fe5b602002602001018181525050505b505060019092019150612d069050565b5081151580612ef25750600083118015612ef25750601b5415155b15612f6157602354604051631483d99d60e01b81526001600160a01b0390911690631483d99d90612f2e9089908990869060019060040161561b565b600060405180830381600087803b158015612f4857600080fd5b505af1158015612f5c573d6000803e3d6000fd5b505050505b50506001600a55505050505050505050565b6060336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051612fa7929190615760565b60405180910390a26002600a541415612fd25760405162461bcd60e51b815260040161076c90615a5e565b6002600a556010546001600160a01b0316612fff5760405162461bcd60e51b815260040161076c906159c3565b600f546040516338f0d24560e01b81526001600160a01b03909116906338f0d245906130319030903390600401615514565b60206040518083038186803b15801561304957600080fd5b505afa15801561305d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613081919061516e565b61309d5760405162461bcd60e51b815260040161076c906158b5565b601054604051635b0e93fb60e11b81526001600160a01b039091169063b61d27f6906130d3908890889088908890600401615590565b600060405180830381600087803b1580156130ed57600080fd5b505af1158015613101573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613129919081019061518a565b6001600a5595945050505050565b6010546001600160a01b031681565b6008818154811061315357fe5b600091825260209091200154905081565b6005546001600160a01b0316331461318e5760405162461bcd60e51b815260040161076c90615862565b6002600a5414156131b15760405162461bcd60e51b815260040161076c90615a5e565b6002600a556040513390600080356001600160e01b031916916131d691903690615760565b60405180910390a2601154604051630d3aa47160e41b815273D3090165Aa2A37e952Df395d95bd5305D81174459163d3aa47109161322691600160201b900460ff16906001908690600401615686565b60006040518083038186803b15801561323e57600080fd5b505af4158015613252573d6000803e3d6000fd5b505050506001600160a01b03166000908152602160205260409020805460ff19166001908117909155600a55565b60095481565b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516132b8929190615760565b60405180910390a26002600a5414156132e35760405162461bcd60e51b815260040161076c90615a5e565b6002600a55600f546040805163911fb03560e01b8152905133926001600160a01b03169163911fb035916004808301926020929190829003018186803b15801561332c57600080fd5b505afa158015613340573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133649190614cf4565b6001600160a01b03161461338a5760405162461bcd60e51b815260040161076c906159a1565b6010546001600160a01b03166133b25760405162461bcd60e51b815260040161076c906159c3565b60006133c3426012600a0154613dbe565b90506022548110156133e75760405162461bcd60e51b815260040161076c90615a83565b600060225482816133f457fe5b0490506060601060009054906101000a90046001600160a01b03166001600160a01b031663cc77828d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561344757600080fd5b505afa15801561345b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526134839190810190614fe6565b9050606081516001600160401b038111801561349e57600080fd5b506040519080825280602002602001820160405280156134c8578160200160208202803683370190505b50905060005b82518110156135e05760008382815181106134e557fe5b602090810291909101015160105460405163f8b2cb4f60e01b81529192506000916001600160a01b039091169063f8b2cb4f906135269085906004016154dc565b60206040518083038186803b15801561353e57600080fd5b505afa158015613552573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613576919061522a565b9050600061359582600c89601260060154028161358f57fe5b0461384c565b90506135a283308361468d565b6023546135bc906001600160a01b03858116911683614040565b50808585815181106135ca57fe5b60209081029190910101525050506001016134ce565b50602354604051630bac7b8160e01b81526001600160a01b0390911690630bac7b819061361390859085906004016155f6565b600060405180830381600087803b15801561362d57600080fd5b505af1158015613641573d6000803e3d6000fd5b5050602254601c80549690910290950190945550506001600a55505050565b3360009081526002602090815260408083206001600160a01b038616845290915281205461368e90836141e7565b3360008181526002602090815260408083206001600160a01b03891680855292529182902084905590519092600080516020615f9b83398151915291610a2b9190615d89565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b6005546001600160a01b031633146137295760405162461bcd60e51b815260040161076c90615862565b6002600a54141561374c5760405162461bcd60e51b815260040161076c90615a5e565b6002600a556040513390600080356001600160e01b0319169161377191903690615760565b60405180910390a26011546001600160a01b03821660009081526021602052604090819020549051630d3aa47160e41b815273D3090165Aa2A37e952Df395d95bd5305D81174459263d3aa4710926137de92600160201b90920460ff908116929116908690600401615686565b60006040518083038186803b1580156137f657600080fd5b505af415801561380a573d6000803e3d6000fd5b505050506001600160a01b03166000908152602160205260409020805460ff191690556001600a55565b73e96db147c2d1b7af2a3dd07388b1cc7b086f3c8d90565b60008261385b57506000610a37565b8282028284828161386857fe5b04146138865760405162461bcd60e51b815260040161076c90615af7565b6706f05b59d3b200008101818110156138b15760405162461bcd60e51b815260040161076c90615af7565b6000670de0b6b3a7640000825b049695505050505050565b6000816138e85760405162461bcd60e51b815260040161076c90615b58565b826138f557506000610a37565b670de0b6b3a76400008381029084828161390b57fe5b04146139295760405162461bcd60e51b815260040161076c90615a34565b6002830481018181101561394f5760405162461bcd60e51b815260040161076c90615a34565b60008482816138be57fe5b6010546001600160a01b0316156139835760405162461bcd60e51b815260040161076c906159ec565b61398c81611890565b61399633826109d6565b600f60009054906101000a90046001600160a01b03166001600160a01b03166391cefde46040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156139e657600080fd5b505af11580156139fa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a1e9190614cf4565b601080546001600160a01b0319166001600160a01b03928316179081905560405163d03f2a0f60e01b815273D3090165Aa2A37e952Df395d95bd5305D81174459263d03f2a0f92613a76929116908590600401615577565b60006040518083038186803b158015613a8e57600080fd5b505af4158015613aa2573d6000803e3d6000fd5b5050505060005b601e54811015613c70576000601e8281548110613ac257fe5b6000918252602082200154601f80546001600160a01b0390921693509084908110613ae957fe5b90600052602060002001549050600060208481548110613b0557fe5b90600052602060002001549050613b1b836144b3565b6040516323b872dd60e01b81526000906001600160a01b038516906323b872dd90613b4e903390309088906004016154f0565b602060405180830381600087803b158015613b6857600080fd5b505af1158015613b7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ba0919061516e565b905080613bbf5760405162461bcd60e51b815260040161076c90615c0e565b601054613bdb906001600160a01b038681169116600019614040565b905080613bfa5760405162461bcd60e51b815260040161076c90615c0e565b601054604051631c9c3ca760e31b81526001600160a01b039091169063e4e1e53890613c2e908790879087906004016155c2565b600060405180830381600087803b158015613c4857600080fd5b505af1158015613c5c573d6000803e3d6000fd5b505060019096019550613aa9945050505050565b505b601e5415610c5c57601e805480613c8557fe5b600082815260209020810160001990810180546001600160a01b0319169055019055613c72565b6109e0308383613d1f565b30600090815260016020526040902054613cd19082613dbe565b3060009081526001602052604081209190915554613cef9082613dbe565b60009081556040513090600080516020615f7b83398151915290613d14908590615d89565b60405180910390a350565b6001600160a01b038316600090815260016020526040902054613d429082613dbe565b6001600160a01b038085166000908152600160205260408082209390935590841681522054613d7190826141e7565b6001600160a01b038084166000818152600160205260409081902093909355915190851690600080516020615f7b83398151915290613db1908590615d89565b60405180910390a3505050565b6000806000613dcd85856148ce565b915091508015613def5760405162461bcd60e51b815260040161076c90615c9c565b509392505050565b6010546001600160a01b0316613e1f5760405162461bcd60e51b815260040161076c906159c3565b60105460405163f8b2cb4f60e01b81526000916001600160a01b03169063f8b2cb4f90613e509087906004016154dc565b60206040518083038186803b158015613e6857600080fd5b505afa158015613e7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ea0919061522a565b601054604051634a46c67360e11b81529192506000916001600160a01b039091169063948d8ce690613ed69088906004016154dc565b60206040518083038186803b158015613eee57600080fd5b505afa158015613f02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f26919061522a565b90506000856001600160a01b03166323b872dd8630876040518463ffffffff1660e01b8152600401613f5a939291906154f0565b602060405180830381600087803b158015613f7457600080fd5b505af1158015613f88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fac919061516e565b905080613fcb5760405162461bcd60e51b815260040161076c90615c0e565b6010546001600160a01b0316633fdddaa287613fe786886141e7565b856040518463ffffffff1660e01b8152600401614006939291906155c2565b600060405180830381600087803b15801561402057600080fd5b505af1158015614034573d6000803e3d6000fd5b50505050505050505050565b600080846001600160a01b031663dd62ed3e30866040518363ffffffff1660e01b8152600401614071929190615514565b60206040518083038186803b15801561408957600080fd5b505afa15801561409d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140c1919061522a565b9050828114156140d5576001915050610d82565b801561415e5760405163095ea7b360e01b81526001600160a01b0386169063095ea7b39061410a908790600090600401615577565b602060405180830381600087803b15801561412457600080fd5b505af1158015614138573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061415c919061516e565b505b60405163095ea7b360e01b81526001600160a01b0386169063095ea7b39061418c9087908790600401615577565b602060405180830381600087803b1580156141a657600080fd5b505af11580156141ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141de919061516e565b95945050505050565b600082820183811015610d825760405162461bcd60e51b815260040161076c90615cc7565b601a5415614479576010546040805163cc77828d60e01b815290516060926001600160a01b03169163cc77828d916004808301926000929190829003018186803b15801561425957600080fd5b505afa15801561426d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526142959190810190614fe6565b9050606081516001600160401b03811180156142b057600080fd5b506040519080825280602002602001820160405280156142da578160200160208202803683370190505b50905060005b825181101561440c5760008382815181106142f757fe5b602090810291909101015160105460405163f8b2cb4f60e01b81529192506000916001600160a01b039091169063f8b2cb4f906143389085906004016154dc565b60206040518083038186803b15801561435057600080fd5b505afa158015614364573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614388919061522a565b9050600061439b8260126008015461384c565b90506143a883308361468d565b808585815181106143b557fe5b60209081029190910101526023546000906143dd906001600160a01b03868116911684614040565b9050806143fc5760405162461bcd60e51b815260040161076c90615c0e565b5050600190920191506142e09050565b50602354604051631483d99d60e01b81526001600160a01b0390911690631483d99d906144449085908590819060009060040161561b565b600060405180830381600087803b15801561445e57600080fd5b505af1158015614472573d6000803e3d6000fd5b5050505050505b565b614484816148f3565b6016546000541115610c5c5760405162461bcd60e51b815260040161076c90615b7e565b6109e0823083613d1f565b600f5460405163db7ca46b60e01b81526001600160a01b039091169063db7ca46b906144e39084906004016154dc565b60206040518083038186803b1580156144fb57600080fd5b505afa15801561450f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614533919061516e565b61454f5760405162461bcd60e51b815260040161076c90615b21565b602454600160a01b900460ff1615610c5c5761456a81614951565b610c5c5760405162461bcd60e51b815260040161076c9061590f565b6001600160a01b0381166145ac5760405162461bcd60e51b815260040161076c90615c37565b6145b581614951565b156145d25760405162461bcd60e51b815260040161076c90615c6a565b6000828152600e602090815260408083206001600160a01b038516845282528083208054600160ff199182168117909255600d909352922080549091169091179055600b5460ff1661462c57600b805460ff191660011790555b600c8054600101905561463d61496f565b336001600160a01b031682306001600160a01b03167f5ab6a0d7af8e86f78c34acea4f8aff1be027227ce1bc29e03f57f39b788f4b048460405161468191906154dc565b60405180910390a45050565b6010546001600160a01b03166146b55760405162461bcd60e51b815260040161076c906159c3565b60105460405163f8b2cb4f60e01b81526000916001600160a01b03169063f8b2cb4f906146e69087906004016154dc565b60206040518083038186803b1580156146fe57600080fd5b505afa158015614712573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614736919061522a565b601054604051634a46c67360e11b81529192506000916001600160a01b039091169063948d8ce69061476c9088906004016154dc565b60206040518083038186803b15801561478457600080fd5b505afa158015614798573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147bc919061522a565b6010549091506001600160a01b0316633fdddaa2866147db8587613dbe565b846040518463ffffffff1660e01b81526004016147fa939291906155c2565b600060405180830381600087803b15801561481457600080fd5b505af1158015614828573d6000803e3d6000fd5b505060405163a9059cbb60e01b8152600092506001600160a01b038816915063a9059cbb9061485d9088908890600401615577565b602060405180830381600087803b15801561487757600080fd5b505af115801561488b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906148af919061516e565b9050806144725760405162461bcd60e51b815260040161076c90615c0e565b6000808383116148e457505080820360006148ec565b505081810360015b9250929050565b3060009081526001602052604090205461490d90826141e7565b306000908152600160205260408120919091555461492b90826141e7565b6000908155604051309190600080516020615f7b83398151915290613d14908590615d89565b6001600160a01b03166000908152600d602052604090205460ff1690565b600c541561498c57600b805460ff19166001908117909155610c5c565b600b805460ff19169055565b8280548282559060005260206000209081019282156149ed579160200282015b828111156149ed57825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906149b8565b506149f9929150614a44565b5090565b828054828255906000526020600020908101928215614a38579160200282015b82811115614a38578251825591602001919060010190614a1d565b506149f9929150614a63565b5b808211156149f95780546001600160a01b0319168155600101614a45565b5b808211156149f95760008155600101614a64565b600082601f830112614a88578081fd5b8135614a9b614a9682615ec5565b615e9f565b818152915060208083019084810181840286018201871015614abc57600080fd5b60005b84811015614ae4578135614ad281615f37565b84529282019290820190600101614abf565b505050505092915050565b60008083601f840112614b00578182fd5b5081356001600160401b03811115614b16578182fd5b60208301915083602080830285010111156148ec57600080fd5b600082601f830112614b40578081fd5b8135614b4e614a9682615ec5565b818152915060208083019084810181840286018201871015614b6f57600080fd5b60005b84811015614ae457813584529282019290820190600101614b72565b600082601f830112614b9e578081fd5b8151614bac614a9682615ec5565b818152915060208083019084810181840286018201871015614bcd57600080fd5b60005b84811015614ae457815184529282019290820190600101614bd0565b803560028110610a3757600080fd5b600082601f830112614c0b578081fd5b8135614c19614a9682615ee4565b9150808252836020828501011115614c3057600080fd5b8060208401602084013760009082016020015292915050565b600060c08284031215614c5a578081fd5b614c6460c0615e9f565b90508135614c7181615f4c565b81526020820135614c8181615f4c565b60208201526040820135614c9481615f4c565b60408201526060820135614ca781615f4c565b60608201526080820135614cba81615f4c565b608082015260a0820135614ccd81615f4c565b60a082015292915050565b600060208284031215614ce9578081fd5b8135610d8281615f37565b600060208284031215614d05578081fd5b8151610d8281615f37565b60008060408385031215614d22578081fd5b8235614d2d81615f37565b91506020830135614d3d81615f37565b809150509250929050565b600080600060608486031215614d5c578081fd5b8335614d6781615f37565b92506020840135614d7781615f37565b929592945050506040919091013590565b60008060008060808587031215614d9d578182fd5b8435614da881615f37565b93506020850135614db881615f37565b93969395505050506040820135916060013590565b6000806000610100808587031215614de3578182fd5b8435614dee81615f37565b935060208501356001600160401b0380821115614e09578384fd5b818701915061016080838a031215614e1f578485fd5b614e2881615e9f565b9050823582811115614e38578586fd5b614e448a828601614bfb565b825250602083013582811115614e58578586fd5b614e648a828601614bfb565b602083015250604083013582811115614e7b578586fd5b614e878a828601614a78565b604083015250606083013582811115614e9e578586fd5b614eaa8a828601614b30565b606083015250608083013582811115614ec1578586fd5b614ecd8a828601614b30565b60808301525060a083013560a082015260c083013560c082015260e083013560e08201528383013584820152610120935083830135848201526101409350614f1789858501614bec565b8482015280955050505050614f2f8560408601614c49565b90509250925092565b60008060408385031215614f4a578182fd5b8235614f5581615f37565b946020939093013593505050565b60008060008060608587031215614f78578182fd5b8435614f8381615f37565b93506020850135925060408501356001600160401b0380821115614fa5578384fd5b818701915087601f830112614fb8578384fd5b813581811115614fc6578485fd5b886020828501011115614fd7578485fd5b95989497505060200194505050565b60006020808385031215614ff8578182fd5b82516001600160401b0381111561500d578283fd5b8301601f8101851361501d578283fd5b805161502b614a9682615ec5565b8181528381019083850185840285018601891015615047578687fd5b8694505b8385101561507257805161505e81615f37565b83526001949094019391850191850161504b565b50979650505050505050565b60008060408385031215615090578182fd5b82356001600160401b03808211156150a6578384fd5b6150b286838701614a78565b935060208501359150808211156150c7578283fd5b506150d485828601614b30565b9150509250929050565b6000602082840312156150ef578081fd5b81516001600160401b03811115615104578182fd5b61511084828501614b8e565b949350505050565b6000806040838503121561512a578182fd5b82356001600160401b0380821115615140578384fd5b61514c86838701614b30565b93506020850135915080821115615161578283fd5b506150d485828601614a78565b60006020828403121561517f578081fd5b8151610d8281615f4c565b60006020828403121561519b578081fd5b81516001600160401b038111156151b0578182fd5b8201601f810184136151c0578182fd5b80516151ce614a9682615ee4565b8181528560208385010111156151e2578384fd5b6141de826020830160208601615f07565b600060208284031215615204578081fd5b813560068110610d82578182fd5b600060208284031215615223578081fd5b5035919050565b60006020828403121561523b578081fd5b5051919050565b600080600060408486031215615256578081fd5b8335925060208401356001600160401b03811115615272578182fd5b61527e86828701614aef565b9497909650939450505050565b600080600080606085870312156152a0578182fd5b8435935060208501356001600160401b038111156152bc578283fd5b6152c887828801614aef565b90945092505060408501356152dc81615f37565b939692955090935050565b600080604083850312156152f9578182fd5b8251915060208301516001600160401b03811115615315578182fd5b6150d485828601614b8e565b60008060408385031215615333578182fd5b505080516020909101519092909150565b60008060008084860360a081121561535a578283fd5b8535945060208601359350604086013560038110615376578384fd5b92506040605f1982011215615389578182fd5b506153946040615e9f565b606086013581526080909501356020860152509194909350909190565b6000806000606084860312156153c5578081fd5b8351925060208401519150604084015190509250925092565b6000815180845260208085019450808401835b838110156154165781516001600160a01b0316875295820195908201906001016153f1565b509495945050505050565b6000815180845260208085019450808401835b8381101561541657815187529582019590820190600101615434565b15159052565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008151808452615498816020860160208601615f07565b601f01601f19169290920160200192915050565b600681106154b657fe5b9052565b642aa82822a960d91b815260050190565b64232627a7a960d91b815260050190565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b0385811682528416602082015260806040820181905260009061555a908301856153de565b828103606084015261556c8185615421565b979650505050505050565b6001600160a01b03929092168252602082015260400190565b600060018060a01b0386168252846020830152606060408301526155b8606083018486615456565b9695505050505050565b6001600160a01b039390931683526020830191909152604082015260600190565b600060208252610d8260208301846153de565b60006040825261560960408301856153de565b82810360208401526141de8185615421565b60006080825261562e60808301876153de565b82810360208401526156408187615421565b905082810360408401526156548186615421565b915050821515606083015295945050505050565b600060208252610d826020830184615421565b901515815260200190565b921515835290151560208301526001600160a01b0316604082015260600190565b9515158652931515602086015291151560408501521515606084015215156080830152151560a082015260c00190565b9315158452911515602084015215156040830152606082015260800190565b9615158752941515602087015260408601939093526060850191909152608084015260a083015260c082015260e00190565b951515865260208601949094526040850192909252151560608401526001600160a01b0390811660808401521660a082015260c00190565b600060208252615110602083018486615456565b600060208252610d826020830184615480565b6001600160a01b0396871681529486166020860152928516604085015293166060830152608082019290925260a081019190915260c00190565b6001600160a01b0386811682528516602082015260408101849052608060608201819052810182905260006001600160fb1b038311156157ff578081fd5b60208302808560a08501379190910160a00190815295945050505050565b602081016002831061582b57fe5b91905290565b918252602082015260400190565b60208082526009908201526837b7363ca0b236b4b760b91b604082015260600190565b60208082526012908201527122a9292fa727aa2fa1a7a72a2927a62622a960711b604082015260600190565b6020808252600d908201526c4552525f4e4f5f52494748545360981b604082015260600190565b60208082526016908201527526a7a22aa6229024a9902727aa102922a3a4a9aa22a960511b604082015260600190565b60208082526010908201526f20b2323932b9b99034b99027bbb732b960811b604082015260600190565b6020808252601b908201527a11549497d393d517d5d212551157d513d2d15397d25397d413d3d3602a1b604082015260600190565b60208082526010908201526f4552525f5a45524f5f4144445245535360801b604082015260600190565b602080825260199082015278544f4b454e5f4d5553545f494e5f57484954455f4c4953545360381b604082015260600190565b60208082526008908201526727bbb730b13632a760c11b604082015260600190565b6020808252600f908201526e11549497d393d517d0d49150551151608a1b604082015260600190565b6020808252600e908201526d11549497d254d7d0d4915055115160921b604082015260600190565b60208082526006908201526506f776e6572560d41b604082015260600190565b60208082526010908201526f11549497d1125597d25395115493905360821b604082015260600190565b6020808252600b908201526a4552525f5245454e54525960a81b604082015260600190565b60208082526023908201527f54686520636f6c6c656374696f6e206379636c65206973206e6f7420726561636040820152621a195960ea1b606082015260800190565b6020808252601790820152764552525f45524332305f415050524f56455f46414c534560481b604082015260600190565b60208082526010908201526f4552525f4d554c5f4f564552464c4f5760801b604082015260600190565b6020808252601e908201527f4552525f4e4f545f57484954455f544f4b454e5f494e5f464143544f52590000604082015260600190565b6020808252600c908201526b4552525f4449565f5a45524f60a01b604082015260600190565b60208082526015908201527411549497d0d05417d31253525517d4915050d21151605a1b604082015260600190565b60208082526016908201527522a9292fa821aa27a5a2a72fa120a22fa1a0a62622a960511b604082015260600190565b60208082526017908201527608aa4a4bea69ea4a8bea89e968a9cbe9a92a69a82a8869604b1b604082015260600190565b6020808252600f908201526e4552525f45524332305f46414c534560881b604082015260600190565b6020808252601990820152784552525f494e56414c49445f544f4b454e5f4144445245535360381b604082015260600190565b6020808252601890820152774552525f4841535f4245454e5f41444445445f574849544560401b604082015260600190565b6020808252601190820152704552525f5355425f554e444552464c4f5760781b604082015260600190565b60208082526010908201526f4552525f4144445f4f564552464c4f5760801b604082015260600190565b60208082526011908201527022a9292fa6aaa9aa2fa7a822a72fa2aa2360791b604082015260600190565b600060e082019050835460ff80821615158452808260081c1615156020850152808260101c1615156040850152808260181c1615156060850152615d6860808501828460201c16615450565b615d7a60a08501828460281c16615450565b5050610d8260c08301846154ac565b90815260200190565b9182526001600160a01b0316602082015260400190565b9283526020830191909152604082015260600190565b93845260208401929092526040830152606082015260800190565b958652602086019490945260408501929092526060840152608083015260a082015260c00190565b988952602089019790975260408801959095526060870193909352608086019190915260a085015260c084015260e083015215156101008201526101200190565b9a8b5260208b019990995260408a01979097526060890195909552608088019390935260a087019190915260c086015260e08501526101008401526101208301526101408201526101600190565b60ff91909116815260200190565b6040518181016001600160401b0381118282101715615ebd57600080fd5b604052919050565b60006001600160401b03821115615eda578081fd5b5060209081020190565b60006001600160401b03821115615ef9578081fd5b50601f01601f191660200190565b60005b83811015615f22578181015183820152602001615f0a565b83811115615f31576000848401525b50505050565b6001600160a01b0381168114610c5c57600080fd5b8015158114610c5c57600080fdfe345c44e0d6869c4baccff8ecb8279bca00e6436947fce2da5beffcc9e5cabefbddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925a2646970667358221220dd388a0162eb56582b4ec9529dd63695a3e4322d327c5b2b2c46a767d415a36e64736f6c634300060c0033"
  ],
  "numDeployments": 1,
  "solcInputHash": "b8bb33a7d9d934ed409f82d3e4ddcb48",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytecode\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"middleware\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"LOG_MIDDLEWARE\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"LOG_USER_VAULT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"LogNewCrp\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bytecodes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isCrp\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factoryAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"poolTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"poolTokenName\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"constituentTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenBalances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenWeights\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"managerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"issueFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perfermanceFee\",\"type\":\"uint256\"},{\"internalType\":\"enum IConfigurableRightsPool.Etypes\",\"name\":\"etype\",\"type\":\"uint8\"}],\"internalType\":\"struct IConfigurableRightsPool.PoolParams\",\"name\":\"poolParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"canPauseSwapping\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canChangeSwapFee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canChangeWeights\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canAddRemoveTokens\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canWhitelistLPs\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canTokenWhiteLists\",\"type\":\"bool\"}],\"internalType\":\"struct RightsManager.Rights\",\"name\":\"rights\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"managerFee\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"issueFee\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"redeemFee\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"perfermanceFee\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.KolPoolParams\",\"name\":\"kolPoolParams\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ownerPercentage\",\"type\":\"uint256[]\"}],\"name\":\"newCrp\",\"outputs\":[{\"internalType\":\"contract IConfigurableRightsPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytecodes\",\"type\":\"bytes\"}],\"name\":\"setByteCodes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newVault\",\"type\":\"address\"}],\"name\":\"setUserVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Desyn Labs\",\"details\":\"Rights are held in a corresponding struct in ConfigurableRightsPool      Index values are as follows:      0: canPauseSwapping - can setPublicSwap back to false after turning it on                            by default, it is off on initialization and can only be turned on      1: canChangeSwapFee - can setSwapFee after initialization (by default, it is fixed at create time)      2: canChangeWeights - can bind new token weights (allowed by default in base pool)      3: canAddRemoveTokens - can bind/unbind tokens (allowed by default in base pool)      4: canWhitelistLPs - if set, only whitelisted addresses can join pools                           (enables private pools with more than one LP)      5: canChangeCap - can change the BSP cap (max # of pool tokens)\",\"kind\":\"dev\",\"methods\":{\"isCrp(address)\":{\"params\":{\"addr\":\"- address to check\"},\"returns\":{\"_0\":\"boolean indicating whether it is a CRP\"}},\"newCrp(address,(string,string,address[],uint256[],uint256[],uint256,uint256,uint256,uint256,uint256,uint8),(bool,bool,bool,bool,bool,bool),(((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256)),((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256)),((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256)),((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256))),address[],uint256[])\":{\"details\":\"emits a LogNewCRP event\",\"params\":{\"factoryAddress\":\"- the BFactory instance used to create the underlying pool\",\"poolParams\":\"- struct containing the names, tokens, weights, balances, and swap fee\",\"rights\":\"- struct of permissions, configuring this CRP instance (see above for definitions)\"}}},\"title\":\"Configurable Rights Pool Factory - create parameterized smart pools\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isCrp(address)\":{\"notice\":\"Check to see if a given address is a CRP\"},\"newCrp(address,(string,string,address[],uint256[],uint256[],uint256,uint256,uint256,uint256,uint256,uint8),(bool,bool,bool,bool,bool,bool),(((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256)),((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256)),((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256)),((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256))),address[],uint256[])\":{\"notice\":\"Create a new CRP\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/deploy/CRPFactory.sol\":\"CRPFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"contracts/deploy/CRPFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\nimport {RightsManager} from \\\"../libraries/RightsManager.sol\\\";\\nimport {SmartPoolManager} from \\\"../libraries/SmartPoolManager.sol\\\";\\n// Needed to handle structures externally\\npragma experimental ABIEncoderV2;\\n\\n// Imports\\nabstract contract IConfigurableRightsPool {\\n    enum Etypes {\\n        OPENED,\\n        CLOSED\\n    }\\n    enum Period {\\n        HALF,\\n        ONE,\\n        TWO\\n    }\\n\\n    struct PoolParams {\\n        string poolTokenSymbol;\\n        string poolTokenName;\\n        address[] constituentTokens;\\n        uint[] tokenBalances;\\n        uint[] tokenWeights;\\n        uint swapFee;\\n        uint managerFee;\\n        uint redeemFee;\\n        uint issueFee;\\n        uint perfermanceFee;\\n        Etypes etype;\\n    }\\n\\n    struct CrpParams {\\n        uint initialSupply;\\n        uint collectPeriod;\\n        Period period;\\n    }\\n\\n    function setController(address owner) external virtual;\\n\\n    function init(\\n        address factoryAddress,\\n        IConfigurableRightsPool.PoolParams calldata poolParams,\\n        RightsManager.Rights calldata rights\\n    ) external virtual;\\n\\n    function initHandle(address[] memory owners, uint[] memory ownerPercentage) external virtual;\\n}\\n\\ninterface IUserVault {\\n    function setPoolParams(address pool, SmartPoolManager.KolPoolParams memory kolPoolParams) external;\\n}\\n\\n// Contracts\\n\\n/**\\n * @author Desyn Labs\\n * @title Configurable Rights Pool Factory - create parameterized smart pools\\n * @dev Rights are held in a corresponding struct in ConfigurableRightsPool\\n *      Index values are as follows:\\n *      0: canPauseSwapping - can setPublicSwap back to false after turning it on\\n *                            by default, it is off on initialization and can only be turned on\\n *      1: canChangeSwapFee - can setSwapFee after initialization (by default, it is fixed at create time)\\n *      2: canChangeWeights - can bind new token weights (allowed by default in base pool)\\n *      3: canAddRemoveTokens - can bind/unbind tokens (allowed by default in base pool)\\n *      4: canWhitelistLPs - if set, only whitelisted addresses can join pools\\n *                           (enables private pools with more than one LP)\\n *      5: canChangeCap - can change the BSP cap (max # of pool tokens)\\n */\\ncontract CRPFactory {\\n    // State variables\\n\\n    // Keep a list of all Configurable Rights Pools\\n    mapping(address => bool) private _isCrp;\\n\\n    // Event declarations\\n\\n    // Log the address of each new smart pool, and its creator\\n    event LogNewCrp(address indexed caller, address indexed pool);\\n    event LOG_USER_VAULT(address indexed vault, address indexed caller);\\n    event LOG_MIDDLEWARE(address indexed middleware, address indexed caller);\\n    uint private counters;\\n\\n    bytes public bytecodes;\\n    address private _blabs;\\n    address public userVault;\\n\\n    constructor(bytes memory _bytecode) public {\\n        bytecodes = _bytecode;\\n        _blabs = msg.sender;\\n    }\\n\\n    function createPool(IConfigurableRightsPool.PoolParams calldata poolParams) internal returns (address base) {\\n        bytes memory bytecode = bytecodes;\\n        bytes memory deploymentData = abi.encodePacked(bytecode, abi.encode(poolParams.poolTokenSymbol, poolParams.poolTokenName));\\n        bytes32 salt = keccak256(abi.encodePacked(counters++));\\n        assembly {\\n            base := create2(0, add(deploymentData, 32), mload(deploymentData), salt)\\n            if iszero(extcodesize(base)) {\\n                revert(0, 0)\\n            }\\n        }\\n    }\\n\\n    // Function declarations\\n    /**\\n     * @notice Create a new CRP\\n     * @dev emits a LogNewCRP event\\n     * @param factoryAddress - the BFactory instance used to create the underlying pool\\n     * @param poolParams - struct containing the names, tokens, weights, balances, and swap fee\\n     * @param rights - struct of permissions, configuring this CRP instance (see above for definitions)\\n     */\\n    function newCrp(\\n        address factoryAddress,\\n        IConfigurableRightsPool.PoolParams calldata poolParams,\\n        RightsManager.Rights calldata rights,\\n        SmartPoolManager.KolPoolParams calldata kolPoolParams,\\n        address[] memory owners,\\n        uint[] memory ownerPercentage\\n    ) external returns (IConfigurableRightsPool) {\\n        // require(poolParams.constituentTokens.length >= DesynConstants.MIN_ASSET_LIMIT, \\\"ERR_TOO_FEW_TOKENS\\\");\\n\\n        // Arrays must be parallel\\n        // require(poolParams.tokenBalances.length == poolParams.constituentTokens.length, \\\"ERR_START_BALANCES_MISMATCH\\\");\\n        // require(poolParams.tokenWeights.length == poolParams.constituentTokens.length, \\\"ERR_START_WEIGHTS_MISMATCH\\\");\\n\\n        address crp = createPool(poolParams);\\n        emit LogNewCrp(msg.sender, crp);\\n\\n        _isCrp[crp] = true;\\n        IConfigurableRightsPool(crp).init(factoryAddress, poolParams, rights);\\n        IUserVault(userVault).setPoolParams(crp, kolPoolParams);\\n        // The caller is the controller of the CRP\\n        // The CRP will be the controller of the underlying Core BPool\\n        IConfigurableRightsPool(crp).initHandle(owners, ownerPercentage);\\n        IConfigurableRightsPool(crp).setController(msg.sender);\\n\\n        return IConfigurableRightsPool(crp);\\n    }\\n\\n    modifier onlyBlabs() {\\n        require(msg.sender == _blabs, \\\"ERR_NOT_BLABS\\\");\\n        _;\\n    }\\n\\n    function setUserVault(address newVault) external onlyBlabs {\\n        userVault = newVault;\\n        emit LOG_USER_VAULT(newVault, msg.sender);\\n    }\\n\\n      function setByteCodes(bytes memory _bytecodes) external onlyBlabs {\\n        bytecodes = _bytecodes;\\n    }\\n\\n    /**\\n     * @notice Check to see if a given address is a CRP\\n     * @param addr - address to check\\n     * @return boolean indicating whether it is a CRP\\n     */\\n    function isCrp(address addr) external view returns (bool) {\\n        return _isCrp[addr];\\n    }\\n}\\n\",\"keccak256\":\"0x65bec111039f93ac551802d79688b4402a375e70803f65633e33063a5ab96a89\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IBFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\nimport \\\"../libraries/SmartPoolManager.sol\\\";\\n\\ninterface IBPool {\\n    function rebind(\\n        address token,\\n        uint balance,\\n        uint denorm\\n    ) external;\\n\\n    function rebindSmart(\\n        address tokenA,\\n        address tokenB,\\n        uint deltaWeight,\\n        uint deltaBalance,\\n        bool isSoldout,\\n        uint minAmountOut\\n    ) external;\\n\\n    function execute(\\n        address _target,\\n        uint _value,\\n        bytes calldata _data\\n    ) external returns (bytes memory _returnValue);\\n\\n    function bind(\\n        address token,\\n        uint balance,\\n        uint denorm\\n    ) external;\\n\\n    function unbind(address token) external;\\n\\n    function unbindPure(address token) external;\\n\\n    function isBound(address token) external view returns (bool);\\n\\n    function getBalance(address token) external view returns (uint);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function getSwapFee() external view returns (uint);\\n\\n    function isPublicSwap() external view returns (bool);\\n\\n    function getDenormalizedWeight(address token) external view returns (uint);\\n\\n    function getTotalDenormalizedWeight() external view returns (uint);\\n\\n    function EXIT_FEE() external view returns (uint);\\n\\n    function getCurrentTokens() external view returns (address[] memory tokens);\\n\\n    function setController(address owner) external;\\n}\\n\\ninterface IBFactory {\\n    function newLiquidityPool() external returns (IBPool);\\n\\n    function setBLabs(address b) external;\\n\\n    function collect(IBPool pool) external;\\n\\n    function isBPool(address b) external view returns (bool);\\n\\n    function getBLabs() external view returns (address);\\n\\n    function getSwapRouter() external view returns (address);\\n\\n    function getVault() external view returns (address);\\n\\n    function getUserVault() external view returns (address);\\n\\n    function getVaultAddress() external view returns (address);\\n\\n    function getOracleAddress() external view returns (address);\\n\\n    function getManagerOwner() external view returns (address);\\n\\n    function isTokenWhitelistedForVerify(uint sort, address token) external view returns (bool);\\n\\n    function isTokenWhitelistedForVerify(address token) external view returns (bool);\\n\\n    function getModuleStatus(address etf, address module) external view returns (bool);\\n}\\n\\ninterface IVault {\\n    function depositManagerToken(address[] calldata poolTokens, uint[] calldata tokensAmount) external;\\n\\n    function depositIssueRedeemPToken(\\n        address[] calldata poolTokens,\\n        uint[] calldata tokensAmount,\\n        uint[] calldata tokensAmountP,\\n        bool isPerfermance\\n    ) external;\\n\\n    function managerClaim(address pool) external;\\n\\n    function getManagerClaimBool(address pool) external view returns (bool);\\n}\\n\\ninterface IUserVault {\\n    function recordTokenInfo(\\n        address kol,\\n        address user,\\n        address[] calldata poolTokens,\\n        uint[] calldata tokensAmount\\n    ) external;\\n}\\n\\ninterface Oracles {\\n    function getPrice(address tokenAddress) external returns (uint price);\\n\\n    function getAllPrice(address[] calldata poolTokens, uint[] calldata tokensAmount) external returns (uint);\\n}\\n\",\"keccak256\":\"0x13c400ca7a5f59c8730f553fcf189c14af0c0d65a79012793cbde56ce221a419\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IConfigurableRightsPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Interface declarations\\n\\n// Introduce to avoid circularity (otherwise, the CRP and SmartPoolManager include each other)\\n// Removing circularity allows flattener tools to work, which enables Etherscan verification\\ninterface IConfigurableRightsPool {\\n    function mintPoolShareFromLib(uint amount) external;\\n\\n    function pushPoolShareFromLib(address to, uint amount) external;\\n\\n    function pullPoolShareFromLib(address from, uint amount) external;\\n\\n    function burnPoolShareFromLib(uint amount) external;\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function getController() external view returns (address);\\n}\\n\",\"keccak256\":\"0x54defbc333ab8f90c4fe352c694c360cc38fd707606199caf05fc165a64da788\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Interface declarations\\n\\n/* solhint-disable func-order */\\n\\ninterface IERC20 {\\n    // Emitted when the allowance of a spender for an owner is set by a call to approve.\\n    // Value is the new allowance\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n\\n    // Emitted when value tokens are moved from one account (from) to another (to).\\n    // Note that value may be zero\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    // Returns the amount of tokens in existence\\n    function totalSupply() external view returns (uint);\\n\\n    // Returns the amount of tokens owned by account\\n    function balanceOf(address account) external view returns (uint);\\n\\n    // Returns the decimals of tokens\\n    function decimals() external view returns (uint8);\\n\\n    function symbol() external view returns (string memory);\\n\\n    // Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner\\n    // through transferFrom. This is zero by default\\n    // This value changes when approve or transferFrom are called\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    // Sets amount as the allowance of spender over the caller\\u2019s tokens\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits an Approval event.\\n    function approve(address spender, uint amount) external returns (bool);\\n\\n    // Moves amount tokens from the caller\\u2019s account to recipient\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits a Transfer event.\\n    function transfer(address recipient, uint amount) external returns (bool);\\n\\n    // Moves amount tokens from sender to recipient using the allowance mechanism\\n    // Amount is then deducted from the caller\\u2019s allowance\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits a Transfer event\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xfe22b6d6029b400b9cce7f9b39c546f99cd6922b2fd926e480e2b4d476ab26f8\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/DesynConstants.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n/**\\n * @author Desyn Labs\\n * @title Put all the constants in one place\\n */\\n\\nlibrary DesynConstants {\\n    // State variables (must be constant in a library)\\n\\n    // B \\\"ONE\\\" - all math is in the \\\"realm\\\" of 10 ** 18;\\n    // where numeric 1 = 10 ** 18\\n    uint public constant BONE = 10**18;\\n    uint public constant MIN_WEIGHT = BONE;\\n    uint public constant MAX_WEIGHT = BONE * 50;\\n    uint public constant MAX_TOTAL_WEIGHT = BONE * 50;\\n    uint public constant MIN_BALANCE = BONE / 10**6;\\n    uint public constant MAX_BALANCE = BONE * 10**12;\\n    uint public constant MIN_POOL_SUPPLY = BONE * 100;\\n    uint public constant MAX_POOL_SUPPLY = BONE * 10**9;\\n    uint public constant MIN_FEE = BONE / 10**6;\\n    uint public constant MAX_FEE = BONE / 10;\\n    //Fee Set\\n    uint public constant MANAGER_MIN_FEE = 0;\\n    uint public constant MANAGER_MAX_FEE = BONE / 10;\\n    uint public constant ISSUE_MIN_FEE = 0;\\n    uint public constant ISSUE_MAX_FEE = BONE / 10;\\n    uint public constant REDEEM_MIN_FEE = 0;\\n    uint public constant REDEEM_MAX_FEE = BONE / 10;\\n    uint public constant PERFERMANCE_MIN_FEE = 0;\\n    uint public constant PERFERMANCE_MAX_FEE = BONE / 2;\\n    // EXIT_FEE must always be zero, or ConfigurableRightsPool._pushUnderlying will fail\\n    uint public constant EXIT_FEE = 0;\\n    uint public constant MAX_IN_RATIO = BONE / 2;\\n    uint public constant MAX_OUT_RATIO = (BONE / 3) + 1 wei;\\n    // Must match BConst.MIN_BOUND_TOKENS and BConst.MAX_BOUND_TOKENS\\n    uint public constant MIN_ASSET_LIMIT = 1;\\n    uint public constant MAX_ASSET_LIMIT = 16;\\n    uint public constant MAX_UINT = uint(-1);\\n    uint public constant MAX_COLLECT_PERIOD = 60 days;\\n}\\n\",\"keccak256\":\"0x7980d0f32316714804b3fa02faa0f450ce206920e5538a27921b5de4e85de737\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/DesynSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Imports\\n\\nimport \\\"./DesynConstants.sol\\\";\\n\\n/**\\n * @author Desyn Labs\\n * @title SafeMath - wrap Solidity operators to prevent underflow/overflow\\n * @dev badd and bsub are basically identical to OpenZeppelin SafeMath; mul/div have extra checks\\n */\\nlibrary DesynSafeMath {\\n    /**\\n     * @notice Safe addition\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev if we are adding b to a, the resulting sum must be greater than a\\n     * @return - sum of operands; throws if overflow\\n     */\\n    function badd(uint a, uint b) internal pure returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, \\\"ERR_ADD_OVERFLOW\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned subtraction\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Do a signed subtraction, and check that it produces a positive value\\n     *      (i.e., a - b is valid if b <= a)\\n     * @return - a - b; throws if underflow\\n     */\\n    function bsub(uint a, uint b) internal pure returns (uint) {\\n        (uint c, bool negativeResult) = bsubSign(a, b);\\n        require(!negativeResult, \\\"ERR_SUB_UNDERFLOW\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Safe signed subtraction\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Do a signed subtraction\\n     * @return - difference between a and b, and a flag indicating a negative result\\n     *           (i.e., a - b if a is greater than or equal to b; otherwise b - a)\\n     */\\n    function bsubSign(uint a, uint b) internal pure returns (uint, bool) {\\n        if (b <= a) {\\n            return (a - b, false);\\n        } else {\\n            return (b - a, true);\\n        }\\n    }\\n\\n    /**\\n     * @notice Safe multiplication\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Multiply safely (and efficiently), rounding down\\n     * @return - product of operands; throws if overflow or rounding error\\n     */\\n    function bmul(uint a, uint b) internal pure returns (uint) {\\n        // Gas optimization (see github.com/OpenZeppelin/openzeppelin-contracts/pull/522)\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // Standard overflow check: a/a*b=b\\n        uint c0 = a * b;\\n        require(c0 / a == b, \\\"ERR_MUL_OVERFLOW\\\");\\n\\n        // Round to 0 if x*y < BONE/2?\\n        uint c1 = c0 + (DesynConstants.BONE / 2);\\n        require(c1 >= c0, \\\"ERR_MUL_OVERFLOW\\\");\\n        uint c2 = c1 / DesynConstants.BONE;\\n        return c2;\\n    }\\n\\n    /**\\n     * @notice Safe division\\n     * @param dividend - first operand\\n     * @param divisor - second operand\\n     * @dev Divide safely (and efficiently), rounding down\\n     * @return - quotient; throws if overflow or rounding error\\n     */\\n    function bdiv(uint dividend, uint divisor) internal pure returns (uint) {\\n        require(divisor != 0, \\\"ERR_DIV_ZERO\\\");\\n\\n        // Gas optimization\\n        if (dividend == 0) {\\n            return 0;\\n        }\\n\\n        uint c0 = dividend * DesynConstants.BONE;\\n        require(c0 / dividend == DesynConstants.BONE, \\\"ERR_DIV_INTERNAL\\\"); // bmul overflow\\n\\n        uint c1 = c0 + (divisor / 2);\\n        require(c1 >= c0, \\\"ERR_DIV_INTERNAL\\\"); //  badd require\\n\\n        uint c2 = c1 / divisor;\\n        return c2;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer modulo\\n     * @dev Returns the remainder of dividing two unsigned integers.\\n     *      Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * @param dividend - first operand\\n     * @param divisor - second operand -- cannot be zero\\n     * @return - quotient; throws if overflow or rounding error\\n     */\\n    function bmod(uint dividend, uint divisor) internal pure returns (uint) {\\n        require(divisor != 0, \\\"ERR_MODULO_BY_ZERO\\\");\\n\\n        return dividend % divisor;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer max\\n     * @dev Returns the greater of the two input values\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the maximum of a and b\\n     */\\n    function bmax(uint a, uint b) internal pure returns (uint) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer min\\n     * @dev returns b, if b < a; otherwise returns a\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the lesser of the two input values\\n     */\\n    function bmin(uint a, uint b) internal pure returns (uint) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer average\\n     * @dev Guard against (a+b) overflow by dividing each operand separately\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the average of the two values\\n     */\\n    function baverage(uint a, uint b) internal pure returns (uint) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\\n    }\\n\\n    /**\\n     * @notice Babylonian square root implementation\\n     * @dev (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n     * @param y - operand\\n     * @return z - the square root result\\n     */\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9baf30b98a5f3a8c13ac9c4d5d4b176eabfd936aba8f5172c95b7c568fba68f3\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/RightsManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Needed to handle structures externally\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @author Desyn Labs\\n * @title Manage Configurable Rights for the smart pool\\n *      canPauseSwapping - can setPublicSwap back to false after turning it on\\n *                         by default, it is off on initialization and can only be turned on\\n *      canChangeSwapFee - can setSwapFee after initialization (by default, it is fixed at create time)\\n *      canChangeWeights - can bind new token weights (allowed by default in base pool)\\n *      canAddRemoveTokens - can bind/unbind tokens (allowed by default in base pool)\\n *      canWhitelistLPs - can limit liquidity providers to a given set of addresses\\n *      canChangeCap - can change the BSP cap (max # of pool tokens)\\n *      canChangeFloor - can change the BSP floor for Closure ETF (min # of pool tokens)\\n */\\nlibrary RightsManager {\\n    // Type declarations\\n\\n    enum Permissions {\\n        PAUSE_SWAPPING,\\n        CHANGE_SWAP_FEE,\\n        CHANGE_WEIGHTS,\\n        ADD_REMOVE_TOKENS,\\n        WHITELIST_LPS,\\n        TOKEN_WHITELISTS\\n        // CHANGE_CAP,\\n        // CHANGE_FLOOR\\n    }\\n\\n    struct Rights {\\n        bool canPauseSwapping;\\n        bool canChangeSwapFee;\\n        bool canChangeWeights;\\n        bool canAddRemoveTokens;\\n        bool canWhitelistLPs;\\n        bool canTokenWhiteLists;\\n        // bool canChangeCap;\\n        // bool canChangeFloor;\\n    }\\n\\n    // State variables (can only be constants in a library)\\n    bool public constant DEFAULT_CAN_PAUSE_SWAPPING = false;\\n    bool public constant DEFAULT_CAN_CHANGE_SWAP_FEE = true;\\n    bool public constant DEFAULT_CAN_CHANGE_WEIGHTS = true;\\n    bool public constant DEFAULT_CAN_ADD_REMOVE_TOKENS = false;\\n    bool public constant DEFAULT_CAN_WHITELIST_LPS = false;\\n    bool public constant DEFAULT_CAN_TOKEN_WHITELISTS = false;\\n    // bool public constant DEFAULT_CAN_CHANGE_CAP = false;\\n    // bool public constant DEFAULT_CAN_CHANGE_FLOOR = false;\\n\\n    // Functions\\n\\n    /**\\n     * @notice create a struct from an array (or return defaults)\\n     * @dev If you pass an empty array, it will construct it using the defaults\\n     * @param a - array input\\n     * @return Rights struct\\n     */\\n    function constructRights(bool[] calldata a) external pure returns (Rights memory) {\\n        if (a.length < 6) {\\n            return\\n                Rights(\\n                    DEFAULT_CAN_PAUSE_SWAPPING,\\n                    DEFAULT_CAN_CHANGE_SWAP_FEE,\\n                    DEFAULT_CAN_CHANGE_WEIGHTS,\\n                    DEFAULT_CAN_ADD_REMOVE_TOKENS,\\n                    DEFAULT_CAN_WHITELIST_LPS,\\n                    DEFAULT_CAN_TOKEN_WHITELISTS\\n                    // DEFAULT_CAN_CHANGE_CAP,\\n                    // DEFAULT_CAN_CHANGE_FLOOR\\n                );\\n        } else {\\n            // return Rights(a[0], a[1], a[2], a[3], a[4], a[5], a[6]);\\n            return Rights(a[0], a[1], a[2], a[3], a[4], a[5]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Convert rights struct to an array (e.g., for events, GUI)\\n     * @dev avoids multiple calls to hasPermission\\n     * @param rights - the rights struct to convert\\n     * @return boolean array containing the rights settings\\n     */\\n    function convertRights(Rights calldata rights) external pure returns (bool[] memory) {\\n        bool[] memory result = new bool[](7);\\n\\n        result[0] = rights.canPauseSwapping;\\n        result[1] = rights.canChangeSwapFee;\\n        result[2] = rights.canChangeWeights;\\n        result[3] = rights.canAddRemoveTokens;\\n        result[4] = rights.canWhitelistLPs;\\n        result[5] = rights.canTokenWhiteLists;\\n        // result[5] = rights.canChangeCap;\\n        // result[6] = rights.canChangeFloor;\\n\\n        return result;\\n    }\\n\\n    // Though it is actually simple, the number of branches triggers code-complexity\\n    /* solhint-disable code-complexity */\\n\\n    /**\\n     * @notice Externally check permissions using the Enum\\n     * @param self - Rights struct containing the permissions\\n     * @param permission - The permission to check\\n     * @return Boolean true if it has the permission\\n     */\\n    function hasPermission(Rights calldata self, Permissions permission) external pure returns (bool) {\\n        if (Permissions.PAUSE_SWAPPING == permission) {\\n            return self.canPauseSwapping;\\n        } else if (Permissions.CHANGE_SWAP_FEE == permission) {\\n            return self.canChangeSwapFee;\\n        } else if (Permissions.CHANGE_WEIGHTS == permission) {\\n            return self.canChangeWeights;\\n        } else if (Permissions.ADD_REMOVE_TOKENS == permission) {\\n            return self.canAddRemoveTokens;\\n        } else if (Permissions.WHITELIST_LPS == permission) {\\n            return self.canWhitelistLPs;\\n        }  else if (Permissions.TOKEN_WHITELISTS == permission) {\\n            return self.canTokenWhiteLists;\\n        }\\n        // else if (Permissions.CHANGE_CAP == permission) {\\n        //     return self.canChangeCap;\\n        // } else if (Permissions.CHANGE_FLOOR == permission) {\\n        //     return self.canChangeFloor;\\n        // }\\n    }\\n\\n    /* solhint-enable code-complexity */\\n}\\n\",\"keccak256\":\"0x4141fba7172e2018d45ed376fadf71b53d3c05421979d22511fbd5cd922db962\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/SafeApprove.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Imports\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n// Libraries\\n\\n/**\\n * @author PieDAO (ported to Desyn Labs)\\n * @title SafeApprove - set approval for tokens that require 0 prior approval\\n * @dev Perhaps to address the known ERC20 race condition issue\\n *      See https://github.com/crytic/not-so-smart-contracts/tree/master/race_condition\\n *      Some tokens - notably KNC - only allow approvals to be increased from 0\\n */\\nlibrary SafeApprove {\\n    /**\\n     * @notice handle approvals of tokens that require approving from a base of 0\\n     * @param token - the token we're approving\\n     * @param spender - entity the owner (sender) is approving to spend his tokens\\n     * @param amount - number of tokens being approved\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint amount\\n    ) internal returns (bool) {\\n        uint currentAllowance = token.allowance(address(this), spender);\\n\\n        // Do nothing if allowance is already set to this value\\n        if (currentAllowance == amount) {\\n            return true;\\n        }\\n\\n        // If approval is not zero reset it to zero first\\n        if (currentAllowance != 0) {\\n            token.approve(spender, 0);\\n        }\\n\\n        // do the actual approval\\n        return token.approve(spender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xa51ebf770f2676085b89b1636688cc086289cfe27f614dfd0c15142535c26752\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/SmartPoolManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Needed to pass in structs\\npragma experimental ABIEncoderV2;\\n\\n// Imports\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IConfigurableRightsPool.sol\\\";\\nimport \\\"../interfaces/IBFactory.sol\\\"; // unused\\nimport \\\"./DesynSafeMath.sol\\\"; // unused\\nimport \\\"./SafeApprove.sol\\\";\\n\\n/**\\n * @author Desyn Labs\\n * @title Factor out the weight updates\\n */\\nlibrary SmartPoolManager {\\n    //kol pool params\\n    struct levelParams {\\n        uint level;\\n        uint ratio;\\n    }\\n\\n    struct feeParams {\\n        levelParams firstLevel;\\n        levelParams secondLevel;\\n        levelParams thirdLevel;\\n        levelParams fourLevel;\\n    }\\n    struct KolPoolParams {\\n        feeParams managerFee;\\n        feeParams issueFee;\\n        feeParams redeemFee;\\n        feeParams perfermanceFee;\\n    }\\n\\n    // Type declarations\\n    enum Etypes {\\n        OPENED,\\n        CLOSED\\n    }\\n\\n    enum Period {\\n        HALF,\\n        ONE,\\n        TWO\\n    }\\n\\n    // updateWeight and pokeWeights are unavoidably long\\n    /* solhint-disable function-max-lines */\\n    struct Status {\\n        uint collectPeriod;\\n        uint collectEndTime;\\n        uint closurePeriod;\\n        uint closureEndTime;\\n        uint upperCap;\\n        uint floorCap;\\n        uint managerFee;\\n        uint redeemFee;\\n        uint issueFee;\\n        uint perfermanceFee;\\n        uint startClaimFeeTime;\\n    }\\n\\n    struct PoolParams {\\n        // Desyn Pool Token (representing shares of the pool)\\n        string poolTokenSymbol;\\n        string poolTokenName;\\n        // Tokens inside the Pool\\n        address[] constituentTokens;\\n        uint[] tokenBalances;\\n        uint[] tokenWeights;\\n        uint swapFee;\\n        uint managerFee;\\n        uint redeemFee;\\n        uint issueFee;\\n        uint perfermanceFee;\\n        Etypes etype;\\n    }\\n\\n    struct PoolTokenRange {\\n        uint bspFloor;\\n        uint bspCap;\\n    }\\n\\n    struct Fund {\\n        uint etfAmount;\\n        uint fundAmount;\\n    }\\n\\n    function initRequire(\\n        uint swapFee,\\n        uint managerFee,\\n        uint issueFee,\\n        uint redeemFee,\\n        uint perfermanceFee,\\n        uint tokenBalancesLength,\\n        uint tokenWeightsLength,\\n        uint constituentTokensLength,\\n        bool initBool\\n    ) external pure {\\n        // We don't have a pool yet; check now or it will fail later (in order of likelihood to fail)\\n        // (and be unrecoverable if they don't have permission set to change it)\\n        // Most likely to fail, so check first\\n        require(!initBool, \\\"Init fail\\\");\\n        require(swapFee >= DesynConstants.MIN_FEE, \\\"ERR_INVALID_SWAP_FEE\\\");\\n        require(swapFee <= DesynConstants.MAX_FEE, \\\"ERR_INVALID_SWAP_FEE\\\");\\n        require(managerFee >= DesynConstants.MANAGER_MIN_FEE, \\\"ERR_INVALID_MANAGER_FEE\\\");\\n        require(managerFee <= DesynConstants.MANAGER_MAX_FEE, \\\"ERR_INVALID_MANAGER_FEE\\\");\\n        require(issueFee >= DesynConstants.ISSUE_MIN_FEE, \\\"ERR_INVALID_ISSUE_MIN_FEE\\\");\\n        require(issueFee <= DesynConstants.ISSUE_MAX_FEE, \\\"ERR_INVALID_ISSUE_MAX_FEE\\\");\\n        require(redeemFee >= DesynConstants.REDEEM_MIN_FEE, \\\"ERR_INVALID_REDEEM_MIN_FEE\\\");\\n        require(redeemFee <= DesynConstants.REDEEM_MAX_FEE, \\\"ERR_INVALID_REDEEM_MAX_FEE\\\");\\n        require(perfermanceFee >= DesynConstants.PERFERMANCE_MIN_FEE, \\\"ERR_INVALID_PERFERMANCE_MIN_FEE\\\");\\n        require(perfermanceFee <= DesynConstants.PERFERMANCE_MAX_FEE, \\\"ERR_INVALID_PERFERMANCE_MAX_FEE\\\");\\n\\n        // Arrays must be parallel\\n        require(tokenBalancesLength == constituentTokensLength, \\\"ERR_START_BALANCES_MISMATCH\\\");\\n        require(tokenWeightsLength == constituentTokensLength, \\\"ERR_START_WEIGHTS_MISMATCH\\\");\\n        // Cannot have too many or too few - technically redundant, since BPool.bind() would fail later\\n        // But if we don't check now, we could have a useless contract with no way to create a pool\\n\\n        require(constituentTokensLength >= DesynConstants.MIN_ASSET_LIMIT, \\\"ERR_TOO_FEW_TOKENS\\\");\\n        require(constituentTokensLength <= DesynConstants.MAX_ASSET_LIMIT, \\\"ERR_TOO_MANY_TOKENS\\\");\\n        // There are further possible checks (e.g., if they use the same token twice), but\\n        // we can let bind() catch things like that (i.e., not things that might reasonably work)\\n    }\\n\\n    /**\\n     * @notice Update the weight of an existing token\\n     * @dev Refactored to library to make CRPFactory deployable\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param tokenA - token to sell\\n     * @param tokenB - token to buy\\n     */\\n    function rebalance(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address tokenA,\\n        address tokenB,\\n        uint deltaWeight,\\n        uint minAmountOut\\n    ) external {\\n        uint currentWeightA = bPool.getDenormalizedWeight(tokenA);\\n        uint currentBalanceA = bPool.getBalance(tokenA);\\n        // uint currentWeightB = bPool.getDenormalizedWeight(tokenB);\\n\\n        require(deltaWeight <= currentWeightA, \\\"ERR_DELTA_WEIGHT_TOO_BIG\\\");\\n\\n        // deltaBalance = currentBalance * (deltaWeight / currentWeight)\\n        uint deltaBalanceA = DesynSafeMath.bmul(currentBalanceA, DesynSafeMath.bdiv(deltaWeight, currentWeightA));\\n\\n        // uint currentBalanceB = bPool.getBalance(tokenB);\\n\\n        // uint deltaWeight = DesynSafeMath.bsub(newWeight, currentWeightA);\\n\\n        // uint newWeightB = DesynSafeMath.bsub(currentWeightB, deltaWeight);\\n        // require(newWeightB >= 0, \\\"ERR_INCORRECT_WEIGHT_B\\\");\\n        bool soldout;\\n        if (deltaWeight == currentWeightA) {\\n            // reduct token A\\n            bPool.unbindPure(tokenA);\\n            soldout = true;\\n        }\\n\\n        // Now with the tokens this contract can bind them to the pool it controls\\n        bPool.rebindSmart(tokenA, tokenB, deltaWeight, deltaBalanceA, soldout, minAmountOut);\\n    }\\n\\n    /**\\n     * @notice Non ERC20-conforming tokens are problematic; don't allow them in pools\\n     * @dev Will revert if invalid\\n     * @param token - The prospective token to verify\\n     */\\n    function verifyTokenCompliance(address token) external {\\n        verifyTokenComplianceInternal(token);\\n    }\\n\\n    /**\\n     * @notice Non ERC20-conforming tokens are problematic; don't allow them in pools\\n     * @dev Will revert if invalid - overloaded to save space in the main contract\\n     * @param tokens - The prospective tokens to verify\\n     */\\n    function verifyTokenCompliance(address[] calldata tokens) external {\\n        for (uint i = 0; i < tokens.length; i++) {\\n            verifyTokenComplianceInternal(tokens[i]);\\n        }\\n    }\\n\\n    function createPoolInternalHandle(IBPool bPool, uint initialSupply) external view {\\n        require(initialSupply >= DesynConstants.MIN_POOL_SUPPLY, \\\"ERR_INIT_SUPPLY_MIN\\\");\\n        require(initialSupply <= DesynConstants.MAX_POOL_SUPPLY, \\\"ERR_INIT_SUPPLY_MAX\\\");\\n        require(bPool.EXIT_FEE() == 0, \\\"ERR_NONZERO_EXIT_FEE\\\");\\n        // EXIT_FEE must always be zero, or ConfigurableRightsPool._pushUnderlying will fail\\n        require(DesynConstants.EXIT_FEE == 0, \\\"ERR_NONZERO_EXIT_FEE\\\");\\n    }\\n\\n    function createPoolHandle(\\n        uint collectPeriod,\\n        uint upperCap,\\n        uint initialSupply\\n    ) external pure {\\n        require(collectPeriod <= DesynConstants.MAX_COLLECT_PERIOD, \\\"ERR_EXCEEDS_FUND_RAISING_PERIOD\\\");\\n        require(upperCap >= initialSupply, \\\"ERR_CAP_BIGGER_THAN_INITSUPPLY\\\");\\n        // collectEndTime = block.timestamp + collectPeriod;\\n        // if (boolA) {\\n        //     period = 1 seconds; // for test only\\n        // } else if (boolB) {\\n        //     period = 365 days;\\n        // } else {\\n        //     period = 730 days;\\n        // }\\n        // closureEndTime = period + collectEndTime;\\n    }\\n\\n    function exitPoolHandle(\\n        uint _endEtfAmount,\\n        uint _endFundAmount,\\n        uint _beginEtfAmount,\\n        uint _beginFundAmount,\\n        uint poolAmountIn,\\n        uint totalEnd\\n    )\\n        external\\n        pure\\n        returns (\\n            uint endEtfAmount,\\n            uint endFundAmount,\\n            uint profitRate\\n        )\\n    {\\n        endEtfAmount = DesynSafeMath.badd(_endEtfAmount, poolAmountIn);\\n        endFundAmount = DesynSafeMath.badd(_endFundAmount, totalEnd);\\n        uint amount1 = DesynSafeMath.bdiv(endFundAmount, endEtfAmount);\\n        uint amount2 = DesynSafeMath.bdiv(_beginFundAmount, _beginEtfAmount);\\n        if (amount1 > amount2) {\\n            profitRate = DesynSafeMath.bdiv(\\n                DesynSafeMath.bmul(DesynSafeMath.bsub(DesynSafeMath.bdiv(endFundAmount, endEtfAmount), DesynSafeMath.bdiv(_beginFundAmount, _beginEtfAmount)), poolAmountIn),\\n                totalEnd\\n            );\\n        }\\n    }\\n\\n    function exitPoolHandleA(\\n        uint _tokenAmountOut,\\n        uint redeemFee,\\n        uint profitRate,\\n        uint perfermanceFee\\n    )\\n        external\\n        pure\\n        returns (\\n            uint tokenAmountOutNew,\\n            uint amount,\\n            uint tokensAmountRedeem\\n        )\\n    {\\n        uint tokenAmountOut = _tokenAmountOut;\\n        tokenAmountOutNew = DesynSafeMath.bmul(tokenAmountOut, redeemFee);\\n        tokensAmountRedeem = tokenAmountOutNew;\\n        tokenAmountOutNew = DesynSafeMath.badd(DesynSafeMath.bmul(DesynSafeMath.bmul(tokenAmountOut, profitRate), perfermanceFee), tokenAmountOutNew);\\n        amount = DesynSafeMath.bsub(tokenAmountOut, tokenAmountOutNew);\\n    }\\n\\n    function exitPoolHandleB(\\n        bool bools,\\n        bool isCompletedCollect,\\n        uint closureEndTime,\\n        uint collectEndTime,\\n        uint _etfAmount,\\n        uint _fundAmount,\\n        uint poolAmountIn\\n    ) external view returns (uint etfAmount, uint fundAmount) {\\n        if (bools) {\\n            bool isCloseEtfCollectEndWithFailure = isCompletedCollect == false && block.timestamp >= collectEndTime;\\n            bool isCloseEtfClosureEnd = block.timestamp >= closureEndTime;\\n            require(isCloseEtfCollectEndWithFailure || isCloseEtfClosureEnd, \\\"ERR_CLOSURE_TIME_NOT_ARRIVED!\\\");\\n        }\\n        fundAmount = _fundAmount;\\n        etfAmount = _etfAmount;\\n        if (bools && block.timestamp <= collectEndTime) {\\n            fundAmount = DesynSafeMath.bmul(DesynSafeMath.bdiv(DesynSafeMath.bsub(_etfAmount, poolAmountIn), _etfAmount), _fundAmount);\\n            etfAmount = DesynSafeMath.bsub(_etfAmount, poolAmountIn);\\n        }\\n    }\\n\\n    function joinPoolHandle(\\n        bool canWhitelistLPs,\\n        bool isList,\\n        bool bools,\\n        uint collectEndTime\\n    ) external view {\\n        require(!canWhitelistLPs || isList, \\\"ERR_NOT_ON_WHITELIST\\\");\\n\\n        if (bools) {\\n            require(block.timestamp <= collectEndTime, \\\"ERR_COLLECT_PERIOD_FINISHED!\\\");\\n        }\\n    }\\n\\n    function rebalanceHandle(\\n        bool bools,\\n        uint collectEndTime,\\n        uint closureEndTime,\\n        bool canChangeWeights,\\n        address tokenA,\\n        address tokenB\\n    ) external view {\\n        if (bools) {\\n            require(block.timestamp > collectEndTime && block.timestamp < closureEndTime, \\\"ERR_NOT_REBALANCE_PERIOD\\\");\\n        }\\n\\n        require(canChangeWeights, \\\"ERR_NOT_CONFIGURABLE_WEIGHTS\\\");\\n        require(tokenA != tokenB, \\\"ERR_TOKENS_SAME\\\");\\n    }\\n\\n    /**\\n     * @notice Join a pool\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param poolAmountOut - number of pool tokens to receive\\n     * @param maxAmountsIn - Max amount of asset tokens to spend\\n     * @return actualAmountsIn - calculated values of the tokens to pull in\\n     */\\n    function joinPool(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        uint poolAmountOut,\\n        uint[] calldata maxAmountsIn\\n    ) external view returns (uint[] memory actualAmountsIn) {\\n        address[] memory tokens = bPool.getCurrentTokens();\\n\\n        require(maxAmountsIn.length == tokens.length, \\\"ERR_AMOUNTS_MISMATCH\\\");\\n\\n        uint poolTotal = self.totalSupply();\\n        // Subtract  1 to ensure any rounding errors favor the pool\\n        uint ratio = DesynSafeMath.bdiv(poolAmountOut, DesynSafeMath.bsub(poolTotal, 1));\\n\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        // We know the length of the array; initialize it, and fill it below\\n        // Cannot do \\\"push\\\" in memory\\n        actualAmountsIn = new uint[](tokens.length);\\n\\n        // This loop contains external calls\\n        // External calls are to math libraries or the underlying pool, so low risk\\n        for (uint i = 0; i < tokens.length; i++) {\\n            address t = tokens[i];\\n            uint bal = bPool.getBalance(t);\\n            // Add 1 to ensure any rounding errors favor the pool\\n            uint tokenAmountIn = DesynSafeMath.bmul(ratio, DesynSafeMath.badd(bal, 1));\\n\\n            require(tokenAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountIn <= maxAmountsIn[i], \\\"ERR_LIMIT_IN\\\");\\n\\n            actualAmountsIn[i] = tokenAmountIn;\\n        }\\n    }\\n\\n    /**\\n     * @notice Exit a pool - redeem pool tokens for underlying assets\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param poolAmountIn - amount of pool tokens to redeem\\n     * @param minAmountsOut - minimum amount of asset tokens to receive\\n     * @return pAiAfterExitFee - final amount in (after accounting for exit fee)\\n     * @return actualAmountsOut - calculated amounts of each token to pull\\n     */\\n    function exitPool(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        uint poolAmountIn,\\n        uint[] calldata minAmountsOut\\n    ) external view returns (uint pAiAfterExitFee, uint[] memory actualAmountsOut) {\\n        address[] memory tokens = bPool.getCurrentTokens();\\n\\n        require(minAmountsOut.length == tokens.length, \\\"ERR_AMOUNTS_MISMATCH\\\");\\n\\n        uint poolTotal = self.totalSupply();\\n\\n        // Calculate exit fee and the final amount in\\n        pAiAfterExitFee = DesynSafeMath.bsub(poolAmountIn, 0);\\n\\n        uint ratio = DesynSafeMath.bdiv(pAiAfterExitFee, DesynSafeMath.badd(poolTotal, 1));\\n\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        actualAmountsOut = new uint[](tokens.length);\\n\\n        // This loop contains external calls\\n        // External calls are to math libraries or the underlying pool, so low risk\\n        for (uint i = 0; i < tokens.length; i++) {\\n            address t = tokens[i];\\n            uint bal = bPool.getBalance(t);\\n            // Subtract 1 to ensure any rounding errors favor the pool\\n            uint tokenAmountOut = DesynSafeMath.bmul(ratio, DesynSafeMath.bsub(bal, 1));\\n\\n            require(tokenAmountOut != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountOut >= minAmountsOut[i], \\\"ERR_LIMIT_OUT\\\");\\n\\n            actualAmountsOut[i] = tokenAmountOut;\\n        }\\n    }\\n\\n    // Internal functions\\n    // Check for zero transfer, and make sure it returns true to returnValue\\n    function verifyTokenComplianceInternal(address token) internal {\\n        bool returnValue = IERC20(token).transfer(msg.sender, 0);\\n        require(returnValue, \\\"ERR_NONCONFORMING_TOKEN\\\");\\n    }\\n\\n    function WhitelistHandle(\\n        bool bool1,\\n        bool bool2,\\n        address adr\\n    ) external pure {\\n        require(bool1, \\\"ERR_CANNOT_WHITELIST_LPS\\\");\\n        require(bool2, \\\"ERR_LP_NOT_WHITELISTED\\\");\\n        require(adr != address(0), \\\"ERR_INVALID_ADDRESS\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x661001d283d11be82aca3a46a41378006d086545f28fc7582b8fd26122f82c14\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620010d3380380620010d38339810160408190526200003491620000ff565b80516200004990600290602084019062000063565b5050600380546001600160a01b03191633179055620001c2565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620000a657805160ff1916838001178555620000d6565b82800160010185558215620000d6579182015b82811115620000d6578251825591602001919060010190620000b9565b50620000e4929150620000e8565b5090565b5b80821115620000e45760008155600101620000e9565b6000602080838503121562000112578182fd5b82516001600160401b038082111562000129578384fd5b818501915085601f8301126200013d578384fd5b8151818111156200014c578485fd5b604051601f8201601f19168101850183811182821017156200016c578687fd5b604052818152838201850188101562000183578586fd5b8592505b81831015620001a6578383018501518184018601529184019162000187565b81831115620001b757858583830101525b979650505050505050565b610f0180620001d26000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806308463965146100675780638b0e8e67146100855780639daafec71461009a578063b2ebfea5146100af578063dc19e842146100c2578063e9543720146100e2575b600080fd5b61006f6100f5565b60405161007c9190610cd3565b60405180910390f35b61009861009336600461074f565b610180565b005b6100a2610200565b60405161007c9190610a81565b6100986100bd366004610835565b61020f565b6100d56100d036600461074f565b610250565b60405161007c9190610cc8565b6100a26100f0366004610771565b61026e565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156101785780601f1061014d57610100808354040283529160200191610178565b820191906000526020600020905b81548152906001019060200180831161015b57829003601f168201915b505050505081565b6003546001600160a01b031633146101b35760405162461bcd60e51b81526004016101aa90610d38565b60405180910390fd5b600480546001600160a01b0319166001600160a01b0383169081179091556040513391907fbe29361fcb0d6d7a528b06b7e3c978b225c152a431ac559470986926fe26692590600090a350565b6004546001600160a01b031681565b6003546001600160a01b031633146102395760405162461bcd60e51b81526004016101aa90610d38565b805161024c9060029060208401906105a2565b5050565b6001600160a01b031660009081526020819052604090205460ff1690565b60008061027a8761045a565b6040519091506001600160a01b0382169033907f8aaa45dbe91f274e1c80489691f3d62dbf595d587fcc6a989fa27696e7c2a23290600090a36001600160a01b03811660008181526020819052604090819020805460ff19166001179055516355b1905560e01b81526355b19055906102fb908b908b908b90600401610ae9565b600060405180830381600087803b15801561031557600080fd5b505af1158015610329573d6000803e3d6000fd5b505060048054604051634660c5a560e01b81526001600160a01b039091169350634660c5a5925061035e9185918a9101610a95565b600060405180830381600087803b15801561037857600080fd5b505af115801561038c573d6000803e3d6000fd5b5050604051633ef1447960e01b81526001600160a01b0384169250633ef1447991506103be9087908790600401610c3a565b600060405180830381600087803b1580156103d857600080fd5b505af11580156103ec573d6000803e3d6000fd5b50506040516392eefe9b60e01b81526001600160a01b03841692506392eefe9b915061041c903390600401610a81565b600060405180830381600087803b15801561043657600080fd5b505af115801561044a573d6000803e3d6000fd5b50929a9950505050505050505050565b6002805460408051602060018416156101000260001901909316849004601f8101849004840282018401909252818152600093606093919290918301828280156104e55780601f106104ba576101008083540402835291602001916104e5565b820191906000526020600020905b8154815290600101906020018083116104c857829003601f168201915b505050505090506060818480600001906104ff9190610d5f565b61050c6020880188610d5f565b60405160200161051f9493929190610d06565b60408051601f198184030181529082905261053d9291602001610a49565b60408051601f19818403018152908290526001805480820190915590925060009161056b9190602001610a78565b604051602081830303815290604052805190602001209050808251602084016000f59350833b61059a57600080fd5b505050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106105e357805160ff1916838001178555610610565b82800160010185558215610610579182015b828111156106105782518255916020019190600101906105f5565b5061061c929150610620565b5090565b5b8082111561061c5760008155600101610621565b80356001600160a01b038116811461064c57600080fd5b92915050565b600082601f830112610662578081fd5b813561067561067082610dd0565b610daa565b81815291506020808301908481018184028601820187101561069657600080fd5b60005b848110156106bd576106ab8883610635565b84529282019290820190600101610699565b505050505092915050565b600082601f8301126106d8578081fd5b81356106e661067082610dd0565b81815291506020808301908481018184028601820187101561070757600080fd5b60005b848110156106bd5781358452928201929082019060010161070a565b60006104008284031215610738578081fd5b50919050565b600060c08284031215610738578081fd5b600060208284031215610760578081fd5b61076a8383610635565b9392505050565b600080600080600080610540878903121561078a578182fd5b6107948888610635565b955060208701356001600160401b03808211156107af578384fd5b90880190610160828b0312156107c3578384fd5b8196506107d38a60408b0161073e565b95506107e38a6101008b01610726565b94506105008901359150808211156107f9578384fd5b6108058a838b01610652565b935061052089013591508082111561081b578283fd5b5061082889828a016106c8565b9150509295509295509295565b60006020808385031215610847578182fd5b82356001600160401b038082111561085d578384fd5b818501915085601f830112610870578384fd5b81358181111561087e578485fd5b610890601f8201601f19168501610daa565b915080825286848285010111156108a5578485fd5b80848401858401378101909201929092529392505050565b815260200190565b6001600160a01b03169052565b60008284526020808501945082825b8581101561090f578183016001600160a01b036108fe8285610635565b1688529683019691506001016108e1565b509495945050505050565b81835260006001600160fb1b03831115610932578081fd5b6020830280836020870137939093016020019283525090919050565b6002811061095857fe5b9052565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b803561099181610eba565b1515825260208101356109a381610eba565b1515602083015260408101356109b881610eba565b1515604083015260608101356109cd81610eba565b1515606083015260808101356109e281610eba565b1515608083015260a08101356109f781610eba565b80151560a0840152505050565b610a0e8282610a3a565b610a1e6040830160408301610a3a565b610a2e6080830160808301610a3a565b61024c60c0830160c083015b80358252602090810135910152565b60008351610a5b818460208801610e8a565b835190830190610a6f818360208801610e8a565b01949350505050565b90815260200190565b6001600160a01b0391909116815260200190565b6001600160a01b03831681526104208101610ab36020830184610a04565b610ac561012083016101008501610a04565b610ad761022083016102008501610a04565b61076a61032083016103008501610a04565b6001600160a01b038416815261010060208201819052600090610b0c8580610e46565b6101608084870152610b236102608701838561095c565b9250610b326020890189610e46565b925060ff196101208189870301818a0152610b4e86868561095c565b9550610b5d60408c018c610def565b95509250610140828a880301818b0152610b788787866108d2565b9650610b8760608d018d610def565b96509350828a880301858b0152610b9f87878661091a565b9650610bae60808d018d610def565b96509450828a8803016101808b0152610bc887878761091a565b965060a08c01356101a08b015260c08c01356101c08b015260e08c01356101e08b0152878c01356102008b0152818c01356102208b0152610c0b818d018d610e36565b9750505050505050610c2161024085018361094e565b9150610c3290506040830184610986565b949350505050565b604080825283519082018190526000906020906060840190828701845b82811015610c7a57610c6a8483516108c5565b9284019290840190600101610c57565b50505083810382850152808551610c918184610a78565b91508387019250845b81811015610cbb57610cad8385516108bd565b938501939250600101610c9a565b5090979650505050505050565b901515815260200190565b6000602082528251806020840152610cf2816040850160208701610e8a565b601f01601f19169190910160400192915050565b600060408252610d1a60408301868861095c565b8281036020840152610d2d81858761095c565b979650505050505050565b6020808252600d908201526c4552525f4e4f545f424c41425360981b604082015260600190565b6000808335601e19843603018112610d75578283fd5b8301803591506001600160401b03821115610d8e578283fd5b602001915036819003821315610da357600080fd5b9250929050565b6040518181016001600160401b0381118282101715610dc857600080fd5b604052919050565b60006001600160401b03821115610de5578081fd5b5060209081020190565b6000808335601e19843603018112610e05578283fd5b83016020810192503590506001600160401b03811115610e2457600080fd5b602081023603831315610da357600080fd5b600082356002811061076a578182fd5b6000808335601e19843603018112610e5c578283fd5b83016020810192503590506001600160401b03811115610e7b57600080fd5b803603831315610da357600080fd5b60005b83811015610ea5578181015183820152602001610e8d565b83811115610eb4576000848401525b50505050565b8015158114610ec857600080fd5b5056fea26469706673582212203967519f69305b3662587a87fa68f482545ae2cc7508d952c343a8aae5e704e564736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c806308463965146100675780638b0e8e67146100855780639daafec71461009a578063b2ebfea5146100af578063dc19e842146100c2578063e9543720146100e2575b600080fd5b61006f6100f5565b60405161007c9190610cd3565b60405180910390f35b61009861009336600461074f565b610180565b005b6100a2610200565b60405161007c9190610a81565b6100986100bd366004610835565b61020f565b6100d56100d036600461074f565b610250565b60405161007c9190610cc8565b6100a26100f0366004610771565b61026e565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156101785780601f1061014d57610100808354040283529160200191610178565b820191906000526020600020905b81548152906001019060200180831161015b57829003601f168201915b505050505081565b6003546001600160a01b031633146101b35760405162461bcd60e51b81526004016101aa90610d38565b60405180910390fd5b600480546001600160a01b0319166001600160a01b0383169081179091556040513391907fbe29361fcb0d6d7a528b06b7e3c978b225c152a431ac559470986926fe26692590600090a350565b6004546001600160a01b031681565b6003546001600160a01b031633146102395760405162461bcd60e51b81526004016101aa90610d38565b805161024c9060029060208401906105a2565b5050565b6001600160a01b031660009081526020819052604090205460ff1690565b60008061027a8761045a565b6040519091506001600160a01b0382169033907f8aaa45dbe91f274e1c80489691f3d62dbf595d587fcc6a989fa27696e7c2a23290600090a36001600160a01b03811660008181526020819052604090819020805460ff19166001179055516355b1905560e01b81526355b19055906102fb908b908b908b90600401610ae9565b600060405180830381600087803b15801561031557600080fd5b505af1158015610329573d6000803e3d6000fd5b505060048054604051634660c5a560e01b81526001600160a01b039091169350634660c5a5925061035e9185918a9101610a95565b600060405180830381600087803b15801561037857600080fd5b505af115801561038c573d6000803e3d6000fd5b5050604051633ef1447960e01b81526001600160a01b0384169250633ef1447991506103be9087908790600401610c3a565b600060405180830381600087803b1580156103d857600080fd5b505af11580156103ec573d6000803e3d6000fd5b50506040516392eefe9b60e01b81526001600160a01b03841692506392eefe9b915061041c903390600401610a81565b600060405180830381600087803b15801561043657600080fd5b505af115801561044a573d6000803e3d6000fd5b50929a9950505050505050505050565b6002805460408051602060018416156101000260001901909316849004601f8101849004840282018401909252818152600093606093919290918301828280156104e55780601f106104ba576101008083540402835291602001916104e5565b820191906000526020600020905b8154815290600101906020018083116104c857829003601f168201915b505050505090506060818480600001906104ff9190610d5f565b61050c6020880188610d5f565b60405160200161051f9493929190610d06565b60408051601f198184030181529082905261053d9291602001610a49565b60408051601f19818403018152908290526001805480820190915590925060009161056b9190602001610a78565b604051602081830303815290604052805190602001209050808251602084016000f59350833b61059a57600080fd5b505050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106105e357805160ff1916838001178555610610565b82800160010185558215610610579182015b828111156106105782518255916020019190600101906105f5565b5061061c929150610620565b5090565b5b8082111561061c5760008155600101610621565b80356001600160a01b038116811461064c57600080fd5b92915050565b600082601f830112610662578081fd5b813561067561067082610dd0565b610daa565b81815291506020808301908481018184028601820187101561069657600080fd5b60005b848110156106bd576106ab8883610635565b84529282019290820190600101610699565b505050505092915050565b600082601f8301126106d8578081fd5b81356106e661067082610dd0565b81815291506020808301908481018184028601820187101561070757600080fd5b60005b848110156106bd5781358452928201929082019060010161070a565b60006104008284031215610738578081fd5b50919050565b600060c08284031215610738578081fd5b600060208284031215610760578081fd5b61076a8383610635565b9392505050565b600080600080600080610540878903121561078a578182fd5b6107948888610635565b955060208701356001600160401b03808211156107af578384fd5b90880190610160828b0312156107c3578384fd5b8196506107d38a60408b0161073e565b95506107e38a6101008b01610726565b94506105008901359150808211156107f9578384fd5b6108058a838b01610652565b935061052089013591508082111561081b578283fd5b5061082889828a016106c8565b9150509295509295509295565b60006020808385031215610847578182fd5b82356001600160401b038082111561085d578384fd5b818501915085601f830112610870578384fd5b81358181111561087e578485fd5b610890601f8201601f19168501610daa565b915080825286848285010111156108a5578485fd5b80848401858401378101909201929092529392505050565b815260200190565b6001600160a01b03169052565b60008284526020808501945082825b8581101561090f578183016001600160a01b036108fe8285610635565b1688529683019691506001016108e1565b509495945050505050565b81835260006001600160fb1b03831115610932578081fd5b6020830280836020870137939093016020019283525090919050565b6002811061095857fe5b9052565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b803561099181610eba565b1515825260208101356109a381610eba565b1515602083015260408101356109b881610eba565b1515604083015260608101356109cd81610eba565b1515606083015260808101356109e281610eba565b1515608083015260a08101356109f781610eba565b80151560a0840152505050565b610a0e8282610a3a565b610a1e6040830160408301610a3a565b610a2e6080830160808301610a3a565b61024c60c0830160c083015b80358252602090810135910152565b60008351610a5b818460208801610e8a565b835190830190610a6f818360208801610e8a565b01949350505050565b90815260200190565b6001600160a01b0391909116815260200190565b6001600160a01b03831681526104208101610ab36020830184610a04565b610ac561012083016101008501610a04565b610ad761022083016102008501610a04565b61076a61032083016103008501610a04565b6001600160a01b038416815261010060208201819052600090610b0c8580610e46565b6101608084870152610b236102608701838561095c565b9250610b326020890189610e46565b925060ff196101208189870301818a0152610b4e86868561095c565b9550610b5d60408c018c610def565b95509250610140828a880301818b0152610b788787866108d2565b9650610b8760608d018d610def565b96509350828a880301858b0152610b9f87878661091a565b9650610bae60808d018d610def565b96509450828a8803016101808b0152610bc887878761091a565b965060a08c01356101a08b015260c08c01356101c08b015260e08c01356101e08b0152878c01356102008b0152818c01356102208b0152610c0b818d018d610e36565b9750505050505050610c2161024085018361094e565b9150610c3290506040830184610986565b949350505050565b604080825283519082018190526000906020906060840190828701845b82811015610c7a57610c6a8483516108c5565b9284019290840190600101610c57565b50505083810382850152808551610c918184610a78565b91508387019250845b81811015610cbb57610cad8385516108bd565b938501939250600101610c9a565b5090979650505050505050565b901515815260200190565b6000602082528251806020840152610cf2816040850160208701610e8a565b601f01601f19169190910160400192915050565b600060408252610d1a60408301868861095c565b8281036020840152610d2d81858761095c565b979650505050505050565b6020808252600d908201526c4552525f4e4f545f424c41425360981b604082015260600190565b6000808335601e19843603018112610d75578283fd5b8301803591506001600160401b03821115610d8e578283fd5b602001915036819003821315610da357600080fd5b9250929050565b6040518181016001600160401b0381118282101715610dc857600080fd5b604052919050565b60006001600160401b03821115610de5578081fd5b5060209081020190565b6000808335601e19843603018112610e05578283fd5b83016020810192503590506001600160401b03811115610e2457600080fd5b602081023603831315610da357600080fd5b600082356002811061076a578182fd5b6000808335601e19843603018112610e5c578283fd5b83016020810192503590506001600160401b03811115610e7b57600080fd5b803603831315610da357600080fd5b60005b83811015610ea5578181015183820152602001610e8d565b83811115610eb4576000848401525b50505050565b8015158114610ec857600080fd5b5056fea26469706673582212203967519f69305b3662587a87fa68f482545ae2cc7508d952c343a8aae5e704e564736f6c634300060c0033",
  "libraries": {
    "DesynSafeMath": "0xe96db147c2d1b7af2a3dd07388b1cc7b086f3c8d",
    "RightsManager": "0x2c05086fbc0701a179e05416e8142c8ff100f85f",
    "SmartPoolManager": "0xD3090165Aa2A37e952Df395d95bd5305D8117445"
  },
  "devdoc": {
    "author": "Desyn Labs",
    "details": "Rights are held in a corresponding struct in ConfigurableRightsPool      Index values are as follows:      0: canPauseSwapping - can setPublicSwap back to false after turning it on                            by default, it is off on initialization and can only be turned on      1: canChangeSwapFee - can setSwapFee after initialization (by default, it is fixed at create time)      2: canChangeWeights - can bind new token weights (allowed by default in base pool)      3: canAddRemoveTokens - can bind/unbind tokens (allowed by default in base pool)      4: canWhitelistLPs - if set, only whitelisted addresses can join pools                           (enables private pools with more than one LP)      5: canChangeCap - can change the BSP cap (max # of pool tokens)",
    "kind": "dev",
    "methods": {
      "isCrp(address)": {
        "params": {
          "addr": "- address to check"
        },
        "returns": {
          "_0": "boolean indicating whether it is a CRP"
        }
      },
      "newCrp(address,(string,string,address[],uint256[],uint256[],uint256,uint256,uint256,uint256,uint256,uint8),(bool,bool,bool,bool,bool,bool),(((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256)),((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256)),((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256)),((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256))),address[],uint256[])": {
        "details": "emits a LogNewCRP event",
        "params": {
          "factoryAddress": "- the BFactory instance used to create the underlying pool",
          "poolParams": "- struct containing the names, tokens, weights, balances, and swap fee",
          "rights": "- struct of permissions, configuring this CRP instance (see above for definitions)"
        }
      }
    },
    "title": "Configurable Rights Pool Factory - create parameterized smart pools",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "isCrp(address)": {
        "notice": "Check to see if a given address is a CRP"
      },
      "newCrp(address,(string,string,address[],uint256[],uint256[],uint256,uint256,uint256,uint256,uint256,uint8),(bool,bool,bool,bool,bool,bool),(((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256)),((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256)),((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256)),((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256))),address[],uint256[])": {
        "notice": "Create a new CRP"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7851,
        "contract": "contracts/deploy/CRPFactory.sol:CRPFactory",
        "label": "_isCrp",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7871,
        "contract": "contracts/deploy/CRPFactory.sol:CRPFactory",
        "label": "counters",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 7873,
        "contract": "contracts/deploy/CRPFactory.sol:CRPFactory",
        "label": "bytecodes",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes_storage"
      },
      {
        "astId": 7875,
        "contract": "contracts/deploy/CRPFactory.sol:CRPFactory",
        "label": "_blabs",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 7877,
        "contract": "contracts/deploy/CRPFactory.sol:CRPFactory",
        "label": "userVault",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
