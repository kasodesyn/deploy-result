{
  "address": "0x255F7fFfBd3406C262ee25C2A58AdebeA5C50afE",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "kol",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "KolClaim",
      "type": "event"
    },
    {
      "anonymous": true,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes4",
          "name": "sig",
          "type": "bytes4"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "LOG_CALL",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "ManagerClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "ManagersClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "types",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "name": "TypeAmountIn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "claimEther",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "claimToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "types",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "tokensIn",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amountsIn",
          "type": "uint256[]"
        }
      ],
      "name": "depositToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "kol",
          "type": "address"
        }
      ],
      "name": "getKolFeeType",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "tokenList",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "managerAmount",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "issueAmount",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "redeemAmount",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "perfermanceAmount",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct UserVault.PoolTokens",
          "name": "result",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "kol",
          "type": "address"
        }
      ],
      "name": "getKolHasClaimed",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct UserVault.ClaimTokens",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "kol",
          "type": "address"
        }
      ],
      "name": "getKolReward",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokenList",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "kol",
          "type": "address"
        }
      ],
      "name": "getKolUserInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "userAdr",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "userAmount",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct UserVault.KolUserInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getKolsAdr",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getKolsReward",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getManageHasClaimed",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct UserVault.ClaimTokens",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getManagerFeeTypes",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "tokenList",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "managerAmount",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "issueAmount",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "redeemAmount",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "perfermanceAmount",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct UserVault.PoolTokens",
          "name": "result",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getManagerReward",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getPoolConfig",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "firstLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "secondLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "thirdLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "fourLevel",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SmartPoolManager.feeParams",
              "name": "managerFee",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "firstLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "secondLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "thirdLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "fourLevel",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SmartPoolManager.feeParams",
              "name": "issueFee",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "firstLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "secondLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "thirdLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "fourLevel",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SmartPoolManager.feeParams",
              "name": "redeemFee",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "firstLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "secondLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "thirdLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "fourLevel",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SmartPoolManager.feeParams",
              "name": "perfermanceFee",
              "type": "tuple"
            }
          ],
          "internalType": "struct SmartPoolManager.KolPoolParams",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getPoolFeeTypes",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "tokenList",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "managerAmount",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "issueAmount",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "redeemAmount",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "perfermanceAmount",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct UserVault.PoolTokens",
          "name": "result",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getPoolReward",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokenList",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "kol",
          "type": "address"
        }
      ],
      "name": "getUnKolReward",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getUnManagerReward",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserKolInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "kol",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            }
          ],
          "internalType": "struct UserVault.UserKolInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "kolClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "kolTotalAmountList",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "managerClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolInviteTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "kol",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "poolTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokensAmount",
          "type": "uint256[]"
        }
      ],
      "name": "recordTokenInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "bools",
          "type": "bool"
        }
      ],
      "name": "setBlackList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adr",
          "type": "address"
        }
      ],
      "name": "setCrpFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "firstLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "secondLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "thirdLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "fourLevel",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SmartPoolManager.feeParams",
              "name": "managerFee",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "firstLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "secondLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "thirdLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "fourLevel",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SmartPoolManager.feeParams",
              "name": "issueFee",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "firstLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "secondLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "thirdLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "fourLevel",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SmartPoolManager.feeParams",
              "name": "redeemFee",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "firstLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "secondLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "thirdLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "fourLevel",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SmartPoolManager.feeParams",
              "name": "perfermanceFee",
              "type": "tuple"
            }
          ],
          "internalType": "struct SmartPoolManager.KolPoolParams",
          "name": "_poolParams",
          "type": "tuple"
        }
      ],
      "name": "setPoolParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adr",
          "type": "address"
        }
      ],
      "name": "setVaultAdr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userKolList",
      "outputs": [
        {
          "internalType": "address",
          "name": "kol",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xff003143ead1f9a0de8f586ea1e29158f3340eb91e0d770e14cd60814db2f39c",
  "receipt": {
    "to": null,
    "from": "0x595b85b4A418e3B8df897D02F5BD49167D00862F",
    "contractAddress": "0x255F7fFfBd3406C262ee25C2A58AdebeA5C50afE",
    "transactionIndex": 0,
    "gasUsed": "5189391",
    "logsBloom": "0x
    "blockHash": "0xd479307d06d0da0dccce1f81d96681284713358171cab3a81f7e16e10b540488",
    "transactionHash": "0xff003143ead1f9a0de8f586ea1e29158f3340eb91e0d770e14cd60814db2f39c",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 8248459,
        "transactionHash": "0xff003143ead1f9a0de8f586ea1e29158f3340eb91e0d770e14cd60814db2f39c",
        "address": "0x255F7fFfBd3406C262ee25C2A58AdebeA5C50afE",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000595b85b4a418e3b8df897d02f5bd49167d00862f"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xd479307d06d0da0dccce1f81d96681284713358171cab3a81f7e16e10b540488"
      }
    ],
    "blockNumber": 8248459,
    "cumulativeGasUsed": "5189391",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "db1bbd35822d98d7e95e73010e06935d",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"kol\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"KolClaim\",\"type\":\"event\"},{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"LOG_CALL\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ManagerClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ManagersClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"types\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"TypeAmountIn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimEther\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"types\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"tokensIn\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsIn\",\"type\":\"uint256[]\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"kol\",\"type\":\"address\"}],\"name\":\"getKolFeeType\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"tokenList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"managerAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"issueAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"redeemAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"perfermanceAmount\",\"type\":\"uint256[]\"}],\"internalType\":\"struct UserVault.PoolTokens\",\"name\":\"result\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"kol\",\"type\":\"address\"}],\"name\":\"getKolHasClaimed\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct UserVault.ClaimTokens\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"kol\",\"type\":\"address\"}],\"name\":\"getKolReward\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"kol\",\"type\":\"address\"}],\"name\":\"getKolUserInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"userAdr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"userAmount\",\"type\":\"uint256[]\"}],\"internalType\":\"struct UserVault.KolUserInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getKolsAdr\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getKolsReward\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getManageHasClaimed\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct UserVault.ClaimTokens\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getManagerFeeTypes\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"tokenList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"managerAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"issueAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"redeemAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"perfermanceAmount\",\"type\":\"uint256[]\"}],\"internalType\":\"struct UserVault.PoolTokens\",\"name\":\"result\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getManagerReward\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolConfig\",\"outputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"managerFee\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"issueFee\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"redeemFee\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"perfermanceFee\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.KolPoolParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolFeeTypes\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"tokenList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"managerAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"issueAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"redeemAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"perfermanceAmount\",\"type\":\"uint256[]\"}],\"internalType\":\"struct UserVault.PoolTokens\",\"name\":\"result\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolReward\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"kol\",\"type\":\"address\"}],\"name\":\"getUnKolReward\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getUnManagerReward\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserKolInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"kol\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"internalType\":\"struct UserVault.UserKolInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"kolClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"kolTotalAmountList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"managerClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolInviteTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"kol\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"poolTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokensAmount\",\"type\":\"uint256[]\"}],\"name\":\"recordTokenInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"bools\",\"type\":\"bool\"}],\"name\":\"setBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setCrpFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"managerFee\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"issueFee\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"redeemFee\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"perfermanceFee\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.KolPoolParams\",\"name\":\"_poolParams\",\"type\":\"tuple\"}],\"name\":\"setPoolParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setVaultAdr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userKolList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"kol\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Desyn Labs\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Vault managerFee\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/deploy/UserVault.sol\":\"UserVault\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"contracts/base/Logs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\ncontract Logs {\\n    event LOG_CALL(bytes4 indexed sig, address indexed caller, bytes data) anonymous;\\n\\n    modifier _logs_() {\\n        emit LOG_CALL(msg.sig, msg.sender, msg.data);\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x942b3c172dd3f0910c3589d703b4f224c94c76a13cc84d7add6318206cff512e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/deploy/UserVault.sol\":{\"content\":\"pragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IDSProxy.sol\\\";\\nimport \\\"../openzeppelin/Ownable.sol\\\";\\nimport  \\\"../libraries/SmartPoolManager.sol\\\";\\nimport \\\"../libraries/EnumerableSet.sol\\\";\\nimport \\\"../libraries/SafeMath.sol\\\";\\nimport \\\"../libraries/Address.sol\\\";\\nimport \\\"../libraries/SafeERC20.sol\\\";\\nimport \\\"../base/Logs.sol\\\";\\n\\ninterface ICRPPool {\\n    function getController() external view returns (address);\\n\\n    enum Etypes {\\n        OPENED,\\n        CLOSED\\n    }\\n\\n    function etype() external view returns (Etypes);\\n\\n    function isCompletedCollect() external view returns (bool);\\n}\\n\\ninterface ICRPFactory {\\n    function isCrp(address addr) external view returns (bool);\\n}\\n\\ninterface IDesynOwnable {\\n    function adminList(address adr) external view returns (bool);\\n    function getController() external view returns (address);\\n    function getOwners() external view returns (address[] memory);\\n    function getOwnerPercentage() external view returns (uint[] memory);\\n    function allOwnerPercentage() external view returns (uint);\\n}\\n\\n/**\\n * @author Desyn Labs\\n * @title Vault managerFee\\n */\\ncontract UserVault is Ownable, Logs {\\n    using SafeMath for uint;\\n    using Address for address;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using SafeERC20 for IERC20;\\n\\n    event ManagersClaim(address indexed caller,address indexed pool, address token, uint amount, uint time);\\n    event ManagerClaim(address indexed caller,address indexed pool, address indexed manager, address token, uint amount, uint time);\\n    event KolClaim(address indexed caller,address indexed kol, address token, uint amount, uint time);\\n\\n    event TypeAmountIn(address indexed pool, uint types, address caller, address token, uint balance);\\n\\n    ICRPFactory crpFactory;\\n    address vaultAddress;\\n\\n    // pool of tokens\\n    struct PoolTokens {\\n        address[] tokenList;\\n        uint[] managerAmount;\\n        uint[] issueAmount;\\n        uint[] redeemAmount;\\n        uint[] perfermanceAmount;\\n    }\\n\\n    struct PoolStatus {\\n        bool couldManagerClaim;\\n        bool isBlackList;\\n        bool isSetParams;\\n        SmartPoolManager.KolPoolParams kolPoolConfig;\\n    }\\n\\n    // kol list\\n    struct KolUserInfo {\\n        address userAdr;\\n        uint[] userAmount;\\n    }\\n\\n    struct UserKolInfo {\\n        address kol;\\n        uint index;\\n    }\\n\\n    struct ClaimTokens {\\n        address[] tokens;\\n        uint[] amounts;\\n    }\\n\\n    // pool => kol => KolUserInfo[]\\n    mapping(address => mapping(address => KolUserInfo[])) kolUserInfo;\\n\\n    // pool tokens\\n    mapping(address => PoolTokens) poolsTokens;\\n    mapping(address => PoolStatus) poolsStatus;\\n\\n    //pool => initTotalAmount[]\\n    mapping(address => uint) public poolInviteTotal;\\n\\n    //pool => kol[]\\n    mapping(address => EnumerableSet.AddressSet) kolsList;\\n\\n    //pool => kol => totalAmount[]\\n    mapping(address => mapping(address => uint[])) public kolTotalAmountList;\\n\\n    // pool => user => kol\\n    mapping(address => mapping(address => UserKolInfo)) public userKolList;\\n    \\n    // pool=>kol=>tokens\\n    mapping(address => mapping(address => ClaimTokens)) kolHasClaimed;\\n\\n    // pool=>manage=>tokens\\n    mapping (address => ClaimTokens) manageHasClaimed;\\n\\n    receive() external payable {}\\n\\n    uint constant RATIO_BASE = 100;\\n\\n    // one type call and receiver token\\n    function depositToken(\\n        address pool,\\n        uint types,\\n        address[] calldata tokensIn,\\n        uint[] calldata amountsIn\\n    ) external onlyVault {\\n        require(tokensIn.length == amountsIn.length, \\\"ERR_TOKEN_LENGTH_NOT_MATCH\\\");\\n        _updatePool(pool, types, tokensIn, amountsIn);\\n        poolsStatus[pool].couldManagerClaim = true;\\n    }\\n\\n    // total tokens in pool\\n    function getPoolReward(address pool) external view returns (address[] memory tokenList, uint[] memory balances) {\\n        PoolTokens memory tokens = poolsTokens[pool];\\n        uint len = tokens.tokenList.length;\\n\\n        balances = new uint[](len);    \\n        tokenList = tokens.tokenList;\\n\\n        for(uint i; i<len ;i++){\\n            balances[i] = tokens.managerAmount[i]\\n                            .add(tokens.issueAmount[i])\\n                            .add(tokens.redeemAmount[i])\\n                            .add(tokens.perfermanceAmount[i]);\\n        }\\n    }\\n\\n    struct RewardVars {\\n        address pool;\\n        uint t0Ratio;\\n        uint t1Ratio;\\n        uint t2Ratio;\\n        uint t3Ratio;\\n        uint[] managementAmounts;\\n        uint[] issueAmounts;\\n        uint[] redemptionAmounts;\\n        uint[] performanceAmounts;\\n    }\\n\\n    // one kol total reward \\n    function getKolReward(\\n        address pool,\\n        address kol\\n    ) external view returns (address[] memory tokenList, uint[] memory balances) {\\n        uint contributionByCurKol = kolTotalAmountList[pool][kol].length > 0 ? kolTotalAmountList[pool][kol][0] : 0;\\n        uint allContributionByKol = poolInviteTotal[pool];\\n\\n        SmartPoolManager.KolPoolParams memory params = poolsStatus[pool].kolPoolConfig;\\n\\n        PoolTokens memory tokens = poolsTokens[pool];\\n        balances = new uint[](tokens.tokenList.length);\\n        tokenList = tokens.tokenList;\\n\\n        RewardVars memory vars = RewardVars(\\n            pool,\\n            _levelJudge(contributionByCurKol, params.managerFee),\\n            _levelJudge(contributionByCurKol, params.issueFee),\\n            _levelJudge(contributionByCurKol, params.redeemFee),\\n            _levelJudge(contributionByCurKol, params.perfermanceFee),\\n            tokens.managerAmount,\\n            tokens.issueAmount,\\n            tokens.redeemAmount,\\n            tokens.perfermanceAmount\\n        );\\n\\n        for(uint i; i < tokenList.length; i++){\\n             balances[i] = vars.managementAmounts[i].mul(vars.t0Ratio).div(RATIO_BASE)\\n                                .add(vars.issueAmounts[i].mul(vars.t1Ratio).div(RATIO_BASE))\\n                                .add(vars.redemptionAmounts[i].mul(vars.t2Ratio).div(RATIO_BASE))\\n                                .add(vars.performanceAmounts[i].mul(vars.t3Ratio).div(RATIO_BASE))\\n                                .mul(contributionByCurKol)\\n                                .div(allContributionByKol);\\n        }\\n    }\\n\\n    function kolClaim(address pool) external {\\n        if (_isClosePool(pool)) {\\n            require(crpFactory.isCrp(pool), \\\"ERR_INVALID_POOL_ADDRESS\\\");\\n            require(ICRPPool(pool).isCompletedCollect(), \\\"ERR_NOT_COMPLETED_COLLECT\\\");\\n            (address[] memory tokens, uint[] memory amounts) = this.getKolReward(pool, msg.sender);\\n\\n            ClaimTokens storage kolClaimedInfo = kolHasClaimed[pool][msg.sender];\\n\\n            // update length\\n            kolClaimedInfo.tokens = tokens;\\n            uint amountsLen = kolClaimedInfo.amounts.length;\\n            uint tokensLen = tokens.length;\\n\\n            if(amountsLen != tokensLen){\\n                uint delta = tokensLen - amountsLen;\\n                for(uint i; i < delta; i++){\\n                    kolClaimedInfo.amounts.push(0);\\n                }\\n            }\\n            \\n            address receiver = address(msg.sender).isContract()? IDSProxy(msg.sender).owner(): msg.sender;\\n            for(uint i; i< tokens.length; i++) {\\n                uint b = amounts[i] - kolClaimedInfo.amounts[i];\\n                if(b != 0){\\n                    IERC20(tokens[i]).safeTransfer(receiver, b);\\n                    kolClaimedInfo.amounts[i] = kolClaimedInfo.amounts[i].add(b);\\n                    emit KolClaim(msg.sender,receiver,tokens[i],b,block.timestamp);\\n                }\\n            }\\n        }\\n    }\\n\\n    // manager claim\\n    function managerClaim(address pool) external {\\n        // try  {} catch {}\\n        if (_isClosePool(pool)) {\\n            bool isManager = IDesynOwnable(pool).adminList(msg.sender) || IDesynOwnable(pool).getController() == msg.sender;\\n            bool isCollectSuccee = ICRPPool(pool).isCompletedCollect();\\n            require(isCollectSuccee, \\\"ERR_NOT_COMPLETED_COLLECT\\\");\\n            require(isManager, \\\"ERR_NOT_MANAGER\\\");\\n            (address[] memory tokens, uint[] memory amounts) = this.getUnManagerReward(pool);\\n            poolsStatus[pool].couldManagerClaim = false;\\n\\n            ClaimTokens storage manageHasClimed = manageHasClaimed[pool];\\n\\n            // update length\\n            manageHasClimed.tokens = tokens;\\n            uint amountsLen = manageHasClimed.amounts.length;\\n            uint tokensLen = tokens.length;\\n\\n            if(amountsLen != tokensLen){\\n                uint delta = tokensLen - amountsLen;\\n                for(uint i; i < delta; i++){\\n                    manageHasClimed.amounts.push(0);\\n                }\\n            }\\n            // update tokens\\n            for(uint i; i< tokens.length; i++){\\n                address t = tokens[i];\\n                if(amounts[i]!=0){\\n                    _transferHandle(pool, t, amounts[i]);\\n                    manageHasClimed.amounts[i] = manageHasClimed.amounts[i].add(amounts[i]);\\n                }\\n            }\\n        }\\n    }\\n\\n    function getManagerReward(address pool) external view returns (address[] memory, uint[] memory) {\\n        (address[] memory totalTokens, uint[] memory totalFee) = this.getPoolReward(pool);\\n        (, uint[] memory kolFee) = this.getKolsReward(pool);\\n\\n        uint len = totalTokens.length;\\n        uint[] memory balances = new uint[](len);\\n\\n        for(uint i; i<len; i++){\\n            balances[i] = totalFee[i] - kolFee[i];\\n        }\\n\\n        return (totalTokens, balances);\\n    }\\n    // for all manager\\n    function getUnManagerReward(address pool) external returns (address[] memory, uint[] memory) {\\n        (address[] memory totalTokens, uint[] memory totalAmounts) = this.getManagerReward(pool);\\n        ClaimTokens storage manageHasClimed = manageHasClaimed[pool];\\n\\n        // update length\\n        manageHasClimed.tokens = totalTokens;\\n        uint amountsLen = manageHasClimed.amounts.length;\\n        uint tokensLen = totalTokens.length;\\n        if(amountsLen != tokensLen){\\n            uint delta = tokensLen - amountsLen;\\n            for(uint i; i < delta; i++){\\n                manageHasClimed.amounts.push(0);\\n            }\\n        }\\n\\n        uint len = totalTokens.length;\\n        uint[] memory balances = new uint[](len);\\n        for(uint i; i < totalTokens.length; i++){\\n            balances[i] = totalAmounts[i] - manageHasClimed.amounts[i];\\n        }        \\n\\n        return (totalTokens,balances);\\n    }\\n\\n    function getPoolFeeTypes(address pool) external view returns(PoolTokens memory result){      \\n        return poolsTokens[pool];\\n    }\\n    \\n    function getManagerFeeTypes(address pool) external view returns(PoolTokens memory result){     \\n        result = this.getPoolFeeTypes(pool);\\n        PoolTokens memory allKolFee = _getKolsFeeTypes(pool); \\n\\n        uint len = result.tokenList.length;\\n        for(uint i; i< len; i++){\\n            result.managerAmount[i] = result.managerAmount[i].sub(allKolFee.managerAmount[i]);\\n            result.issueAmount[i] = result.issueAmount[i].sub(allKolFee.issueAmount[i]);\\n            result.redeemAmount[i] = result.redeemAmount[i].sub(allKolFee.redeemAmount[i]);\\n            result.perfermanceAmount[i] = result.perfermanceAmount[i].sub(allKolFee.perfermanceAmount[i]);\\n        }\\n    }\\n  \\n    function _getKolsFeeTypes(address pool) internal view returns(PoolTokens memory result) {\\n        PoolTokens memory poolInfo = poolsTokens[pool];\\n        uint len = poolInfo.tokenList.length;\\n        result.tokenList = poolInfo.tokenList;\\n        \\n        EnumerableSet.AddressSet storage list = kolsList[pool];\\n        uint kolLen = list.length();\\n        // init result\\n        result.managerAmount = new uint[](len);\\n        result.issueAmount = new uint[](len);\\n        result.redeemAmount = new uint[](len);\\n        result.perfermanceAmount = new uint[](len);\\n\\n        for(uint types; types<4; types++){\\n            for(uint i; i<len; i++){ \\n                for (uint j; j < kolLen; j++) {\\n                    if(types == 0) result.managerAmount[i] = result.managerAmount[i].add(_computeKolTotalReward(pool, list.at(j), 0, i));\\n                    else if(types == 1) result.issueAmount[i] = result.issueAmount[i].add(_computeKolTotalReward(pool, list.at(j), 1, i));\\n                    else if(types == 2) result.redeemAmount[i] = result.redeemAmount[i].add(_computeKolTotalReward(pool, list.at(j), 2, i));\\n                    else if(types == 3) result.perfermanceAmount[i] = result.perfermanceAmount[i].add(_computeKolTotalReward(pool, list.at(j), 3, i));\\n                }    \\n            }      \\n        }\\n    }\\n\\n    function getKolFeeType(address pool, address kol) external view returns(PoolTokens memory result) {\\n        PoolTokens memory poolInfo = poolsTokens[pool];\\n        result.tokenList = poolInfo.tokenList;\\n        \\n        uint len = poolInfo.tokenList.length;\\n        // init result\\n        result.managerAmount = new uint[](len);\\n        result.issueAmount = new uint[](len);\\n        result.redeemAmount = new uint[](len);\\n        result.perfermanceAmount = new uint[](len);\\n        // more for to save gas\\n        for(uint i; i<len; i++){ \\n            result.managerAmount[i] = result.managerAmount[i].add(_computeKolTotalReward(pool, kol, 0, i));\\n            result.issueAmount[i] = result.issueAmount[i].add(_computeKolTotalReward(pool, kol, 1, i));\\n            result.redeemAmount[i] = result.redeemAmount[i].add(_computeKolTotalReward(pool, kol, 2, i));\\n            result.perfermanceAmount[i] = result.perfermanceAmount[i].add(_computeKolTotalReward(pool, kol, 3, i));\\n        }      \\n    }\\n\\n    function getKolsReward(address pool) external view returns (address[] memory, uint[] memory) {\\n        EnumerableSet.AddressSet storage list = kolsList[pool];\\n        uint len = list.length();\\n        address[] memory tokens = poolsTokens[pool].tokenList;\\n        uint[] memory balances = new uint[](tokens.length);\\n        for (uint i = 0; i < len; i++) {\\n            (, uint[] memory singleReward) = this.getKolReward(pool, list.at(i));\\n            for(uint k; k < singleReward.length; k++){\\n                balances[k] = balances[k] + singleReward[k];\\n            }\\n        }\\n\\n        return (tokens,balances);\\n    }\\n\\n    function getUnKolReward(address pool, address kol) external returns (address[] memory,uint[] memory) {\\n        (address[] memory totalTokens, uint[] memory totalReward) = this.getKolReward(pool, kol);\\n\\n        ClaimTokens storage singleKolHasReward = kolHasClaimed[pool][kol];\\n        // update length\\n        singleKolHasReward.tokens = totalTokens;\\n        uint amountsLen = singleKolHasReward.amounts.length;\\n        uint tokensLen = totalTokens.length;\\n        if(amountsLen != tokensLen){\\n            uint delta = tokensLen - amountsLen;\\n            for(uint i; i < delta; i++){\\n                singleKolHasReward.amounts.push(0);\\n            }\\n        }\\n\\n        uint len = totalTokens.length;\\n        uint[] memory balances = new uint[](len);\\n        for(uint i; i<len; i++){\\n            balances[i] = totalReward[i] - singleKolHasReward.amounts[i];\\n        }\\n\\n        return (totalTokens, balances);\\n    }\\n\\n    function recordTokenInfo(\\n        address kol,\\n        address user,\\n        address[] calldata poolTokens,\\n        uint[] calldata tokensAmount\\n    ) external {\\n        address pool = msg.sender;\\n        uint len = poolTokens.length;\\n        require(len == tokensAmount.length, \\\"ERR_TOKEN_LENGTH_NOT_MATCH\\\");\\n        require(crpFactory.isCrp(pool), \\\"ERR_INVALID_POOL_ADDRESS\\\");\\n        UserKolInfo storage userKolBind = userKolList[pool][user];\\n        \\n        if (userKolBind.kol == address(0)) {\\n            userKolBind.kol = kol;\\n            if (!kolsList[pool].contains(kol)) kolsList[pool].addValue(kol);\\n        }\\n        address newKol = userKolBind.kol;\\n        require(newKol != address(0), \\\"ERR_INVALID_KOL_ADDRESS\\\");\\n        //total amount record\\n        poolInviteTotal[pool] = poolInviteTotal[pool].add(tokensAmount[0]);\\n        uint[] memory totalAmounts = new uint[](len);\\n        for (uint i; i < len; i++) {\\n            bool kolHasInvitations = kolTotalAmountList[pool][newKol].length == 0;\\n            kolHasInvitations\\n                ? totalAmounts[i] = tokensAmount[i]\\n                : totalAmounts[i] = tokensAmount[i].add(kolTotalAmountList[pool][newKol][i]);\\n        }\\n        kolTotalAmountList[pool][newKol] = totalAmounts;\\n        //kol user info record\\n        KolUserInfo[] storage userInfoArray = kolUserInfo[pool][newKol];\\n        uint index = userKolBind.index;\\n        if (index == 0) {\\n            KolUserInfo memory userInfo;\\n            userInfo.userAdr = user;\\n            userInfo.userAmount = tokensAmount;\\n            userInfoArray.push(userInfo);\\n            userKolBind.index = userInfoArray.length;\\n        } else {\\n            KolUserInfo storage userInfo = kolUserInfo[pool][newKol][index - 1];\\n            for (uint a; a < userInfo.userAmount.length; a++) {\\n                userInfo.userAmount[a] = userInfo.userAmount[a].add(tokensAmount[a]);\\n            }\\n        }\\n    }\\n\\n    function setPoolParams(address pool, SmartPoolManager.KolPoolParams memory _poolParams) external onlyCrpFactory {\\n        PoolStatus storage status = poolsStatus[pool];\\n        require(crpFactory.isCrp(pool), \\\"ERR_INVALID_POOL_ADDRESS\\\");\\n        require(!status.isSetParams, \\\"ERR_HAS_SETED\\\");\\n\\n        status.isSetParams = true;\\n        status.kolPoolConfig = _poolParams;\\n    }\\n\\n    // function _getRatioTotal(address pool, uint types) internal view returns(uint){\\n    //     SmartPoolManager.KolPoolParams memory params = poolsStatus[pool].kolPoolConfig;\\n    //     if(types == 0) return params.managerFee.firstLevel.ratio.add(params.managerFee.secondLevel.ratio).add(params.managerFee.thirdLevel.ratio).add(params.managerFee.fourLevel.ratio);\\n    //     else if(types == 1) return params.issueFee.firstLevel.ratio.add(params.issueFee.secondLevel.ratio).add(params.issueFee.thirdLevel.ratio).add(params.issueFee.fourLevel.ratio);\\n    //     else if(types == 2) return params.redeemFee.firstLevel.ratio.add(params.redeemFee.secondLevel.ratio).add(params.redeemFee.thirdLevel.ratio).add(params.redeemFee.fourLevel.ratio);\\n    //     else if(types == 3) return params.perfermanceFee.firstLevel.ratio.add(params.perfermanceFee.secondLevel.ratio).add(params.perfermanceFee.thirdLevel.ratio).add(params.perfermanceFee.fourLevel.ratio);\\n    // }\\n\\n    function getKolsAdr(address pool) external view returns (address[] memory) {\\n        return kolsList[pool].values();\\n    }\\n\\n    function getPoolConfig(address pool) external view returns (SmartPoolManager.KolPoolParams memory) {\\n        return poolsStatus[pool].kolPoolConfig;\\n    }\\n\\n    function setBlackList(address pool, bool bools) external onlyOwner _logs_ {\\n        poolsStatus[pool].isBlackList = bools;\\n    }\\n\\n    function setCrpFactory(address adr) external onlyOwner _logs_ {\\n        crpFactory = ICRPFactory(adr);\\n    }\\n\\n    function claimToken(\\n        address token,\\n        address user,\\n        uint amount\\n    ) external onlyOwner {\\n        IERC20(token).safeTransfer(user, amount);\\n    }\\n\\n    function claimEther() external payable onlyOwner {\\n        msg.sender.transfer(address(this).balance);\\n    }\\n\\n    function setVaultAdr(address adr) external onlyOwner _logs_ {\\n        vaultAddress = adr;\\n    }\\n\\n    function getKolHasClaimed(address pool,address kol) external view returns(ClaimTokens memory) {\\n        return kolHasClaimed[pool][kol];\\n    }\\n        \\n    function getManageHasClaimed(address pool) external view returns(ClaimTokens memory) {\\n        return manageHasClaimed[pool];\\n    }\\n\\n    function getKolUserInfo(address pool, address kol) external view  returns (KolUserInfo[] memory) {\\n        return kolUserInfo[pool][kol];\\n    }\\n\\n    function getUserKolInfo(address pool, address user) external view  returns (UserKolInfo memory) {\\n        return userKolList[pool][user];\\n    }\\n\\n    function _updatePool(\\n        address pool,\\n        uint types,\\n        address[] memory tokenIn,\\n        uint[] memory amountIn\\n    ) internal {\\n        PoolTokens storage tokens = poolsTokens[pool];\\n\\n        for(uint i; i < tokenIn.length; i++){\\n            address t = tokenIn[i];\\n            uint b = amountIn[i];\\n\\n            (bool isExit,uint index) = _arrIncludeAddr(tokens.tokenList, t);\\n\\n            // update token and init value\\n            if(!isExit){\\n                tokens.tokenList.push(t);\\n                tokens.managerAmount.push(0);\\n                tokens.issueAmount.push(0);\\n                tokens.redeemAmount.push(0);\\n                tokens.perfermanceAmount.push(0);\\n                index = tokens.tokenList.length -1;\\n            }\\n\\n            // update valut\\n            if(b != 0){\\n                if(types == 0) tokens.managerAmount[index] = tokens.managerAmount[index].add(b);\\n                else if(types == 1) tokens.issueAmount[index] = tokens.issueAmount[index].add(b);\\n                else if(types == 2) tokens.redeemAmount[index] = tokens.redeemAmount[index].add(b);\\n                else if(types == 3) tokens.perfermanceAmount[index] = tokens.perfermanceAmount[index].add(b);\\n                emit TypeAmountIn(pool, types, msg.sender, t, b);\\n            }\\n        }\\n    }\\n\\n    function _arrIncludeAddr(address[] memory tokens, address target) internal pure returns(bool isInclude, uint index){\\n        for(uint i; i<tokens.length; i++){\\n            if(tokens[i] == target){ \\n                isInclude = true;\\n                index = i;\\n                break;\\n            }\\n        }\\n    }\\n\\n    function _transferHandle(\\n        address pool,\\n        address t,\\n        uint balance\\n    ) internal {\\n        require(balance != 0, \\\"ERR_ILLEGAL_BALANCE\\\");\\n        address[] memory managerAddressList = IDesynOwnable(pool).getOwners();\\n        uint[] memory ownerPercentage = IDesynOwnable(pool).getOwnerPercentage();\\n        uint allOwnerPercentage = IDesynOwnable(pool).allOwnerPercentage();\\n\\n        for (uint k = 0; k < managerAddressList.length; k++) {\\n            address reciver = address(managerAddressList[k]).isContract()? IDSProxy(managerAddressList[k]).owner(): managerAddressList[k];\\n            uint b = balance.mul(ownerPercentage[k]).div(allOwnerPercentage);\\n            IERC20(t).safeTransfer(reciver, b);\\n            emit ManagerClaim(msg.sender, pool, reciver,t,b,block.timestamp);\\n        }\\n        emit ManagersClaim(msg.sender,pool,t,balance,block.timestamp);\\n    }\\n\\n    function _levelJudge(uint amount, SmartPoolManager.feeParams memory _feeParams) internal pure returns (uint) {\\n        if (_feeParams.firstLevel.level <= amount && amount < _feeParams.secondLevel.level) return _feeParams.firstLevel.ratio;\\n        else if (_feeParams.secondLevel.level <= amount && amount < _feeParams.thirdLevel.level) return _feeParams.secondLevel.ratio;\\n        else if (_feeParams.thirdLevel.level <= amount && amount < _feeParams.fourLevel.level) return _feeParams.thirdLevel.ratio;\\n        else if (_feeParams.fourLevel.level <= amount) return _feeParams.fourLevel.ratio;\\n        return 0;\\n    }\\n\\n    function _isClosePool(address pool) internal view returns (bool) {\\n        return ICRPPool(pool).etype() == ICRPPool.Etypes.CLOSED;\\n    }\\n\\n    function _computeKolTotalReward(\\n        address pool,\\n        address kol,\\n        uint types,\\n        uint tokenIndex\\n    ) internal view returns (uint totalFee) {\\n        uint kolTotalAmount = kolTotalAmountList[pool][kol].length > 0 ? kolTotalAmountList[pool][kol][0] : 0;\\n        SmartPoolManager.KolPoolParams memory params = poolsStatus[pool].kolPoolConfig;\\n\\n        PoolTokens memory tokens = poolsTokens[pool];\\n\\n        if(kolTotalAmount == 0 || tokens.tokenList.length == 0) return 0;\\n\\n        uint allKolTotalAmount = poolInviteTotal[pool];\\n        if (types == 0) totalFee = tokens.managerAmount[tokenIndex].mul(_levelJudge(kolTotalAmount, params.managerFee)).div(RATIO_BASE);\\n        else if (types == 1) totalFee = tokens.issueAmount[tokenIndex].mul(_levelJudge(kolTotalAmount, params.issueFee)).div(RATIO_BASE);\\n        else if (types == 2) totalFee = tokens.redeemAmount[tokenIndex].mul(_levelJudge(kolTotalAmount, params.redeemFee)).div(RATIO_BASE);\\n        else if (types == 3) totalFee = tokens.perfermanceAmount[tokenIndex].mul(_levelJudge(kolTotalAmount, params.perfermanceFee)).div(RATIO_BASE);\\n        \\n        return totalFee.mul(kolTotalAmount).div(allKolTotalAmount);\\n    }\\n\\n    modifier onlyCrpFactory() {\\n        require(address(crpFactory) == msg.sender, \\\"ERR_NOT_CRP_FACTORY\\\");\\n        _;\\n    }\\n\\n    modifier onlyVault() {\\n        require(vaultAddress == msg.sender, \\\"ERR_NOT_CONTROLLER\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x7b5718a4c6e4740fe073bc9400515f0b5ff62fa239113f20a246923d13dbc463\"},\"contracts/interfaces/IBFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\nimport \\\"../libraries/SmartPoolManager.sol\\\";\\n\\ninterface IBPool {\\n    function rebind(\\n        address token,\\n        uint balance,\\n        uint denorm\\n    ) external;\\n\\n    function rebindSmart(\\n        address tokenA,\\n        address tokenB,\\n        uint deltaWeight,\\n        uint deltaBalance,\\n        bool isSoldout,\\n        uint minAmountOut\\n    ) external;\\n\\n    function execute(\\n        address _target,\\n        uint _value,\\n        bytes calldata _data\\n    ) external returns (bytes memory _returnValue);\\n\\n    function bind(\\n        address token,\\n        uint balance,\\n        uint denorm\\n    ) external;\\n\\n    function unbind(address token) external;\\n\\n    function unbindPure(address token) external;\\n\\n    function isBound(address token) external view returns (bool);\\n\\n    function getBalance(address token) external view returns (uint);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function getSwapFee() external view returns (uint);\\n\\n    function isPublicSwap() external view returns (bool);\\n\\n    function getDenormalizedWeight(address token) external view returns (uint);\\n\\n    function getTotalDenormalizedWeight() external view returns (uint);\\n\\n    function EXIT_FEE() external view returns (uint);\\n\\n    function getCurrentTokens() external view returns (address[] memory tokens);\\n\\n    function setController(address owner) external;\\n}\\n\\ninterface IBFactory {\\n    function newLiquidityPool() external returns (IBPool);\\n\\n    function setBLabs(address b) external;\\n\\n    function collect(IBPool pool) external;\\n\\n    function isBPool(address b) external view returns (bool);\\n\\n    function getBLabs() external view returns (address);\\n\\n    function getSwapRouter() external view returns (address);\\n\\n    function getVault() external view returns (address);\\n\\n    function getUserVault() external view returns (address);\\n\\n    function getVaultAddress() external view returns (address);\\n\\n    function getOracleAddress() external view returns (address);\\n\\n    function getManagerOwner() external view returns (address);\\n\\n    function isTokenWhitelistedForVerify(uint sort, address token) external view returns (bool);\\n\\n    function isTokenWhitelistedForVerify(address token) external view returns (bool);\\n\\n    function getModuleStatus(address etf, address module) external view returns (bool);\\n\\n    function isPaused() external view returns (bool);\\n}\\n\\ninterface IVault {\\n    function depositManagerToken(address[] calldata poolTokens, uint[] calldata tokensAmount) external;\\n\\n    function depositIssueRedeemPToken(\\n        address[] calldata poolTokens,\\n        uint[] calldata tokensAmount,\\n        uint[] calldata tokensAmountP,\\n        bool isPerfermance\\n    ) external;\\n\\n    function managerClaim(address pool) external;\\n\\n    function getManagerClaimBool(address pool) external view returns (bool);\\n}\\n\\ninterface IUserVault {\\n    function recordTokenInfo(\\n        address kol,\\n        address user,\\n        address[] calldata poolTokens,\\n        uint[] calldata tokensAmount\\n    ) external;\\n}\\n\\ninterface Oracles {\\n    function getPrice(address tokenAddress) external returns (uint price);\\n\\n    function getAllPrice(address[] calldata poolTokens, uint[] calldata tokensAmount) external returns (uint);\\n}\",\"keccak256\":\"0xc2cc32bdf691ceddab7a647a98bd481adcf9ae8393d8663a916bf032ef0dbbc6\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IConfigurableRightsPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Interface declarations\\n\\n// Introduce to avoid circularity (otherwise, the CRP and SmartPoolManager include each other)\\n// Removing circularity allows flattener tools to work, which enables Etherscan verification\\ninterface IConfigurableRightsPool {\\n    function mintPoolShareFromLib(uint amount) external;\\n\\n    function pushPoolShareFromLib(address to, uint amount) external;\\n\\n    function pullPoolShareFromLib(address from, uint amount) external;\\n\\n    function burnPoolShareFromLib(uint amount) external;\\n\\n    function balanceOf(address account) external view returns (uint);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function getController() external view returns (address);\\n\\n    function vaultAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0x1326889b57f63cc031e7c9e383b0fd3b172a9b86eb623cf0faba32c0768c4ec4\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IDSProxy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\ninterface IDSProxy {\\n    function owner() external view returns(address);\\n}\",\"keccak256\":\"0xe330359819e40d60365ba92005c9b8b1eccdf18ae583352a0cff0a2a4cf7ff14\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Interface declarations\\n\\n/* solhint-disable func-order */\\n\\ninterface IERC20 {\\n    // Emitted when the allowance of a spender for an owner is set by a call to approve.\\n    // Value is the new allowance\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n\\n    // Emitted when value tokens are moved from one account (from) to another (to).\\n    // Note that value may be zero\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    // Returns the amount of tokens in existence\\n    function totalSupply() external view returns (uint);\\n\\n    // Returns the amount of tokens owned by account\\n    function balanceOf(address account) external view returns (uint);\\n\\n    // Returns the decimals of tokens\\n    function decimals() external view returns (uint8);\\n\\n    function symbol() external view returns (string memory);\\n\\n    // Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner\\n    // through transferFrom. This is zero by default\\n    // This value changes when approve or transferFrom are called\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    // Sets amount as the allowance of spender over the caller\\u2019s tokens\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits an Approval event.\\n    function approve(address spender, uint amount) external returns (bool);\\n\\n    // Moves amount tokens from the caller\\u2019s account to recipient\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits a Transfer event.\\n    function transfer(address recipient, uint amount) external returns (bool);\\n\\n    // Moves amount tokens from sender to recipient using the allowance mechanism\\n    // Amount is then deducted from the caller\\u2019s allowance\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits a Transfer event\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xfe22b6d6029b400b9cce7f9b39c546f99cd6922b2fd926e480e2b4d476ab26f8\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            codehash := extcodehash(account)\\n        }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint weiValue,\\n        string memory errorMessage\\n    ) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2f31de87a6037a6a1ab4cefb32f22352df92b082dde0c182801bf421bacc303c\",\"license\":\"agpl-3.0\"},\"contracts/libraries/DesynConstants.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n/**\\n * @author Desyn Labs\\n * @title Put all the constants in one place\\n */\\n\\nlibrary DesynConstants {\\n    // State variables (must be constant in a library)\\n\\n    // B \\\"ONE\\\" - all math is in the \\\"realm\\\" of 10 ** 18;\\n    // where numeric 1 = 10 ** 18\\n    uint public constant BONE = 10**18;\\n    uint public constant MIN_WEIGHT = BONE;\\n    uint public constant MAX_WEIGHT = BONE * 50;\\n    uint public constant MAX_TOTAL_WEIGHT = BONE * 50;\\n    uint public constant MIN_BALANCE = 0;\\n    uint public constant MAX_BALANCE = BONE * 10**12;\\n    uint public constant MIN_POOL_SUPPLY = BONE * 100;\\n    uint public constant MAX_POOL_SUPPLY = BONE * 10**9;\\n    uint public constant MIN_FEE = BONE / 10**6;\\n    uint public constant MAX_FEE = BONE / 10;\\n    //Fee Set\\n    uint public constant MANAGER_MIN_FEE = 0;\\n    uint public constant MANAGER_MAX_FEE = BONE / 10;\\n    uint public constant ISSUE_MIN_FEE = BONE / 1000;\\n    uint public constant ISSUE_MAX_FEE = BONE / 10;\\n    uint public constant REDEEM_MIN_FEE = 0;\\n    uint public constant REDEEM_MAX_FEE = BONE / 10;\\n    uint public constant PERFERMANCE_MIN_FEE = 0;\\n    uint public constant PERFERMANCE_MAX_FEE = BONE / 2;\\n    // EXIT_FEE must always be zero, or ConfigurableRightsPool._pushUnderlying will fail\\n    uint public constant EXIT_FEE = 0;\\n    uint public constant MAX_IN_RATIO = BONE / 2;\\n    uint public constant MAX_OUT_RATIO = (BONE / 3) + 1 wei;\\n    // Must match BConst.MIN_BOUND_TOKENS and BConst.MAX_BOUND_TOKENS\\n    uint public constant MIN_ASSET_LIMIT = 1;\\n    uint public constant MAX_ASSET_LIMIT = 16;\\n    uint public constant MAX_UINT = uint(-1);\\n    uint public constant MAX_COLLECT_PERIOD = 60 days;\\n}\\n\",\"keccak256\":\"0xbc396253a5541cd3cc080ca207dfdd2d2bdf963de26e005db36bd752524c1d66\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/DesynSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Imports\\n\\nimport \\\"./DesynConstants.sol\\\";\\n\\n/**\\n * @author Desyn Labs\\n * @title SafeMath - wrap Solidity operators to prevent underflow/overflow\\n * @dev badd and bsub are basically identical to OpenZeppelin SafeMath; mul/div have extra checks\\n */\\nlibrary DesynSafeMath {\\n    /**\\n     * @notice Safe addition\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev if we are adding b to a, the resulting sum must be greater than a\\n     * @return - sum of operands; throws if overflow\\n     */\\n    function badd(uint a, uint b) internal pure returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, \\\"ERR_ADD_OVERFLOW\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned subtraction\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Do a signed subtraction, and check that it produces a positive value\\n     *      (i.e., a - b is valid if b <= a)\\n     * @return - a - b; throws if underflow\\n     */\\n    function bsub(uint a, uint b) internal pure returns (uint) {\\n        (uint c, bool negativeResult) = bsubSign(a, b);\\n        require(!negativeResult, \\\"ERR_SUB_UNDERFLOW\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Safe signed subtraction\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Do a signed subtraction\\n     * @return - difference between a and b, and a flag indicating a negative result\\n     *           (i.e., a - b if a is greater than or equal to b; otherwise b - a)\\n     */\\n    function bsubSign(uint a, uint b) internal pure returns (uint, bool) {\\n        if (b <= a) {\\n            return (a - b, false);\\n        } else {\\n            return (b - a, true);\\n        }\\n    }\\n\\n    /**\\n     * @notice Safe multiplication\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Multiply safely (and efficiently), rounding down\\n     * @return - product of operands; throws if overflow or rounding error\\n     */\\n    function bmul(uint a, uint b) internal pure returns (uint) {\\n        // Gas optimization (see github.com/OpenZeppelin/openzeppelin-contracts/pull/522)\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // Standard overflow check: a/a*b=b\\n        uint c0 = a * b;\\n        require(c0 / a == b, \\\"ERR_MUL_OVERFLOW\\\");\\n\\n        // Round to 0 if x*y < BONE/2?\\n        uint c1 = c0 + (DesynConstants.BONE / 2);\\n        require(c1 >= c0, \\\"ERR_MUL_OVERFLOW\\\");\\n        uint c2 = c1 / DesynConstants.BONE;\\n        return c2;\\n    }\\n\\n    /**\\n     * @notice Safe division\\n     * @param dividend - first operand\\n     * @param divisor - second operand\\n     * @dev Divide safely (and efficiently), rounding down\\n     * @return - quotient; throws if overflow or rounding error\\n     */\\n    function bdiv(uint dividend, uint divisor) internal pure returns (uint) {\\n        require(divisor != 0, \\\"ERR_DIV_ZERO\\\");\\n\\n        // Gas optimization\\n        if (dividend == 0) {\\n            return 0;\\n        }\\n\\n        uint c0 = dividend * DesynConstants.BONE;\\n        require(c0 / dividend == DesynConstants.BONE, \\\"ERR_DIV_INTERNAL\\\"); // bmul overflow\\n\\n        uint c1 = c0 + (divisor / 2);\\n        require(c1 >= c0, \\\"ERR_DIV_INTERNAL\\\"); //  badd require\\n\\n        uint c2 = c1 / divisor;\\n        return c2;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer modulo\\n     * @dev Returns the remainder of dividing two unsigned integers.\\n     *      Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * @param dividend - first operand\\n     * @param divisor - second operand -- cannot be zero\\n     * @return - quotient; throws if overflow or rounding error\\n     */\\n    function bmod(uint dividend, uint divisor) internal pure returns (uint) {\\n        require(divisor != 0, \\\"ERR_MODULO_BY_ZERO\\\");\\n\\n        return dividend % divisor;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer max\\n     * @dev Returns the greater of the two input values\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the maximum of a and b\\n     */\\n    function bmax(uint a, uint b) internal pure returns (uint) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer min\\n     * @dev returns b, if b < a; otherwise returns a\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the lesser of the two input values\\n     */\\n    function bmin(uint a, uint b) internal pure returns (uint) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer average\\n     * @dev Guard against (a+b) overflow by dividing each operand separately\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the average of the two values\\n     */\\n    function baverage(uint a, uint b) internal pure returns (uint) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\\n    }\\n\\n    /**\\n     * @notice Babylonian square root implementation\\n     * @dev (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n     * @param y - operand\\n     * @return z - the square root result\\n     */\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9baf30b98a5f3a8c13ac9c4d5d4b176eabfd936aba8f5172c95b7c568fba68f3\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/EnumerableSet.sol\":{\"content\":\"pragma solidity 0.6.12;\\n\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint toDeleteIndex = valueIndex - 1;\\n            uint lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function addValue(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint index) internal view returns (address) {\\n        return address(uint160(uint(_at(set._inner, index))));\\n    }\\n    \\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\",\"keccak256\":\"0x9e2694c6682ee2dc9921f8cd6b1c7f2e6ce3765654fade5cfc39f4d840afa2c9\"},\"contracts/libraries/SafeApprove.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Imports\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n// Libraries\\n\\n/**\\n * @author PieDAO (ported to Desyn Labs)\\n * @title SafeApprove - set approval for tokens that require 0 prior approval\\n * @dev Perhaps to address the known ERC20 race condition issue\\n *      See https://github.com/crytic/not-so-smart-contracts/tree/master/race_condition\\n *      Some tokens - notably KNC - only allow approvals to be increased from 0\\n */\\nlibrary SafeApprove {\\n    /**\\n     * @notice handle approvals of tokens that require approving from a base of 0\\n     * @param token - the token we're approving\\n     * @param spender - entity the owner (sender) is approving to spend his tokens\\n     * @param amount - number of tokens being approved\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint amount\\n    ) internal returns (bool) {\\n        uint currentAllowance = token.allowance(address(this), spender);\\n\\n        // Do nothing if allowance is already set to this value\\n        if (currentAllowance == amount) {\\n            return true;\\n        }\\n\\n        // If approval is not zero reset it to zero first\\n        if (currentAllowance != 0) {\\n            token.approve(spender, 0);\\n        }\\n\\n        // do the actual approval\\n        return token.approve(spender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xa51ebf770f2676085b89b1636688cc086289cfe27f614dfd0c15142535c26752\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\nimport {SafeMath} from \\\"./SafeMath.sol\\\";\\nimport {Address} from \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint value\\n    ) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint value\\n    ) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint value\\n    ) internal {\\n        require((value == 0) || (token.allowance(address(this), spender) == 0), \\\"SafeERC20: approve from non-zero to non-zero allowance\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdb66e9e24513d153d62e792a46c723eeff7ad7c93215a56aa3a27f1143d95ae9\",\"license\":\"MIT\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint a, uint b) internal pure returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint a, uint b) internal pure returns (uint) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint a,\\n        uint b,\\n        string memory errorMessage\\n    ) internal pure returns (uint) {\\n        require(b <= a, errorMessage);\\n        uint c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint a, uint b) internal pure returns (uint) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint a, uint b) internal pure returns (uint) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint a,\\n        uint b,\\n        string memory errorMessage\\n    ) internal pure returns (uint) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint a, uint b) internal pure returns (uint) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint a,\\n        uint b,\\n        string memory errorMessage\\n    ) internal pure returns (uint) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x7ce3fd7d17047f684821e1a20b4f5989630f6755a377b12c087dfde359f710d6\",\"license\":\"agpl-3.0\"},\"contracts/libraries/SmartPoolManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Needed to pass in structs\\npragma experimental ABIEncoderV2;\\n\\n// Imports\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IConfigurableRightsPool.sol\\\";\\nimport \\\"../interfaces/IBFactory.sol\\\"; // unused\\nimport \\\"./DesynSafeMath.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./SafeApprove.sol\\\";\\n\\n/**\\n * @author Desyn Labs\\n * @title Factor out the weight updates\\n */\\nlibrary SmartPoolManager {\\n    using SafeApprove for IERC20;\\n    using DesynSafeMath for uint;\\n    using SafeMath for uint;\\n\\n    //kol pool params\\n    struct levelParams {\\n        uint level;\\n        uint ratio;\\n    }\\n\\n    struct feeParams {\\n        levelParams firstLevel;\\n        levelParams secondLevel;\\n        levelParams thirdLevel;\\n        levelParams fourLevel;\\n    }\\n    \\n    struct KolPoolParams {\\n        feeParams managerFee;\\n        feeParams issueFee;\\n        feeParams redeemFee;\\n        feeParams perfermanceFee;\\n    }\\n\\n    // Type declarations\\n    enum Etypes {\\n        OPENED,\\n        CLOSED\\n    }\\n\\n    enum Period {\\n        HALF,\\n        ONE,\\n        TWO\\n    }\\n\\n    // updateWeight and pokeWeights are unavoidably long\\n    /* solhint-disable function-max-lines */\\n    struct Status {\\n        uint collectPeriod;\\n        uint collectEndTime;\\n        uint closurePeriod;\\n        uint closureEndTime;\\n        uint upperCap;\\n        uint floorCap;\\n        uint managerFee;\\n        uint redeemFee;\\n        uint issueFee;\\n        uint perfermanceFee;\\n        uint startClaimFeeTime;\\n    }\\n\\n    struct PoolParams {\\n        // Desyn Pool Token (representing shares of the pool)\\n        string poolTokenSymbol;\\n        string poolTokenName;\\n        // Tokens inside the Pool\\n        address[] constituentTokens;\\n        uint[] tokenBalances;\\n        uint[] tokenWeights;\\n        uint swapFee;\\n        uint managerFee;\\n        uint redeemFee;\\n        uint issueFee;\\n        uint perfermanceFee;\\n        Etypes etype;\\n    }\\n\\n    struct PoolTokenRange {\\n        uint bspFloor;\\n        uint bspCap;\\n    }\\n\\n    struct Fund {\\n        uint etfAmount;\\n        uint fundAmount;\\n    }\\n\\n    function initRequire(\\n        uint swapFee,\\n        uint managerFee,\\n        uint issueFee,\\n        uint redeemFee,\\n        uint perfermanceFee,\\n        uint tokenBalancesLength,\\n        uint tokenWeightsLength,\\n        uint constituentTokensLength,\\n        bool initBool\\n    ) external pure {\\n        // We don't have a pool yet; check now or it will fail later (in order of likelihood to fail)\\n        // (and be unrecoverable if they don't have permission set to change it)\\n        // Most likely to fail, so check first\\n        require(!initBool, \\\"Init fail\\\");\\n        require(swapFee >= DesynConstants.MIN_FEE, \\\"ERR_INVALID_SWAP_FEE\\\");\\n        require(swapFee <= DesynConstants.MAX_FEE, \\\"ERR_INVALID_SWAP_FEE\\\");\\n        require(managerFee >= DesynConstants.MANAGER_MIN_FEE, \\\"ERR_INVALID_MANAGER_FEE\\\");\\n        require(managerFee <= DesynConstants.MANAGER_MAX_FEE, \\\"ERR_INVALID_MANAGER_FEE\\\");\\n        require(issueFee >= DesynConstants.ISSUE_MIN_FEE, \\\"ERR_INVALID_ISSUE_MIN_FEE\\\");\\n        require(issueFee <= DesynConstants.ISSUE_MAX_FEE, \\\"ERR_INVALID_ISSUE_MAX_FEE\\\");\\n        require(redeemFee >= DesynConstants.REDEEM_MIN_FEE, \\\"ERR_INVALID_REDEEM_MIN_FEE\\\");\\n        require(redeemFee <= DesynConstants.REDEEM_MAX_FEE, \\\"ERR_INVALID_REDEEM_MAX_FEE\\\");\\n        require(perfermanceFee >= DesynConstants.PERFERMANCE_MIN_FEE, \\\"ERR_INVALID_PERFERMANCE_MIN_FEE\\\");\\n        require(perfermanceFee <= DesynConstants.PERFERMANCE_MAX_FEE, \\\"ERR_INVALID_PERFERMANCE_MAX_FEE\\\");\\n\\n        // Arrays must be parallel\\n        require(tokenBalancesLength == constituentTokensLength, \\\"ERR_START_BALANCES_MISMATCH\\\");\\n        require(tokenWeightsLength == constituentTokensLength, \\\"ERR_START_WEIGHTS_MISMATCH\\\");\\n        // Cannot have too many or too few - technically redundant, since BPool.bind() would fail later\\n        // But if we don't check now, we could have a useless contract with no way to create a pool\\n\\n        require(constituentTokensLength >= DesynConstants.MIN_ASSET_LIMIT, \\\"ERR_TOO_FEW_TOKENS\\\");\\n        require(constituentTokensLength <= DesynConstants.MAX_ASSET_LIMIT, \\\"ERR_TOO_MANY_TOKENS\\\");\\n        // There are further possible checks (e.g., if they use the same token twice), but\\n        // we can let bind() catch things like that (i.e., not things that might reasonably work)\\n    }\\n\\n    /**\\n     * @notice Update the weight of an existing token\\n     * @dev Refactored to library to make CRPFactory deployable\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param tokenA - token to sell\\n     * @param tokenB - token to buy\\n     */\\n    function rebalance(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address tokenA,\\n        address tokenB,\\n        uint deltaWeight,\\n        uint minAmountOut\\n    ) external {\\n        uint currentWeightA = bPool.getDenormalizedWeight(tokenA);\\n        uint currentBalanceA = bPool.getBalance(tokenA);\\n        // uint currentWeightB = bPool.getDenormalizedWeight(tokenB);\\n\\n        require(deltaWeight <= currentWeightA, \\\"ERR_DELTA_WEIGHT_TOO_BIG\\\");\\n\\n        // deltaBalance = currentBalance * (deltaWeight / currentWeight)\\n        uint deltaBalanceA = DesynSafeMath.bmul(currentBalanceA, DesynSafeMath.bdiv(deltaWeight, currentWeightA));\\n\\n        // uint currentBalanceB = bPool.getBalance(tokenB);\\n\\n        // uint deltaWeight = DesynSafeMath.bsub(newWeight, currentWeightA);\\n\\n        // uint newWeightB = DesynSafeMath.bsub(currentWeightB, deltaWeight);\\n        // require(newWeightB >= 0, \\\"ERR_INCORRECT_WEIGHT_B\\\");\\n        bool soldout;\\n        if (deltaWeight == currentWeightA) {\\n            // reduct token A\\n            bPool.unbindPure(tokenA);\\n            soldout = true;\\n        }\\n\\n        // Now with the tokens this contract can bind them to the pool it controls\\n        bPool.rebindSmart(tokenA, tokenB, deltaWeight, deltaBalanceA, soldout, minAmountOut);\\n    }\\n\\n    /**\\n     * @notice Non ERC20-conforming tokens are problematic; don't allow them in pools\\n     * @dev Will revert if invalid\\n     * @param token - The prospective token to verify\\n     */\\n    function verifyTokenCompliance(address token) external {\\n        verifyTokenComplianceInternal(token);\\n    }\\n\\n    /**\\n     * @notice Non ERC20-conforming tokens are problematic; don't allow them in pools\\n     * @dev Will revert if invalid - overloaded to save space in the main contract\\n     * @param tokens - The prospective tokens to verify\\n     */\\n    function verifyTokenCompliance(address[] calldata tokens) external {\\n        for (uint i = 0; i < tokens.length; i++) {\\n            verifyTokenComplianceInternal(tokens[i]);\\n        }\\n    }\\n\\n    function createPoolInternalHandle(IBPool bPool, uint initialSupply) external view {\\n        require(initialSupply >= DesynConstants.MIN_POOL_SUPPLY, \\\"ERR_INIT_SUPPLY_MIN\\\");\\n        require(initialSupply <= DesynConstants.MAX_POOL_SUPPLY, \\\"ERR_INIT_SUPPLY_MAX\\\");\\n        require(bPool.EXIT_FEE() == 0, \\\"ERR_NONZERO_EXIT_FEE\\\");\\n        // EXIT_FEE must always be zero, or ConfigurableRightsPool._pushUnderlying will fail\\n        require(DesynConstants.EXIT_FEE == 0, \\\"ERR_NONZERO_EXIT_FEE\\\");\\n    }\\n\\n    function createPoolHandle(\\n        uint collectPeriod,\\n        uint upperCap,\\n        uint initialSupply\\n    ) external pure {\\n        require(collectPeriod <= DesynConstants.MAX_COLLECT_PERIOD, \\\"ERR_EXCEEDS_FUND_RAISING_PERIOD\\\");\\n        require(upperCap >= initialSupply, \\\"ERR_CAP_BIGGER_THAN_INITSUPPLY\\\");\\n    }\\n\\n    function exitPoolHandle(\\n        uint _endEtfAmount,\\n        uint _endFundAmount,\\n        uint _beginEtfAmount,\\n        uint _beginFundAmount,\\n        uint poolAmountIn,\\n        uint totalEnd\\n    )\\n        external\\n        pure\\n        returns (\\n            uint endEtfAmount,\\n            uint endFundAmount,\\n            uint profitRate\\n        )\\n    {\\n        endEtfAmount = DesynSafeMath.badd(_endEtfAmount, poolAmountIn);\\n        endFundAmount = DesynSafeMath.badd(_endFundAmount, totalEnd);\\n        uint amount1 = DesynSafeMath.bdiv(endFundAmount, endEtfAmount);\\n        uint amount2 = DesynSafeMath.bdiv(_beginFundAmount, _beginEtfAmount);\\n        if (amount1 > amount2) {\\n            profitRate = DesynSafeMath.bdiv(\\n                DesynSafeMath.bmul(DesynSafeMath.bsub(DesynSafeMath.bdiv(endFundAmount, endEtfAmount), DesynSafeMath.bdiv(_beginFundAmount, _beginEtfAmount)), poolAmountIn),\\n                totalEnd\\n            );\\n        }\\n    }\\n\\n    function exitPoolHandleA(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address poolToken,\\n        uint _tokenAmountOut,\\n        uint redeemFee,\\n        uint profitRate,\\n        uint perfermanceFee\\n    )\\n        external\\n        returns (\\n            uint redeemAndPerformanceFeeReceived,\\n            uint finalAmountOut,\\n            uint redeemFeeReceived\\n        )\\n    {\\n        // redeem fee\\n        redeemFeeReceived = DesynSafeMath.bmul(_tokenAmountOut, redeemFee);\\n\\n        // performance fee\\n        uint performanceFeeReceived = DesynSafeMath.bmul(DesynSafeMath.bmul(_tokenAmountOut, profitRate), perfermanceFee);\\n        \\n        // redeem fee and performance fee\\n        redeemAndPerformanceFeeReceived = DesynSafeMath.badd(performanceFeeReceived, redeemFeeReceived);\\n\\n        // final amount the user got\\n        finalAmountOut = DesynSafeMath.bsub(_tokenAmountOut, redeemAndPerformanceFeeReceived);\\n\\n        _pushUnderlying(bPool, poolToken, msg.sender, finalAmountOut);\\n\\n        if (redeemFee != 0 || (profitRate > 0 && perfermanceFee != 0)) {\\n            _pushUnderlying(bPool, poolToken, address(this), redeemAndPerformanceFeeReceived);\\n            IERC20(poolToken).safeApprove(self.vaultAddress(), redeemAndPerformanceFeeReceived);\\n        }\\n    }\\n\\n    function exitPoolHandleB(\\n        IConfigurableRightsPool self,\\n        bool bools,\\n        bool isCompletedCollect,\\n        uint closureEndTime,\\n        uint collectEndTime,\\n        uint _etfAmount,\\n        uint _fundAmount,\\n        uint poolAmountIn\\n    ) external view returns (uint etfAmount, uint fundAmount, uint actualPoolAmountIn) {\\n        actualPoolAmountIn = poolAmountIn;\\n        if (bools) {\\n            bool isCloseEtfCollectEndWithFailure = isCompletedCollect == false && block.timestamp >= collectEndTime;\\n            bool isCloseEtfClosureEnd = block.timestamp >= closureEndTime;\\n            require(isCloseEtfCollectEndWithFailure || isCloseEtfClosureEnd, \\\"ERR_CLOSURE_TIME_NOT_ARRIVED!\\\");\\n\\n            actualPoolAmountIn = self.balanceOf(msg.sender);\\n        }\\n        fundAmount = _fundAmount;\\n        etfAmount = _etfAmount;\\n    }\\n\\n    function joinPoolHandle(\\n        bool canWhitelistLPs,\\n        bool isList,\\n        bool bools,\\n        uint collectEndTime\\n    ) external view {\\n        require(!canWhitelistLPs || isList, \\\"ERR_NOT_ON_WHITELIST\\\");\\n\\n        if (bools) {\\n            require(block.timestamp <= collectEndTime, \\\"ERR_COLLECT_PERIOD_FINISHED!\\\");\\n        }\\n    }\\n\\n    function rebalanceHandle(\\n        IBPool bPool,\\n        bool isCompletedCollect,\\n        bool bools,\\n        uint collectEndTime,\\n        uint closureEndTime,\\n        bool canChangeWeights,\\n        address tokenA,\\n        address tokenB\\n    ) external {\\n        require(bPool.isBound(tokenA), \\\"ERR_TOKEN_NOT_BOUND\\\");\\n        if (bools) {\\n            require(isCompletedCollect, \\\"ERROR_COLLECTION_FAILED\\\");\\n            require(block.timestamp > collectEndTime && block.timestamp < closureEndTime, \\\"ERR_NOT_REBALANCE_PERIOD\\\");\\n        }\\n\\n        if (!bPool.isBound(tokenB)) {\\n            bool returnValue = IERC20(tokenB).safeApprove(address(bPool), DesynConstants.MAX_UINT);\\n            require(returnValue, \\\"ERR_ERC20_FALSE\\\");\\n        }\\n\\n        require(canChangeWeights, \\\"ERR_NOT_CONFIGURABLE_WEIGHTS\\\");\\n        require(tokenA != tokenB, \\\"ERR_TOKENS_SAME\\\");\\n    }\\n\\n    /**\\n     * @notice Join a pool\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param poolAmountOut - number of pool tokens to receive\\n     * @param maxAmountsIn - Max amount of asset tokens to spend\\n     * @return actualAmountsIn - calculated values of the tokens to pull in\\n     */\\n    function joinPool(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        uint poolAmountOut,\\n        uint[] calldata maxAmountsIn,\\n        uint issueFee\\n    ) external view returns (uint[] memory actualAmountsIn) {\\n        address[] memory tokens = bPool.getCurrentTokens();\\n\\n        require(maxAmountsIn.length == tokens.length, \\\"ERR_AMOUNTS_MISMATCH\\\");\\n\\n        uint poolTotal = self.totalSupply();\\n        // Subtract  1 to ensure any rounding errors favor the pool\\n        uint ratio = DesynSafeMath.bdiv(poolAmountOut, DesynSafeMath.bsub(poolTotal, 1));\\n\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        // We know the length of the array; initialize it, and fill it below\\n        // Cannot do \\\"push\\\" in memory\\n        actualAmountsIn = new uint[](tokens.length);\\n\\n        // This loop contains external calls\\n        // External calls are to math libraries or the underlying pool, so low risk\\n        uint issueFeeRate = issueFee.bmul(1000);\\n        for (uint i = 0; i < tokens.length; i++) {\\n            address t = tokens[i];\\n            uint bal = bPool.getBalance(t);\\n            // Add 1 to ensure any rounding errors favor the pool\\n            uint base = bal.badd(1).bmul(poolAmountOut * uint(1000));\\n            uint tokenAmountIn = base.bdiv(poolTotal.bsub(1) * (uint(1000).bsub(issueFeeRate)));\\n\\n            require(tokenAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountIn <= maxAmountsIn[i], \\\"ERR_LIMIT_IN\\\");\\n\\n            actualAmountsIn[i] = tokenAmountIn;\\n        }\\n    }\\n\\n    /**\\n     * @notice Exit a pool - redeem pool tokens for underlying assets\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param poolAmountIn - amount of pool tokens to redeem\\n     * @param minAmountsOut - minimum amount of asset tokens to receive\\n     * @return actualAmountsOut - calculated amounts of each token to pull\\n     */\\n    function exitPool(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        uint poolAmountIn,\\n        uint[] calldata minAmountsOut\\n    ) external view returns (uint[] memory actualAmountsOut) {\\n        address[] memory tokens = bPool.getCurrentTokens();\\n\\n        require(minAmountsOut.length == tokens.length, \\\"ERR_AMOUNTS_MISMATCH\\\");\\n\\n        uint poolTotal = self.totalSupply();\\n\\n        uint ratio = DesynSafeMath.bdiv(poolAmountIn, DesynSafeMath.badd(poolTotal, 1));\\n\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        actualAmountsOut = new uint[](tokens.length);\\n\\n        // This loop contains external calls\\n        // External calls are to math libraries or the underlying pool, so low risk\\n        for (uint i = 0; i < tokens.length; i++) {\\n            address t = tokens[i];\\n            uint bal = bPool.getBalance(t);\\n            // Subtract 1 to ensure any rounding errors favor the pool\\n            uint tokenAmountOut = DesynSafeMath.bmul(ratio, DesynSafeMath.bsub(bal, 1));\\n\\n            require(tokenAmountOut != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountOut >= minAmountsOut[i], \\\"ERR_LIMIT_OUT\\\");\\n\\n            actualAmountsOut[i] = tokenAmountOut;\\n        }\\n    }\\n\\n    // Internal functions\\n    // Check for zero transfer, and make sure it returns true to returnValue\\n    function verifyTokenComplianceInternal(address token) internal {\\n        bool returnValue = IERC20(token).transfer(msg.sender, 0);\\n        require(returnValue, \\\"ERR_NONCONFORMING_TOKEN\\\");\\n    }\\n\\n    function handleTransferInTokens(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address poolToken,\\n        uint actualAmountIn,\\n        uint _actualIssueFee\\n    ) external returns (uint issueFeeReceived) {\\n        issueFeeReceived = DesynSafeMath.bmul(actualAmountIn, _actualIssueFee);\\n        uint amount = DesynSafeMath.bsub(actualAmountIn, issueFeeReceived);\\n\\n        _pullUnderlying(bPool, poolToken, msg.sender, amount);\\n\\n        if (_actualIssueFee != 0) {\\n            bool xfer = IERC20(poolToken).transferFrom(msg.sender, address(this), issueFeeReceived);\\n            require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n\\n            IERC20(poolToken).safeApprove(self.vaultAddress(), issueFeeReceived);\\n        }\\n    }\\n\\n    function handleClaim(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address[] calldata poolTokens,\\n        uint managerFee,\\n        uint timeElapsed,\\n        uint claimPeriod\\n    ) external returns (uint[] memory) {\\n        uint[] memory tokensAmount = new uint[](poolTokens.length);\\n        \\n        for (uint i = 0; i < poolTokens.length; i++) {\\n            address t = poolTokens[i];\\n            uint tokenBalance = bPool.getBalance(t);\\n            uint tokenAmountOut = tokenBalance.bmul(managerFee).mul(timeElapsed).div(claimPeriod).div(12);    \\n            _pushUnderlying(bPool, t, address(this), tokenAmountOut);\\n            IERC20(t).safeApprove(self.vaultAddress(), tokenAmountOut);\\n            tokensAmount[i] = tokenAmountOut;\\n        }\\n        \\n        return tokensAmount;\\n    }\\n\\n    function handleCollectionCompleted(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address[] calldata poolTokens,\\n        uint issueFee\\n    ) external {\\n        if (issueFee != 0) {\\n            uint[] memory tokensAmount = new uint[](poolTokens.length);\\n\\n            for (uint i = 0; i < poolTokens.length; i++) {\\n                address t = poolTokens[i];\\n                uint currentAmount = bPool.getBalance(t);\\n                uint currentAmountFee = DesynSafeMath.bmul(currentAmount, issueFee);\\n\\n                _pushUnderlying(bPool, t, address(this), currentAmountFee);\\n                tokensAmount[i] = currentAmountFee;\\n                IERC20(t).safeApprove(self.vaultAddress(), currentAmountFee);\\n            }\\n\\n            IVault(self.vaultAddress()).depositIssueRedeemPToken(poolTokens, tokensAmount, tokensAmount, false);\\n        }\\n    }\\n\\n    function WhitelistHandle(\\n        bool bool1,\\n        bool bool2,\\n        address adr\\n    ) external pure {\\n        require(bool1, \\\"ERR_CANNOT_WHITELIST_LPS\\\");\\n        require(bool2, \\\"ERR_LP_NOT_WHITELISTED\\\");\\n        require(adr != address(0), \\\"ERR_INVALID_ADDRESS\\\");\\n    }\\n\\n    function _pullUnderlying(\\n        IBPool bPool,\\n        address erc20,\\n        address from,\\n        uint amount\\n    ) internal {\\n        uint tokenBalance = bPool.getBalance(erc20);\\n        uint tokenWeight = bPool.getDenormalizedWeight(erc20);\\n\\n        bool xfer = IERC20(erc20).transferFrom(from, address(this), amount);\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n        bPool.rebind(erc20, DesynSafeMath.badd(tokenBalance, amount), tokenWeight);\\n    }\\n\\n    function _pushUnderlying(\\n        IBPool bPool,\\n        address erc20,\\n        address to,\\n        uint amount\\n    ) internal {\\n        uint tokenBalance = bPool.getBalance(erc20);\\n        uint tokenWeight = bPool.getDenormalizedWeight(erc20);\\n        bPool.rebind(erc20, DesynSafeMath.bsub(tokenBalance, amount), tokenWeight);\\n        bool xfer = IERC20(erc20).transfer(to, amount);\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x62bd628970414fbf121773bb89be6651a477ea2e80f51e040cefd3a678e2c42c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/openzeppelin/Ownable.sol\":{\"content\":\"pragma solidity >=0.6.0 <0.8.0;\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\",\"keccak256\":\"0x8e1e573ff7c1a90087b58f618ae87f33f04616ec7f959f73db4a3b73ff1ee939\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060006200001e6200006e565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35062000072565b3390565b615c6e80620000826000396000f3fe60806040526004361061016c5760003560e01c8063125bfb66146101785780631437ac131461019a578063245cd1db146101d157806344e6a1de146101f15780634660c5a51461021e57806355291dbd1461023e5780635740845d14610246578063598797ad1461027357806368092bd9146102935780636fd4ba9c146102b3578063715018a6146102d35780637234100a146102e85780638da5cb5b146103085780639155dae71461032a5780639b1061b21461034a5780639f1da16014610377578063a536ebf3146103a4578063aa93ae49146103c4578063ad8d1281146103e4578063bb408f2d14610411578063bf91b4c91461043f578063c0663cc91461045f578063c1e576221461047f578063c90361dd1461049f578063c969229c146104cc578063d6b485a5146104ec578063d7256c701461050c578063ebee7bcc1461052c578063edb12adf1461054c578063f29486a11461056c578063f2fde38b1461059957610173565b3661017357005b600080fd5b34801561018457600080fd5b5061019861019336600461513d565b6105b9565b005b3480156101a657600080fd5b506101ba6101b536600461503c565b61061a565b6040516101c89291906155e4565b60405180910390f35b3480156101dd57600080fd5b506101ba6101ec366004615074565b6107f9565b3480156101fd57600080fd5b5061021161020c366004615074565b610e4e565b6040516101c89190615b56565b34801561022a57600080fd5b506101986102393660046151aa565b610ea1565b6101986110ee565b34801561025257600080fd5b50610266610261366004615074565b61115c565b6040516101c89190615ac4565b34801561027f57600080fd5b5061026661028e36600461503c565b61158d565b34801561029f57600080fd5b506101986102ae36600461517d565b611771565b3480156102bf57600080fd5b506101ba6102ce36600461503c565b61181b565b3480156102df57600080fd5b506101986119c4565b3480156102f457600080fd5b506101ba61030336600461503c565b611a4d565b34801561031457600080fd5b5061031d611c00565b6040516101c89190615569565b34801561033657600080fd5b5061019861034536600461523b565b611c0f565b34801561035657600080fd5b5061036a610365366004615074565b611cf2565b6040516101c89190615612565b34801561038357600080fd5b50610397610392366004615074565b611dd7565b6040516101c89190615a35565b3480156103b057600080fd5b506101ba6103bf36600461503c565b611ec6565b3480156103d057600080fd5b506102666103df36600461503c565b612190565b3480156103f057600080fd5b506104046103ff36600461503c565b61237c565b6040516101c89190615b76565b34801561041d57600080fd5b5061043161042c366004615074565b61238e565b6040516101c8929190615597565b34801561044b57600080fd5b5061039761045a36600461503c565b6123be565b34801561046b57600080fd5b506101ba61047a366004615074565b61249e565b34801561048b57600080fd5b5061019861049a36600461503c565b612657565b3480156104ab57600080fd5b506104bf6104ba36600461503c565b6126f2565b6040516101c891906155d1565b3480156104d857600080fd5b506101986104e736600461503c565b612716565b3480156104f857600080fd5b5061019861050736600461503c565b612b03565b34801561051857600080fd5b506101986105273660046150ac565b612b9e565b34801561053857600080fd5b5061040461054736600461513d565b61304f565b34801561055857600080fd5b5061019861056736600461503c565b61308a565b34801561057857600080fd5b5061058c61058736600461503c565b613405565b6040516101c89190615a6e565b3480156105a557600080fd5b506101986105b436600461503c565b61361a565b6105c16136da565b6001600160a01b03166105d2611c00565b6001600160a01b0316146106015760405162461bcd60e51b81526004016105f8906158fc565b60405180910390fd5b6106156001600160a01b03841683836136de565b505050565b6001600160a01b038116600090815260076020526040812060609182919061064182613734565b6001600160a01b038616600090815260046020908152604091829020805483518184028101840190945280845293945060609390918301828280156106af57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610691575b50505050509050606081516001600160401b03811180156106cf57600080fd5b506040519080825280602002602001820160405280156106f9578160200160208202803683370190505b50905060005b838110156107ec5760603063245cd1db8a61071a898661373f565b6040518363ffffffff1660e01b815260040161073792919061557d565b60006040518083038186803b15801561074f57600080fd5b505afa158015610763573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261078b91908101906152b2565b91505060005b81518110156107e2578181815181106107a657fe5b60200260200101518482815181106107ba57fe5b6020026020010151018482815181106107cf57fe5b6020908102919091010152600101610791565b50506001016106ff565b5090945092505050915091565b6001600160a01b038083166000908152600860209081526040808320938516835292905290812054606091829161083157600061086f565b6001600160a01b0380861660009081526008602090815260408083209388168352929052908120805490919061086357fe5b90600052602060002001545b6001600160a01b038616600090815260066020526040902054909150610893614c4f565b506001600160a01b0386166000908152600560208181526040928390208351610140810185526001820154610100820190815260028301546101208301526080808301918252865180880188526003850154815260048501548187015260a0808501919091528751808901895296850154875260068501548787015260c080850197909752875180890189526007860154815260088601548188015260e0850152918352865180870188526009850154818301908152600a86015482850152815287518089018952600b8601548152600c860154818801528187015287518089018952600d8601548152600e860154818801528189015287518089018952600f86015481526010860154818801526060828101919091528487019190915287518088018952601186015481840190815260128701548286015281528851808a018a5260138701548152601487015481890152818801528851808a018a5260158701548152601687015481890152818a01528851808a018a52601787015481526018870154818901528183015284890152875196870188526019850154918701918252601a85015492870192909252855285518087018752601b8401548152601c840154818601528585015285518087018752601d8401548152601e84015481860152858701528551808701909652601f830154865291830154928501929092528281019390935291820152610aa6614c8e565b6001600160a01b0388166000908152600460209081526040918290208251815460c09381028201840190945260a081018481529093919284928491840182828015610b1a57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610afc575b5050505050815260200160018201805480602002602001604051908101604052809291908181526020018280548015610b7257602002820191906000526020600020905b815481526020019060010190808311610b5e575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015610bca57602002820191906000526020600020905b815481526020019060010190808311610bb6575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015610c2257602002820191906000526020600020905b815481526020019060010190808311610c0e575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015610c7a57602002820191906000526020600020905b815481526020019060010190808311610c66575b50505050508152505090508060000151516001600160401b0381118015610ca057600080fd5b50604051908082528060200260200182016040528015610cca578160200160208202803683370190505b50815196509450610cd9614cbd565b6040518061012001604052808a6001600160a01b03168152602001610d02878660000151613752565b8152602001610d15878660200151613752565b8152602001610d28878660400151613752565b8152602001610d3b878660600151613752565b81526020018360200151815260200183604001518152602001836060015181526020018360800151815250905060005b8751811015610e4157610e2285610db388610e1c610db96064610db389608001518a61010001518a81518110610d9d57fe5b60200260200101516137f990919063ffffffff16565b90613833565b610e16610dd96064610db38b606001518c60e001518c81518110610d9d57fe5b610e16610df96064610db38d604001518e60c001518e81518110610d9d57fe5b610e166064610db38e602001518f60a001518f81518110610d9d57fe5b90613872565b906137f9565b878281518110610e2e57fe5b6020908102919091010152600101610d6b565b5050505050509250929050565b610e56614d12565b506001600160a01b0380831660009081526009602090815260408083208585168452825291829020825180840190935280549093168252600190920154918101919091525b92915050565b6001546001600160a01b03163314610ecb5760405162461bcd60e51b81526004016105f89061571a565b6001600160a01b03808316600090815260056020526040908190206001549151636e0cf42160e11b81529092919091169063dc19e84290610f10908690600401615569565b60206040518083038186803b158015610f2857600080fd5b505afa158015610f3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f609190615344565b610f7c5760405162461bcd60e51b81526004016105f890615889565b805462010000900460ff1615610fa45760405162461bcd60e51b81526004016105f890615931565b805462ff0000191662010000178155815180518051600184015560209081015160028401558082015180516003850155810151600484015560408083015180516005860155820151600685015560609283015180516007860155820151600885015581850151805180516009870155830151600a860155808301518051600b870155830151600c860155808201518051600d870155830151600e8601558301518051600f8601558201516010850155808501518051805160118701558301516012860155808301518051601387015583015160148601558082015180516015870155830151601686015583015180516017860155820151601885015593820151805180516019860155820151601a850155808201518051601b860155820151601c850155938401518051601d850155810151601e8401559201518051601f83015582015191015550565b6110f66136da565b6001600160a01b0316611107611c00565b6001600160a01b03161461112d5760405162461bcd60e51b81526004016105f8906158fc565b60405133904780156108fc02916000818181858888f19350505050158015611159573d6000803e3d6000fd5b50565b611164614c8e565b61116c614c8e565b6001600160a01b0384166000908152600460209081526040918290208251815460c09381028201840190945260a0810184815290939192849284918401828280156111e057602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116111c2575b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561123857602002820191906000526020600020905b815481526020019060010190808311611224575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561129057602002820191906000526020600020905b81548152602001906001019080831161127c575b50505050508152602001600382018054806020026020016040519081016040528092919081815260200182805480156112e857602002820191906000526020600020905b8154815260200190600101908083116112d4575b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561134057602002820191906000526020600020905b81548152602001906001019080831161132c575b5050509190925250508151845250805151909150806001600160401b038111801561136a57600080fd5b50604051908082528060200260200182016040528015611394578160200160208202803683370190505b506020840152806001600160401b03811180156113b057600080fd5b506040519080825280602002602001820160405280156113da578160200160208202803683370190505b506040840152806001600160401b03811180156113f657600080fd5b50604051908082528060200260200182016040528015611420578160200160208202803683370190505b506060840152806001600160401b038111801561143c57600080fd5b50604051908082528060200260200182016040528015611466578160200160208202803683370190505b50608084015260005b81811015611584576114ad6114878787600085613897565b8560200151838151811061149757fe5b602002602001015161387290919063ffffffff16565b846020015182815181106114bd57fe5b6020026020010181815250506114e96114d98787600185613897565b8560400151838151811061149757fe5b846040015182815181106114f957fe5b6020026020010181815250506115256115158787600285613897565b8560600151838151811061149757fe5b8460600151828151811061153557fe5b6020026020010181815250506115616115518787600385613897565b8560800151838151811061149757fe5b8460800151828151811061157157fe5b602090810291909101015260010161146f565b50505092915050565b611595614c8e565b60405163aa93ae4960e01b8152309063aa93ae49906115b8908590600401615569565b60006040518083038186803b1580156115d057600080fd5b505afa1580156115e4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261160c919081019061537f565b9050611616614c8e565b61161f83613e1e565b82515190915060005b81811015611769576116718360200151828151811061164357fe5b60200260200101518560200151838151811061165b57fe5b60200260200101516142bc90919063ffffffff16565b8460200151828151811061168157fe5b6020026020010181815250506116b8836040015182815181106116a057fe5b60200260200101518560400151838151811061165b57fe5b846040015182815181106116c857fe5b6020026020010181815250506116ff836060015182815181106116e757fe5b60200260200101518560600151838151811061165b57fe5b8460600151828151811061170f57fe5b6020026020010181815250506117468360800151828151811061172e57fe5b60200260200101518560800151838151811061165b57fe5b8460800151828151811061175657fe5b6020908102919091010152600101611628565b505050919050565b6117796136da565b6001600160a01b031661178a611c00565b6001600160a01b0316146117b05760405162461bcd60e51b81526004016105f8906158fc565b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516117e292919061568c565b60405180910390a26001600160a01b03909116600090815260056020526040902080549115156101000261ff0019909216919091179055565b606080606080306001600160a01b0316637234100a866040518263ffffffff1660e01b815260040161184d9190615569565b60006040518083038186803b15801561186557600080fd5b505afa158015611879573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118a191908101906152b2565b6001600160a01b0387166000908152600b60209081526040909120835193955091935090916118d591839190860190614d29565b50600181015483518082146119125781810360005b8181101561190f576001808601805480830182556000918252602082200155016118ea565b50505b84516060816001600160401b038111801561192c57600080fd5b50604051908082528060200260200182016040528015611956578160200160208202803683370190505b50905060005b87518110156119b35785600101818154811061197457fe5b906000526020600020015487828151811061198b57fe5b6020026020010151038282815181106119a057fe5b602090810291909101015260010161195c565b509597509495505050505050915091565b6119cc6136da565b6001600160a01b03166119dd611c00565b6001600160a01b031614611a035760405162461bcd60e51b81526004016105f8906158fc565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b606080606080306001600160a01b031663a536ebf3866040518263ffffffff1660e01b8152600401611a7f9190615569565b60006040518083038186803b158015611a9757600080fd5b505afa158015611aab573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611ad391908101906152b2565b604051631437ac1360e01b815291935091506060903090631437ac1390611afe908990600401615569565b60006040518083038186803b158015611b1657600080fd5b505afa158015611b2a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b5291908101906152b2565b845190925090506060816001600160401b0381118015611b7157600080fd5b50604051908082528060200260200182016040528015611b9b578160200160208202803683370190505b50905060005b82811015611bf157838181518110611bb557fe5b6020026020010151858281518110611bc957fe5b602002602001015103828281518110611bde57fe5b6020908102919091010152600101611ba1565b50939550929350505050915091565b6000546001600160a01b031690565b6002546001600160a01b03163314611c395760405162461bcd60e51b81526004016105f8906156ee565b828114611c585760405162461bcd60e51b81526004016105f8906157ef565b611cc7868686868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808a028281018201909352898252909350899250889182918501908490808284376000920191909152506142fe92505050565b5050506001600160a01b039092166000908152600560205260409020805460ff191660011790555050565b6001600160a01b0380831660009081526003602090815260408083209385168352928152828220805484518184028101840190955280855260609493919290919084015b82821015611dcb5760008481526020908190206040805180820182526002860290920180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015611db357602002820191906000526020600020905b815481526020019060010190808311611d9f575b50505050508152505081526020019060010190611d36565b50505050905092915050565b611ddf614d8e565b6001600160a01b038084166000908152600a602090815260408083209386168352928152908290208251815460609381028201840185529381018481529093919284928491840182828015611e5d57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611e3f575b5050505050815260200160018201805480602002602001604051908101604052809291908181526020018280548015611eb557602002820191906000526020600020905b815481526020019060010190808311611ea1575b505050505081525050905092915050565b606080611ed1614c8e565b6001600160a01b0384166000908152600460209081526040918290208251815460c09381028201840190945260a081018481529093919284928491840182828015611f4557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611f27575b5050505050815260200160018201805480602002602001604051908101604052809291908181526020018280548015611f9d57602002820191906000526020600020905b815481526020019060010190808311611f89575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015611ff557602002820191906000526020600020905b815481526020019060010190808311611fe1575b505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561204d57602002820191906000526020600020905b815481526020019060010190808311612039575b50505050508152602001600482018054806020026020016040519081016040528092919081815260200182805480156120a557602002820191906000526020600020905b815481526020019060010190808311612091575b5050509190925250508151519192508190506001600160401b03811180156120cc57600080fd5b506040519080825280602002602001820160405280156120f6578160200160208202803683370190505b5082519450925060005b81811015612188576121698360800151828151811061211b57fe5b6020026020010151610e168560600151848151811061213657fe5b6020026020010151610e168760400151868151811061215157fe5b60200260200101518860200151878151811061149757fe5b84828151811061217557fe5b6020908102919091010152600101612100565b505050915091565b612198614c8e565b6001600160a01b0382166000908152600460209081526040918290208251815460c09381028201840190945260a08101848152909391928492849184018282801561220c57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116121ee575b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561226457602002820191906000526020600020905b815481526020019060010190808311612250575b50505050508152602001600282018054806020026020016040519081016040528092919081815260200182805480156122bc57602002820191906000526020600020905b8154815260200190600101908083116122a8575b505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561231457602002820191906000526020600020905b815481526020019060010190808311612300575b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561236c57602002820191906000526020600020905b815481526020019060010190808311612358575b5050505050815250509050919050565b60066020526000908152604090205481565b6009602090815260009283526040808420909152908252902080546001909101546001600160a01b039091169082565b6123c6614d8e565b6001600160a01b0382166000908152600b6020908152604091829020825181546060938102820184018552938101848152909391928492849184018282801561243857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161241a575b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561236c5760200282019190600052602060002090815481526020019060010190808311612358575050505050815250509050919050565b606080606080306001600160a01b031663245cd1db87876040518363ffffffff1660e01b81526004016124d292919061557d565b60006040518083038186803b1580156124ea57600080fd5b505afa1580156124fe573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261252691908101906152b2565b6001600160a01b038089166000908152600a60209081526040808320938b1683529281529190208351939550919350909161256691839190860190614d29565b50600181015483518082146125a35781810360005b818110156125a05760018086018054808301825560009182526020822001550161257b565b50505b84516060816001600160401b03811180156125bd57600080fd5b506040519080825280602002602001820160405280156125e7578160200160208202803683370190505b50905060005b828110156126435785600101818154811061260457fe5b906000526020600020015487828151811061261b57fe5b60200260200101510382828151811061263057fe5b60209081029190910101526001016125ed565b5095975094955050505050505b9250929050565b61265f6136da565b6001600160a01b0316612670611c00565b6001600160a01b0316146126965760405162461bcd60e51b81526004016105f8906158fc565b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516126c892919061568c565b60405180910390a2600180546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0381166000908152600760205260409020606090610e9b90614576565b61271f81614582565b1561115957600154604051636e0cf42160e11b81526001600160a01b039091169063dc19e84290612754908490600401615569565b60206040518083038186803b15801561276c57600080fd5b505afa158015612780573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127a49190615344565b6127c05760405162461bcd60e51b81526004016105f890615889565b806001600160a01b0316635468d6d76040518163ffffffff1660e01b815260040160206040518083038186803b1580156127f957600080fd5b505afa15801561280d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128319190615344565b61284d5760405162461bcd60e51b81526004016105f890615981565b60405163245cd1db60e01b81526060908190309063245cd1db90612877908690339060040161557d565b60006040518083038186803b15801561288f57600080fd5b505afa1580156128a3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526128cb91908101906152b2565b6001600160a01b0385166000908152600a6020908152604080832033845282529091208351939550919350909161290791839190860190614d29565b50600181015483518082146129445781810360005b818110156129415760018086018054808301825560009182526020822001550161291c565b50505b600061294f33614609565b61295957336129ca565b336001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561299257600080fd5b505afa1580156129a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129ca9190615058565b905060005b8651811015612af95760008560010182815481106129e957fe5b9060005260206000200154878381518110612a0057fe5b602002602001015103905080600014612af057612a4483828a8581518110612a2457fe5b60200260200101516001600160a01b03166136de9092919063ffffffff16565b612a7081876001018481548110612a5757fe5b906000526020600020015461387290919063ffffffff16565b866001018381548110612a7f57fe5b9060005260206000200181905550826001600160a01b0316336001600160a01b03167fcf0b5b5e344fd092a8b2211145583746df8436ec32469680c9d800af50d7b7378a8581518110612ace57fe5b60200260200101518442604051612ae7939291906155b0565b60405180910390a35b506001016129cf565b5050505050505050565b612b0b6136da565b6001600160a01b0316612b1c611c00565b6001600160a01b031614612b425760405162461bcd60e51b81526004016105f8906158fc565b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051612b7492919061568c565b60405180910390a2600280546001600160a01b0319166001600160a01b0392909216919091179055565b3383828114612bbf5760405162461bcd60e51b81526004016105f8906157ef565b600154604051636e0cf42160e11b81526001600160a01b039091169063dc19e84290612bef908590600401615569565b60206040518083038186803b158015612c0757600080fd5b505afa158015612c1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c3f9190615344565b612c5b5760405162461bcd60e51b81526004016105f890615889565b6001600160a01b0380831660009081526009602090815260408083208b8516845290915290208054909116612ce95780546001600160a01b0319166001600160a01b038a811691909117825583166000908152600760205260409020612cc1908a614642565b612ce9576001600160a01b0383166000908152600760205260409020612ce7908a614657565b505b80546001600160a01b031680612d115760405162461bcd60e51b81526004016105f890615823565b612d4986866000818110612d2157fe5b6001600160a01b03881660009081526006602090815260409091205493910201359050613872565b6001600160a01b0385166000908152600660205260409020556060836001600160401b0381118015612d7a57600080fd5b50604051908082528060200260200182016040528015612da4578160200160208202803683370190505b50905060005b84811015612e91576001600160a01b038087166000908152600860209081526040808320938716835292905220541580612e5c576001600160a01b0380881660009081526008602090815260408083209388168352929052208054612e40919084908110612e1457fe5b90600052602060002001548a8a85818110612e2b57fe5b9050602002013561387290919063ffffffff16565b838381518110612e4c57fe5b6020026020010181815250612e87565b888883818110612e6857fe5b90506020020135838381518110612e7b57fe5b60200260200101818152505b5050600101612daa565b506001600160a01b03808616600090815260086020908152604080832093861683529281529190208251612ec792840190614da8565b506001600160a01b038086166000908152600360209081526040808320938616835292905220600184015480612f9f57612eff614def565b6001600160a01b038d168152604080516020808c0282810182019093528b825290918c918c91829185019084908082843760009201829052506020868101958652885460018082018b558a845292829020885160029092020180546001600160a01b0319166001600160a01b039092169190911781559551805188979650612f8e955092860193500190614da8565b505083546001880155506130409050565b6001600160a01b038088166000908152600360209081526040808320938816835292905290812080546000198401908110612fd657fe5b9060005260206000209060020201905060005b600182015481101561303d5761301a8b8b8381811061300457fe5b90506020020135836001018381548110612a5757fe5b82600101828154811061302957fe5b600091825260209091200155600101612fe9565b50505b50505050505050505050505050565b6008602052826000526040600020602052816000526040600020818154811061307457fe5b9060005260206000200160009250925050505481565b61309381614582565b15611159576040516327304dfd60e01b81526000906001600160a01b038316906327304dfd906130c7903390600401615569565b60206040518083038186803b1580156130df57600080fd5b505afa1580156130f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131179190615344565b806131a35750336001600160a01b0316826001600160a01b0316633018205f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561316057600080fd5b505afa158015613174573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131989190615058565b6001600160a01b0316145b90506000826001600160a01b0316635468d6d76040518163ffffffff1660e01b815260040160206040518083038186803b1580156131e057600080fd5b505afa1580156131f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132189190615344565b9050806132375760405162461bcd60e51b81526004016105f890615981565b816132545760405162461bcd60e51b81526004016105f890615958565b604051631bf52ea760e21b815260609081903090636fd4ba9c9061327c908890600401615569565b600060405180830381600087803b15801561329657600080fd5b505af11580156132aa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526132d291908101906152b2565b6001600160a01b0387166000908152600560209081526040808320805460ff19169055600b82529091208351939550919350909161331591839190860190614d29565b50600181015483518082146133525781810360005b8181101561334f5760018086018054808301825560009182526020822001550161332a565b50505b60005b85518110156133fa57600086828151811061336c57fe5b6020026020010151905085828151811061338257fe5b60200260200101516000146133f1576133af8a828885815181106133a257fe5b602002602001015161466c565b6133d58683815181106133be57fe5b6020026020010151866001018481548110612a5757fe5b8560010183815481106133e457fe5b6000918252602090912001555b50600101613355565b505050505050505050565b61340d614c4f565b506001600160a01b03166000908152600560208181526040928390208351610140810185526001820154610100820190815260028301546101208301526080808301918252865180880188526003850154815260048501548187015260a0808501919091528751808901895296850154875260068501548787015260c080850197909752875180890189526007860154815260088601548188015260e0850152918352865180870188526009850154818301908152600a86015482850152815287518089018952600b8601548152600c860154818801528187015287518089018952600d8601548152600e860154818801528189015287518089018952600f86015481526010860154818801526060828101919091528487019190915287518088018952601186015481840190815260128701548286015281528851808a018a5260138701548152601487015481890152818801528851808a018a5260158701548152601687015481890152818a01528851808a018a52601787015481526018870154818901528183015284890152875196870188526019850154918701918252601a85015492870192909252855285518087018752601b8401548152601c840154818601528585015285518087018752601d8401548152601e84015481860152858701528551808701909652601f83015486529183015492850192909252828101939093529182015290565b6136226136da565b6001600160a01b0316613633611c00565b6001600160a01b0316146136595760405162461bcd60e51b81526004016105f8906158fc565b6001600160a01b03811661367f5760405162461bcd60e51b81526004016105f890615747565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b6106158363a9059cbb60e01b84846040516024016136fd929190615597565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526149c3565b6000610e9b82614aae565b600061374b8383614ab2565b9392505050565b805151600090831080159061376b575060208201515183105b1561377c5750805160200151610e9b565b6020820151518310801590613795575060408201515183105b156137a857506020808201510151610e9b565b60408201515183108015906137c1575060608201515183105b156137d55750604081015160200151610e9b565b60608201515183106137f05750606081015160200151610e9b565b50600092915050565b60008261380857506000610e9b565b8282028284828161381557fe5b041461374b5760405162461bcd60e51b81526004016105f8906158bb565b600061374b83836040518060400160405280601a815260200179536166654d6174683a206469766973696f6e206279207a65726f60301b815250614ad6565b60008282018381101561374b5760405162461bcd60e51b81526004016105f89061578d565b6001600160a01b03808516600090815260086020908152604080832093871683529290529081205481906138cc57600061390a565b6001600160a01b038087166000908152600860209081526040808320938916835292905290812080549091906138fe57fe5b90600052602060002001545b9050613914614c4f565b506001600160a01b0386166000908152600560208181526040928390208351610140810185526001820154610100820190815260028301546101208301526080808301918252865180880188526003850154815260048501548187015260a0808501919091528751808901895296850154875260068501548787015260c080850197909752875180890189526007860154815260088601548188015260e0850152918352865180870188526009850154818301908152600a86015482850152815287518089018952600b8601548152600c860154818801528187015287518089018952600d8601548152600e860154818801528189015287518089018952600f86015481526010860154818801526060828101919091528487019190915287518088018952601186015481840190815260128701548286015281528851808a018a5260138701548152601487015481890152818801528851808a018a5260158701548152601687015481890152818a01528851808a018a52601787015481526018870154818901528183015284890152875196870188526019850154918701918252601a85015492870192909252855285518087018752601b8401548152601c840154818601528585015285518087018752601d8401548152601e84015481860152858701528551808701909652601f830154865291830154928501929092528281019390935291820152613b27614c8e565b6001600160a01b0388166000908152600460209081526040918290208251815460c09381028201840190945260a081018481529093919284928491840182828015613b9b57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613b7d575b5050505050815260200160018201805480602002602001604051908101604052809291908181526020018280548015613bf357602002820191906000526020600020905b815481526020019060010190808311613bdf575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015613c4b57602002820191906000526020600020905b815481526020019060010190808311613c37575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015613ca357602002820191906000526020600020905b815481526020019060010190808311613c8f575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015613cfb57602002820191906000526020600020905b815481526020019060010190808311613ce7575b50505050508152505090508260001480613d155750805151155b15613d265760009350505050613e16565b6001600160a01b03881660009081526006602052604090205486613d7157613d6a6064610db3613d5a878760000151613752565b85602001518a81518110610d9d57fe5b9450613e01565b8660011415613da057613d6a6064610db3613d90878760200151613752565b85604001518a81518110610d9d57fe5b8660021415613dcf57613d6a6064610db3613dbf878760400151613752565b85606001518a81518110610d9d57fe5b8660031415613e0157613dfe6064610db3613dee878760600151613752565b85608001518a81518110610d9d57fe5b94505b613e0f81610db387876137f9565b9450505050505b949350505050565b613e26614c8e565b613e2e614c8e565b6001600160a01b0383166000908152600460209081526040918290208251815460c09381028201840190945260a081018481529093919284928491840182828015613ea257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613e84575b5050505050815260200160018201805480602002602001604051908101604052809291908181526020018280548015613efa57602002820191906000526020600020905b815481526020019060010190808311613ee6575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015613f5257602002820191906000526020600020905b815481526020019060010190808311613f3e575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015613faa57602002820191906000526020600020905b815481526020019060010190808311613f96575b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561400257602002820191906000526020600020905b815481526020019060010190808311613fee575b505050919092525050815180519085526001600160a01b03861660009081526007602052604081209394509092915061403a82613734565b9050826001600160401b038111801561405257600080fd5b5060405190808252806020026020018201604052801561407c578160200160208202803683370190505b506020860152826001600160401b038111801561409857600080fd5b506040519080825280602002602001820160405280156140c2578160200160208202803683370190505b506040860152826001600160401b03811180156140de57600080fd5b50604051908082528060200260200182016040528015614108578160200160208202803683370190505b506060860152826001600160401b038111801561412457600080fd5b5060405190808252806020026020018201604052801561414e578160200160208202803683370190505b50608086015260005b60048110156142b25760005b848110156142a95760005b838110156142a057826141c5576141a46141948a61418c888561373f565b600086613897565b8960200151848151811061149757fe5b886020015183815181106141b457fe5b602002602001018181525050614298565b8260011415614207576141f76141e78a6141df888561373f565b600186613897565b8960400151848151811061149757fe5b886040015183815181106141b457fe5b8260021415614249576142396142298a614221888561373f565b600286613897565b8960600151848151811061149757fe5b886060015183815181106141b457fe5b82600314156142985761427b61426b8a614263888561373f565b600386613897565b8960800151848151811061149757fe5b8860800151838151811061428b57fe5b6020026020010181815250505b60010161416e565b50600101614163565b50600101614157565b5050505050919050565b600061374b83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250614b0d565b6001600160a01b0384166000908152600460205260408120905b835181101561456e57600084828151811061432f57fe5b60200260200101519050600084838151811061434757fe5b602002602001015190506000806143ba866000018054806020026020016040519081016040528092919081815260200182805480156143af57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311614391575b505050505085614b39565b915091508161444a57508454600180820187556000878152602080822090930180546001600160a01b0319166001600160a01b03881617905581880180548084018255908252838220018190556002880180548084018255908252838220018190556003880180548084018255908252838220018190556004880180549283018155815291822001558454600019015b821561455e57886144885761446883876001018381548110612a5757fe5b86600101828154811061447757fe5b600091825260209091200155614516565b88600114156144b3576144a483876002018381548110612a5757fe5b86600201828154811061447757fe5b88600214156144de576144cf83876003018381548110612a5757fe5b86600301828154811061447757fe5b8860031415614516576144fa83876004018381548110612a5757fe5b86600401828154811061450957fe5b6000918252602090912001555b896001600160a01b03167ff2dc555ffff33c7179f7e35e7fc8a68179aeecb49e12799e8ac2972420613eb98a3387876040516145559493929190615b7f565b60405180910390a25b5050600190920191506143189050565b505050505050565b60608061374b83614b91565b60006001826001600160a01b03166373a9855c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156145bf57600080fd5b505afa1580156145d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145f79190615360565b600181111561460257fe5b1492915050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590613e16575050151592915050565b600061374b836001600160a01b038416614bed565b600061374b836001600160a01b038416614c05565b806146895760405162461bcd60e51b81526004016105f8906157c2565b6060836001600160a01b031663a0e67e2b6040518163ffffffff1660e01b815260040160006040518083038186803b1580156146c457600080fd5b505afa1580156146d8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526147009190810190615280565b90506060846001600160a01b031663309a042c6040518163ffffffff1660e01b815260040160006040518083038186803b15801561473d57600080fd5b505afa158015614751573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526147799190810190615312565b90506000856001600160a01b031663d29986c16040518163ffffffff1660e01b815260040160206040518083038186803b1580156147b657600080fd5b505afa1580156147ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147ee9190615475565b905060005b835181101561496b57600061482385838151811061480d57fe5b60200260200101516001600160a01b0316614609565b6148405784828151811061483357fe5b60200260200101516148c4565b84828151811061484c57fe5b60200260200101516001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561488c57600080fd5b505afa1580156148a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906148c49190615058565b905060006148f284610db38786815181106148db57fe5b60200260200101518a6137f990919063ffffffff16565b90506149086001600160a01b03891683836136de565b816001600160a01b0316896001600160a01b0316336001600160a01b03167f589269304a5775087fef7422dd5076938901ab1fa82e920b6de707864f198e608b8542604051614959939291906155b0565b60405180910390a450506001016147f3565b50856001600160a01b0316336001600160a01b03167f1bf0129823b56213a46996bc874ce50b318995cae2bbdcd2000933d36012547d8787426040516149b3939291906155b0565b60405180910390a3505050505050565b6149d5826001600160a01b0316614609565b6149f15760405162461bcd60e51b81526004016105f8906159fe565b60006060836001600160a01b031683604051614a0d919061554d565b6000604051808303816000865af19150503d8060008114614a4a576040519150601f19603f3d011682016040523d82523d6000602084013e614a4f565b606091505b509150915081614a715760405162461bcd60e51b81526004016105f890615854565b805115614aa85780806020019051810190614a8c9190615344565b614aa85760405162461bcd60e51b81526004016105f8906159b4565b50505050565b5490565b6000826000018281548110614ac357fe5b9060005260206000200154905092915050565b60008183614af75760405162461bcd60e51b81526004016105f891906156bb565b506000838581614b0357fe5b0495945050505050565b60008184841115614b315760405162461bcd60e51b81526004016105f891906156bb565b505050900390565b60008060005b8451811015614b8957836001600160a01b0316858281518110614b5e57fe5b60200260200101516001600160a01b03161415614b815760019250809150614b89565b600101614b3f565b509250929050565b606081600001805480602002602001604051908101604052809291908181526020018280548015614be157602002820191906000526020600020905b815481526020019060010190808311614bcd575b50505050509050919050565b60009081526001919091016020526040902054151590565b6000614c118383614bed565b614c4757508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610e9b565b506000610e9b565b6040518060800160405280614c62614e07565b8152602001614c6f614e07565b8152602001614c7c614e07565b8152602001614c89614e07565b905290565b6040518060a0016040528060608152602001606081526020016060815260200160608152602001606081525090565b60405180610120016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001606081526020016060815260200160608152602001606081525090565b604080518082019091526000808252602082015290565b828054828255906000526020600020908101928215614d7e579160200282015b82811115614d7e57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190614d49565b50614d8a929150614e41565b5090565b604051806040016040528060608152602001606081525090565b828054828255906000526020600020908101928215614de3579160200282015b82811115614de3578251825591602001919060010190614dc8565b50614d8a929150614e60565b60408051808201909152600081526060602082015290565b6040518060800160405280614e1a614e75565b8152602001614e27614e75565b8152602001614e34614e75565b8152602001614c89614e75565b5b80821115614d8a5780546001600160a01b0319168155600101614e42565b5b80821115614d8a5760008155600101614e61565b604051806040016040528060008152602001600081525090565b60008083601f840112614ea0578182fd5b5081356001600160401b03811115614eb6578182fd5b602083019150836020808302850101111561265057600080fd5b600082601f830112614ee0578081fd5b8151614ef3614eee82615bca565b615ba4565b818152915060208083019084810181840286018201871015614f1457600080fd5b60005b84811015614f3c578151614f2a81615c15565b84529282019290820190600101614f17565b505050505092915050565b600082601f830112614f57578081fd5b8151614f65614eee82615bca565b818152915060208083019084810181840286018201871015614f8657600080fd5b60005b84811015614f3c57815184529282019290820190600101614f89565b60006101008284031215614fb7578081fd5b614fc16080615ba4565b9050614fcd838361500b565b8152614fdc836040840161500b565b6020820152614fee836080840161500b565b60408201526150008360c0840161500b565b606082015292915050565b60006040828403121561501c578081fd5b6150266040615ba4565b9050813581526020820135602082015292915050565b60006020828403121561504d578081fd5b813561374b81615c15565b600060208284031215615069578081fd5b815161374b81615c15565b60008060408385031215615086578081fd5b823561509181615c15565b915060208301356150a181615c15565b809150509250929050565b600080600080600080608087890312156150c4578182fd5b86356150cf81615c15565b955060208701356150df81615c15565b945060408701356001600160401b03808211156150fa578384fd5b6151068a838b01614e8f565b9096509450606089013591508082111561511e578384fd5b5061512b89828a01614e8f565b979a9699509497509295939492505050565b600080600060608486031215615151578283fd5b833561515c81615c15565b9250602084013561516c81615c15565b929592945050506040919091013590565b6000806040838503121561518f578182fd5b823561519a81615c15565b915060208301356150a181615c2a565b6000808284036104208112156151be578283fd5b83356151c981615c15565b9250610400601f19820112156151dd578182fd5b506151e86080615ba4565b6151f58560208601614fa5565b8152615205856101208601614fa5565b6020820152615218856102208601614fa5565b604082015261522b856103208601614fa5565b6060820152809150509250929050565b60008060008060008060808789031215615253578384fd5b863561525e81615c15565b95506020870135945060408701356001600160401b03808211156150fa578586fd5b600060208284031215615291578081fd5b81516001600160401b038111156152a6578182fd5b613e1684828501614ed0565b600080604083850312156152c4578182fd5b82516001600160401b03808211156152da578384fd5b6152e686838701614ed0565b935060208501519150808211156152fb578283fd5b5061530885828601614f47565b9150509250929050565b600060208284031215615323578081fd5b81516001600160401b03811115615338578182fd5b613e1684828501614f47565b600060208284031215615355578081fd5b815161374b81615c2a565b600060208284031215615371578081fd5b81516002811061374b578182fd5b600060208284031215615390578081fd5b81516001600160401b03808211156153a6578283fd5b9083019060a082860312156153b9578283fd5b6153c360a0615ba4565b8251828111156153d1578485fd5b6153dd87828601614ed0565b8252506020830151828111156153f1578485fd5b6153fd87828601614f47565b602083015250604083015182811115615414578485fd5b61542087828601614f47565b604083015250606083015182811115615437578485fd5b61544387828601614f47565b60608301525060808301518281111561545a578485fd5b61546687828601614f47565b60808301525095945050505050565b600060208284031215615486578081fd5b5051919050565b6000815180845260208085019450808401835b838110156154c55781516001600160a01b0316875295820195908201906001016154a0565b509495945050505050565b6000815180845260208085019450808401835b838110156154c5578151875295820195908201906001016154e3565b61550a82825161553e565b602081015161551c604084018261553e565b50604081015161552f608084018261553e565b50606081015161061560c08401825b80518252602090810151910152565b6000825161555f818460208701615be9565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b60006020825261374b602083018461548d565b6000604082526155f7604083018561548d565b828103602084015261560981856154d0565b95945050505050565b60208082528251828201819052600091906040908185019080840286018301878501865b8381101561567e57888303603f19018552815180516001600160a01b0316845287015187840187905261566b878501826154d0565b9588019593505090860190600101615636565b509098975050505050505050565b60006020825282602083015282846040840137818301604090810191909152601f909201601f19160101919050565b60006020825282518060208401526156da816040850160208701615be9565b601f01601f19169190910160400192915050565b60208082526012908201527122a9292fa727aa2fa1a7a72a2927a62622a960711b604082015260600190565b6020808252601390820152724552525f4e4f545f4352505f464143544f525960681b604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601b908201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604082015260600190565b6020808252601390820152724552525f494c4c4547414c5f42414c414e434560681b604082015260600190565b6020808252601a908201527908aa4a4bea89e968a9cbe988a9c8ea890be9c9ea8be9a82a886960331b604082015260600190565b6020808252601790820152764552525f494e56414c49445f4b4f4c5f4144445245535360481b604082015260600190565b6020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b6020808252601890820152774552525f494e56414c49445f504f4f4c5f4144445245535360401b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600d908201526c11549497d21054d7d4d1551151609a1b604082015260600190565b6020808252600f908201526e22a9292fa727aa2fa6a0a720a3a2a960891b604082015260600190565b60208082526019908201527811549497d393d517d0d3d354131155115117d0d3d3131150d5603a1b604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b6020808252601f908201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604082015260600190565b600060208252825160406020840152615a51606084018261548d565b90506020840151601f1984830301604085015261560982826154d0565b600061040082019050615a828284516154ff565b6020830151615a956101008401826154ff565b506040830151615aa96102008401826154ff565b506060830151615abd6103008401826154ff565b5092915050565b600060208252825160a06020840152615ae060c084018261548d565b90506020840151601f1980858403016040860152615afe83836154d0565b92506040860151915080858403016060860152615b1b83836154d0565b92506060860151915080858403016080860152615b3883836154d0565b925060808601519150808584030160a08601525061560982826154d0565b81516001600160a01b031681526020918201519181019190915260400190565b90815260200190565b9384526001600160a01b03928316602085015291166040830152606082015260800190565b6040518181016001600160401b0381118282101715615bc257600080fd5b604052919050565b60006001600160401b03821115615bdf578081fd5b5060209081020190565b60005b83811015615c04578181015183820152602001615bec565b83811115614aa85750506000910152565b6001600160a01b038116811461115957600080fd5b801515811461115957600080fdfea2646970667358221220bc0166cc398cc514c90cef6ad7de63077f87d82466357c184eaef0479b27a4bb64736f6c634300060c0033",
  "deployedBytecode": "0x60806040526004361061016c5760003560e01c8063125bfb66146101785780631437ac131461019a578063245cd1db146101d157806344e6a1de146101f15780634660c5a51461021e57806355291dbd1461023e5780635740845d14610246578063598797ad1461027357806368092bd9146102935780636fd4ba9c146102b3578063715018a6146102d35780637234100a146102e85780638da5cb5b146103085780639155dae71461032a5780639b1061b21461034a5780639f1da16014610377578063a536ebf3146103a4578063aa93ae49146103c4578063ad8d1281146103e4578063bb408f2d14610411578063bf91b4c91461043f578063c0663cc91461045f578063c1e576221461047f578063c90361dd1461049f578063c969229c146104cc578063d6b485a5146104ec578063d7256c701461050c578063ebee7bcc1461052c578063edb12adf1461054c578063f29486a11461056c578063f2fde38b1461059957610173565b3661017357005b600080fd5b34801561018457600080fd5b5061019861019336600461513d565b6105b9565b005b3480156101a657600080fd5b506101ba6101b536600461503c565b61061a565b6040516101c89291906155e4565b60405180910390f35b3480156101dd57600080fd5b506101ba6101ec366004615074565b6107f9565b3480156101fd57600080fd5b5061021161020c366004615074565b610e4e565b6040516101c89190615b56565b34801561022a57600080fd5b506101986102393660046151aa565b610ea1565b6101986110ee565b34801561025257600080fd5b50610266610261366004615074565b61115c565b6040516101c89190615ac4565b34801561027f57600080fd5b5061026661028e36600461503c565b61158d565b34801561029f57600080fd5b506101986102ae36600461517d565b611771565b3480156102bf57600080fd5b506101ba6102ce36600461503c565b61181b565b3480156102df57600080fd5b506101986119c4565b3480156102f457600080fd5b506101ba61030336600461503c565b611a4d565b34801561031457600080fd5b5061031d611c00565b6040516101c89190615569565b34801561033657600080fd5b5061019861034536600461523b565b611c0f565b34801561035657600080fd5b5061036a610365366004615074565b611cf2565b6040516101c89190615612565b34801561038357600080fd5b50610397610392366004615074565b611dd7565b6040516101c89190615a35565b3480156103b057600080fd5b506101ba6103bf36600461503c565b611ec6565b3480156103d057600080fd5b506102666103df36600461503c565b612190565b3480156103f057600080fd5b506104046103ff36600461503c565b61237c565b6040516101c89190615b76565b34801561041d57600080fd5b5061043161042c366004615074565b61238e565b6040516101c8929190615597565b34801561044b57600080fd5b5061039761045a36600461503c565b6123be565b34801561046b57600080fd5b506101ba61047a366004615074565b61249e565b34801561048b57600080fd5b5061019861049a36600461503c565b612657565b3480156104ab57600080fd5b506104bf6104ba36600461503c565b6126f2565b6040516101c891906155d1565b3480156104d857600080fd5b506101986104e736600461503c565b612716565b3480156104f857600080fd5b5061019861050736600461503c565b612b03565b34801561051857600080fd5b506101986105273660046150ac565b612b9e565b34801561053857600080fd5b5061040461054736600461513d565b61304f565b34801561055857600080fd5b5061019861056736600461503c565b61308a565b34801561057857600080fd5b5061058c61058736600461503c565b613405565b6040516101c89190615a6e565b3480156105a557600080fd5b506101986105b436600461503c565b61361a565b6105c16136da565b6001600160a01b03166105d2611c00565b6001600160a01b0316146106015760405162461bcd60e51b81526004016105f8906158fc565b60405180910390fd5b6106156001600160a01b03841683836136de565b505050565b6001600160a01b038116600090815260076020526040812060609182919061064182613734565b6001600160a01b038616600090815260046020908152604091829020805483518184028101840190945280845293945060609390918301828280156106af57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610691575b50505050509050606081516001600160401b03811180156106cf57600080fd5b506040519080825280602002602001820160405280156106f9578160200160208202803683370190505b50905060005b838110156107ec5760603063245cd1db8a61071a898661373f565b6040518363ffffffff1660e01b815260040161073792919061557d565b60006040518083038186803b15801561074f57600080fd5b505afa158015610763573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261078b91908101906152b2565b91505060005b81518110156107e2578181815181106107a657fe5b60200260200101518482815181106107ba57fe5b6020026020010151018482815181106107cf57fe5b6020908102919091010152600101610791565b50506001016106ff565b5090945092505050915091565b6001600160a01b038083166000908152600860209081526040808320938516835292905290812054606091829161083157600061086f565b6001600160a01b0380861660009081526008602090815260408083209388168352929052908120805490919061086357fe5b90600052602060002001545b6001600160a01b038616600090815260066020526040902054909150610893614c4f565b506001600160a01b0386166000908152600560208181526040928390208351610140810185526001820154610100820190815260028301546101208301526080808301918252865180880188526003850154815260048501548187015260a0808501919091528751808901895296850154875260068501548787015260c080850197909752875180890189526007860154815260088601548188015260e0850152918352865180870188526009850154818301908152600a86015482850152815287518089018952600b8601548152600c860154818801528187015287518089018952600d8601548152600e860154818801528189015287518089018952600f86015481526010860154818801526060828101919091528487019190915287518088018952601186015481840190815260128701548286015281528851808a018a5260138701548152601487015481890152818801528851808a018a5260158701548152601687015481890152818a01528851808a018a52601787015481526018870154818901528183015284890152875196870188526019850154918701918252601a85015492870192909252855285518087018752601b8401548152601c840154818601528585015285518087018752601d8401548152601e84015481860152858701528551808701909652601f830154865291830154928501929092528281019390935291820152610aa6614c8e565b6001600160a01b0388166000908152600460209081526040918290208251815460c09381028201840190945260a081018481529093919284928491840182828015610b1a57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610afc575b5050505050815260200160018201805480602002602001604051908101604052809291908181526020018280548015610b7257602002820191906000526020600020905b815481526020019060010190808311610b5e575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015610bca57602002820191906000526020600020905b815481526020019060010190808311610bb6575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015610c2257602002820191906000526020600020905b815481526020019060010190808311610c0e575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015610c7a57602002820191906000526020600020905b815481526020019060010190808311610c66575b50505050508152505090508060000151516001600160401b0381118015610ca057600080fd5b50604051908082528060200260200182016040528015610cca578160200160208202803683370190505b50815196509450610cd9614cbd565b6040518061012001604052808a6001600160a01b03168152602001610d02878660000151613752565b8152602001610d15878660200151613752565b8152602001610d28878660400151613752565b8152602001610d3b878660600151613752565b81526020018360200151815260200183604001518152602001836060015181526020018360800151815250905060005b8751811015610e4157610e2285610db388610e1c610db96064610db389608001518a61010001518a81518110610d9d57fe5b60200260200101516137f990919063ffffffff16565b90613833565b610e16610dd96064610db38b606001518c60e001518c81518110610d9d57fe5b610e16610df96064610db38d604001518e60c001518e81518110610d9d57fe5b610e166064610db38e602001518f60a001518f81518110610d9d57fe5b90613872565b906137f9565b878281518110610e2e57fe5b6020908102919091010152600101610d6b565b5050505050509250929050565b610e56614d12565b506001600160a01b0380831660009081526009602090815260408083208585168452825291829020825180840190935280549093168252600190920154918101919091525b92915050565b6001546001600160a01b03163314610ecb5760405162461bcd60e51b81526004016105f89061571a565b6001600160a01b03808316600090815260056020526040908190206001549151636e0cf42160e11b81529092919091169063dc19e84290610f10908690600401615569565b60206040518083038186803b158015610f2857600080fd5b505afa158015610f3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f609190615344565b610f7c5760405162461bcd60e51b81526004016105f890615889565b805462010000900460ff1615610fa45760405162461bcd60e51b81526004016105f890615931565b805462ff0000191662010000178155815180518051600184015560209081015160028401558082015180516003850155810151600484015560408083015180516005860155820151600685015560609283015180516007860155820151600885015581850151805180516009870155830151600a860155808301518051600b870155830151600c860155808201518051600d870155830151600e8601558301518051600f8601558201516010850155808501518051805160118701558301516012860155808301518051601387015583015160148601558082015180516015870155830151601686015583015180516017860155820151601885015593820151805180516019860155820151601a850155808201518051601b860155820151601c850155938401518051601d850155810151601e8401559201518051601f83015582015191015550565b6110f66136da565b6001600160a01b0316611107611c00565b6001600160a01b03161461112d5760405162461bcd60e51b81526004016105f8906158fc565b60405133904780156108fc02916000818181858888f19350505050158015611159573d6000803e3d6000fd5b50565b611164614c8e565b61116c614c8e565b6001600160a01b0384166000908152600460209081526040918290208251815460c09381028201840190945260a0810184815290939192849284918401828280156111e057602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116111c2575b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561123857602002820191906000526020600020905b815481526020019060010190808311611224575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561129057602002820191906000526020600020905b81548152602001906001019080831161127c575b50505050508152602001600382018054806020026020016040519081016040528092919081815260200182805480156112e857602002820191906000526020600020905b8154815260200190600101908083116112d4575b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561134057602002820191906000526020600020905b81548152602001906001019080831161132c575b5050509190925250508151845250805151909150806001600160401b038111801561136a57600080fd5b50604051908082528060200260200182016040528015611394578160200160208202803683370190505b506020840152806001600160401b03811180156113b057600080fd5b506040519080825280602002602001820160405280156113da578160200160208202803683370190505b506040840152806001600160401b03811180156113f657600080fd5b50604051908082528060200260200182016040528015611420578160200160208202803683370190505b506060840152806001600160401b038111801561143c57600080fd5b50604051908082528060200260200182016040528015611466578160200160208202803683370190505b50608084015260005b81811015611584576114ad6114878787600085613897565b8560200151838151811061149757fe5b602002602001015161387290919063ffffffff16565b846020015182815181106114bd57fe5b6020026020010181815250506114e96114d98787600185613897565b8560400151838151811061149757fe5b846040015182815181106114f957fe5b6020026020010181815250506115256115158787600285613897565b8560600151838151811061149757fe5b8460600151828151811061153557fe5b6020026020010181815250506115616115518787600385613897565b8560800151838151811061149757fe5b8460800151828151811061157157fe5b602090810291909101015260010161146f565b50505092915050565b611595614c8e565b60405163aa93ae4960e01b8152309063aa93ae49906115b8908590600401615569565b60006040518083038186803b1580156115d057600080fd5b505afa1580156115e4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261160c919081019061537f565b9050611616614c8e565b61161f83613e1e565b82515190915060005b81811015611769576116718360200151828151811061164357fe5b60200260200101518560200151838151811061165b57fe5b60200260200101516142bc90919063ffffffff16565b8460200151828151811061168157fe5b6020026020010181815250506116b8836040015182815181106116a057fe5b60200260200101518560400151838151811061165b57fe5b846040015182815181106116c857fe5b6020026020010181815250506116ff836060015182815181106116e757fe5b60200260200101518560600151838151811061165b57fe5b8460600151828151811061170f57fe5b6020026020010181815250506117468360800151828151811061172e57fe5b60200260200101518560800151838151811061165b57fe5b8460800151828151811061175657fe5b6020908102919091010152600101611628565b505050919050565b6117796136da565b6001600160a01b031661178a611c00565b6001600160a01b0316146117b05760405162461bcd60e51b81526004016105f8906158fc565b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516117e292919061568c565b60405180910390a26001600160a01b03909116600090815260056020526040902080549115156101000261ff0019909216919091179055565b606080606080306001600160a01b0316637234100a866040518263ffffffff1660e01b815260040161184d9190615569565b60006040518083038186803b15801561186557600080fd5b505afa158015611879573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118a191908101906152b2565b6001600160a01b0387166000908152600b60209081526040909120835193955091935090916118d591839190860190614d29565b50600181015483518082146119125781810360005b8181101561190f576001808601805480830182556000918252602082200155016118ea565b50505b84516060816001600160401b038111801561192c57600080fd5b50604051908082528060200260200182016040528015611956578160200160208202803683370190505b50905060005b87518110156119b35785600101818154811061197457fe5b906000526020600020015487828151811061198b57fe5b6020026020010151038282815181106119a057fe5b602090810291909101015260010161195c565b509597509495505050505050915091565b6119cc6136da565b6001600160a01b03166119dd611c00565b6001600160a01b031614611a035760405162461bcd60e51b81526004016105f8906158fc565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b606080606080306001600160a01b031663a536ebf3866040518263ffffffff1660e01b8152600401611a7f9190615569565b60006040518083038186803b158015611a9757600080fd5b505afa158015611aab573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611ad391908101906152b2565b604051631437ac1360e01b815291935091506060903090631437ac1390611afe908990600401615569565b60006040518083038186803b158015611b1657600080fd5b505afa158015611b2a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b5291908101906152b2565b845190925090506060816001600160401b0381118015611b7157600080fd5b50604051908082528060200260200182016040528015611b9b578160200160208202803683370190505b50905060005b82811015611bf157838181518110611bb557fe5b6020026020010151858281518110611bc957fe5b602002602001015103828281518110611bde57fe5b6020908102919091010152600101611ba1565b50939550929350505050915091565b6000546001600160a01b031690565b6002546001600160a01b03163314611c395760405162461bcd60e51b81526004016105f8906156ee565b828114611c585760405162461bcd60e51b81526004016105f8906157ef565b611cc7868686868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808a028281018201909352898252909350899250889182918501908490808284376000920191909152506142fe92505050565b5050506001600160a01b039092166000908152600560205260409020805460ff191660011790555050565b6001600160a01b0380831660009081526003602090815260408083209385168352928152828220805484518184028101840190955280855260609493919290919084015b82821015611dcb5760008481526020908190206040805180820182526002860290920180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015611db357602002820191906000526020600020905b815481526020019060010190808311611d9f575b50505050508152505081526020019060010190611d36565b50505050905092915050565b611ddf614d8e565b6001600160a01b038084166000908152600a602090815260408083209386168352928152908290208251815460609381028201840185529381018481529093919284928491840182828015611e5d57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611e3f575b5050505050815260200160018201805480602002602001604051908101604052809291908181526020018280548015611eb557602002820191906000526020600020905b815481526020019060010190808311611ea1575b505050505081525050905092915050565b606080611ed1614c8e565b6001600160a01b0384166000908152600460209081526040918290208251815460c09381028201840190945260a081018481529093919284928491840182828015611f4557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611f27575b5050505050815260200160018201805480602002602001604051908101604052809291908181526020018280548015611f9d57602002820191906000526020600020905b815481526020019060010190808311611f89575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015611ff557602002820191906000526020600020905b815481526020019060010190808311611fe1575b505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561204d57602002820191906000526020600020905b815481526020019060010190808311612039575b50505050508152602001600482018054806020026020016040519081016040528092919081815260200182805480156120a557602002820191906000526020600020905b815481526020019060010190808311612091575b5050509190925250508151519192508190506001600160401b03811180156120cc57600080fd5b506040519080825280602002602001820160405280156120f6578160200160208202803683370190505b5082519450925060005b81811015612188576121698360800151828151811061211b57fe5b6020026020010151610e168560600151848151811061213657fe5b6020026020010151610e168760400151868151811061215157fe5b60200260200101518860200151878151811061149757fe5b84828151811061217557fe5b6020908102919091010152600101612100565b505050915091565b612198614c8e565b6001600160a01b0382166000908152600460209081526040918290208251815460c09381028201840190945260a08101848152909391928492849184018282801561220c57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116121ee575b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561226457602002820191906000526020600020905b815481526020019060010190808311612250575b50505050508152602001600282018054806020026020016040519081016040528092919081815260200182805480156122bc57602002820191906000526020600020905b8154815260200190600101908083116122a8575b505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561231457602002820191906000526020600020905b815481526020019060010190808311612300575b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561236c57602002820191906000526020600020905b815481526020019060010190808311612358575b5050505050815250509050919050565b60066020526000908152604090205481565b6009602090815260009283526040808420909152908252902080546001909101546001600160a01b039091169082565b6123c6614d8e565b6001600160a01b0382166000908152600b6020908152604091829020825181546060938102820184018552938101848152909391928492849184018282801561243857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161241a575b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561236c5760200282019190600052602060002090815481526020019060010190808311612358575050505050815250509050919050565b606080606080306001600160a01b031663245cd1db87876040518363ffffffff1660e01b81526004016124d292919061557d565b60006040518083038186803b1580156124ea57600080fd5b505afa1580156124fe573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261252691908101906152b2565b6001600160a01b038089166000908152600a60209081526040808320938b1683529281529190208351939550919350909161256691839190860190614d29565b50600181015483518082146125a35781810360005b818110156125a05760018086018054808301825560009182526020822001550161257b565b50505b84516060816001600160401b03811180156125bd57600080fd5b506040519080825280602002602001820160405280156125e7578160200160208202803683370190505b50905060005b828110156126435785600101818154811061260457fe5b906000526020600020015487828151811061261b57fe5b60200260200101510382828151811061263057fe5b60209081029190910101526001016125ed565b5095975094955050505050505b9250929050565b61265f6136da565b6001600160a01b0316612670611c00565b6001600160a01b0316146126965760405162461bcd60e51b81526004016105f8906158fc565b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516126c892919061568c565b60405180910390a2600180546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0381166000908152600760205260409020606090610e9b90614576565b61271f81614582565b1561115957600154604051636e0cf42160e11b81526001600160a01b039091169063dc19e84290612754908490600401615569565b60206040518083038186803b15801561276c57600080fd5b505afa158015612780573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127a49190615344565b6127c05760405162461bcd60e51b81526004016105f890615889565b806001600160a01b0316635468d6d76040518163ffffffff1660e01b815260040160206040518083038186803b1580156127f957600080fd5b505afa15801561280d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128319190615344565b61284d5760405162461bcd60e51b81526004016105f890615981565b60405163245cd1db60e01b81526060908190309063245cd1db90612877908690339060040161557d565b60006040518083038186803b15801561288f57600080fd5b505afa1580156128a3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526128cb91908101906152b2565b6001600160a01b0385166000908152600a6020908152604080832033845282529091208351939550919350909161290791839190860190614d29565b50600181015483518082146129445781810360005b818110156129415760018086018054808301825560009182526020822001550161291c565b50505b600061294f33614609565b61295957336129ca565b336001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561299257600080fd5b505afa1580156129a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129ca9190615058565b905060005b8651811015612af95760008560010182815481106129e957fe5b9060005260206000200154878381518110612a0057fe5b602002602001015103905080600014612af057612a4483828a8581518110612a2457fe5b60200260200101516001600160a01b03166136de9092919063ffffffff16565b612a7081876001018481548110612a5757fe5b906000526020600020015461387290919063ffffffff16565b866001018381548110612a7f57fe5b9060005260206000200181905550826001600160a01b0316336001600160a01b03167fcf0b5b5e344fd092a8b2211145583746df8436ec32469680c9d800af50d7b7378a8581518110612ace57fe5b60200260200101518442604051612ae7939291906155b0565b60405180910390a35b506001016129cf565b5050505050505050565b612b0b6136da565b6001600160a01b0316612b1c611c00565b6001600160a01b031614612b425760405162461bcd60e51b81526004016105f8906158fc565b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051612b7492919061568c565b60405180910390a2600280546001600160a01b0319166001600160a01b0392909216919091179055565b3383828114612bbf5760405162461bcd60e51b81526004016105f8906157ef565b600154604051636e0cf42160e11b81526001600160a01b039091169063dc19e84290612bef908590600401615569565b60206040518083038186803b158015612c0757600080fd5b505afa158015612c1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c3f9190615344565b612c5b5760405162461bcd60e51b81526004016105f890615889565b6001600160a01b0380831660009081526009602090815260408083208b8516845290915290208054909116612ce95780546001600160a01b0319166001600160a01b038a811691909117825583166000908152600760205260409020612cc1908a614642565b612ce9576001600160a01b0383166000908152600760205260409020612ce7908a614657565b505b80546001600160a01b031680612d115760405162461bcd60e51b81526004016105f890615823565b612d4986866000818110612d2157fe5b6001600160a01b03881660009081526006602090815260409091205493910201359050613872565b6001600160a01b0385166000908152600660205260409020556060836001600160401b0381118015612d7a57600080fd5b50604051908082528060200260200182016040528015612da4578160200160208202803683370190505b50905060005b84811015612e91576001600160a01b038087166000908152600860209081526040808320938716835292905220541580612e5c576001600160a01b0380881660009081526008602090815260408083209388168352929052208054612e40919084908110612e1457fe5b90600052602060002001548a8a85818110612e2b57fe5b9050602002013561387290919063ffffffff16565b838381518110612e4c57fe5b6020026020010181815250612e87565b888883818110612e6857fe5b90506020020135838381518110612e7b57fe5b60200260200101818152505b5050600101612daa565b506001600160a01b03808616600090815260086020908152604080832093861683529281529190208251612ec792840190614da8565b506001600160a01b038086166000908152600360209081526040808320938616835292905220600184015480612f9f57612eff614def565b6001600160a01b038d168152604080516020808c0282810182019093528b825290918c918c91829185019084908082843760009201829052506020868101958652885460018082018b558a845292829020885160029092020180546001600160a01b0319166001600160a01b039092169190911781559551805188979650612f8e955092860193500190614da8565b505083546001880155506130409050565b6001600160a01b038088166000908152600360209081526040808320938816835292905290812080546000198401908110612fd657fe5b9060005260206000209060020201905060005b600182015481101561303d5761301a8b8b8381811061300457fe5b90506020020135836001018381548110612a5757fe5b82600101828154811061302957fe5b600091825260209091200155600101612fe9565b50505b50505050505050505050505050565b6008602052826000526040600020602052816000526040600020818154811061307457fe5b9060005260206000200160009250925050505481565b61309381614582565b15611159576040516327304dfd60e01b81526000906001600160a01b038316906327304dfd906130c7903390600401615569565b60206040518083038186803b1580156130df57600080fd5b505afa1580156130f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131179190615344565b806131a35750336001600160a01b0316826001600160a01b0316633018205f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561316057600080fd5b505afa158015613174573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131989190615058565b6001600160a01b0316145b90506000826001600160a01b0316635468d6d76040518163ffffffff1660e01b815260040160206040518083038186803b1580156131e057600080fd5b505afa1580156131f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132189190615344565b9050806132375760405162461bcd60e51b81526004016105f890615981565b816132545760405162461bcd60e51b81526004016105f890615958565b604051631bf52ea760e21b815260609081903090636fd4ba9c9061327c908890600401615569565b600060405180830381600087803b15801561329657600080fd5b505af11580156132aa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526132d291908101906152b2565b6001600160a01b0387166000908152600560209081526040808320805460ff19169055600b82529091208351939550919350909161331591839190860190614d29565b50600181015483518082146133525781810360005b8181101561334f5760018086018054808301825560009182526020822001550161332a565b50505b60005b85518110156133fa57600086828151811061336c57fe5b6020026020010151905085828151811061338257fe5b60200260200101516000146133f1576133af8a828885815181106133a257fe5b602002602001015161466c565b6133d58683815181106133be57fe5b6020026020010151866001018481548110612a5757fe5b8560010183815481106133e457fe5b6000918252602090912001555b50600101613355565b505050505050505050565b61340d614c4f565b506001600160a01b03166000908152600560208181526040928390208351610140810185526001820154610100820190815260028301546101208301526080808301918252865180880188526003850154815260048501548187015260a0808501919091528751808901895296850154875260068501548787015260c080850197909752875180890189526007860154815260088601548188015260e0850152918352865180870188526009850154818301908152600a86015482850152815287518089018952600b8601548152600c860154818801528187015287518089018952600d8601548152600e860154818801528189015287518089018952600f86015481526010860154818801526060828101919091528487019190915287518088018952601186015481840190815260128701548286015281528851808a018a5260138701548152601487015481890152818801528851808a018a5260158701548152601687015481890152818a01528851808a018a52601787015481526018870154818901528183015284890152875196870188526019850154918701918252601a85015492870192909252855285518087018752601b8401548152601c840154818601528585015285518087018752601d8401548152601e84015481860152858701528551808701909652601f83015486529183015492850192909252828101939093529182015290565b6136226136da565b6001600160a01b0316613633611c00565b6001600160a01b0316146136595760405162461bcd60e51b81526004016105f8906158fc565b6001600160a01b03811661367f5760405162461bcd60e51b81526004016105f890615747565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b6106158363a9059cbb60e01b84846040516024016136fd929190615597565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526149c3565b6000610e9b82614aae565b600061374b8383614ab2565b9392505050565b805151600090831080159061376b575060208201515183105b1561377c5750805160200151610e9b565b6020820151518310801590613795575060408201515183105b156137a857506020808201510151610e9b565b60408201515183108015906137c1575060608201515183105b156137d55750604081015160200151610e9b565b60608201515183106137f05750606081015160200151610e9b565b50600092915050565b60008261380857506000610e9b565b8282028284828161381557fe5b041461374b5760405162461bcd60e51b81526004016105f8906158bb565b600061374b83836040518060400160405280601a815260200179536166654d6174683a206469766973696f6e206279207a65726f60301b815250614ad6565b60008282018381101561374b5760405162461bcd60e51b81526004016105f89061578d565b6001600160a01b03808516600090815260086020908152604080832093871683529290529081205481906138cc57600061390a565b6001600160a01b038087166000908152600860209081526040808320938916835292905290812080549091906138fe57fe5b90600052602060002001545b9050613914614c4f565b506001600160a01b0386166000908152600560208181526040928390208351610140810185526001820154610100820190815260028301546101208301526080808301918252865180880188526003850154815260048501548187015260a0808501919091528751808901895296850154875260068501548787015260c080850197909752875180890189526007860154815260088601548188015260e0850152918352865180870188526009850154818301908152600a86015482850152815287518089018952600b8601548152600c860154818801528187015287518089018952600d8601548152600e860154818801528189015287518089018952600f86015481526010860154818801526060828101919091528487019190915287518088018952601186015481840190815260128701548286015281528851808a018a5260138701548152601487015481890152818801528851808a018a5260158701548152601687015481890152818a01528851808a018a52601787015481526018870154818901528183015284890152875196870188526019850154918701918252601a85015492870192909252855285518087018752601b8401548152601c840154818601528585015285518087018752601d8401548152601e84015481860152858701528551808701909652601f830154865291830154928501929092528281019390935291820152613b27614c8e565b6001600160a01b0388166000908152600460209081526040918290208251815460c09381028201840190945260a081018481529093919284928491840182828015613b9b57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613b7d575b5050505050815260200160018201805480602002602001604051908101604052809291908181526020018280548015613bf357602002820191906000526020600020905b815481526020019060010190808311613bdf575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015613c4b57602002820191906000526020600020905b815481526020019060010190808311613c37575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015613ca357602002820191906000526020600020905b815481526020019060010190808311613c8f575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015613cfb57602002820191906000526020600020905b815481526020019060010190808311613ce7575b50505050508152505090508260001480613d155750805151155b15613d265760009350505050613e16565b6001600160a01b03881660009081526006602052604090205486613d7157613d6a6064610db3613d5a878760000151613752565b85602001518a81518110610d9d57fe5b9450613e01565b8660011415613da057613d6a6064610db3613d90878760200151613752565b85604001518a81518110610d9d57fe5b8660021415613dcf57613d6a6064610db3613dbf878760400151613752565b85606001518a81518110610d9d57fe5b8660031415613e0157613dfe6064610db3613dee878760600151613752565b85608001518a81518110610d9d57fe5b94505b613e0f81610db387876137f9565b9450505050505b949350505050565b613e26614c8e565b613e2e614c8e565b6001600160a01b0383166000908152600460209081526040918290208251815460c09381028201840190945260a081018481529093919284928491840182828015613ea257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613e84575b5050505050815260200160018201805480602002602001604051908101604052809291908181526020018280548015613efa57602002820191906000526020600020905b815481526020019060010190808311613ee6575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015613f5257602002820191906000526020600020905b815481526020019060010190808311613f3e575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015613faa57602002820191906000526020600020905b815481526020019060010190808311613f96575b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561400257602002820191906000526020600020905b815481526020019060010190808311613fee575b505050919092525050815180519085526001600160a01b03861660009081526007602052604081209394509092915061403a82613734565b9050826001600160401b038111801561405257600080fd5b5060405190808252806020026020018201604052801561407c578160200160208202803683370190505b506020860152826001600160401b038111801561409857600080fd5b506040519080825280602002602001820160405280156140c2578160200160208202803683370190505b506040860152826001600160401b03811180156140de57600080fd5b50604051908082528060200260200182016040528015614108578160200160208202803683370190505b506060860152826001600160401b038111801561412457600080fd5b5060405190808252806020026020018201604052801561414e578160200160208202803683370190505b50608086015260005b60048110156142b25760005b848110156142a95760005b838110156142a057826141c5576141a46141948a61418c888561373f565b600086613897565b8960200151848151811061149757fe5b886020015183815181106141b457fe5b602002602001018181525050614298565b8260011415614207576141f76141e78a6141df888561373f565b600186613897565b8960400151848151811061149757fe5b886040015183815181106141b457fe5b8260021415614249576142396142298a614221888561373f565b600286613897565b8960600151848151811061149757fe5b886060015183815181106141b457fe5b82600314156142985761427b61426b8a614263888561373f565b600386613897565b8960800151848151811061149757fe5b8860800151838151811061428b57fe5b6020026020010181815250505b60010161416e565b50600101614163565b50600101614157565b5050505050919050565b600061374b83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250614b0d565b6001600160a01b0384166000908152600460205260408120905b835181101561456e57600084828151811061432f57fe5b60200260200101519050600084838151811061434757fe5b602002602001015190506000806143ba866000018054806020026020016040519081016040528092919081815260200182805480156143af57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311614391575b505050505085614b39565b915091508161444a57508454600180820187556000878152602080822090930180546001600160a01b0319166001600160a01b03881617905581880180548084018255908252838220018190556002880180548084018255908252838220018190556003880180548084018255908252838220018190556004880180549283018155815291822001558454600019015b821561455e57886144885761446883876001018381548110612a5757fe5b86600101828154811061447757fe5b600091825260209091200155614516565b88600114156144b3576144a483876002018381548110612a5757fe5b86600201828154811061447757fe5b88600214156144de576144cf83876003018381548110612a5757fe5b86600301828154811061447757fe5b8860031415614516576144fa83876004018381548110612a5757fe5b86600401828154811061450957fe5b6000918252602090912001555b896001600160a01b03167ff2dc555ffff33c7179f7e35e7fc8a68179aeecb49e12799e8ac2972420613eb98a3387876040516145559493929190615b7f565b60405180910390a25b5050600190920191506143189050565b505050505050565b60608061374b83614b91565b60006001826001600160a01b03166373a9855c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156145bf57600080fd5b505afa1580156145d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145f79190615360565b600181111561460257fe5b1492915050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590613e16575050151592915050565b600061374b836001600160a01b038416614bed565b600061374b836001600160a01b038416614c05565b806146895760405162461bcd60e51b81526004016105f8906157c2565b6060836001600160a01b031663a0e67e2b6040518163ffffffff1660e01b815260040160006040518083038186803b1580156146c457600080fd5b505afa1580156146d8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526147009190810190615280565b90506060846001600160a01b031663309a042c6040518163ffffffff1660e01b815260040160006040518083038186803b15801561473d57600080fd5b505afa158015614751573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526147799190810190615312565b90506000856001600160a01b031663d29986c16040518163ffffffff1660e01b815260040160206040518083038186803b1580156147b657600080fd5b505afa1580156147ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147ee9190615475565b905060005b835181101561496b57600061482385838151811061480d57fe5b60200260200101516001600160a01b0316614609565b6148405784828151811061483357fe5b60200260200101516148c4565b84828151811061484c57fe5b60200260200101516001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561488c57600080fd5b505afa1580156148a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906148c49190615058565b905060006148f284610db38786815181106148db57fe5b60200260200101518a6137f990919063ffffffff16565b90506149086001600160a01b03891683836136de565b816001600160a01b0316896001600160a01b0316336001600160a01b03167f589269304a5775087fef7422dd5076938901ab1fa82e920b6de707864f198e608b8542604051614959939291906155b0565b60405180910390a450506001016147f3565b50856001600160a01b0316336001600160a01b03167f1bf0129823b56213a46996bc874ce50b318995cae2bbdcd2000933d36012547d8787426040516149b3939291906155b0565b60405180910390a3505050505050565b6149d5826001600160a01b0316614609565b6149f15760405162461bcd60e51b81526004016105f8906159fe565b60006060836001600160a01b031683604051614a0d919061554d565b6000604051808303816000865af19150503d8060008114614a4a576040519150601f19603f3d011682016040523d82523d6000602084013e614a4f565b606091505b509150915081614a715760405162461bcd60e51b81526004016105f890615854565b805115614aa85780806020019051810190614a8c9190615344565b614aa85760405162461bcd60e51b81526004016105f8906159b4565b50505050565b5490565b6000826000018281548110614ac357fe5b9060005260206000200154905092915050565b60008183614af75760405162461bcd60e51b81526004016105f891906156bb565b506000838581614b0357fe5b0495945050505050565b60008184841115614b315760405162461bcd60e51b81526004016105f891906156bb565b505050900390565b60008060005b8451811015614b8957836001600160a01b0316858281518110614b5e57fe5b60200260200101516001600160a01b03161415614b815760019250809150614b89565b600101614b3f565b509250929050565b606081600001805480602002602001604051908101604052809291908181526020018280548015614be157602002820191906000526020600020905b815481526020019060010190808311614bcd575b50505050509050919050565b60009081526001919091016020526040902054151590565b6000614c118383614bed565b614c4757508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610e9b565b506000610e9b565b6040518060800160405280614c62614e07565b8152602001614c6f614e07565b8152602001614c7c614e07565b8152602001614c89614e07565b905290565b6040518060a0016040528060608152602001606081526020016060815260200160608152602001606081525090565b60405180610120016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001606081526020016060815260200160608152602001606081525090565b604080518082019091526000808252602082015290565b828054828255906000526020600020908101928215614d7e579160200282015b82811115614d7e57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190614d49565b50614d8a929150614e41565b5090565b604051806040016040528060608152602001606081525090565b828054828255906000526020600020908101928215614de3579160200282015b82811115614de3578251825591602001919060010190614dc8565b50614d8a929150614e60565b60408051808201909152600081526060602082015290565b6040518060800160405280614e1a614e75565b8152602001614e27614e75565b8152602001614e34614e75565b8152602001614c89614e75565b5b80821115614d8a5780546001600160a01b0319168155600101614e42565b5b80821115614d8a5760008155600101614e61565b604051806040016040528060008152602001600081525090565b60008083601f840112614ea0578182fd5b5081356001600160401b03811115614eb6578182fd5b602083019150836020808302850101111561265057600080fd5b600082601f830112614ee0578081fd5b8151614ef3614eee82615bca565b615ba4565b818152915060208083019084810181840286018201871015614f1457600080fd5b60005b84811015614f3c578151614f2a81615c15565b84529282019290820190600101614f17565b505050505092915050565b600082601f830112614f57578081fd5b8151614f65614eee82615bca565b818152915060208083019084810181840286018201871015614f8657600080fd5b60005b84811015614f3c57815184529282019290820190600101614f89565b60006101008284031215614fb7578081fd5b614fc16080615ba4565b9050614fcd838361500b565b8152614fdc836040840161500b565b6020820152614fee836080840161500b565b60408201526150008360c0840161500b565b606082015292915050565b60006040828403121561501c578081fd5b6150266040615ba4565b9050813581526020820135602082015292915050565b60006020828403121561504d578081fd5b813561374b81615c15565b600060208284031215615069578081fd5b815161374b81615c15565b60008060408385031215615086578081fd5b823561509181615c15565b915060208301356150a181615c15565b809150509250929050565b600080600080600080608087890312156150c4578182fd5b86356150cf81615c15565b955060208701356150df81615c15565b945060408701356001600160401b03808211156150fa578384fd5b6151068a838b01614e8f565b9096509450606089013591508082111561511e578384fd5b5061512b89828a01614e8f565b979a9699509497509295939492505050565b600080600060608486031215615151578283fd5b833561515c81615c15565b9250602084013561516c81615c15565b929592945050506040919091013590565b6000806040838503121561518f578182fd5b823561519a81615c15565b915060208301356150a181615c2a565b6000808284036104208112156151be578283fd5b83356151c981615c15565b9250610400601f19820112156151dd578182fd5b506151e86080615ba4565b6151f58560208601614fa5565b8152615205856101208601614fa5565b6020820152615218856102208601614fa5565b604082015261522b856103208601614fa5565b6060820152809150509250929050565b60008060008060008060808789031215615253578384fd5b863561525e81615c15565b95506020870135945060408701356001600160401b03808211156150fa578586fd5b600060208284031215615291578081fd5b81516001600160401b038111156152a6578182fd5b613e1684828501614ed0565b600080604083850312156152c4578182fd5b82516001600160401b03808211156152da578384fd5b6152e686838701614ed0565b935060208501519150808211156152fb578283fd5b5061530885828601614f47565b9150509250929050565b600060208284031215615323578081fd5b81516001600160401b03811115615338578182fd5b613e1684828501614f47565b600060208284031215615355578081fd5b815161374b81615c2a565b600060208284031215615371578081fd5b81516002811061374b578182fd5b600060208284031215615390578081fd5b81516001600160401b03808211156153a6578283fd5b9083019060a082860312156153b9578283fd5b6153c360a0615ba4565b8251828111156153d1578485fd5b6153dd87828601614ed0565b8252506020830151828111156153f1578485fd5b6153fd87828601614f47565b602083015250604083015182811115615414578485fd5b61542087828601614f47565b604083015250606083015182811115615437578485fd5b61544387828601614f47565b60608301525060808301518281111561545a578485fd5b61546687828601614f47565b60808301525095945050505050565b600060208284031215615486578081fd5b5051919050565b6000815180845260208085019450808401835b838110156154c55781516001600160a01b0316875295820195908201906001016154a0565b509495945050505050565b6000815180845260208085019450808401835b838110156154c5578151875295820195908201906001016154e3565b61550a82825161553e565b602081015161551c604084018261553e565b50604081015161552f608084018261553e565b50606081015161061560c08401825b80518252602090810151910152565b6000825161555f818460208701615be9565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b60006020825261374b602083018461548d565b6000604082526155f7604083018561548d565b828103602084015261560981856154d0565b95945050505050565b60208082528251828201819052600091906040908185019080840286018301878501865b8381101561567e57888303603f19018552815180516001600160a01b0316845287015187840187905261566b878501826154d0565b9588019593505090860190600101615636565b509098975050505050505050565b60006020825282602083015282846040840137818301604090810191909152601f909201601f19160101919050565b60006020825282518060208401526156da816040850160208701615be9565b601f01601f19169190910160400192915050565b60208082526012908201527122a9292fa727aa2fa1a7a72a2927a62622a960711b604082015260600190565b6020808252601390820152724552525f4e4f545f4352505f464143544f525960681b604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601b908201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604082015260600190565b6020808252601390820152724552525f494c4c4547414c5f42414c414e434560681b604082015260600190565b6020808252601a908201527908aa4a4bea89e968a9cbe988a9c8ea890be9c9ea8be9a82a886960331b604082015260600190565b6020808252601790820152764552525f494e56414c49445f4b4f4c5f4144445245535360481b604082015260600190565b6020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b6020808252601890820152774552525f494e56414c49445f504f4f4c5f4144445245535360401b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600d908201526c11549497d21054d7d4d1551151609a1b604082015260600190565b6020808252600f908201526e22a9292fa727aa2fa6a0a720a3a2a960891b604082015260600190565b60208082526019908201527811549497d393d517d0d3d354131155115117d0d3d3131150d5603a1b604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b6020808252601f908201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604082015260600190565b600060208252825160406020840152615a51606084018261548d565b90506020840151601f1984830301604085015261560982826154d0565b600061040082019050615a828284516154ff565b6020830151615a956101008401826154ff565b506040830151615aa96102008401826154ff565b506060830151615abd6103008401826154ff565b5092915050565b600060208252825160a06020840152615ae060c084018261548d565b90506020840151601f1980858403016040860152615afe83836154d0565b92506040860151915080858403016060860152615b1b83836154d0565b92506060860151915080858403016080860152615b3883836154d0565b925060808601519150808584030160a08601525061560982826154d0565b81516001600160a01b031681526020918201519181019190915260400190565b90815260200190565b9384526001600160a01b03928316602085015291166040830152606082015260800190565b6040518181016001600160401b0381118282101715615bc257600080fd5b604052919050565b60006001600160401b03821115615bdf578081fd5b5060209081020190565b60005b83811015615c04578181015183820152602001615bec565b83811115614aa85750506000910152565b6001600160a01b038116811461115957600080fd5b801515811461115957600080fdfea2646970667358221220bc0166cc398cc514c90cef6ad7de63077f87d82466357c184eaef0479b27a4bb64736f6c634300060c0033",
  "libraries": {},
  "devdoc": {
    "author": "Desyn Labs",
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Vault managerFee",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 18199,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9762,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "crpFactory",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ICRPFactory)9663"
      },
      {
        "astId": 9764,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "vaultAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 9814,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "kolUserInfo",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_array(t_struct(KolUserInfo)9795_storage)dyn_storage))"
      },
      {
        "astId": 9818,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "poolsTokens",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(PoolTokens)9780_storage)"
      },
      {
        "astId": 9822,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "poolsStatus",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(PoolStatus)9789_storage)"
      },
      {
        "astId": 9826,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "poolInviteTotal",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9830,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "kolsList",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_struct(AddressSet)15860_storage)"
      },
      {
        "astId": 9837,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "kolTotalAmountList",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_address,t_array(t_uint256)dyn_storage))"
      },
      {
        "astId": 9843,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "userKolList",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(UserKolInfo)9800_storage))"
      },
      {
        "astId": 9849,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "kolHasClaimed",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(ClaimTokens)9807_storage))"
      },
      {
        "astId": 9853,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "manageHasClaimed",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_struct(ClaimTokens)9807_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(KolUserInfo)9795_storage)dyn_storage": {
        "base": "t_struct(KolUserInfo)9795_storage",
        "encoding": "dynamic_array",
        "label": "struct UserVault.KolUserInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ICRPFactory)9663": {
        "encoding": "inplace",
        "label": "contract ICRPFactory",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(KolUserInfo)9795_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct UserVault.KolUserInfo[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(KolUserInfo)9795_storage)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_address,t_array(t_struct(KolUserInfo)9795_storage)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct UserVault.KolUserInfo[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_struct(KolUserInfo)9795_storage)dyn_storage)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_array(t_uint256)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(ClaimTokens)9807_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct UserVault.ClaimTokens))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(ClaimTokens)9807_storage)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(UserKolInfo)9800_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct UserVault.UserKolInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserKolInfo)9800_storage)"
      },
      "t_mapping(t_address,t_struct(AddressSet)15860_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)15860_storage"
      },
      "t_mapping(t_address,t_struct(ClaimTokens)9807_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct UserVault.ClaimTokens)",
        "numberOfBytes": "32",
        "value": "t_struct(ClaimTokens)9807_storage"
      },
      "t_mapping(t_address,t_struct(PoolStatus)9789_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct UserVault.PoolStatus)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolStatus)9789_storage"
      },
      "t_mapping(t_address,t_struct(PoolTokens)9780_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct UserVault.PoolTokens)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolTokens)9780_storage"
      },
      "t_mapping(t_address,t_struct(UserKolInfo)9800_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct UserVault.UserKolInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserKolInfo)9800_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)15860_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 15859,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)15673_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ClaimTokens)9807_storage": {
        "encoding": "inplace",
        "label": "struct UserVault.ClaimTokens",
        "members": [
          {
            "astId": 9803,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "tokens",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 9806,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "amounts",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(KolPoolParams)16676_storage": {
        "encoding": "inplace",
        "label": "struct SmartPoolManager.KolPoolParams",
        "members": [
          {
            "astId": 16669,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "managerFee",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(feeParams)16667_storage"
          },
          {
            "astId": 16671,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "issueFee",
            "offset": 0,
            "slot": "8",
            "type": "t_struct(feeParams)16667_storage"
          },
          {
            "astId": 16673,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "redeemFee",
            "offset": 0,
            "slot": "16",
            "type": "t_struct(feeParams)16667_storage"
          },
          {
            "astId": 16675,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "perfermanceFee",
            "offset": 0,
            "slot": "24",
            "type": "t_struct(feeParams)16667_storage"
          }
        ],
        "numberOfBytes": "1024"
      },
      "t_struct(KolUserInfo)9795_storage": {
        "encoding": "inplace",
        "label": "struct UserVault.KolUserInfo",
        "members": [
          {
            "astId": 9791,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "userAdr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 9794,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "userAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PoolStatus)9789_storage": {
        "encoding": "inplace",
        "label": "struct UserVault.PoolStatus",
        "members": [
          {
            "astId": 9782,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "couldManagerClaim",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 9784,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "isBlackList",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 9786,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "isSetParams",
            "offset": 2,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 9788,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "kolPoolConfig",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(KolPoolParams)16676_storage"
          }
        ],
        "numberOfBytes": "1056"
      },
      "t_struct(PoolTokens)9780_storage": {
        "encoding": "inplace",
        "label": "struct UserVault.PoolTokens",
        "members": [
          {
            "astId": 9767,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "tokenList",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 9770,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "managerAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 9773,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "issueAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 9776,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "redeemAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 9779,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "perfermanceAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Set)15673_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 15668,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 15672,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UserKolInfo)9800_storage": {
        "encoding": "inplace",
        "label": "struct UserVault.UserKolInfo",
        "members": [
          {
            "astId": 9797,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "kol",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 9799,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "index",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(feeParams)16667_storage": {
        "encoding": "inplace",
        "label": "struct SmartPoolManager.feeParams",
        "members": [
          {
            "astId": 16660,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "firstLevel",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(levelParams)16658_storage"
          },
          {
            "astId": 16662,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "secondLevel",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(levelParams)16658_storage"
          },
          {
            "astId": 16664,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "thirdLevel",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(levelParams)16658_storage"
          },
          {
            "astId": 16666,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "fourLevel",
            "offset": 0,
            "slot": "6",
            "type": "t_struct(levelParams)16658_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(levelParams)16658_storage": {
        "encoding": "inplace",
        "label": "struct SmartPoolManager.levelParams",
        "members": [
          {
            "astId": 16655,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "level",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 16657,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "ratio",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}