{
  "address": "0x51a3295d374418d9E44F3D08420b1BeaF3f0fb66",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IConfigurableRightsPool",
          "name": "crp",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "sort",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "token",
          "type": "address[]"
        }
      ],
      "name": "addTokenToWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userVault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "claimKolReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IConfigurableRightsPool",
          "name": "crp",
          "type": "address"
        }
      ],
      "name": "claimManagementFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userVault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "claimManagersReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract FactoryActions",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "weights",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "swapFee",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "finalize",
          "type": "bool"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "contract LiquidityPoolActions",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICRPFactory",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "contract FactoryActions",
          "name": "coreFactory",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "poolTokenSymbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "poolTokenName",
              "type": "string"
            },
            {
              "internalType": "address[]",
              "name": "constituentTokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenBalances",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenWeights",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "swapFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "managerFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "redeemFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "issueFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "perfermanceFee",
              "type": "uint256"
            },
            {
              "internalType": "enum IConfigurableRightsPool.Etypes",
              "name": "etype",
              "type": "uint8"
            }
          ],
          "internalType": "struct IConfigurableRightsPool.PoolParams",
          "name": "poolParams",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "initialSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collectPeriod",
              "type": "uint256"
            },
            {
              "internalType": "enum IConfigurableRightsPool.Period",
              "name": "period",
              "type": "uint8"
            }
          ],
          "internalType": "struct IConfigurableRightsPool.CrpParams",
          "name": "crpParams",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "canPauseSwapping",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canChangeSwapFee",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canChangeWeights",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canAddRemoveTokens",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canWhitelistLPs",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canTokenWhiteLists",
              "type": "bool"
            }
          ],
          "internalType": "struct RightsManager.Rights",
          "name": "rights",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "firstLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "secondLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "thirdLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "fourLevel",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SmartPoolManager.feeParams",
              "name": "managerFee",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "firstLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "secondLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "thirdLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "fourLevel",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SmartPoolManager.feeParams",
              "name": "issueFee",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "firstLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "secondLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "thirdLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "fourLevel",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SmartPoolManager.feeParams",
              "name": "redeemFee",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "firstLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "secondLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "thirdLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "fourLevel",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SmartPoolManager.feeParams",
              "name": "perfermanceFee",
              "type": "tuple"
            }
          ],
          "internalType": "struct SmartPoolManager.KolPoolParams",
          "name": "kolPoolParams",
          "type": "tuple"
        },
        {
          "internalType": "address[]",
          "name": "owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ownerPercentage",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "bspFloor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bspCap",
              "type": "uint256"
            }
          ],
          "internalType": "struct IConfigurableRightsPool.PoolTokenRange",
          "name": "tokenRange",
          "type": "tuple"
        }
      ],
      "name": "createSmartPool",
      "outputs": [
        {
          "internalType": "contract IConfigurableRightsPool",
          "name": "crp",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IConfigurableRightsPool",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "poolAmountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "minAmountsOut",
          "type": "uint256[]"
        }
      ],
      "name": "exitPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract LiquidityPoolActions",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "finalize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract LiquidityPoolActions",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "poolAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "maxAmountsIn",
          "type": "uint256[]"
        }
      ],
      "name": "joinPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IConfigurableRightsPool",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "poolAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "maxAmountsIn",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "kol",
          "type": "address"
        }
      ],
      "name": "joinSmartPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IConfigurableRightsPool",
          "name": "crp",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deltaWeight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmountOut",
          "type": "uint256"
        }
      ],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AbstractPool",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "removeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IConfigurableRightsPool",
          "name": "crp",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        }
      ],
      "name": "removeWhitelistedLiquidityProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AbstractPool",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_ownerPercentage",
          "type": "uint256"
        }
      ],
      "name": "setAddAdminList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IConfigurableRightsPool",
          "name": "crp",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newCap",
          "type": "uint256"
        }
      ],
      "name": "setCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AbstractPool",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newController",
          "type": "address"
        }
      ],
      "name": "setController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AbstractPool",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "publicSwap",
          "type": "bool"
        }
      ],
      "name": "setPublicSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AbstractPool",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "setSwapFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract LiquidityPoolActions",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "denorms",
          "type": "uint256[]"
        }
      ],
      "name": "setTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IConfigurableRightsPool",
          "name": "crp",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        }
      ],
      "name": "whitelistLiquidityProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9e7f44d1db503d91b1ac14a421f96b67823a64f3fa8d7edee8669b959d966c46",
  "receipt": {
    "to": null,
    "from": "0x595b85b4A418e3B8df897D02F5BD49167D00862F",
    "contractAddress": "0x51a3295d374418d9E44F3D08420b1BeaF3f0fb66",
    "transactionIndex": 0,
    "gasUsed": "2825374",
    "logsBloom": "0x
    "blockHash": "0xb31a522487441c4819fa18dafbeed22231f24d3247114b2df4d53e298d1e4c43",
    "transactionHash": "0x9e7f44d1db503d91b1ac14a421f96b67823a64f3fa8d7edee8669b959d966c46",
    "logs": [],
    "blockNumber": 8162028,
    "cumulativeGasUsed": "2825374",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f3f40e75f34851262c6dcc334fe9a5d7",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IConfigurableRightsPool\",\"name\":\"crp\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"sort\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"token\",\"type\":\"address[]\"}],\"name\":\"addTokenToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"claimKolReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConfigurableRightsPool\",\"name\":\"crp\",\"type\":\"address\"}],\"name\":\"claimManagementFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"claimManagersReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FactoryActions\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"finalize\",\"type\":\"bool\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"contract LiquidityPoolActions\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICRPFactory\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"contract FactoryActions\",\"name\":\"coreFactory\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"poolTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"poolTokenName\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"constituentTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenBalances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenWeights\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"managerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"issueFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perfermanceFee\",\"type\":\"uint256\"},{\"internalType\":\"enum IConfigurableRightsPool.Etypes\",\"name\":\"etype\",\"type\":\"uint8\"}],\"internalType\":\"struct IConfigurableRightsPool.PoolParams\",\"name\":\"poolParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collectPeriod\",\"type\":\"uint256\"},{\"internalType\":\"enum IConfigurableRightsPool.Period\",\"name\":\"period\",\"type\":\"uint8\"}],\"internalType\":\"struct IConfigurableRightsPool.CrpParams\",\"name\":\"crpParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"canPauseSwapping\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canChangeSwapFee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canChangeWeights\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canAddRemoveTokens\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canWhitelistLPs\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canTokenWhiteLists\",\"type\":\"bool\"}],\"internalType\":\"struct RightsManager.Rights\",\"name\":\"rights\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"managerFee\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"issueFee\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"redeemFee\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"perfermanceFee\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.KolPoolParams\",\"name\":\"kolPoolParams\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ownerPercentage\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"bspFloor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bspCap\",\"type\":\"uint256\"}],\"internalType\":\"struct IConfigurableRightsPool.PoolTokenRange\",\"name\":\"tokenRange\",\"type\":\"tuple\"}],\"name\":\"createSmartPool\",\"outputs\":[{\"internalType\":\"contract IConfigurableRightsPool\",\"name\":\"crp\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConfigurableRightsPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsOut\",\"type\":\"uint256[]\"}],\"name\":\"exitPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract LiquidityPoolActions\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract LiquidityPoolActions\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"maxAmountsIn\",\"type\":\"uint256[]\"}],\"name\":\"joinPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConfigurableRightsPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"maxAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"kol\",\"type\":\"address\"}],\"name\":\"joinSmartPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConfigurableRightsPool\",\"name\":\"crp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deltaWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"}],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AbstractPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConfigurableRightsPool\",\"name\":\"crp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"removeWhitelistedLiquidityProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AbstractPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ownerPercentage\",\"type\":\"uint256\"}],\"name\":\"setAddAdminList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConfigurableRightsPool\",\"name\":\"crp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newCap\",\"type\":\"uint256\"}],\"name\":\"setCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AbstractPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AbstractPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"publicSwap\",\"type\":\"bool\"}],\"name\":\"setPublicSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AbstractPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setSwapFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract LiquidityPoolActions\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"denorms\",\"type\":\"uint256[]\"}],\"name\":\"setTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConfigurableRightsPool\",\"name\":\"crp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"whitelistLiquidityProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/deploy/Actions.sol\":\"Actions\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"contracts/deploy/Actions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\npragma experimental ABIEncoderV2;\\nimport {RightsManager} from \\\"../libraries/RightsManager.sol\\\";\\nimport {SmartPoolManager} from \\\"../libraries/SmartPoolManager.sol\\\";\\n\\nabstract contract ERC20 {\\n    function approve(address spender, uint amount) external virtual returns (bool);\\n\\n    function transfer(address dst, uint amt) external virtual returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint amount\\n    ) external virtual returns (bool);\\n\\n    function balanceOf(address whom) external view virtual returns (uint);\\n\\n    function allowance(address, address) external view virtual returns (uint);\\n}\\n\\nabstract contract DesynOwnable {\\n    function setController(address controller) external virtual;\\n    function setAddAdminList(address newOwner, uint _ownerPercentage) external virtual;\\n    function removeOwner(address owner) external virtual;\\n}\\n\\nabstract contract AbstractPool is ERC20, DesynOwnable {\\n    function setSwapFee(uint swapFee) external virtual;\\n\\n    function setPublicSwap(bool public_) external virtual;\\n\\n    function joinPool(\\n        uint poolAmountOut,\\n        uint[] calldata maxAmountsIn,\\n        address kol\\n    ) external virtual;\\n\\n    function exitPool(uint poolAmountIn, uint[] calldata minAmountsOut) external virtual;\\n}\\n\\nabstract contract LiquidityPoolActions is AbstractPool {\\n    function finalize() external virtual;\\n\\n    function bind(\\n        address token,\\n        uint balance,\\n        uint denorm\\n    ) external virtual;\\n\\n    function rebind(\\n        address token,\\n        uint balance,\\n        uint denorm\\n    ) external virtual;\\n\\n    function unbind(address token) external virtual;\\n\\n    function isBound(address t) external view virtual returns (bool);\\n\\n    function getCurrentTokens() external view virtual returns (address[] memory);\\n\\n    function getFinalTokens() external view virtual returns (address[] memory);\\n\\n    function getBalance(address token) external view virtual returns (uint);\\n}\\n\\nabstract contract FactoryActions {\\n    function newLiquidityPool() external virtual returns (LiquidityPoolActions);\\n}\\n\\nabstract contract IConfigurableRightsPool is AbstractPool {\\n    enum Etypes {\\n        OPENED,\\n        CLOSED\\n    }\\n    enum Period {\\n        HALF,\\n        ONE,\\n        TWO\\n    }\\n\\n    struct PoolTokenRange {\\n        uint bspFloor;\\n        uint bspCap;\\n    }\\n\\n    struct PoolParams {\\n        string poolTokenSymbol;\\n        string poolTokenName;\\n        address[] constituentTokens;\\n        uint[] tokenBalances;\\n        uint[] tokenWeights;\\n        uint swapFee;\\n        uint managerFee;\\n        uint redeemFee;\\n        uint issueFee;\\n        uint perfermanceFee;\\n        Etypes etype;\\n    }\\n\\n    struct CrpParams {\\n        uint initialSupply;\\n        uint collectPeriod;\\n        Period period;\\n    }\\n\\n    function createPool(\\n        uint initialSupply,\\n        uint collectPeriod,\\n        Period period,\\n        PoolTokenRange memory tokenRange\\n    ) external virtual;\\n\\n    function createPool(uint initialSupply) external virtual;\\n\\n    function setCap(uint newCap) external virtual;\\n\\n    function rebalance(\\n        address tokenA,\\n        address tokenB,\\n        uint deltaWeight,\\n        uint minAmountOut\\n    ) external virtual;\\n\\n    function commitAddToken(\\n        address token,\\n        uint balance,\\n        uint denormalizedWeight\\n    ) external virtual;\\n\\n    function applyAddToken() external virtual;\\n\\n    function whitelistLiquidityProvider(address provider) external virtual;\\n\\n    function removeWhitelistedLiquidityProvider(address provider) external virtual;\\n\\n    function bPool() external view virtual returns (LiquidityPoolActions);\\n\\n    function addTokenToWhitelist(uint[] memory sort, address[] memory token) external virtual;\\n    function claimManagerFee() external virtual;\\n}\\n\\nabstract contract ICRPFactory {\\n    function newCrp(\\n        address factoryAddress,\\n        IConfigurableRightsPool.PoolParams calldata params,\\n        RightsManager.Rights calldata rights,\\n        SmartPoolManager.KolPoolParams calldata kolPoolParams,\\n        address[] memory owners,\\n        uint[] memory ownerPercentage\\n    ) external virtual returns (IConfigurableRightsPool);\\n}\\n\\nabstract contract IUserVault {\\n    function kolClaim(address pool) external virtual;\\n\\n    function managerClaim(address pool) external virtual;\\n}\\n\\n/********************************** WARNING **********************************/\\n//                                                                           //\\n// This contract is only meant to be used in conjunction with ds-proxy.      //\\n// Calling this contract directly will lead to loss of funds.                //\\n//                                                                           //\\n/********************************** WARNING **********************************/\\n\\ncontract Actions {\\n    // --- Pool Creation ---\\n\\n    function create(\\n        FactoryActions factory,\\n        address[] calldata tokens,\\n        uint[] calldata balances,\\n        uint[] calldata weights,\\n        uint swapFee,\\n        bool finalize\\n    ) external returns (LiquidityPoolActions pool) {\\n        require(tokens.length == balances.length, \\\"ERR_LENGTH_MISMATCH\\\");\\n        require(tokens.length == weights.length, \\\"ERR_LENGTH_MISMATCH\\\");\\n\\n        pool = factory.newLiquidityPool();\\n        pool.setSwapFee(swapFee);\\n\\n        for (uint i = 0; i < tokens.length; i++) {\\n            ERC20 token = ERC20(tokens[i]);\\n            require(token.transferFrom(msg.sender, address(this), balances[i]), \\\"ERR_TRANSFER_FAILED\\\");\\n            _safeApprove(token, address(pool), balances[i]);\\n            pool.bind(tokens[i], balances[i], weights[i]);\\n        }\\n\\n        if (finalize) {\\n            pool.finalize();\\n            require(pool.transfer(msg.sender, pool.balanceOf(address(this))), \\\"ERR_TRANSFER_FAILED\\\");\\n        } else {\\n            pool.setPublicSwap(true);\\n        }\\n    }\\n\\n    function createSmartPool(\\n        ICRPFactory factory,\\n        FactoryActions coreFactory,\\n        IConfigurableRightsPool.PoolParams calldata poolParams,\\n        IConfigurableRightsPool.CrpParams calldata crpParams,\\n        RightsManager.Rights calldata rights,\\n        SmartPoolManager.KolPoolParams calldata kolPoolParams,\\n        address[] memory owners,\\n        uint[] memory ownerPercentage,\\n        IConfigurableRightsPool.PoolTokenRange memory tokenRange\\n    ) external returns (IConfigurableRightsPool crp) {\\n        require(poolParams.constituentTokens.length == poolParams.tokenBalances.length, \\\"ERR_LENGTH_MISMATCH\\\");\\n        require(poolParams.constituentTokens.length == poolParams.tokenWeights.length, \\\"ERR_LENGTH_MISMATCH\\\");\\n\\n        crp = factory.newCrp(address(coreFactory), poolParams, rights, kolPoolParams, owners, ownerPercentage);\\n        for (uint i = 0; i < poolParams.constituentTokens.length; i++) {\\n            ERC20 token = ERC20(poolParams.constituentTokens[i]);\\n            require(token.transferFrom(msg.sender, address(this), poolParams.tokenBalances[i]), \\\"ERR_TRANSFER_FAILED\\\");\\n            _safeApprove(token, address(crp), poolParams.tokenBalances[i]);\\n        }\\n\\n        crp.createPool(crpParams.initialSupply, crpParams.collectPeriod, crpParams.period, tokenRange);\\n        require(crp.transfer(msg.sender, crpParams.initialSupply), \\\"ERR_TRANSFER_FAILED\\\");\\n        // DSProxy instance keeps pool ownership to enable management\\n    }\\n\\n    // --- Joins ---\\n\\n    function joinPool(\\n        LiquidityPoolActions pool,\\n        uint poolAmountOut,\\n        uint[] calldata maxAmountsIn\\n    ) external {\\n        address[] memory tokens = pool.getFinalTokens();\\n        _join(pool, tokens, poolAmountOut, maxAmountsIn, msg.sender);\\n    }\\n\\n    function joinSmartPool(\\n        IConfigurableRightsPool pool,\\n        uint poolAmountOut,\\n        uint[] calldata maxAmountsIn,\\n        address kol\\n    ) external {\\n        address[] memory tokens = pool.bPool().getCurrentTokens();\\n        _join(pool, tokens, poolAmountOut, maxAmountsIn, kol);\\n    }\\n\\n    function exitPool(\\n        IConfigurableRightsPool pool,\\n        uint poolAmountIn,\\n        uint[] memory minAmountsOut\\n    ) external {\\n        address[] memory tokens = pool.bPool().getCurrentTokens();\\n        _exit(pool, poolAmountIn, minAmountsOut, tokens);\\n    }\\n\\n    // --- Pool management (common) ---\\n\\n    function setPublicSwap(AbstractPool pool, bool publicSwap) external {\\n        pool.setPublicSwap(publicSwap);\\n    }\\n\\n    function setSwapFee(AbstractPool pool, uint newFee) external {\\n        pool.setSwapFee(newFee);\\n    }\\n\\n    function setController(AbstractPool pool, address newController) external {\\n        pool.setController(newController);\\n    }\\n\\n    function setAddAdminList(AbstractPool pool, address newOwner, uint _ownerPercentage) public {\\n        pool.setAddAdminList(newOwner, _ownerPercentage);\\n    }\\n\\n    function removeOwner(AbstractPool pool, address owner) public {\\n       pool.removeOwner(owner);\\n    }\\n\\n    // --- Private pool management ---\\n\\n    function setTokens(\\n        LiquidityPoolActions pool,\\n        address[] calldata tokens,\\n        uint[] calldata balances,\\n        uint[] calldata denorms\\n    ) external {\\n        require(tokens.length == balances.length, \\\"ERR_LENGTH_MISMATCH\\\");\\n        require(tokens.length == denorms.length, \\\"ERR_LENGTH_MISMATCH\\\");\\n\\n        for (uint i = 0; i < tokens.length; i++) {\\n            ERC20 token = ERC20(tokens[i]);\\n            if (pool.isBound(tokens[i])) {\\n                if (balances[i] > pool.getBalance(tokens[i])) {\\n                    require(token.transferFrom(msg.sender, address(this), balances[i] - pool.getBalance(tokens[i])), \\\"ERR_TRANSFER_FAILED\\\");\\n                    _safeApprove(token, address(pool), balances[i] - pool.getBalance(tokens[i]));\\n                }\\n                if (balances[i] > 10**6) {\\n                    pool.rebind(tokens[i], balances[i], denorms[i]);\\n                } else {\\n                    pool.unbind(tokens[i]);\\n                }\\n            } else {\\n                require(token.transferFrom(msg.sender, address(this), balances[i]), \\\"ERR_TRANSFER_FAILED\\\");\\n                _safeApprove(token, address(pool), balances[i]);\\n                pool.bind(tokens[i], balances[i], denorms[i]);\\n            }\\n\\n            if (token.balanceOf(address(this)) > 0) {\\n                require(token.transfer(msg.sender, token.balanceOf(address(this))), \\\"ERR_TRANSFER_FAILED\\\");\\n            }\\n        }\\n    }\\n\\n    function finalize(LiquidityPoolActions pool) external {\\n        pool.finalize();\\n        require(pool.transfer(msg.sender, pool.balanceOf(address(this))), \\\"ERR_TRANSFER_FAILED\\\");\\n    }\\n\\n    // --- Smart pool management ---\\n\\n    function rebalance(\\n        IConfigurableRightsPool crp,\\n        address tokenA,\\n        address tokenB,\\n        uint deltaWeight,\\n        uint minAmountOut\\n    ) external {\\n        crp.rebalance(tokenA, tokenB, deltaWeight, minAmountOut);\\n    }\\n\\n    function setCap(IConfigurableRightsPool crp, uint newCap) external {\\n        crp.setCap(newCap);\\n    }\\n\\n    function whitelistLiquidityProvider(IConfigurableRightsPool crp, address provider) external {\\n        crp.whitelistLiquidityProvider(provider);\\n    }\\n\\n    function removeWhitelistedLiquidityProvider(IConfigurableRightsPool crp, address provider) external {\\n        crp.removeWhitelistedLiquidityProvider(provider);\\n    }\\n\\n    function addTokenToWhitelist(IConfigurableRightsPool crp, uint[] memory sort, address[] memory token) public {\\n        crp.addTokenToWhitelist(sort, token);\\n    }\\n\\n    function claimManagementFee(IConfigurableRightsPool crp) public {\\n        crp.claimManagerFee();\\n    }\\n    // --- Internals ---\\n\\n    function _safeApprove(\\n        ERC20 token,\\n        address spender,\\n        uint amount\\n    ) internal {\\n        if (token.allowance(address(this), spender) > 0) {\\n            token.approve(spender, 0);\\n        }\\n        token.approve(spender, amount);\\n    }\\n\\n    function _join(\\n        AbstractPool pool,\\n        address[] memory tokens,\\n        uint poolAmountOut,\\n        uint[] memory maxAmountsIn,\\n        address kol\\n    ) internal {\\n        require(maxAmountsIn.length == tokens.length, \\\"ERR_LENGTH_MISMATCH\\\");\\n\\n        for (uint i = 0; i < tokens.length; i++) {\\n            ERC20 token = ERC20(tokens[i]);\\n            require(token.transferFrom(msg.sender, address(this), maxAmountsIn[i]), \\\"ERR_TRANSFER_FAILED\\\");\\n            _safeApprove(token, address(pool), maxAmountsIn[i]);\\n        }\\n        pool.joinPool(poolAmountOut, maxAmountsIn, kol);\\n        for (uint i = 0; i < tokens.length; i++) {\\n            ERC20 token = ERC20(tokens[i]);\\n            if (token.balanceOf(address(this)) > 0) {\\n                require(token.transfer(msg.sender, token.balanceOf(address(this))), \\\"ERR_TRANSFER_FAILED\\\");\\n            }\\n        }\\n        require(pool.transfer(msg.sender, pool.balanceOf(address(this))), \\\"ERR_TRANSFER_FAILED\\\");\\n    }\\n\\n    function _exit(\\n        AbstractPool pool,\\n        uint poolAmountIn,\\n        uint[] memory minAmountsOut,\\n        address[] memory tokens\\n    ) internal {\\n        uint bal = pool.balanceOf(msg.sender);\\n        require(pool.transferFrom(msg.sender, address(this), bal), \\\"ERR_TRANSFER_FAILED\\\");\\n        _safeApprove(pool, address(pool), bal);\\n\\n        pool.exitPool(poolAmountIn, minAmountsOut);\\n\\n        for (uint i = 0; i < tokens.length; i++) {\\n            ERC20 token = ERC20(tokens[i]);\\n            if (token.balanceOf(address(this)) > 0) {\\n                require(token.transfer(msg.sender, token.balanceOf(address(this))), \\\"ERR_TRANSFER_FAILED\\\");\\n            }\\n        }\\n\\n        require(pool.transfer(msg.sender, pool.balanceOf(address(this))), \\\"ERR_TRANSFER_FAILED\\\");\\n    }\\n\\n    function claimKolReward(address _userVault, address pool) public {\\n        IUserVault(_userVault).kolClaim(pool);\\n    }\\n\\n    function claimManagersReward(address _userVault, address pool) public {\\n        IUserVault(_userVault).managerClaim(pool);\\n    }\\n}\\n\",\"keccak256\":\"0xa598bf38ad75df8ea4010f252cbfa8e3626edd4d4bb80551e69b8e369e762ad7\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IBFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\nimport \\\"../libraries/SmartPoolManager.sol\\\";\\n\\ninterface IBPool {\\n    function rebind(\\n        address token,\\n        uint balance,\\n        uint denorm\\n    ) external;\\n\\n    function rebindSmart(\\n        address tokenA,\\n        address tokenB,\\n        uint deltaWeight,\\n        uint deltaBalance,\\n        bool isSoldout,\\n        uint minAmountOut\\n    ) external;\\n\\n    function execute(\\n        address _target,\\n        uint _value,\\n        bytes calldata _data\\n    ) external returns (bytes memory _returnValue);\\n\\n    function bind(\\n        address token,\\n        uint balance,\\n        uint denorm\\n    ) external;\\n\\n    function unbind(address token) external;\\n\\n    function unbindPure(address token) external;\\n\\n    function isBound(address token) external view returns (bool);\\n\\n    function getBalance(address token) external view returns (uint);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function getSwapFee() external view returns (uint);\\n\\n    function isPublicSwap() external view returns (bool);\\n\\n    function getDenormalizedWeight(address token) external view returns (uint);\\n\\n    function getTotalDenormalizedWeight() external view returns (uint);\\n\\n    function EXIT_FEE() external view returns (uint);\\n\\n    function getCurrentTokens() external view returns (address[] memory tokens);\\n\\n    function setController(address owner) external;\\n}\\n\\ninterface IBFactory {\\n    function newLiquidityPool() external returns (IBPool);\\n\\n    function setBLabs(address b) external;\\n\\n    function collect(IBPool pool) external;\\n\\n    function isBPool(address b) external view returns (bool);\\n\\n    function getBLabs() external view returns (address);\\n\\n    function getSwapRouter() external view returns (address);\\n\\n    function getVault() external view returns (address);\\n\\n    function getUserVault() external view returns (address);\\n\\n    function getVaultAddress() external view returns (address);\\n\\n    function getOracleAddress() external view returns (address);\\n\\n    function getManagerOwner() external view returns (address);\\n\\n    function isTokenWhitelistedForVerify(uint sort, address token) external view returns (bool);\\n\\n    function isTokenWhitelistedForVerify(address token) external view returns (bool);\\n\\n    function getModuleStatus(address etf, address module) external view returns (bool);\\n\\n    function isPaused() external view returns (bool);\\n}\\n\\ninterface IVault {\\n    function depositManagerToken(address[] calldata poolTokens, uint[] calldata tokensAmount) external;\\n\\n    function depositIssueRedeemPToken(\\n        address[] calldata poolTokens,\\n        uint[] calldata tokensAmount,\\n        uint[] calldata tokensAmountP,\\n        bool isPerfermance\\n    ) external;\\n\\n    function managerClaim(address pool) external;\\n\\n    function getManagerClaimBool(address pool) external view returns (bool);\\n}\\n\\ninterface IUserVault {\\n    function recordTokenInfo(\\n        address kol,\\n        address user,\\n        address[] calldata poolTokens,\\n        uint[] calldata tokensAmount\\n    ) external;\\n}\\n\\ninterface Oracles {\\n    function getPrice(address tokenAddress) external returns (uint price);\\n\\n    function getAllPrice(address[] calldata poolTokens, uint[] calldata tokensAmount) external returns (uint);\\n}\",\"keccak256\":\"0xc2cc32bdf691ceddab7a647a98bd481adcf9ae8393d8663a916bf032ef0dbbc6\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IConfigurableRightsPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Interface declarations\\n\\n// Introduce to avoid circularity (otherwise, the CRP and SmartPoolManager include each other)\\n// Removing circularity allows flattener tools to work, which enables Etherscan verification\\ninterface IConfigurableRightsPool {\\n    function mintPoolShareFromLib(uint amount) external;\\n\\n    function pushPoolShareFromLib(address to, uint amount) external;\\n\\n    function pullPoolShareFromLib(address from, uint amount) external;\\n\\n    function burnPoolShareFromLib(uint amount) external;\\n\\n    function balanceOf(address account) external view returns (uint);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function getController() external view returns (address);\\n\\n    function vaultAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0x1326889b57f63cc031e7c9e383b0fd3b172a9b86eb623cf0faba32c0768c4ec4\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Interface declarations\\n\\n/* solhint-disable func-order */\\n\\ninterface IERC20 {\\n    // Emitted when the allowance of a spender for an owner is set by a call to approve.\\n    // Value is the new allowance\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n\\n    // Emitted when value tokens are moved from one account (from) to another (to).\\n    // Note that value may be zero\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    // Returns the amount of tokens in existence\\n    function totalSupply() external view returns (uint);\\n\\n    // Returns the amount of tokens owned by account\\n    function balanceOf(address account) external view returns (uint);\\n\\n    // Returns the decimals of tokens\\n    function decimals() external view returns (uint8);\\n\\n    function symbol() external view returns (string memory);\\n\\n    // Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner\\n    // through transferFrom. This is zero by default\\n    // This value changes when approve or transferFrom are called\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    // Sets amount as the allowance of spender over the caller\\u2019s tokens\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits an Approval event.\\n    function approve(address spender, uint amount) external returns (bool);\\n\\n    // Moves amount tokens from the caller\\u2019s account to recipient\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits a Transfer event.\\n    function transfer(address recipient, uint amount) external returns (bool);\\n\\n    // Moves amount tokens from sender to recipient using the allowance mechanism\\n    // Amount is then deducted from the caller\\u2019s allowance\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits a Transfer event\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xfe22b6d6029b400b9cce7f9b39c546f99cd6922b2fd926e480e2b4d476ab26f8\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/DesynConstants.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n/**\\n * @author Desyn Labs\\n * @title Put all the constants in one place\\n */\\n\\nlibrary DesynConstants {\\n    // State variables (must be constant in a library)\\n\\n    // B \\\"ONE\\\" - all math is in the \\\"realm\\\" of 10 ** 18;\\n    // where numeric 1 = 10 ** 18\\n    uint public constant BONE = 10**18;\\n    uint public constant MIN_WEIGHT = BONE;\\n    uint public constant MAX_WEIGHT = BONE * 50;\\n    uint public constant MAX_TOTAL_WEIGHT = BONE * 50;\\n    uint public constant MIN_BALANCE = 0;\\n    uint public constant MAX_BALANCE = BONE * 10**12;\\n    uint public constant MIN_POOL_SUPPLY = BONE * 100;\\n    uint public constant MAX_POOL_SUPPLY = BONE * 10**9;\\n    uint public constant MIN_FEE = BONE / 10**6;\\n    uint public constant MAX_FEE = BONE / 10;\\n    //Fee Set\\n    uint public constant MANAGER_MIN_FEE = 0;\\n    uint public constant MANAGER_MAX_FEE = BONE / 10;\\n    uint public constant ISSUE_MIN_FEE = BONE / 1000;\\n    uint public constant ISSUE_MAX_FEE = BONE / 10;\\n    uint public constant REDEEM_MIN_FEE = 0;\\n    uint public constant REDEEM_MAX_FEE = BONE / 10;\\n    uint public constant PERFERMANCE_MIN_FEE = 0;\\n    uint public constant PERFERMANCE_MAX_FEE = BONE / 2;\\n    // EXIT_FEE must always be zero, or ConfigurableRightsPool._pushUnderlying will fail\\n    uint public constant EXIT_FEE = 0;\\n    uint public constant MAX_IN_RATIO = BONE / 2;\\n    uint public constant MAX_OUT_RATIO = (BONE / 3) + 1 wei;\\n    // Must match BConst.MIN_BOUND_TOKENS and BConst.MAX_BOUND_TOKENS\\n    uint public constant MIN_ASSET_LIMIT = 1;\\n    uint public constant MAX_ASSET_LIMIT = 16;\\n    uint public constant MAX_UINT = uint(-1);\\n    uint public constant MAX_COLLECT_PERIOD = 60 days;\\n}\\n\",\"keccak256\":\"0xbc396253a5541cd3cc080ca207dfdd2d2bdf963de26e005db36bd752524c1d66\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/DesynSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Imports\\n\\nimport \\\"./DesynConstants.sol\\\";\\n\\n/**\\n * @author Desyn Labs\\n * @title SafeMath - wrap Solidity operators to prevent underflow/overflow\\n * @dev badd and bsub are basically identical to OpenZeppelin SafeMath; mul/div have extra checks\\n */\\nlibrary DesynSafeMath {\\n    /**\\n     * @notice Safe addition\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev if we are adding b to a, the resulting sum must be greater than a\\n     * @return - sum of operands; throws if overflow\\n     */\\n    function badd(uint a, uint b) internal pure returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, \\\"ERR_ADD_OVERFLOW\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned subtraction\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Do a signed subtraction, and check that it produces a positive value\\n     *      (i.e., a - b is valid if b <= a)\\n     * @return - a - b; throws if underflow\\n     */\\n    function bsub(uint a, uint b) internal pure returns (uint) {\\n        (uint c, bool negativeResult) = bsubSign(a, b);\\n        require(!negativeResult, \\\"ERR_SUB_UNDERFLOW\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Safe signed subtraction\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Do a signed subtraction\\n     * @return - difference between a and b, and a flag indicating a negative result\\n     *           (i.e., a - b if a is greater than or equal to b; otherwise b - a)\\n     */\\n    function bsubSign(uint a, uint b) internal pure returns (uint, bool) {\\n        if (b <= a) {\\n            return (a - b, false);\\n        } else {\\n            return (b - a, true);\\n        }\\n    }\\n\\n    /**\\n     * @notice Safe multiplication\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Multiply safely (and efficiently), rounding down\\n     * @return - product of operands; throws if overflow or rounding error\\n     */\\n    function bmul(uint a, uint b) internal pure returns (uint) {\\n        // Gas optimization (see github.com/OpenZeppelin/openzeppelin-contracts/pull/522)\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // Standard overflow check: a/a*b=b\\n        uint c0 = a * b;\\n        require(c0 / a == b, \\\"ERR_MUL_OVERFLOW\\\");\\n\\n        // Round to 0 if x*y < BONE/2?\\n        uint c1 = c0 + (DesynConstants.BONE / 2);\\n        require(c1 >= c0, \\\"ERR_MUL_OVERFLOW\\\");\\n        uint c2 = c1 / DesynConstants.BONE;\\n        return c2;\\n    }\\n\\n    /**\\n     * @notice Safe division\\n     * @param dividend - first operand\\n     * @param divisor - second operand\\n     * @dev Divide safely (and efficiently), rounding down\\n     * @return - quotient; throws if overflow or rounding error\\n     */\\n    function bdiv(uint dividend, uint divisor) internal pure returns (uint) {\\n        require(divisor != 0, \\\"ERR_DIV_ZERO\\\");\\n\\n        // Gas optimization\\n        if (dividend == 0) {\\n            return 0;\\n        }\\n\\n        uint c0 = dividend * DesynConstants.BONE;\\n        require(c0 / dividend == DesynConstants.BONE, \\\"ERR_DIV_INTERNAL\\\"); // bmul overflow\\n\\n        uint c1 = c0 + (divisor / 2);\\n        require(c1 >= c0, \\\"ERR_DIV_INTERNAL\\\"); //  badd require\\n\\n        uint c2 = c1 / divisor;\\n        return c2;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer modulo\\n     * @dev Returns the remainder of dividing two unsigned integers.\\n     *      Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * @param dividend - first operand\\n     * @param divisor - second operand -- cannot be zero\\n     * @return - quotient; throws if overflow or rounding error\\n     */\\n    function bmod(uint dividend, uint divisor) internal pure returns (uint) {\\n        require(divisor != 0, \\\"ERR_MODULO_BY_ZERO\\\");\\n\\n        return dividend % divisor;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer max\\n     * @dev Returns the greater of the two input values\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the maximum of a and b\\n     */\\n    function bmax(uint a, uint b) internal pure returns (uint) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer min\\n     * @dev returns b, if b < a; otherwise returns a\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the lesser of the two input values\\n     */\\n    function bmin(uint a, uint b) internal pure returns (uint) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer average\\n     * @dev Guard against (a+b) overflow by dividing each operand separately\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the average of the two values\\n     */\\n    function baverage(uint a, uint b) internal pure returns (uint) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\\n    }\\n\\n    /**\\n     * @notice Babylonian square root implementation\\n     * @dev (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n     * @param y - operand\\n     * @return z - the square root result\\n     */\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9baf30b98a5f3a8c13ac9c4d5d4b176eabfd936aba8f5172c95b7c568fba68f3\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/RightsManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Needed to handle structures externally\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @author Desyn Labs\\n * @title Manage Configurable Rights for the smart pool\\n *      canPauseSwapping - can setPublicSwap back to false after turning it on\\n *                         by default, it is off on initialization and can only be turned on\\n *      canChangeSwapFee - can setSwapFee after initialization (by default, it is fixed at create time)\\n *      canChangeWeights - can bind new token weights (allowed by default in base pool)\\n *      canAddRemoveTokens - can bind/unbind tokens (allowed by default in base pool)\\n *      canWhitelistLPs - can limit liquidity providers to a given set of addresses\\n *      canChangeCap - can change the BSP cap (max # of pool tokens)\\n *      canChangeFloor - can change the BSP floor for Closure ETF (min # of pool tokens)\\n */\\nlibrary RightsManager {\\n    // Type declarations\\n\\n    enum Permissions {\\n        PAUSE_SWAPPING,\\n        CHANGE_SWAP_FEE,\\n        CHANGE_WEIGHTS,\\n        ADD_REMOVE_TOKENS,\\n        WHITELIST_LPS,\\n        TOKEN_WHITELISTS\\n        // CHANGE_CAP,\\n        // CHANGE_FLOOR\\n    }\\n\\n    struct Rights {\\n        bool canPauseSwapping;\\n        bool canChangeSwapFee;\\n        bool canChangeWeights;\\n        bool canAddRemoveTokens;\\n        bool canWhitelistLPs;\\n        bool canTokenWhiteLists;\\n        // bool canChangeCap;\\n        // bool canChangeFloor;\\n    }\\n\\n    // State variables (can only be constants in a library)\\n    bool public constant DEFAULT_CAN_PAUSE_SWAPPING = false;\\n    bool public constant DEFAULT_CAN_CHANGE_SWAP_FEE = true;\\n    bool public constant DEFAULT_CAN_CHANGE_WEIGHTS = true;\\n    bool public constant DEFAULT_CAN_ADD_REMOVE_TOKENS = false;\\n    bool public constant DEFAULT_CAN_WHITELIST_LPS = false;\\n    bool public constant DEFAULT_CAN_TOKEN_WHITELISTS = false;\\n\\n    // bool public constant DEFAULT_CAN_CHANGE_CAP = false;\\n    // bool public constant DEFAULT_CAN_CHANGE_FLOOR = false;\\n\\n    // Functions\\n\\n    /**\\n     * @notice create a struct from an array (or return defaults)\\n     * @dev If you pass an empty array, it will construct it using the defaults\\n     * @param a - array input\\n     * @return Rights struct\\n     */\\n    function constructRights(bool[] calldata a) external pure returns (Rights memory) {\\n        if (a.length < 6) {\\n            return\\n                Rights(\\n                    DEFAULT_CAN_PAUSE_SWAPPING,\\n                    DEFAULT_CAN_CHANGE_SWAP_FEE,\\n                    DEFAULT_CAN_CHANGE_WEIGHTS,\\n                    DEFAULT_CAN_ADD_REMOVE_TOKENS,\\n                    DEFAULT_CAN_WHITELIST_LPS,\\n                    DEFAULT_CAN_TOKEN_WHITELISTS\\n                    // DEFAULT_CAN_CHANGE_CAP,\\n                    // DEFAULT_CAN_CHANGE_FLOOR\\n                );\\n        } else {\\n            // return Rights(a[0], a[1], a[2], a[3], a[4], a[5], a[6]);\\n            return Rights(a[0], a[1], a[2], a[3], a[4], a[5]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Convert rights struct to an array (e.g., for events, GUI)\\n     * @dev avoids multiple calls to hasPermission\\n     * @param rights - the rights struct to convert\\n     * @return boolean array containing the rights settings\\n     */\\n    function convertRights(Rights calldata rights) external pure returns (bool[] memory) {\\n        bool[] memory result = new bool[](6);\\n\\n        result[0] = rights.canPauseSwapping;\\n        result[1] = rights.canChangeSwapFee;\\n        result[2] = rights.canChangeWeights;\\n        result[3] = rights.canAddRemoveTokens;\\n        result[4] = rights.canWhitelistLPs;\\n        result[5] = rights.canTokenWhiteLists;\\n        // result[5] = rights.canChangeCap;\\n        // result[6] = rights.canChangeFloor;\\n\\n        return result;\\n    }\\n\\n    // Though it is actually simple, the number of branches triggers code-complexity\\n    /* solhint-disable code-complexity */\\n\\n    /**\\n     * @notice Externally check permissions using the Enum\\n     * @param self - Rights struct containing the permissions\\n     * @param permission - The permission to check\\n     * @return Boolean true if it has the permission\\n     */\\n    function hasPermission(Rights calldata self, Permissions permission) external pure returns (bool) {\\n        if (Permissions.PAUSE_SWAPPING == permission) {\\n            return self.canPauseSwapping;\\n        } else if (Permissions.CHANGE_SWAP_FEE == permission) {\\n            return self.canChangeSwapFee;\\n        } else if (Permissions.CHANGE_WEIGHTS == permission) {\\n            return self.canChangeWeights;\\n        } else if (Permissions.ADD_REMOVE_TOKENS == permission) {\\n            return self.canAddRemoveTokens;\\n        } else if (Permissions.WHITELIST_LPS == permission) {\\n            return self.canWhitelistLPs;\\n        } else if (Permissions.TOKEN_WHITELISTS == permission) {\\n            return self.canTokenWhiteLists;\\n        }\\n        // else if (Permissions.CHANGE_CAP == permission) {\\n        //     return self.canChangeCap;\\n        // } else if (Permissions.CHANGE_FLOOR == permission) {\\n        //     return self.canChangeFloor;\\n        // }\\n    }\\n\\n    /* solhint-enable code-complexity */\\n}\\n\",\"keccak256\":\"0x398bbfe72673fa1c42a7d59fb5f7b2a46332887e105bf6fdff234a9a83247d0e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/SafeApprove.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Imports\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n// Libraries\\n\\n/**\\n * @author PieDAO (ported to Desyn Labs)\\n * @title SafeApprove - set approval for tokens that require 0 prior approval\\n * @dev Perhaps to address the known ERC20 race condition issue\\n *      See https://github.com/crytic/not-so-smart-contracts/tree/master/race_condition\\n *      Some tokens - notably KNC - only allow approvals to be increased from 0\\n */\\nlibrary SafeApprove {\\n    /**\\n     * @notice handle approvals of tokens that require approving from a base of 0\\n     * @param token - the token we're approving\\n     * @param spender - entity the owner (sender) is approving to spend his tokens\\n     * @param amount - number of tokens being approved\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint amount\\n    ) internal returns (bool) {\\n        uint currentAllowance = token.allowance(address(this), spender);\\n\\n        // Do nothing if allowance is already set to this value\\n        if (currentAllowance == amount) {\\n            return true;\\n        }\\n\\n        // If approval is not zero reset it to zero first\\n        if (currentAllowance != 0) {\\n            token.approve(spender, 0);\\n        }\\n\\n        // do the actual approval\\n        return token.approve(spender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xa51ebf770f2676085b89b1636688cc086289cfe27f614dfd0c15142535c26752\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint a, uint b) internal pure returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint a, uint b) internal pure returns (uint) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint a,\\n        uint b,\\n        string memory errorMessage\\n    ) internal pure returns (uint) {\\n        require(b <= a, errorMessage);\\n        uint c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint a, uint b) internal pure returns (uint) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint a, uint b) internal pure returns (uint) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint a,\\n        uint b,\\n        string memory errorMessage\\n    ) internal pure returns (uint) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint a, uint b) internal pure returns (uint) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint a,\\n        uint b,\\n        string memory errorMessage\\n    ) internal pure returns (uint) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x7ce3fd7d17047f684821e1a20b4f5989630f6755a377b12c087dfde359f710d6\",\"license\":\"agpl-3.0\"},\"contracts/libraries/SmartPoolManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Needed to pass in structs\\npragma experimental ABIEncoderV2;\\n\\n// Imports\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IConfigurableRightsPool.sol\\\";\\nimport \\\"../interfaces/IBFactory.sol\\\"; // unused\\nimport \\\"./DesynSafeMath.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./SafeApprove.sol\\\";\\n\\n/**\\n * @author Desyn Labs\\n * @title Factor out the weight updates\\n */\\nlibrary SmartPoolManager {\\n    using SafeApprove for IERC20;\\n    using DesynSafeMath for uint;\\n    using SafeMath for uint;\\n\\n    //kol pool params\\n    struct levelParams {\\n        uint level;\\n        uint ratio;\\n    }\\n\\n    struct feeParams {\\n        levelParams firstLevel;\\n        levelParams secondLevel;\\n        levelParams thirdLevel;\\n        levelParams fourLevel;\\n    }\\n    struct KolPoolParams {\\n        feeParams managerFee;\\n        feeParams issueFee;\\n        feeParams redeemFee;\\n        feeParams perfermanceFee;\\n    }\\n\\n    // Type declarations\\n    enum Etypes {\\n        OPENED,\\n        CLOSED\\n    }\\n\\n    enum Period {\\n        HALF,\\n        ONE,\\n        TWO\\n    }\\n\\n    // updateWeight and pokeWeights are unavoidably long\\n    /* solhint-disable function-max-lines */\\n    struct Status {\\n        uint collectPeriod;\\n        uint collectEndTime;\\n        uint closurePeriod;\\n        uint closureEndTime;\\n        uint upperCap;\\n        uint floorCap;\\n        uint managerFee;\\n        uint redeemFee;\\n        uint issueFee;\\n        uint perfermanceFee;\\n        uint startClaimFeeTime;\\n    }\\n\\n    struct PoolParams {\\n        // Desyn Pool Token (representing shares of the pool)\\n        string poolTokenSymbol;\\n        string poolTokenName;\\n        // Tokens inside the Pool\\n        address[] constituentTokens;\\n        uint[] tokenBalances;\\n        uint[] tokenWeights;\\n        uint swapFee;\\n        uint managerFee;\\n        uint redeemFee;\\n        uint issueFee;\\n        uint perfermanceFee;\\n        Etypes etype;\\n    }\\n\\n    struct PoolTokenRange {\\n        uint bspFloor;\\n        uint bspCap;\\n    }\\n\\n    struct Fund {\\n        uint etfAmount;\\n        uint fundAmount;\\n    }\\n\\n    function initRequire(\\n        uint swapFee,\\n        uint managerFee,\\n        uint issueFee,\\n        uint redeemFee,\\n        uint perfermanceFee,\\n        uint tokenBalancesLength,\\n        uint tokenWeightsLength,\\n        uint constituentTokensLength,\\n        bool initBool\\n    ) external pure {\\n        // We don't have a pool yet; check now or it will fail later (in order of likelihood to fail)\\n        // (and be unrecoverable if they don't have permission set to change it)\\n        // Most likely to fail, so check first\\n        require(!initBool, \\\"Init fail\\\");\\n        require(swapFee >= DesynConstants.MIN_FEE, \\\"ERR_INVALID_SWAP_FEE\\\");\\n        require(swapFee <= DesynConstants.MAX_FEE, \\\"ERR_INVALID_SWAP_FEE\\\");\\n        require(managerFee >= DesynConstants.MANAGER_MIN_FEE, \\\"ERR_INVALID_MANAGER_FEE\\\");\\n        require(managerFee <= DesynConstants.MANAGER_MAX_FEE, \\\"ERR_INVALID_MANAGER_FEE\\\");\\n        require(issueFee >= DesynConstants.ISSUE_MIN_FEE, \\\"ERR_INVALID_ISSUE_MIN_FEE\\\");\\n        require(issueFee <= DesynConstants.ISSUE_MAX_FEE, \\\"ERR_INVALID_ISSUE_MAX_FEE\\\");\\n        require(redeemFee >= DesynConstants.REDEEM_MIN_FEE, \\\"ERR_INVALID_REDEEM_MIN_FEE\\\");\\n        require(redeemFee <= DesynConstants.REDEEM_MAX_FEE, \\\"ERR_INVALID_REDEEM_MAX_FEE\\\");\\n        require(perfermanceFee >= DesynConstants.PERFERMANCE_MIN_FEE, \\\"ERR_INVALID_PERFERMANCE_MIN_FEE\\\");\\n        require(perfermanceFee <= DesynConstants.PERFERMANCE_MAX_FEE, \\\"ERR_INVALID_PERFERMANCE_MAX_FEE\\\");\\n\\n        // Arrays must be parallel\\n        require(tokenBalancesLength == constituentTokensLength, \\\"ERR_START_BALANCES_MISMATCH\\\");\\n        require(tokenWeightsLength == constituentTokensLength, \\\"ERR_START_WEIGHTS_MISMATCH\\\");\\n        // Cannot have too many or too few - technically redundant, since BPool.bind() would fail later\\n        // But if we don't check now, we could have a useless contract with no way to create a pool\\n\\n        require(constituentTokensLength >= DesynConstants.MIN_ASSET_LIMIT, \\\"ERR_TOO_FEW_TOKENS\\\");\\n        require(constituentTokensLength <= DesynConstants.MAX_ASSET_LIMIT, \\\"ERR_TOO_MANY_TOKENS\\\");\\n        // There are further possible checks (e.g., if they use the same token twice), but\\n        // we can let bind() catch things like that (i.e., not things that might reasonably work)\\n    }\\n\\n    /**\\n     * @notice Update the weight of an existing token\\n     * @dev Refactored to library to make CRPFactory deployable\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param tokenA - token to sell\\n     * @param tokenB - token to buy\\n     */\\n    function rebalance(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address tokenA,\\n        address tokenB,\\n        uint deltaWeight,\\n        uint minAmountOut\\n    ) external {\\n        uint currentWeightA = bPool.getDenormalizedWeight(tokenA);\\n        uint currentBalanceA = bPool.getBalance(tokenA);\\n        // uint currentWeightB = bPool.getDenormalizedWeight(tokenB);\\n\\n        require(deltaWeight <= currentWeightA, \\\"ERR_DELTA_WEIGHT_TOO_BIG\\\");\\n\\n        // deltaBalance = currentBalance * (deltaWeight / currentWeight)\\n        uint deltaBalanceA = DesynSafeMath.bmul(currentBalanceA, DesynSafeMath.bdiv(deltaWeight, currentWeightA));\\n\\n        // uint currentBalanceB = bPool.getBalance(tokenB);\\n\\n        // uint deltaWeight = DesynSafeMath.bsub(newWeight, currentWeightA);\\n\\n        // uint newWeightB = DesynSafeMath.bsub(currentWeightB, deltaWeight);\\n        // require(newWeightB >= 0, \\\"ERR_INCORRECT_WEIGHT_B\\\");\\n        bool soldout;\\n        if (deltaWeight == currentWeightA) {\\n            // reduct token A\\n            bPool.unbindPure(tokenA);\\n            soldout = true;\\n        }\\n\\n        // Now with the tokens this contract can bind them to the pool it controls\\n        bPool.rebindSmart(tokenA, tokenB, deltaWeight, deltaBalanceA, soldout, minAmountOut);\\n    }\\n\\n    /**\\n     * @notice Non ERC20-conforming tokens are problematic; don't allow them in pools\\n     * @dev Will revert if invalid\\n     * @param token - The prospective token to verify\\n     */\\n    function verifyTokenCompliance(address token) external {\\n        verifyTokenComplianceInternal(token);\\n    }\\n\\n    /**\\n     * @notice Non ERC20-conforming tokens are problematic; don't allow them in pools\\n     * @dev Will revert if invalid - overloaded to save space in the main contract\\n     * @param tokens - The prospective tokens to verify\\n     */\\n    function verifyTokenCompliance(address[] calldata tokens) external {\\n        for (uint i = 0; i < tokens.length; i++) {\\n            verifyTokenComplianceInternal(tokens[i]);\\n        }\\n    }\\n\\n    function createPoolInternalHandle(IBPool bPool, uint initialSupply) external view {\\n        require(initialSupply >= DesynConstants.MIN_POOL_SUPPLY, \\\"ERR_INIT_SUPPLY_MIN\\\");\\n        require(initialSupply <= DesynConstants.MAX_POOL_SUPPLY, \\\"ERR_INIT_SUPPLY_MAX\\\");\\n        require(bPool.EXIT_FEE() == 0, \\\"ERR_NONZERO_EXIT_FEE\\\");\\n        // EXIT_FEE must always be zero, or ConfigurableRightsPool._pushUnderlying will fail\\n        require(DesynConstants.EXIT_FEE == 0, \\\"ERR_NONZERO_EXIT_FEE\\\");\\n    }\\n\\n    function createPoolHandle(\\n        uint collectPeriod,\\n        uint upperCap,\\n        uint initialSupply\\n    ) external pure {\\n        require(collectPeriod <= DesynConstants.MAX_COLLECT_PERIOD, \\\"ERR_EXCEEDS_FUND_RAISING_PERIOD\\\");\\n        require(upperCap >= initialSupply, \\\"ERR_CAP_BIGGER_THAN_INITSUPPLY\\\");\\n    }\\n\\n    function exitPoolHandle(\\n        uint _endEtfAmount,\\n        uint _endFundAmount,\\n        uint _beginEtfAmount,\\n        uint _beginFundAmount,\\n        uint poolAmountIn,\\n        uint totalEnd\\n    )\\n        external\\n        pure\\n        returns (\\n            uint endEtfAmount,\\n            uint endFundAmount,\\n            uint profitRate\\n        )\\n    {\\n        endEtfAmount = DesynSafeMath.badd(_endEtfAmount, poolAmountIn);\\n        endFundAmount = DesynSafeMath.badd(_endFundAmount, totalEnd);\\n        uint amount1 = DesynSafeMath.bdiv(endFundAmount, endEtfAmount);\\n        uint amount2 = DesynSafeMath.bdiv(_beginFundAmount, _beginEtfAmount);\\n        if (amount1 > amount2) {\\n            profitRate = DesynSafeMath.bdiv(\\n                DesynSafeMath.bmul(DesynSafeMath.bsub(DesynSafeMath.bdiv(endFundAmount, endEtfAmount), DesynSafeMath.bdiv(_beginFundAmount, _beginEtfAmount)), poolAmountIn),\\n                totalEnd\\n            );\\n        }\\n    }\\n\\n    function exitPoolHandleA(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address poolToken,\\n        uint _tokenAmountOut,\\n        uint redeemFee,\\n        uint profitRate,\\n        uint perfermanceFee\\n    )\\n        external\\n        returns (\\n            uint redeemAndPerformanceFeeReceived,\\n            uint finalAmountOut,\\n            uint redeemFeeReceived\\n        )\\n    {\\n        // redeem fee\\n        redeemFeeReceived = DesynSafeMath.bmul(_tokenAmountOut, redeemFee);\\n\\n        // performance fee\\n        uint performanceFeeReceived = DesynSafeMath.bmul(DesynSafeMath.bmul(_tokenAmountOut, profitRate), perfermanceFee);\\n        \\n        // redeem fee and performance fee\\n        redeemAndPerformanceFeeReceived = DesynSafeMath.badd(performanceFeeReceived, redeemFeeReceived);\\n\\n        // final amount the user got\\n        finalAmountOut = DesynSafeMath.bsub(_tokenAmountOut, redeemAndPerformanceFeeReceived);\\n\\n        _pushUnderlying(bPool, poolToken, msg.sender, finalAmountOut);\\n\\n        if (redeemFee != 0 || (profitRate > 0 && perfermanceFee != 0)) {\\n            _pushUnderlying(bPool, poolToken, address(this), redeemAndPerformanceFeeReceived);\\n            IERC20(poolToken).safeApprove(self.vaultAddress(), redeemAndPerformanceFeeReceived);\\n        }\\n    }\\n\\n    function exitPoolHandleB(\\n        IConfigurableRightsPool self,\\n        bool bools,\\n        bool isCompletedCollect,\\n        uint closureEndTime,\\n        uint collectEndTime,\\n        uint _etfAmount,\\n        uint _fundAmount,\\n        uint poolAmountIn\\n    ) external view returns (uint etfAmount, uint fundAmount, uint actualPoolAmountIn) {\\n        actualPoolAmountIn = poolAmountIn;\\n        if (bools) {\\n            bool isCloseEtfCollectEndWithFailure = isCompletedCollect == false && block.timestamp >= collectEndTime;\\n            bool isCloseEtfClosureEnd = block.timestamp >= closureEndTime;\\n            require(isCloseEtfCollectEndWithFailure || isCloseEtfClosureEnd, \\\"ERR_CLOSURE_TIME_NOT_ARRIVED!\\\");\\n\\n            actualPoolAmountIn = self.balanceOf(msg.sender);\\n        }\\n        fundAmount = _fundAmount;\\n        etfAmount = _etfAmount;\\n    }\\n\\n    function joinPoolHandle(\\n        bool canWhitelistLPs,\\n        bool isList,\\n        bool bools,\\n        uint collectEndTime\\n    ) external view {\\n        require(!canWhitelistLPs || isList, \\\"ERR_NOT_ON_WHITELIST\\\");\\n\\n        if (bools) {\\n            require(block.timestamp <= collectEndTime, \\\"ERR_COLLECT_PERIOD_FINISHED!\\\");\\n        }\\n    }\\n\\n    function rebalanceHandle(\\n        IBPool bPool,\\n        bool isCompletedCollect,\\n        bool bools,\\n        uint collectEndTime,\\n        uint closureEndTime,\\n        bool canChangeWeights,\\n        address tokenA,\\n        address tokenB\\n    ) external {\\n        require(bPool.isBound(tokenA), \\\"ERR_TOKEN_NOT_BOUND\\\");\\n        if (bools) {\\n            require(isCompletedCollect, \\\"ERROR_COLLECTION_FAILED\\\");\\n            require(block.timestamp > collectEndTime && block.timestamp < closureEndTime, \\\"ERR_NOT_REBALANCE_PERIOD\\\");\\n        }\\n\\n        if (!bPool.isBound(tokenB)) {\\n            bool returnValue = IERC20(tokenB).safeApprove(address(bPool), DesynConstants.MAX_UINT);\\n            require(returnValue, \\\"ERR_ERC20_FALSE\\\");\\n        }\\n\\n        require(canChangeWeights, \\\"ERR_NOT_CONFIGURABLE_WEIGHTS\\\");\\n        require(tokenA != tokenB, \\\"ERR_TOKENS_SAME\\\");\\n    }\\n\\n    /**\\n     * @notice Join a pool\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param poolAmountOut - number of pool tokens to receive\\n     * @param maxAmountsIn - Max amount of asset tokens to spend\\n     * @return actualAmountsIn - calculated values of the tokens to pull in\\n     */\\n    function joinPool(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        uint poolAmountOut,\\n        uint[] calldata maxAmountsIn,\\n        uint issueFee\\n    ) external view returns (uint[] memory actualAmountsIn) {\\n        address[] memory tokens = bPool.getCurrentTokens();\\n\\n        require(maxAmountsIn.length == tokens.length, \\\"ERR_AMOUNTS_MISMATCH\\\");\\n\\n        uint poolTotal = self.totalSupply();\\n        // Subtract  1 to ensure any rounding errors favor the pool\\n        uint ratio = DesynSafeMath.bdiv(poolAmountOut, DesynSafeMath.bsub(poolTotal, 1));\\n\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        // We know the length of the array; initialize it, and fill it below\\n        // Cannot do \\\"push\\\" in memory\\n        actualAmountsIn = new uint[](tokens.length);\\n\\n        // This loop contains external calls\\n        // External calls are to math libraries or the underlying pool, so low risk\\n        uint issueFeeRate = issueFee.bmul(1000);\\n        for (uint i = 0; i < tokens.length; i++) {\\n            address t = tokens[i];\\n            uint bal = bPool.getBalance(t);\\n            // Add 1 to ensure any rounding errors favor the pool\\n            uint base = bal.badd(1).bmul(poolAmountOut * uint(1000));\\n            uint tokenAmountIn = base.bdiv(poolTotal.bsub(1) * (uint(1000).bsub(issueFeeRate)));\\n\\n            require(tokenAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountIn <= maxAmountsIn[i], \\\"ERR_LIMIT_IN\\\");\\n\\n            actualAmountsIn[i] = tokenAmountIn;\\n        }\\n    }\\n\\n    /**\\n     * @notice Exit a pool - redeem pool tokens for underlying assets\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param poolAmountIn - amount of pool tokens to redeem\\n     * @param minAmountsOut - minimum amount of asset tokens to receive\\n     * @return actualAmountsOut - calculated amounts of each token to pull\\n     */\\n    function exitPool(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        uint poolAmountIn,\\n        uint[] calldata minAmountsOut\\n    ) external view returns (uint[] memory actualAmountsOut) {\\n        address[] memory tokens = bPool.getCurrentTokens();\\n\\n        require(minAmountsOut.length == tokens.length, \\\"ERR_AMOUNTS_MISMATCH\\\");\\n\\n        uint poolTotal = self.totalSupply();\\n\\n        uint ratio = DesynSafeMath.bdiv(poolAmountIn, DesynSafeMath.badd(poolTotal, 1));\\n\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        actualAmountsOut = new uint[](tokens.length);\\n\\n        // This loop contains external calls\\n        // External calls are to math libraries or the underlying pool, so low risk\\n        for (uint i = 0; i < tokens.length; i++) {\\n            address t = tokens[i];\\n            uint bal = bPool.getBalance(t);\\n            // Subtract 1 to ensure any rounding errors favor the pool\\n            uint tokenAmountOut = DesynSafeMath.bmul(ratio, DesynSafeMath.bsub(bal, 1));\\n\\n            require(tokenAmountOut != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountOut >= minAmountsOut[i], \\\"ERR_LIMIT_OUT\\\");\\n\\n            actualAmountsOut[i] = tokenAmountOut;\\n        }\\n    }\\n\\n    // Internal functions\\n    // Check for zero transfer, and make sure it returns true to returnValue\\n    function verifyTokenComplianceInternal(address token) internal {\\n        bool returnValue = IERC20(token).transfer(msg.sender, 0);\\n        require(returnValue, \\\"ERR_NONCONFORMING_TOKEN\\\");\\n    }\\n\\n    function handleTransferInTokens(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address poolToken,\\n        uint actualAmountIn,\\n        uint _actualIssueFee\\n    ) external returns (uint issueFeeReceived) {\\n        issueFeeReceived = DesynSafeMath.bmul(actualAmountIn, _actualIssueFee);\\n        uint amount = DesynSafeMath.bsub(actualAmountIn, issueFeeReceived);\\n\\n        _pullUnderlying(bPool, poolToken, msg.sender, amount);\\n\\n        if (_actualIssueFee != 0) {\\n            bool xfer = IERC20(poolToken).transferFrom(msg.sender, address(this), issueFeeReceived);\\n            require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n\\n            IERC20(poolToken).safeApprove(self.vaultAddress(), issueFeeReceived);\\n        }\\n    }\\n\\n    function handleClaim(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address[] calldata poolTokens,\\n        uint managerFee,\\n        uint timeElapsed,\\n        uint claimPeriod\\n    ) external returns (uint[] memory) {\\n        uint[] memory tokensAmount = new uint[](poolTokens.length);\\n        \\n        for (uint i = 0; i < poolTokens.length; i++) {\\n            address t = poolTokens[i];\\n            uint tokenBalance = bPool.getBalance(t);\\n            uint tokenAmountOut = tokenBalance.bmul(managerFee).mul(timeElapsed).div(claimPeriod).div(12);    \\n            _pushUnderlying(bPool, t, address(this), tokenAmountOut);\\n            IERC20(t).safeApprove(self.vaultAddress(), tokenAmountOut);\\n            tokensAmount[i] = tokenAmountOut;\\n        }\\n        \\n        return tokensAmount;\\n    }\\n\\n    function handleCollectionCompleted(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address[] calldata poolTokens,\\n        uint issueFee\\n    ) external {\\n        if (issueFee != 0) {\\n            uint[] memory tokensAmount = new uint[](poolTokens.length);\\n\\n            for (uint i = 0; i < poolTokens.length; i++) {\\n                address t = poolTokens[i];\\n                uint currentAmount = bPool.getBalance(t);\\n                uint currentAmountFee = DesynSafeMath.bmul(currentAmount, issueFee);\\n\\n                _pushUnderlying(bPool, t, address(this), currentAmountFee);\\n                tokensAmount[i] = currentAmountFee;\\n                IERC20(t).safeApprove(self.vaultAddress(), currentAmountFee);\\n            }\\n\\n            IVault(self.vaultAddress()).depositIssueRedeemPToken(poolTokens, tokensAmount, tokensAmount, false);\\n        }\\n    }\\n\\n    function WhitelistHandle(\\n        bool bool1,\\n        bool bool2,\\n        address adr\\n    ) external pure {\\n        require(bool1, \\\"ERR_CANNOT_WHITELIST_LPS\\\");\\n        require(bool2, \\\"ERR_LP_NOT_WHITELISTED\\\");\\n        require(adr != address(0), \\\"ERR_INVALID_ADDRESS\\\");\\n    }\\n\\n    function _pullUnderlying(\\n        IBPool bPool,\\n        address erc20,\\n        address from,\\n        uint amount\\n    ) internal {\\n        uint tokenBalance = bPool.getBalance(erc20);\\n        uint tokenWeight = bPool.getDenormalizedWeight(erc20);\\n\\n        bool xfer = IERC20(erc20).transferFrom(from, address(this), amount);\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n        bPool.rebind(erc20, DesynSafeMath.badd(tokenBalance, amount), tokenWeight);\\n    }\\n\\n    function _pushUnderlying(\\n        IBPool bPool,\\n        address erc20,\\n        address to,\\n        uint amount\\n    ) internal {\\n        uint tokenBalance = bPool.getBalance(erc20);\\n        uint tokenWeight = bPool.getDenormalizedWeight(erc20);\\n        bPool.rebind(erc20, DesynSafeMath.bsub(tokenBalance, amount), tokenWeight);\\n        bool xfer = IERC20(erc20).transfer(to, amount);\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x8d7b2d4ef8040cb4d0c97acc2f59cc8e65cda40609a52d43bef0759b27ccc784\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613226806100206000396000f3fe608060405234801561001057600080fd5b50600436106100fc5760003560e01c8063135b968d146101015780631a78a275146101165780631eccc1851461013f578063333fbeef146101525780634ef39b751461016557806363ced092146101785780637840fb6c1461018b5780637b7d6c681461019e57806380ad2cf3146101b15780638a5c57df146101c45780639589da76146101d7578063991991c7146101ea578063a7f28da7146101fd578063affdd4ee14610210578063d46dadd114610223578063d945940714610236578063e0d945bf14610249578063e221e73a1461025c578063fb4112651461026f578063fbe5ce0a14610282575b600080fd5b61011461010f366004612930565b610295565b005b610129610124366004612693565b6103c7565b6040516101369190612d4f565b60405180910390f35b61011461014d36600461263b565b610871565b6101146101603660046125e9565b6108cb565b6101146101733660046124da565b6108f7565b6101146101863660046129a1565b610a5e565b6101146101993660046124fd565b610b59565b6101146101ac3660046125e9565b610b85565b6101146101bf366004612668565b610bb1565b6101146101d2366004612a95565b610bdd565b6101146101e53660046128be565b610c9e565b6101146101f8366004612668565b610d03565b61011461020b3660046125e9565b610d2f565b61011461021e366004612864565b610d5b565b6101146102313660046125fb565b610dc6565b610129610244366004612757565b610df4565b6101146102573660046129ed565b611135565b61011461026a3660046124fd565b61195d565b61011461027d3660046124da565b611989565b6101146102903660046125e9565b6119d8565b6060856001600160a01b031663b64ef17b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156102d057600080fd5b505afa1580156102e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103089190612848565b6001600160a01b031663cc77828d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561034057600080fd5b505afa158015610354573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261037c9190810190612535565b90506103bf868287878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250899250611a04915050565b505050505050565b60008786146103f15760405162461bcd60e51b81526004016103e890612fba565b60405180910390fd5b8784146104105760405162461bcd60e51b81526004016103e890612fba565b896001600160a01b03166391cefde46040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561044b57600080fd5b505af115801561045f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104839190612848565b6040516334e1990760e01b81529091506001600160a01b038216906334e19907906104b2908690600401613014565b600060405180830381600087803b1580156104cc57600080fd5b505af11580156104e0573d6000803e3d6000fd5b5050505060005b888110156106945760008a8a838181106104fd57fe5b905060200201602081019061051291906124da565b9050806001600160a01b03166323b872dd33308c8c8781811061053157fe5b905060200201356040518463ffffffff1660e01b815260040161055693929190612d63565b602060405180830381600087803b15801561057057600080fd5b505af1158015610584573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a891906125cd565b6105c45760405162461bcd60e51b81526004016103e890612fe7565b6105e181848b8b868181106105d557fe5b90506020020135611e58565b826001600160a01b031663e4e1e5388c8c858181106105fc57fe5b905060200201602081019061061191906124da565b8b8b8681811061061d57fe5b905060200201358a8a8781811061063057fe5b905060200201356040518463ffffffff1660e01b815260040161065593929190612f60565b600060405180830381600087803b15801561066f57600080fd5b505af1158015610683573d6000803e3d6000fd5b5050600190930192506104e7915050565b50811561080457806001600160a01b0316634bb278f36040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156106d657600080fd5b505af11580156106ea573d6000803e3d6000fd5b50506040516370a0823160e01b81526001600160a01b038416925063a9059cbb9150339083906370a0823190610724903090600401612d4f565b60206040518083038186803b15801561073c57600080fd5b505afa158015610750573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107749190612b0d565b6040518363ffffffff1660e01b8152600401610791929190612d87565b602060405180830381600087803b1580156107ab57600080fd5b505af11580156107bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e391906125cd565b6107ff5760405162461bcd60e51b81526004016103e890612fe7565b610864565b6040516324dacaa960e11b81526001600160a01b038216906349b595529061083190600190600401612faf565b600060405180830381600087803b15801561084b57600080fd5b505af115801561085f573d6000803e3d6000fd5b505050505b9998505050505050505050565b6040516324dacaa960e11b81526001600160a01b038316906349b595529061089d908490600401612faf565b600060405180830381600087803b1580156108b757600080fd5b505af11580156103bf573d6000803e3d6000fd5b60405163c83a1c2d60e01b81526001600160a01b0383169063c83a1c2d9061089d908490600401612d4f565b806001600160a01b0316634bb278f36040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561093257600080fd5b505af1158015610946573d6000803e3d6000fd5b50506040516370a0823160e01b81526001600160a01b038416925063a9059cbb9150339083906370a0823190610980903090600401612d4f565b60206040518083038186803b15801561099857600080fd5b505afa1580156109ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d09190612b0d565b6040518363ffffffff1660e01b81526004016109ed929190612d87565b602060405180830381600087803b158015610a0757600080fd5b505af1158015610a1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3f91906125cd565b610a5b5760405162461bcd60e51b81526004016103e890612fe7565b50565b6060836001600160a01b031663b64ef17b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a9957600080fd5b505afa158015610aad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad19190612848565b6001600160a01b031663cc77828d6040518163ffffffff1660e01b815260040160006040518083038186803b158015610b0957600080fd5b505afa158015610b1d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b459190810190612535565b9050610b5384848484611fe2565b50505050565b60405163325a48a760e21b81526001600160a01b0383169063c969229c9061089d908490600401612d4f565b6040516392eefe9b60e01b81526001600160a01b038316906392eefe9b9061089d908490600401612d4f565b6040516347786d3760e01b81526001600160a01b038316906347786d379061089d908490600401613014565b6060846001600160a01b031663be3bbd2e6040518163ffffffff1660e01b815260040160006040518083038186803b158015610c1857600080fd5b505afa158015610c2c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c549190810190612535565b9050610c97858286868680806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250339250611a04915050565b5050505050565b6040516329b0917160e21b81526001600160a01b0384169063a6c245c490610ccc9085908590600401612f81565b600060405180830381600087803b158015610ce657600080fd5b505af1158015610cfa573d6000803e3d6000fd5b50505050505050565b6040516334e1990760e01b81526001600160a01b038316906334e199079061089d908490600401613014565b60405163e2762d4b60e01b81526001600160a01b0383169063e2762d4b9061089d908490600401612d4f565b604051631b9276c760e21b81526001600160a01b03861690636e49db1c90610d8d908790879087908790600401612dba565b600060405180830381600087803b158015610da757600080fd5b505af1158015610dbb573d6000803e3d6000fd5b505050505050505050565b60405163992f6ba560e01b81526001600160a01b0384169063992f6ba590610ccc9085908590600401612d87565b6000610e0360608901896130a7565b9050610e1260408a018a6130a7565b905014610e315760405162461bcd60e51b81526004016103e890612fba565b610e3e60808901896130a7565b9050610e4d60408a018a6130a7565b905014610e6c5760405162461bcd60e51b81526004016103e890612fba565b60405163074aa1b960e51b81526001600160a01b038b169063e954372090610ea2908c908c908b908b908b908b90600401612de3565b602060405180830381600087803b158015610ebc57600080fd5b505af1158015610ed0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef49190612848565b905060005b610f0660408a018a6130a7565b905081101561101f576000610f1e60408b018b6130a7565b83818110610f2857fe5b9050602002016020810190610f3d91906124da565b90506001600160a01b0381166323b872dd3330610f5d60608f018f6130a7565b87818110610f6757fe5b905060200201356040518463ffffffff1660e01b8152600401610f8c93929190612d63565b602060405180830381600087803b158015610fa657600080fd5b505af1158015610fba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fde91906125cd565b610ffa5760405162461bcd60e51b81526004016103e890612fe7565b611016818461100c60608e018e6130a7565b868181106105d557fe5b50600101610ef9565b506001600160a01b038116630892b93d883560208a013561104660608c0160408d01612aee565b866040518563ffffffff1660e01b8152600401611066949392919061306f565b600060405180830381600087803b15801561108057600080fd5b505af1158015611094573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038416925063a9059cbb91506110c79033908b3590600401612d87565b602060405180830381600087803b1580156110e157600080fd5b505af11580156110f5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111991906125cd565b6108645760405162461bcd60e51b81526004016103e890612fe7565b8483146111545760405162461bcd60e51b81526004016103e890612fba565b8481146111735760405162461bcd60e51b81526004016103e890612fba565b60005b8581101561195357600087878381811061118c57fe5b90506020020160208101906111a191906124da565b9050886001600160a01b0316632f37b6248989858181106111be57fe5b90506020020160208101906111d391906124da565b6040518263ffffffff1660e01b81526004016111ef9190612d4f565b60206040518083038186803b15801561120757600080fd5b505afa15801561121b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123f91906125cd565b1561164c57886001600160a01b031663f8b2cb4f89898581811061125f57fe5b905060200201602081019061127491906124da565b6040518263ffffffff1660e01b81526004016112909190612d4f565b60206040518083038186803b1580156112a857600080fd5b505afa1580156112bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e09190612b0d565b8686848181106112ec57fe5b90506020020135111561150057806001600160a01b03166323b872dd33308c6001600160a01b031663f8b2cb4f8d8d8981811061132557fe5b905060200201602081019061133a91906124da565b6040518263ffffffff1660e01b81526004016113569190612d4f565b60206040518083038186803b15801561136e57600080fd5b505afa158015611382573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a69190612b0d565b8a8a888181106113b257fe5b90506020020135036040518463ffffffff1660e01b81526004016113d893929190612d63565b602060405180830381600087803b1580156113f257600080fd5b505af1158015611406573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142a91906125cd565b6114465760405162461bcd60e51b81526004016103e890612fe7565b611500818a8b6001600160a01b031663f8b2cb4f8c8c8881811061146657fe5b905060200201602081019061147b91906124da565b6040518263ffffffff1660e01b81526004016114979190612d4f565b60206040518083038186803b1580156114af57600080fd5b505afa1580156114c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e79190612b0d565b8989878181106114f357fe5b9050602002013503611e58565b620f424086868481811061151057fe5b9050602002013511156115c857886001600160a01b0316633fdddaa289898581811061153857fe5b905060200201602081019061154d91906124da565b88888681811061155957fe5b9050602002013587878781811061156c57fe5b905060200201356040518463ffffffff1660e01b815260040161159193929190612f60565b600060405180830381600087803b1580156115ab57600080fd5b505af11580156115bf573d6000803e3d6000fd5b50505050611647565b886001600160a01b031663cf5e7bd38989858181106115e357fe5b90506020020160208101906115f891906124da565b6040518263ffffffff1660e01b81526004016116149190612d4f565b600060405180830381600087803b15801561162e57600080fd5b505af1158015611642573d6000803e3d6000fd5b505050505b6117b4565b806001600160a01b03166323b872dd333089898781811061166957fe5b905060200201356040518463ffffffff1660e01b815260040161168e93929190612d63565b602060405180830381600087803b1580156116a857600080fd5b505af11580156116bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e091906125cd565b6116fc5760405162461bcd60e51b81526004016103e890612fe7565b61170d818a8888868181106105d557fe5b886001600160a01b031663e4e1e53889898581811061172857fe5b905060200201602081019061173d91906124da565b88888681811061174957fe5b9050602002013587878781811061175c57fe5b905060200201356040518463ffffffff1660e01b815260040161178193929190612f60565b600060405180830381600087803b15801561179b57600080fd5b505af11580156117af573d6000803e3d6000fd5b505050505b6040516370a0823160e01b81526000906001600160a01b038316906370a08231906117e3903090600401612d4f565b60206040518083038186803b1580156117fb57600080fd5b505afa15801561180f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118339190612b0d565b111561194a576040516370a0823160e01b81526001600160a01b0382169063a9059cbb90339083906370a082319061186f903090600401612d4f565b60206040518083038186803b15801561188757600080fd5b505afa15801561189b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118bf9190612b0d565b6040518363ffffffff1660e01b81526004016118dc929190612d87565b602060405180830381600087803b1580156118f657600080fd5b505af115801561190a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061192e91906125cd565b61194a5760405162461bcd60e51b81526004016103e890612fe7565b50600101611176565b5050505050505050565b60405163edb12adf60e01b81526001600160a01b0383169063edb12adf9061089d908490600401612d4f565b806001600160a01b031663d2fed42e6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156119c457600080fd5b505af1158015610c97573d6000803e3d6000fd5b60405163173825d960e01b81526001600160a01b0383169063173825d99061089d908490600401612d4f565b8351825114611a255760405162461bcd60e51b81526004016103e890612fba565b60005b8451811015611b21576000858281518110611a3f57fe5b60200260200101519050806001600160a01b03166323b872dd3330878681518110611a6657fe5b60200260200101516040518463ffffffff1660e01b8152600401611a8c93929190612d63565b602060405180830381600087803b158015611aa657600080fd5b505af1158015611aba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ade91906125cd565b611afa5760405162461bcd60e51b81526004016103e890612fe7565b611b188188868581518110611b0b57fe5b6020026020010151611e58565b50600101611a28565b5060405163077df9bd60e31b81526001600160a01b03861690633befcde890611b529086908690869060040161303e565b600060405180830381600087803b158015611b6c57600080fd5b505af1158015611b80573d6000803e3d6000fd5b5050505060005b8451811015611d46576000858281518110611b9e57fe5b602002602001015190506000816001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401611bd69190612d4f565b60206040518083038186803b158015611bee57600080fd5b505afa158015611c02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c269190612b0d565b1115611d3d576040516370a0823160e01b81526001600160a01b0382169063a9059cbb90339083906370a0823190611c62903090600401612d4f565b60206040518083038186803b158015611c7a57600080fd5b505afa158015611c8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb29190612b0d565b6040518363ffffffff1660e01b8152600401611ccf929190612d87565b602060405180830381600087803b158015611ce957600080fd5b505af1158015611cfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d2191906125cd565b611d3d5760405162461bcd60e51b81526004016103e890612fe7565b50600101611b87565b506040516370a0823160e01b81526001600160a01b0386169063a9059cbb90339083906370a0823190611d7d903090600401612d4f565b60206040518083038186803b158015611d9557600080fd5b505afa158015611da9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dcd9190612b0d565b6040518363ffffffff1660e01b8152600401611dea929190612d87565b602060405180830381600087803b158015611e0457600080fd5b505af1158015611e18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e3c91906125cd565b610c975760405162461bcd60e51b81526004016103e890612fe7565b604051636eb1769f60e11b81526000906001600160a01b0385169063dd62ed3e90611e899030908790600401612da0565b60206040518083038186803b158015611ea157600080fd5b505afa158015611eb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed99190612b0d565b1115611f625760405163095ea7b360e01b81526001600160a01b0384169063095ea7b390611f0e908590600090600401612d87565b602060405180830381600087803b158015611f2857600080fd5b505af1158015611f3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f6091906125cd565b505b60405163095ea7b360e01b81526001600160a01b0384169063095ea7b390611f909085908590600401612d87565b602060405180830381600087803b158015611faa57600080fd5b505af1158015611fbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5391906125cd565b6040516370a0823160e01b81526000906001600160a01b038616906370a0823190612011903390600401612d4f565b60206040518083038186803b15801561202957600080fd5b505afa15801561203d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120619190612b0d565b6040516323b872dd60e01b81529091506001600160a01b038616906323b872dd9061209490339030908690600401612d63565b602060405180830381600087803b1580156120ae57600080fd5b505af11580156120c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120e691906125cd565b6121025760405162461bcd60e51b81526004016103e890612fe7565b61210d858683611e58565b60405163b02f0b7360e01b81526001600160a01b0386169063b02f0b739061213b908790879060040161301d565b600060405180830381600087803b15801561215557600080fd5b505af1158015612169573d6000803e3d6000fd5b5050505060005b8251811015611d4657600083828151811061218757fe5b602002602001015190506000816001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016121bf9190612d4f565b60206040518083038186803b1580156121d757600080fd5b505afa1580156121eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061220f9190612b0d565b1115612326576040516370a0823160e01b81526001600160a01b0382169063a9059cbb90339083906370a082319061224b903090600401612d4f565b60206040518083038186803b15801561226357600080fd5b505afa158015612277573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061229b9190612b0d565b6040518363ffffffff1660e01b81526004016122b8929190612d87565b602060405180830381600087803b1580156122d257600080fd5b505af11580156122e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061230a91906125cd565b6123265760405162461bcd60e51b81526004016103e890612fe7565b50600101612170565b60008083601f840112612340578182fd5b5081356001600160401b03811115612356578182fd5b602083019150836020808302850101111561237057600080fd5b9250929050565b600082601f830112612387578081fd5b813561239a61239582613113565b6130ed565b8181529150602080830190848101818402860182018710156123bb57600080fd5b60005b848110156123e35781356123d1816131cd565b845292820192908201906001016123be565b505050505092915050565b600082601f8301126123fe578081fd5b813561240c61239582613113565b81815291506020808301908481018184028601820187101561242d57600080fd5b60005b848110156123e357813584529282019290820190600101612430565b8035612457816131cd565b92915050565b60006060828403121561246e578081fd5b50919050565b6000610400828403121561246e578081fd5b6000610160828403121561246e578081fd5b6000604082840312156124a9578081fd5b6124b360406130ed565b9050813581526020820135602082015292915050565b600060c0828403121561246e578081fd5b6000602082840312156124eb578081fd5b81356124f6816131cd565b9392505050565b6000806040838503121561250f578081fd5b823561251a816131cd565b9150602083013561252a816131cd565b809150509250929050565b60006020808385031215612547578182fd5b82516001600160401b0381111561255c578283fd5b8301601f8101851361256c578283fd5b805161257a61239582613113565b8181528381019083850185840285018601891015612596578687fd5b8694505b838510156125c15780516125ad816131cd565b83526001949094019391850191850161259a565b50979650505050505050565b6000602082840312156125de578081fd5b81516124f6816131e2565b6000806040838503121561250f578182fd5b60008060006060848603121561260f578081fd5b833561261a816131cd565b9250602084013561262a816131cd565b929592945050506040919091013590565b6000806040838503121561264d578182fd5b8235612658816131cd565b9150602083013561252a816131e2565b6000806040838503121561267a578182fd5b8235612685816131cd565b946020939093013593505050565b600080600080600080600080600060c08a8c0312156126b0578687fd5b89356126bb816131cd565b985060208a01356001600160401b03808211156126d6578889fd5b6126e28d838e0161232f565b909a50985060408c01359150808211156126fa578687fd5b6127068d838e0161232f565b909850965060608c013591508082111561271e578586fd5b5061272b8c828d0161232f565b90955093505060808a0135915060a08a0135612746816131e2565b809150509295985092959850929598565b60008060008060008060008060006106008a8c031215612775578283fd5b61277f8b8b61244c565b985061278e8b60208c0161244c565b975060408a01356001600160401b03808211156127a9578485fd5b6127b58d838e01612486565b98506127c48d60608e0161245d565b97506127d38d60c08e016124c9565b96506127e38d6101808e01612474565b95506105808c01359150808211156127f9578485fd5b6128058d838e01612377565b94506105a08c013591508082111561281b578384fd5b506128288c828d016123ee565b9250506128398b6105c08c01612498565b90509295985092959850929598565b600060208284031215612859578081fd5b81516124f6816131cd565b600080600080600060a0868803121561287b578283fd5b8535612886816131cd565b94506020860135612896816131cd565b935060408601356128a6816131cd565b94979396509394606081013594506080013592915050565b6000806000606084860312156128d2578081fd5b83356128dd816131cd565b925060208401356001600160401b03808211156128f8578283fd5b612904878388016123ee565b93506040860135915080821115612919578283fd5b5061292686828701612377565b9150509250925092565b600080600080600060808688031215612947578283fd5b8535612952816131cd565b94506020860135935060408601356001600160401b03811115612973578384fd5b61297f8882890161232f565b9094509250506060860135612993816131cd565b809150509295509295909350565b6000806000606084860312156129b5578081fd5b83356129c0816131cd565b92506020840135915060408401356001600160401b038111156129e1578182fd5b612926868287016123ee565b60008060008060008060006080888a031215612a07578081fd5b8735612a12816131cd565b965060208801356001600160401b0380821115612a2d578283fd5b612a398b838c0161232f565b909850965060408a0135915080821115612a51578283fd5b612a5d8b838c0161232f565b909650945060608a0135915080821115612a75578283fd5b50612a828a828b0161232f565b989b979a50959850939692959293505050565b60008060008060608587031215612aaa578182fd5b8435612ab5816131cd565b93506020850135925060408501356001600160401b03811115612ad6578283fd5b612ae28782880161232f565b95989497509550505050565b600060208284031215612aff578081fd5b8135600381106124f6578182fd5b600060208284031215612b1e578081fd5b5051919050565b60008284526020808501945082825b85811015612b62578135612b47816131cd565b6001600160a01b031687529582019590820190600101612b34565b509495945050505050565b6000815180845260208085019450808401835b83811015612b625781516001600160a01b031687529582019590820190600101612b80565b81835260006001600160fb1b03831115612bbd578081fd5b6020830280836020870137939093016020019283525090919050565b6000815180845260208085019450808401835b83811015612b6257815187529582019590820190600101612bec565b60028110612c1257fe5b9052565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b612c4a8282612d02565b610100612c5b818401828401612d02565b50610200612c6d818401828401612d02565b50610300612c7f818401828401612d02565b505050565b8035612c8f816131e2565b151582526020810135612ca1816131e2565b151560208301526040810135612cb6816131e2565b151560408301526060810135612ccb816131e2565b151560608301526080810135612ce0816131e2565b1515608083015260a0810135612cf5816131e2565b80151560a0840152505050565b612d0c8282612d40565b612d1c6040830160408301612d40565b612d2c6080830160808301612d40565b612d3c60c0830160c08301612d40565b5050565b80358252602090810135910152565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6001600160a01b038716815261054060208201819052600090612e068880613189565b61016083860152612e1c6106a086018284612c16565b92505050612e2d6020890189613189565b61053f198086850301610560870152612e47848385612c16565b9350612e5660408c018c613132565b935091508086850301610580870152612e70848484612b25565b9350612e7f60608c018c613132565b9350915080868503016105a0870152612e99848484612ba5565b9350612ea860808c018c613132565b9350915080868503016105c087015250612ec3838383612ba5565b9250505060a08801356105e084015260c088013561060084015260e088013561062084015261010080890135610640850152610120890135610660850152612f0f6101408a018a613179565b612f1d610680860182612c08565b50612f2b6040850189612c84565b612f3781850188612c40565b50828103610500840152612f4b8186612b6d565b90508281036105208401526108648185612bd9565b6001600160a01b039390931683526020830191909152604082015260600190565b600060408252612f946040830185612bd9565b8281036020840152612fa68185612b6d565b95945050505050565b901515815260200190565b60208082526013908201527208aa4a4be988a9c8ea890be9a92a69a82a8869606b1b604082015260600190565b60208082526013908201527211549497d514905394d1915497d19052531151606a1b604082015260600190565b90815260200190565b6000838252604060208301526130366040830184612bd9565b949350505050565b6000848252606060208301526130576060830185612bd9565b905060018060a01b0383166040830152949350505050565b8481526020810184905260a081016003841061308757fe5b836040830152825160608301526020830151608083015295945050505050565b6000808335601e198436030181126130bd578283fd5b8301803591506001600160401b038211156130d6578283fd5b602090810192508102360382131561237057600080fd5b6040518181016001600160401b038111828210171561310b57600080fd5b604052919050565b60006001600160401b03821115613128578081fd5b5060209081020190565b6000808335601e19843603018112613148578283fd5b83016020810192503590506001600160401b0381111561316757600080fd5b60208102360383131561237057600080fd5b60008235600281106124f6578182fd5b6000808335601e1984360301811261319f578283fd5b83016020810192503590506001600160401b038111156131be57600080fd5b80360383131561237057600080fd5b6001600160a01b0381168114610a5b57600080fd5b8015158114610a5b57600080fdfea264697066735822122043718210a021d00d2a4c9d39caf252cff2561664888d3ce32356f34664e36c3664736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100fc5760003560e01c8063135b968d146101015780631a78a275146101165780631eccc1851461013f578063333fbeef146101525780634ef39b751461016557806363ced092146101785780637840fb6c1461018b5780637b7d6c681461019e57806380ad2cf3146101b15780638a5c57df146101c45780639589da76146101d7578063991991c7146101ea578063a7f28da7146101fd578063affdd4ee14610210578063d46dadd114610223578063d945940714610236578063e0d945bf14610249578063e221e73a1461025c578063fb4112651461026f578063fbe5ce0a14610282575b600080fd5b61011461010f366004612930565b610295565b005b610129610124366004612693565b6103c7565b6040516101369190612d4f565b60405180910390f35b61011461014d36600461263b565b610871565b6101146101603660046125e9565b6108cb565b6101146101733660046124da565b6108f7565b6101146101863660046129a1565b610a5e565b6101146101993660046124fd565b610b59565b6101146101ac3660046125e9565b610b85565b6101146101bf366004612668565b610bb1565b6101146101d2366004612a95565b610bdd565b6101146101e53660046128be565b610c9e565b6101146101f8366004612668565b610d03565b61011461020b3660046125e9565b610d2f565b61011461021e366004612864565b610d5b565b6101146102313660046125fb565b610dc6565b610129610244366004612757565b610df4565b6101146102573660046129ed565b611135565b61011461026a3660046124fd565b61195d565b61011461027d3660046124da565b611989565b6101146102903660046125e9565b6119d8565b6060856001600160a01b031663b64ef17b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156102d057600080fd5b505afa1580156102e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103089190612848565b6001600160a01b031663cc77828d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561034057600080fd5b505afa158015610354573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261037c9190810190612535565b90506103bf868287878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250899250611a04915050565b505050505050565b60008786146103f15760405162461bcd60e51b81526004016103e890612fba565b60405180910390fd5b8784146104105760405162461bcd60e51b81526004016103e890612fba565b896001600160a01b03166391cefde46040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561044b57600080fd5b505af115801561045f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104839190612848565b6040516334e1990760e01b81529091506001600160a01b038216906334e19907906104b2908690600401613014565b600060405180830381600087803b1580156104cc57600080fd5b505af11580156104e0573d6000803e3d6000fd5b5050505060005b888110156106945760008a8a838181106104fd57fe5b905060200201602081019061051291906124da565b9050806001600160a01b03166323b872dd33308c8c8781811061053157fe5b905060200201356040518463ffffffff1660e01b815260040161055693929190612d63565b602060405180830381600087803b15801561057057600080fd5b505af1158015610584573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a891906125cd565b6105c45760405162461bcd60e51b81526004016103e890612fe7565b6105e181848b8b868181106105d557fe5b90506020020135611e58565b826001600160a01b031663e4e1e5388c8c858181106105fc57fe5b905060200201602081019061061191906124da565b8b8b8681811061061d57fe5b905060200201358a8a8781811061063057fe5b905060200201356040518463ffffffff1660e01b815260040161065593929190612f60565b600060405180830381600087803b15801561066f57600080fd5b505af1158015610683573d6000803e3d6000fd5b5050600190930192506104e7915050565b50811561080457806001600160a01b0316634bb278f36040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156106d657600080fd5b505af11580156106ea573d6000803e3d6000fd5b50506040516370a0823160e01b81526001600160a01b038416925063a9059cbb9150339083906370a0823190610724903090600401612d4f565b60206040518083038186803b15801561073c57600080fd5b505afa158015610750573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107749190612b0d565b6040518363ffffffff1660e01b8152600401610791929190612d87565b602060405180830381600087803b1580156107ab57600080fd5b505af11580156107bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e391906125cd565b6107ff5760405162461bcd60e51b81526004016103e890612fe7565b610864565b6040516324dacaa960e11b81526001600160a01b038216906349b595529061083190600190600401612faf565b600060405180830381600087803b15801561084b57600080fd5b505af115801561085f573d6000803e3d6000fd5b505050505b9998505050505050505050565b6040516324dacaa960e11b81526001600160a01b038316906349b595529061089d908490600401612faf565b600060405180830381600087803b1580156108b757600080fd5b505af11580156103bf573d6000803e3d6000fd5b60405163c83a1c2d60e01b81526001600160a01b0383169063c83a1c2d9061089d908490600401612d4f565b806001600160a01b0316634bb278f36040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561093257600080fd5b505af1158015610946573d6000803e3d6000fd5b50506040516370a0823160e01b81526001600160a01b038416925063a9059cbb9150339083906370a0823190610980903090600401612d4f565b60206040518083038186803b15801561099857600080fd5b505afa1580156109ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d09190612b0d565b6040518363ffffffff1660e01b81526004016109ed929190612d87565b602060405180830381600087803b158015610a0757600080fd5b505af1158015610a1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3f91906125cd565b610a5b5760405162461bcd60e51b81526004016103e890612fe7565b50565b6060836001600160a01b031663b64ef17b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a9957600080fd5b505afa158015610aad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad19190612848565b6001600160a01b031663cc77828d6040518163ffffffff1660e01b815260040160006040518083038186803b158015610b0957600080fd5b505afa158015610b1d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b459190810190612535565b9050610b5384848484611fe2565b50505050565b60405163325a48a760e21b81526001600160a01b0383169063c969229c9061089d908490600401612d4f565b6040516392eefe9b60e01b81526001600160a01b038316906392eefe9b9061089d908490600401612d4f565b6040516347786d3760e01b81526001600160a01b038316906347786d379061089d908490600401613014565b6060846001600160a01b031663be3bbd2e6040518163ffffffff1660e01b815260040160006040518083038186803b158015610c1857600080fd5b505afa158015610c2c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c549190810190612535565b9050610c97858286868680806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250339250611a04915050565b5050505050565b6040516329b0917160e21b81526001600160a01b0384169063a6c245c490610ccc9085908590600401612f81565b600060405180830381600087803b158015610ce657600080fd5b505af1158015610cfa573d6000803e3d6000fd5b50505050505050565b6040516334e1990760e01b81526001600160a01b038316906334e199079061089d908490600401613014565b60405163e2762d4b60e01b81526001600160a01b0383169063e2762d4b9061089d908490600401612d4f565b604051631b9276c760e21b81526001600160a01b03861690636e49db1c90610d8d908790879087908790600401612dba565b600060405180830381600087803b158015610da757600080fd5b505af1158015610dbb573d6000803e3d6000fd5b505050505050505050565b60405163992f6ba560e01b81526001600160a01b0384169063992f6ba590610ccc9085908590600401612d87565b6000610e0360608901896130a7565b9050610e1260408a018a6130a7565b905014610e315760405162461bcd60e51b81526004016103e890612fba565b610e3e60808901896130a7565b9050610e4d60408a018a6130a7565b905014610e6c5760405162461bcd60e51b81526004016103e890612fba565b60405163074aa1b960e51b81526001600160a01b038b169063e954372090610ea2908c908c908b908b908b908b90600401612de3565b602060405180830381600087803b158015610ebc57600080fd5b505af1158015610ed0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef49190612848565b905060005b610f0660408a018a6130a7565b905081101561101f576000610f1e60408b018b6130a7565b83818110610f2857fe5b9050602002016020810190610f3d91906124da565b90506001600160a01b0381166323b872dd3330610f5d60608f018f6130a7565b87818110610f6757fe5b905060200201356040518463ffffffff1660e01b8152600401610f8c93929190612d63565b602060405180830381600087803b158015610fa657600080fd5b505af1158015610fba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fde91906125cd565b610ffa5760405162461bcd60e51b81526004016103e890612fe7565b611016818461100c60608e018e6130a7565b868181106105d557fe5b50600101610ef9565b506001600160a01b038116630892b93d883560208a013561104660608c0160408d01612aee565b866040518563ffffffff1660e01b8152600401611066949392919061306f565b600060405180830381600087803b15801561108057600080fd5b505af1158015611094573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038416925063a9059cbb91506110c79033908b3590600401612d87565b602060405180830381600087803b1580156110e157600080fd5b505af11580156110f5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111991906125cd565b6108645760405162461bcd60e51b81526004016103e890612fe7565b8483146111545760405162461bcd60e51b81526004016103e890612fba565b8481146111735760405162461bcd60e51b81526004016103e890612fba565b60005b8581101561195357600087878381811061118c57fe5b90506020020160208101906111a191906124da565b9050886001600160a01b0316632f37b6248989858181106111be57fe5b90506020020160208101906111d391906124da565b6040518263ffffffff1660e01b81526004016111ef9190612d4f565b60206040518083038186803b15801561120757600080fd5b505afa15801561121b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123f91906125cd565b1561164c57886001600160a01b031663f8b2cb4f89898581811061125f57fe5b905060200201602081019061127491906124da565b6040518263ffffffff1660e01b81526004016112909190612d4f565b60206040518083038186803b1580156112a857600080fd5b505afa1580156112bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e09190612b0d565b8686848181106112ec57fe5b90506020020135111561150057806001600160a01b03166323b872dd33308c6001600160a01b031663f8b2cb4f8d8d8981811061132557fe5b905060200201602081019061133a91906124da565b6040518263ffffffff1660e01b81526004016113569190612d4f565b60206040518083038186803b15801561136e57600080fd5b505afa158015611382573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a69190612b0d565b8a8a888181106113b257fe5b90506020020135036040518463ffffffff1660e01b81526004016113d893929190612d63565b602060405180830381600087803b1580156113f257600080fd5b505af1158015611406573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142a91906125cd565b6114465760405162461bcd60e51b81526004016103e890612fe7565b611500818a8b6001600160a01b031663f8b2cb4f8c8c8881811061146657fe5b905060200201602081019061147b91906124da565b6040518263ffffffff1660e01b81526004016114979190612d4f565b60206040518083038186803b1580156114af57600080fd5b505afa1580156114c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e79190612b0d565b8989878181106114f357fe5b9050602002013503611e58565b620f424086868481811061151057fe5b9050602002013511156115c857886001600160a01b0316633fdddaa289898581811061153857fe5b905060200201602081019061154d91906124da565b88888681811061155957fe5b9050602002013587878781811061156c57fe5b905060200201356040518463ffffffff1660e01b815260040161159193929190612f60565b600060405180830381600087803b1580156115ab57600080fd5b505af11580156115bf573d6000803e3d6000fd5b50505050611647565b886001600160a01b031663cf5e7bd38989858181106115e357fe5b90506020020160208101906115f891906124da565b6040518263ffffffff1660e01b81526004016116149190612d4f565b600060405180830381600087803b15801561162e57600080fd5b505af1158015611642573d6000803e3d6000fd5b505050505b6117b4565b806001600160a01b03166323b872dd333089898781811061166957fe5b905060200201356040518463ffffffff1660e01b815260040161168e93929190612d63565b602060405180830381600087803b1580156116a857600080fd5b505af11580156116bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e091906125cd565b6116fc5760405162461bcd60e51b81526004016103e890612fe7565b61170d818a8888868181106105d557fe5b886001600160a01b031663e4e1e53889898581811061172857fe5b905060200201602081019061173d91906124da565b88888681811061174957fe5b9050602002013587878781811061175c57fe5b905060200201356040518463ffffffff1660e01b815260040161178193929190612f60565b600060405180830381600087803b15801561179b57600080fd5b505af11580156117af573d6000803e3d6000fd5b505050505b6040516370a0823160e01b81526000906001600160a01b038316906370a08231906117e3903090600401612d4f565b60206040518083038186803b1580156117fb57600080fd5b505afa15801561180f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118339190612b0d565b111561194a576040516370a0823160e01b81526001600160a01b0382169063a9059cbb90339083906370a082319061186f903090600401612d4f565b60206040518083038186803b15801561188757600080fd5b505afa15801561189b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118bf9190612b0d565b6040518363ffffffff1660e01b81526004016118dc929190612d87565b602060405180830381600087803b1580156118f657600080fd5b505af115801561190a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061192e91906125cd565b61194a5760405162461bcd60e51b81526004016103e890612fe7565b50600101611176565b5050505050505050565b60405163edb12adf60e01b81526001600160a01b0383169063edb12adf9061089d908490600401612d4f565b806001600160a01b031663d2fed42e6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156119c457600080fd5b505af1158015610c97573d6000803e3d6000fd5b60405163173825d960e01b81526001600160a01b0383169063173825d99061089d908490600401612d4f565b8351825114611a255760405162461bcd60e51b81526004016103e890612fba565b60005b8451811015611b21576000858281518110611a3f57fe5b60200260200101519050806001600160a01b03166323b872dd3330878681518110611a6657fe5b60200260200101516040518463ffffffff1660e01b8152600401611a8c93929190612d63565b602060405180830381600087803b158015611aa657600080fd5b505af1158015611aba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ade91906125cd565b611afa5760405162461bcd60e51b81526004016103e890612fe7565b611b188188868581518110611b0b57fe5b6020026020010151611e58565b50600101611a28565b5060405163077df9bd60e31b81526001600160a01b03861690633befcde890611b529086908690869060040161303e565b600060405180830381600087803b158015611b6c57600080fd5b505af1158015611b80573d6000803e3d6000fd5b5050505060005b8451811015611d46576000858281518110611b9e57fe5b602002602001015190506000816001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401611bd69190612d4f565b60206040518083038186803b158015611bee57600080fd5b505afa158015611c02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c269190612b0d565b1115611d3d576040516370a0823160e01b81526001600160a01b0382169063a9059cbb90339083906370a0823190611c62903090600401612d4f565b60206040518083038186803b158015611c7a57600080fd5b505afa158015611c8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb29190612b0d565b6040518363ffffffff1660e01b8152600401611ccf929190612d87565b602060405180830381600087803b158015611ce957600080fd5b505af1158015611cfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d2191906125cd565b611d3d5760405162461bcd60e51b81526004016103e890612fe7565b50600101611b87565b506040516370a0823160e01b81526001600160a01b0386169063a9059cbb90339083906370a0823190611d7d903090600401612d4f565b60206040518083038186803b158015611d9557600080fd5b505afa158015611da9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dcd9190612b0d565b6040518363ffffffff1660e01b8152600401611dea929190612d87565b602060405180830381600087803b158015611e0457600080fd5b505af1158015611e18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e3c91906125cd565b610c975760405162461bcd60e51b81526004016103e890612fe7565b604051636eb1769f60e11b81526000906001600160a01b0385169063dd62ed3e90611e899030908790600401612da0565b60206040518083038186803b158015611ea157600080fd5b505afa158015611eb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed99190612b0d565b1115611f625760405163095ea7b360e01b81526001600160a01b0384169063095ea7b390611f0e908590600090600401612d87565b602060405180830381600087803b158015611f2857600080fd5b505af1158015611f3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f6091906125cd565b505b60405163095ea7b360e01b81526001600160a01b0384169063095ea7b390611f909085908590600401612d87565b602060405180830381600087803b158015611faa57600080fd5b505af1158015611fbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5391906125cd565b6040516370a0823160e01b81526000906001600160a01b038616906370a0823190612011903390600401612d4f565b60206040518083038186803b15801561202957600080fd5b505afa15801561203d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120619190612b0d565b6040516323b872dd60e01b81529091506001600160a01b038616906323b872dd9061209490339030908690600401612d63565b602060405180830381600087803b1580156120ae57600080fd5b505af11580156120c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120e691906125cd565b6121025760405162461bcd60e51b81526004016103e890612fe7565b61210d858683611e58565b60405163b02f0b7360e01b81526001600160a01b0386169063b02f0b739061213b908790879060040161301d565b600060405180830381600087803b15801561215557600080fd5b505af1158015612169573d6000803e3d6000fd5b5050505060005b8251811015611d4657600083828151811061218757fe5b602002602001015190506000816001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016121bf9190612d4f565b60206040518083038186803b1580156121d757600080fd5b505afa1580156121eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061220f9190612b0d565b1115612326576040516370a0823160e01b81526001600160a01b0382169063a9059cbb90339083906370a082319061224b903090600401612d4f565b60206040518083038186803b15801561226357600080fd5b505afa158015612277573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061229b9190612b0d565b6040518363ffffffff1660e01b81526004016122b8929190612d87565b602060405180830381600087803b1580156122d257600080fd5b505af11580156122e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061230a91906125cd565b6123265760405162461bcd60e51b81526004016103e890612fe7565b50600101612170565b60008083601f840112612340578182fd5b5081356001600160401b03811115612356578182fd5b602083019150836020808302850101111561237057600080fd5b9250929050565b600082601f830112612387578081fd5b813561239a61239582613113565b6130ed565b8181529150602080830190848101818402860182018710156123bb57600080fd5b60005b848110156123e35781356123d1816131cd565b845292820192908201906001016123be565b505050505092915050565b600082601f8301126123fe578081fd5b813561240c61239582613113565b81815291506020808301908481018184028601820187101561242d57600080fd5b60005b848110156123e357813584529282019290820190600101612430565b8035612457816131cd565b92915050565b60006060828403121561246e578081fd5b50919050565b6000610400828403121561246e578081fd5b6000610160828403121561246e578081fd5b6000604082840312156124a9578081fd5b6124b360406130ed565b9050813581526020820135602082015292915050565b600060c0828403121561246e578081fd5b6000602082840312156124eb578081fd5b81356124f6816131cd565b9392505050565b6000806040838503121561250f578081fd5b823561251a816131cd565b9150602083013561252a816131cd565b809150509250929050565b60006020808385031215612547578182fd5b82516001600160401b0381111561255c578283fd5b8301601f8101851361256c578283fd5b805161257a61239582613113565b8181528381019083850185840285018601891015612596578687fd5b8694505b838510156125c15780516125ad816131cd565b83526001949094019391850191850161259a565b50979650505050505050565b6000602082840312156125de578081fd5b81516124f6816131e2565b6000806040838503121561250f578182fd5b60008060006060848603121561260f578081fd5b833561261a816131cd565b9250602084013561262a816131cd565b929592945050506040919091013590565b6000806040838503121561264d578182fd5b8235612658816131cd565b9150602083013561252a816131e2565b6000806040838503121561267a578182fd5b8235612685816131cd565b946020939093013593505050565b600080600080600080600080600060c08a8c0312156126b0578687fd5b89356126bb816131cd565b985060208a01356001600160401b03808211156126d6578889fd5b6126e28d838e0161232f565b909a50985060408c01359150808211156126fa578687fd5b6127068d838e0161232f565b909850965060608c013591508082111561271e578586fd5b5061272b8c828d0161232f565b90955093505060808a0135915060a08a0135612746816131e2565b809150509295985092959850929598565b60008060008060008060008060006106008a8c031215612775578283fd5b61277f8b8b61244c565b985061278e8b60208c0161244c565b975060408a01356001600160401b03808211156127a9578485fd5b6127b58d838e01612486565b98506127c48d60608e0161245d565b97506127d38d60c08e016124c9565b96506127e38d6101808e01612474565b95506105808c01359150808211156127f9578485fd5b6128058d838e01612377565b94506105a08c013591508082111561281b578384fd5b506128288c828d016123ee565b9250506128398b6105c08c01612498565b90509295985092959850929598565b600060208284031215612859578081fd5b81516124f6816131cd565b600080600080600060a0868803121561287b578283fd5b8535612886816131cd565b94506020860135612896816131cd565b935060408601356128a6816131cd565b94979396509394606081013594506080013592915050565b6000806000606084860312156128d2578081fd5b83356128dd816131cd565b925060208401356001600160401b03808211156128f8578283fd5b612904878388016123ee565b93506040860135915080821115612919578283fd5b5061292686828701612377565b9150509250925092565b600080600080600060808688031215612947578283fd5b8535612952816131cd565b94506020860135935060408601356001600160401b03811115612973578384fd5b61297f8882890161232f565b9094509250506060860135612993816131cd565b809150509295509295909350565b6000806000606084860312156129b5578081fd5b83356129c0816131cd565b92506020840135915060408401356001600160401b038111156129e1578182fd5b612926868287016123ee565b60008060008060008060006080888a031215612a07578081fd5b8735612a12816131cd565b965060208801356001600160401b0380821115612a2d578283fd5b612a398b838c0161232f565b909850965060408a0135915080821115612a51578283fd5b612a5d8b838c0161232f565b909650945060608a0135915080821115612a75578283fd5b50612a828a828b0161232f565b989b979a50959850939692959293505050565b60008060008060608587031215612aaa578182fd5b8435612ab5816131cd565b93506020850135925060408501356001600160401b03811115612ad6578283fd5b612ae28782880161232f565b95989497509550505050565b600060208284031215612aff578081fd5b8135600381106124f6578182fd5b600060208284031215612b1e578081fd5b5051919050565b60008284526020808501945082825b85811015612b62578135612b47816131cd565b6001600160a01b031687529582019590820190600101612b34565b509495945050505050565b6000815180845260208085019450808401835b83811015612b625781516001600160a01b031687529582019590820190600101612b80565b81835260006001600160fb1b03831115612bbd578081fd5b6020830280836020870137939093016020019283525090919050565b6000815180845260208085019450808401835b83811015612b6257815187529582019590820190600101612bec565b60028110612c1257fe5b9052565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b612c4a8282612d02565b610100612c5b818401828401612d02565b50610200612c6d818401828401612d02565b50610300612c7f818401828401612d02565b505050565b8035612c8f816131e2565b151582526020810135612ca1816131e2565b151560208301526040810135612cb6816131e2565b151560408301526060810135612ccb816131e2565b151560608301526080810135612ce0816131e2565b1515608083015260a0810135612cf5816131e2565b80151560a0840152505050565b612d0c8282612d40565b612d1c6040830160408301612d40565b612d2c6080830160808301612d40565b612d3c60c0830160c08301612d40565b5050565b80358252602090810135910152565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6001600160a01b038716815261054060208201819052600090612e068880613189565b61016083860152612e1c6106a086018284612c16565b92505050612e2d6020890189613189565b61053f198086850301610560870152612e47848385612c16565b9350612e5660408c018c613132565b935091508086850301610580870152612e70848484612b25565b9350612e7f60608c018c613132565b9350915080868503016105a0870152612e99848484612ba5565b9350612ea860808c018c613132565b9350915080868503016105c087015250612ec3838383612ba5565b9250505060a08801356105e084015260c088013561060084015260e088013561062084015261010080890135610640850152610120890135610660850152612f0f6101408a018a613179565b612f1d610680860182612c08565b50612f2b6040850189612c84565b612f3781850188612c40565b50828103610500840152612f4b8186612b6d565b90508281036105208401526108648185612bd9565b6001600160a01b039390931683526020830191909152604082015260600190565b600060408252612f946040830185612bd9565b8281036020840152612fa68185612b6d565b95945050505050565b901515815260200190565b60208082526013908201527208aa4a4be988a9c8ea890be9a92a69a82a8869606b1b604082015260600190565b60208082526013908201527211549497d514905394d1915497d19052531151606a1b604082015260600190565b90815260200190565b6000838252604060208301526130366040830184612bd9565b949350505050565b6000848252606060208301526130576060830185612bd9565b905060018060a01b0383166040830152949350505050565b8481526020810184905260a081016003841061308757fe5b836040830152825160608301526020830151608083015295945050505050565b6000808335601e198436030181126130bd578283fd5b8301803591506001600160401b038211156130d6578283fd5b602090810192508102360382131561237057600080fd5b6040518181016001600160401b038111828210171561310b57600080fd5b604052919050565b60006001600160401b03821115613128578081fd5b5060209081020190565b6000808335601e19843603018112613148578283fd5b83016020810192503590506001600160401b0381111561316757600080fd5b60208102360383131561237057600080fd5b60008235600281106124f6578182fd5b6000808335601e1984360301811261319f578283fd5b83016020810192503590506001600160401b038111156131be57600080fd5b80360383131561237057600080fd5b6001600160a01b0381168114610a5b57600080fd5b8015158114610a5b57600080fdfea264697066735822122043718210a021d00d2a4c9d39caf252cff2561664888d3ce32356f34664e36c3664736f6c634300060c0033",
  "libraries": {},
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
