{
  "address": "0x3d57b7f41B12da88E50d66ef0eCCBb2B9A75dfeE",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AddAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "LOGVaultAdr",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RemoveAdmin",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "RATIO_TOTAL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "kol",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "types",
          "type": "uint256"
        }
      ],
      "name": "_computeReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "adminClaimToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "adminList",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allOwnerPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "claimKolReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "types",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "poolTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokensAmount",
          "type": "uint256[]"
        }
      ],
      "name": "depositToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getAllKolReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getAllManagersReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBNB",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getController",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getKolsAdr",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getManagerClaimBool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "bools",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "maragerAdr",
          "type": "address"
        }
      ],
      "name": "getManagerReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwnerPercentage",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwners",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getPoolAllFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "kol",
          "type": "address"
        }
      ],
      "name": "getPoolKolTotalAmounts",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "kol",
          "type": "address"
        }
      ],
      "name": "getPoolKolUserInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "userAdr",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "userAmount",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct UserVault.KolUserInfo[]",
          "name": "info",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getPoolUserKolAdr",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getPoolUserList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokenList",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "maragerAdr",
          "type": "address"
        }
      ],
      "name": "getUnManagerReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_ownerPercentage",
          "type": "uint256[]"
        }
      ],
      "name": "initHandle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "init_totalAmount_list",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "isClosePool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "kol",
          "type": "address"
        }
      ],
      "name": "kolClaimTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "kol",
          "type": "address"
        }
      ],
      "name": "kolUnClaimAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "kol_claimed_list",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "kol_token_list",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "kol_totalAmount_list",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "kol_user_info",
      "outputs": [
        {
          "internalType": "address",
          "name": "userAdr",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "managerClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "managerClaimList",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "decimals",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct UserVault.ClaimTokenInfo[1]",
          "name": "",
          "type": "tuple[1]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "managerClaimRecordList",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "time",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct UserVault.ClaimTokenInfo[]",
              "name": "tokens",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct UserVault.ClaimRecordInfo[]",
          "name": "claimRecordInfos",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "manager_claimed_list",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ownerPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "owners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "poolIssueTokenAmount",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenAmount",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "poolIssueTokenList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "poolManagerTokenAmount",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenAmount",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "poolManagerTokenList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "poolPerfermanceTokenAmount",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenAmount",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "poolPerfermanceTokenList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "poolRedeemTokenAmount",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenAmount",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "poolRedeemTokenList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pool_manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "kol",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "poolTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokensAmount",
          "type": "uint256[]"
        }
      ],
      "name": "recordTokenInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "record_List",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "record_number",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "removeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_ownerPercentage",
          "type": "uint256"
        }
      ],
      "name": "setAddAdminList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "bools",
          "type": "bool"
        }
      ],
      "name": "setBlackList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "setController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adr",
          "type": "address"
        }
      ],
      "name": "setCrpFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "firstLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "secondLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "thirdLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "fourLevel",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SmartPoolManager.feeParams",
              "name": "managerFee",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "firstLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "secondLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "thirdLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "fourLevel",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SmartPoolManager.feeParams",
              "name": "issueFee",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "firstLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "secondLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "thirdLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "fourLevel",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SmartPoolManager.feeParams",
              "name": "redeemFee",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "firstLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "secondLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "thirdLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "fourLevel",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SmartPoolManager.feeParams",
              "name": "perfermanceFee",
              "type": "tuple"
            }
          ],
          "internalType": "struct SmartPoolManager.KolPoolParams",
          "name": "_poolParams",
          "type": "tuple"
        }
      ],
      "name": "setPoolParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adr",
          "type": "address"
        }
      ],
      "name": "setVaultAdr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "user_index_list",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "user_kol_list",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xfe9b367f68cf04ee00d67d3b84a3f75f835b69695843fb936f35d60232cc0e28",
  "receipt": {
    "to": null,
    "from": "0x595b85b4A418e3B8df897D02F5BD49167D00862F",
    "contractAddress": "0x3d57b7f41B12da88E50d66ef0eCCBb2B9A75dfeE",
    "transactionIndex": 0,
    "gasUsed": "5205497",
    "logsBloom": "0x
    "blockHash": "0x10be731e272a9f421db46d148fb1bf31cf08048d3b850850297aa8ff999119e9",
    "transactionHash": "0xfe9b367f68cf04ee00d67d3b84a3f75f835b69695843fb936f35d60232cc0e28",
    "logs": [],
    "blockNumber": 8053085,
    "cumulativeGasUsed": "5205497",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "8e675aca78e6b0fdd4120e4ec233ef3f",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"LOGVaultAdr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RemoveAdmin\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RATIO_TOTAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"kol\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"types\",\"type\":\"uint256\"}],\"name\":\"_computeReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"adminClaimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"adminList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allOwnerPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"claimKolReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"types\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"poolTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokensAmount\",\"type\":\"uint256[]\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getAllKolReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getAllManagersReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBNB\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getKolsAdr\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getManagerClaimBool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"bools\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maragerAdr\",\"type\":\"address\"}],\"name\":\"getManagerReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwnerPercentage\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolAllFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"kol\",\"type\":\"address\"}],\"name\":\"getPoolKolTotalAmounts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"kol\",\"type\":\"address\"}],\"name\":\"getPoolKolUserInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"userAdr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"userAmount\",\"type\":\"uint256[]\"}],\"internalType\":\"struct UserVault.KolUserInfo[]\",\"name\":\"info\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getPoolUserKolAdr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolUserList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenList\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maragerAdr\",\"type\":\"address\"}],\"name\":\"getUnManagerReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ownerPercentage\",\"type\":\"uint256[]\"}],\"name\":\"initHandle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"init_totalAmount_list\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isClosePool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"kol\",\"type\":\"address\"}],\"name\":\"kolClaimTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"kol\",\"type\":\"address\"}],\"name\":\"kolUnClaimAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"kol_claimed_list\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"kol_token_list\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"kol_totalAmount_list\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"kol_user_info\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"userAdr\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"managerClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"managerClaimList\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct UserVault.ClaimTokenInfo[1]\",\"name\":\"\",\"type\":\"tuple[1]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"managerClaimRecordList\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct UserVault.ClaimTokenInfo[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct UserVault.ClaimRecordInfo[]\",\"name\":\"claimRecordInfos\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"manager_claimed_list\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"poolIssueTokenAmount\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenAmount\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"poolIssueTokenList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"poolManagerTokenAmount\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenAmount\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"poolManagerTokenList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"poolPerfermanceTokenAmount\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenAmount\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"poolPerfermanceTokenList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"poolRedeemTokenAmount\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenAmount\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"poolRedeemTokenList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pool_manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"kol\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"poolTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokensAmount\",\"type\":\"uint256[]\"}],\"name\":\"recordTokenInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"record_List\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"record_number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ownerPercentage\",\"type\":\"uint256\"}],\"name\":\"setAddAdminList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"bools\",\"type\":\"bool\"}],\"name\":\"setBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setCrpFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"managerFee\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"issueFee\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"redeemFee\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"perfermanceFee\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.KolPoolParams\",\"name\":\"_poolParams\",\"type\":\"tuple\"}],\"name\":\"setPoolParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setVaultAdr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"user_index_list\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"user_kol_list\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Desyn Labs\",\"kind\":\"dev\",\"methods\":{\"getController()\":{\"details\":\"external for gas optimization\",\"returns\":{\"_0\":\"address - of the owner (AKA controller)\"}},\"removeOwner(address)\":{\"details\":\"Allows to remove an owner. Transaction has to be sent by wallet.\",\"params\":{\"owner\":\"Address of owner.\"}},\"setAddAdminList(address,uint256)\":{\"details\":\"external for gas optimization\",\"params\":{\"newOwner\":\"- address of new owner\"}},\"setController(address)\":{\"details\":\"external for gas optimization\",\"params\":{\"newOwner\":\"- address of new owner\"}}},\"title\":\"Vault managerFee\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getController()\":{\"notice\":\"Returns the address of the current owner\"},\"setAddAdminList(address,uint256)\":{\"notice\":\"Transfers ownership of the contract to a new account (`newOwner`).         Can only be called by the current owner\"},\"setController(address)\":{\"notice\":\"Transfers ownership of the contract to a new account (`newOwner`).         Can only be called by the current owner\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/deploy/UserVault.sol\":\"UserVault\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"contracts/deploy/UserVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\nlibrary SafeMath {\\n    function add(uint a, uint b) internal pure returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint a, uint b) internal pure returns (uint) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(\\n        uint a,\\n        uint b,\\n        string memory errorMessage\\n    ) internal pure returns (uint) {\\n        require(b <= a, errorMessage);\\n        uint c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint a, uint b) internal pure returns (uint) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint a, uint b) internal pure returns (uint) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(\\n        uint a,\\n        uint b,\\n        string memory errorMessage\\n    ) internal pure returns (uint) {\\n        require(b > 0, errorMessage);\\n        uint c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    function mod(uint a, uint b) internal pure returns (uint) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    function mod(\\n        uint a,\\n        uint b,\\n        string memory errorMessage\\n    ) internal pure returns (uint) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\nlibrary Address {\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            codehash := extcodehash(account)\\n        }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    function sendValue(address payable recipient, uint amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint weiValue,\\n        string memory errorMessage\\n    ) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            if (returndata.length > 0) {\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint toDeleteIndex = valueIndex - 1;\\n            uint lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function addValue(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint index) internal view returns (address) {\\n        return address(uint160(uint(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\\npragma solidity 0.6.12;\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../utils/DesynOwnable.sol\\\";\\nimport \\\"../libraries/SmartPoolManager.sol\\\";\\n// Contracts\\npragma experimental ABIEncoderV2;\\n\\ninterface ICRPPool {\\n    function getController() external view returns (address);\\n\\n    enum Etypes {\\n        OPENED,\\n        CLOSED\\n    }\\n\\n    function etype() external view returns (Etypes);\\n\\n    function isCompletedCollect() external view returns (bool);\\n}\\n\\ninterface IToken {\\n    function decimals() external view returns (uint);\\n}\\n\\ninterface IDesynOwnable {\\n    function adminList(address adr) external view returns (bool);\\n\\n    function getController() external view returns (address);\\n\\n    function getOwners() external view returns (address[] memory);\\n\\n    function getOwnerPercentage() external view returns (uint[] memory);\\n\\n    function allOwnerPercentage() external view returns (uint);\\n}\\n\\ninterface IDSProxy {\\n    function owner() external view returns (address);\\n}\\n\\ninterface ICRPFactory {\\n    function isCrp(address addr) external view returns (bool);\\n}\\n\\n/**\\n * @author Desyn Labs\\n * @title Vault managerFee\\n */\\ncontract UserVault is DesynOwnable {\\n    using SafeMath for uint;\\n    using Address for address;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    ICRPFactory crpFactory;\\n    address public vaultAddress;\\n\\n    event LOGVaultAdr(address indexed manager, address indexed caller);\\n\\n    struct ClaimTokenInfo {\\n        address token;\\n        uint decimals;\\n        uint amount;\\n    }\\n\\n    struct ClaimRecordInfo {\\n        uint time;\\n        ClaimTokenInfo[] tokens;\\n    }\\n\\n    // pool of tokens\\n    struct PoolTokens {\\n        address[] tokenList;\\n        address[] issueTokens;\\n        address[] redeemTokens;\\n        address[] perfermanceTokens;\\n        uint[] managerAmount;\\n        uint[] issueAmount;\\n        uint[] redeemAmount;\\n        uint[] perfermanceAmount;\\n    }\\n\\n    struct PoolStatus {\\n        bool couldManagerClaim;\\n        bool isBlackList;\\n        bool isSetParams;\\n        SmartPoolManager.KolPoolParams kolPoolConfig;\\n    }\\n\\n    // kol list\\n    struct KolUserInfo {\\n        address userAdr;\\n        uint[] userAmount;\\n    }\\n\\n    //pool=>manager\\n    mapping(address => address) public pool_manager;\\n\\n    // pool tokens\\n    mapping(address => PoolTokens) poolsTokens;\\n    mapping(address => PoolStatus) poolsStatus;\\n\\n    //history record\\n    mapping(address => uint) public record_number;\\n    mapping(address => mapping(uint => ClaimRecordInfo)) public record_List;\\n\\n    //pool => tokenList\\n    mapping(address => address[]) public kol_token_list;\\n\\n    //pool => initTotalAmount[]\\n    mapping(address => uint) public init_totalAmount_list;\\n    //pool => manager => uint\\n    mapping(address => mapping(address => uint)) public manager_claimed_list;\\n\\n    //pool => kol[]\\n    mapping(address => EnumerableSet.AddressSet) kols_list;\\n    //pool => kol =>uint\\n    mapping(address => mapping(address => uint)) public kol_claimed_list;\\n    //pool => kol => totalAmount[]\\n    mapping(address => mapping(address => uint[])) public kol_totalAmount_list;\\n    // pool => kol => KolUserInfo[]\\n    mapping(address => mapping(address => KolUserInfo[])) public kol_user_info;\\n\\n    //pool => user => index\\n    mapping(address => mapping(address => uint)) public user_index_list;\\n    // pool => user => kol\\n    mapping(address => mapping(address => address)) public user_kol_list;\\n\\n    uint public RATIO_TOTAL = 100;\\n\\n    receive() external payable {}\\n\\n    function depositToken(\\n        address pool,\\n        uint types,\\n        address[] calldata poolTokens,\\n        uint[] calldata tokensAmount\\n    ) external onlyVault {\\n        require(poolTokens.length == tokensAmount.length, \\\"ERR_TOKEN_LENGTH_NOT_MATCH\\\");\\n        if (pool_manager[pool] == address(0)) {\\n            pool_manager[pool] = ICRPPool(pool).getController();\\n        }\\n        (address[] memory _pool_tokenList, uint[] memory _pool_tokenAmount) = createTokenParams(pool, types);\\n        (address[] memory new_pool_tokenList, uint[] memory new_pool_tokenAmount) = communaldepositToken(poolTokens, tokensAmount, pool, _pool_tokenList, _pool_tokenAmount);\\n        setResult(pool, types, new_pool_tokenList, new_pool_tokenAmount);\\n        poolsStatus[pool].couldManagerClaim = true;\\n    }\\n\\n    function claimKolReward(address pool) external {\\n        try IVault(vaultAddress).managerClaim(pool) {} catch {}\\n        if (this.isClosePool(pool)) {\\n            require(crpFactory.isCrp(pool), \\\"ERR_INVALID_POOL_ADDRESS\\\");\\n            require(ICRPPool(pool).isCompletedCollect(), \\\"ERR_NOT_COMPLETED_COLLECT\\\");\\n            uint totalAmount = this.kolUnClaimAmount(pool, msg.sender);\\n            require(totalAmount > 0, \\\"ERR_HAS_NO_REWARD\\\");\\n\\n            kol_claimed_list[pool][msg.sender] += totalAmount;\\n            if (address(msg.sender).isContract()) {\\n                IERC20(kol_token_list[pool][0]).transfer(IDSProxy(msg.sender).owner(), totalAmount);\\n            } else {\\n                IERC20(kol_token_list[pool][0]).transfer(msg.sender, totalAmount);\\n            }\\n        }\\n    }\\n\\n    function managerClaim(address pool) external {\\n        try IVault(vaultAddress).managerClaim(pool) {} catch {}\\n        if (this.isClosePool(pool)) {\\n            require(crpFactory.isCrp(pool), \\\"ERR_INVALID_POOL_ADDRESS\\\");\\n            require(ICRPPool(pool).isCompletedCollect(), \\\"ERR_NOT_COMPLETED_COLLECT\\\");\\n            require(IDesynOwnable(pool).adminList(msg.sender) || IDesynOwnable(pool).getController() == msg.sender, \\\"Not Owner\\\");\\n            uint totalAmount = this.getUnManagerReward(pool, msg.sender);\\n            require(totalAmount > 0, \\\"ERR_HAS_NO_REWARD\\\");\\n\\n            manager_claimed_list[pool][msg.sender] += totalAmount;\\n            \\n            uint newIndex = record_number[pool].add(1);\\n            address issueToken = kol_token_list[pool][0];\\n            address receiver = address(msg.sender).isContract()? IDSProxy(msg.sender).owner(): msg.sender;\\n\\n            ClaimTokenInfo memory recordToken;\\n            recordToken.decimals = IERC20(issueToken).decimals();\\n            recordToken.token = issueToken;\\n            recordToken.amount = totalAmount;\\n            \\n            IERC20(issueToken).transfer(receiver, totalAmount);\\n            // record manager claim history\\n            record_number[pool] = newIndex;\\n            record_List[pool][newIndex].time = block.timestamp;\\n            record_List[pool][newIndex].tokens.push(recordToken);\\n        }\\n    }\\n\\n    function managerClaimRecordList(address pool) external view returns (ClaimRecordInfo[] memory claimRecordInfos) {\\n        uint num = record_number[pool];\\n        ClaimRecordInfo[] memory records = new ClaimRecordInfo[](num);\\n        for (uint i = 1; i < num + 1; i++) {\\n            ClaimRecordInfo memory record;\\n            record = record_List[pool][i];\\n            records[i.sub(1)] = record;\\n        }\\n        return records;\\n    }\\n\\n    function isClosePool(address pool) external view returns (bool) {\\n        return ICRPPool(pool).etype() == ICRPPool.Etypes.CLOSED;\\n    }\\n\\n    function getUnManagerReward(address pool, address maragerAdr) external view returns (uint) {\\n        return this.getManagerReward(pool, maragerAdr).sub(manager_claimed_list[pool][maragerAdr]);\\n    }\\n\\n    function getManagerReward(address pool, address maragerAdr) external view returns (uint) {\\n        uint totalAmount = this.getAllManagersReward(pool);\\n        address[] memory managerAddressList = IDesynOwnable(pool).getOwners();\\n        uint[] memory ownerPercentage = IDesynOwnable(pool).getOwnerPercentage();\\n        uint allOwnerPercentage = IDesynOwnable(pool).allOwnerPercentage();\\n        for (uint k = 0; k < managerAddressList.length; k++) {\\n            if (maragerAdr == managerAddressList[k]) {\\n                return totalAmount.mul(ownerPercentage[k]).div(allOwnerPercentage);\\n            }\\n        }\\n    }\\n\\n    function getAllManagersReward(address pool) external view returns (uint) {\\n        return this.getPoolAllFee(pool).sub(this.getAllKolReward(pool));\\n    }\\n\\n    function getPoolAllFee(address pool) external view returns (uint totalAmount) {\\n        PoolTokens memory tokens = poolsTokens[pool];\\n        totalAmount += tokens.managerAmount.length > 0 ? tokens.managerAmount[0] : 0;\\n        totalAmount += tokens.issueAmount.length > 0 ? tokens.issueAmount[0] : 0;\\n        totalAmount += tokens.redeemAmount.length > 0 ? tokens.redeemAmount[0] : 0;\\n        totalAmount += tokens.perfermanceAmount.length > 0 ? tokens.perfermanceAmount[0] : 0;\\n    }\\n\\n    function getAllKolReward(address pool) external view returns (uint totalAmount) {\\n        EnumerableSet.AddressSet storage list = kols_list[pool];\\n        uint len = list.length();\\n        for (uint i = 0; i < len; i++) {\\n            totalAmount += this.kolClaimTotal(pool, list.at(i));\\n        }\\n    }\\n\\n    function kolUnClaimAmount(address pool, address kol) external view returns (uint) {\\n        uint totalClaim = this.kolClaimTotal(pool, kol);\\n        uint totalClaimed = kol_claimed_list[pool][kol];\\n        return totalClaim.sub(totalClaimed);\\n    }\\n\\n    function kolClaimTotal(address pool, address kol) external view returns (uint) {\\n        uint totalFee;\\n        if (kol_totalAmount_list[pool][kol].length == 0) return totalFee;\\n        totalFee = totalFee.add(this._computeReward(pool, kol, 0));\\n        totalFee = totalFee.add(this._computeReward(pool, kol, 1));\\n        totalFee = totalFee.add(this._computeReward(pool, kol, 2));\\n        totalFee = totalFee.add(this._computeReward(pool, kol, 3));\\n        totalFee = totalFee.mul(kol_totalAmount_list[pool][kol][0]).div(init_totalAmount_list[pool]);\\n        return totalFee;\\n    }\\n\\n    function _computeReward(\\n        address pool,\\n        address kol,\\n        uint types\\n    ) external view returns (uint) {\\n        uint kolTotalAmount = kol_totalAmount_list[pool][kol].length > 0 ? kol_totalAmount_list[pool][kol][0] : 0;\\n        SmartPoolManager.KolPoolParams memory params = poolsStatus[pool].kolPoolConfig;\\n        uint totalFee;\\n\\n        PoolTokens memory tokens = poolsTokens[pool];\\n\\n        if(kolTotalAmount == 0){\\n            return 0;\\n        }\\n\\n        if (types == 0 && tokens.managerAmount.length > 0) {\\n            totalFee = tokens.managerAmount[0].mul(levelJudge(kolTotalAmount, params.managerFee)).div(RATIO_TOTAL);\\n        }  \\n        if (types == 1 && tokens.issueAmount.length > 0) {\\n            totalFee = tokens.issueAmount[0].mul(levelJudge(kolTotalAmount, params.issueFee)).div(RATIO_TOTAL);\\n        } \\n        if (types == 2 && tokens.redeemAmount.length > 0) {\\n            totalFee = tokens.redeemAmount[0].mul(levelJudge(kolTotalAmount, params.redeemFee)).div(RATIO_TOTAL);\\n        }  \\n        if (types == 3 && tokens.perfermanceAmount.length > 0) {\\n            totalFee = tokens.perfermanceAmount[0].mul(levelJudge(kolTotalAmount, params.perfermanceFee)).div(RATIO_TOTAL);\\n        }\\n        return totalFee;\\n    }\\n\\n    function levelJudge(uint amount, SmartPoolManager.feeParams memory _feeParams) internal view returns (uint) {\\n        for (uint i = 0; i < 4; i++) {\\n            if (i == 0) {\\n                if (_feeParams.firstLevel.level <= amount && amount < _feeParams.secondLevel.level) {\\n                    return _feeParams.firstLevel.ratio;\\n                }\\n            }\\n            if (i == 1) {\\n                if (_feeParams.secondLevel.level <= amount && amount < _feeParams.thirdLevel.level) {\\n                    return _feeParams.secondLevel.ratio;\\n                }\\n            }\\n            if (i == 2) {\\n                if (_feeParams.thirdLevel.level <= amount && amount < _feeParams.fourLevel.level) {\\n                    return _feeParams.thirdLevel.ratio;\\n                }\\n            }\\n            if (i == 3) {\\n                if (_feeParams.fourLevel.level <= amount) {\\n                    return _feeParams.fourLevel.ratio;\\n                }\\n            }\\n        }\\n    }\\n\\n    function setResult(\\n        address pool,\\n        uint types,\\n        address[] memory new_pool_tokenList,\\n        uint[] memory new_pool_tokenAmount\\n    ) internal {\\n        PoolTokens storage tokens = poolsTokens[pool];\\n        if (types == 0) {\\n            tokens.tokenList = new_pool_tokenList;\\n            tokens.managerAmount = new_pool_tokenAmount;\\n        }  \\n        if (types == 1) {\\n            tokens.issueTokens = new_pool_tokenList;\\n            tokens.issueAmount = new_pool_tokenAmount;\\n        }  \\n        if (types == 2) {\\n            tokens.redeemTokens = new_pool_tokenList;\\n            tokens.redeemAmount = new_pool_tokenAmount;\\n        }  \\n        if (types == 3) {\\n            tokens.perfermanceTokens = new_pool_tokenList;\\n            tokens.perfermanceAmount = new_pool_tokenAmount;\\n        }\\n    }\\n\\n    function createTokenParams(address pool, uint types) internal view returns (address[] memory _pool_tokenList, uint[] memory _pool_tokenAmount) {\\n        require(0 <= types && types < 4, \\\"ERR_TYPES\\\");\\n        \\n        PoolTokens memory tokens = poolsTokens[pool];\\n        if (types == 0) {\\n            _pool_tokenList = tokens.tokenList;\\n            _pool_tokenAmount = tokens.managerAmount;\\n        }\\n        if (types == 1) {\\n            _pool_tokenList = tokens.issueTokens;\\n            _pool_tokenAmount = tokens.issueAmount;\\n        }\\n        if (types == 2) {\\n            _pool_tokenList = tokens.redeemTokens;\\n            _pool_tokenAmount = tokens.redeemAmount;\\n        }\\n        if (types == 3) {\\n            _pool_tokenList = tokens.perfermanceTokens;\\n            _pool_tokenAmount = tokens.perfermanceAmount;\\n        }\\n    }\\n\\n    function communaldepositToken(\\n        address[] calldata poolTokens,\\n        uint[] calldata tokensAmount,\\n        address poolAdr,\\n        address[] memory _pool_tokenList,\\n        uint[] memory _pool_tokenAmount\\n    ) internal view returns (address[] memory new_pool_tokenList, uint[] memory new_pool_tokenAmount) {\\n        uint len = poolTokens.length;\\n        //old\\n        //new\\n        new_pool_tokenList = new address[](len);\\n        new_pool_tokenAmount = new uint[](len);\\n        if ((_pool_tokenList.length == _pool_tokenAmount.length && _pool_tokenList.length == 0) || !poolsStatus[poolAdr].couldManagerClaim) {\\n            for (uint i = 0; i < len; i++) {\\n                // uint tokenBalance = tokensAmount[i];\\n                new_pool_tokenList[i] = poolTokens[i];\\n                new_pool_tokenAmount[i] = tokensAmount[i];\\n            }\\n        } else {\\n            for (uint k = 0; k < len; k++) {\\n                if (_pool_tokenList[k] == poolTokens[k]) {\\n                    uint tokenBalance = tokensAmount[k];\\n                    new_pool_tokenList[k] = poolTokens[k];\\n                    new_pool_tokenAmount[k] = _pool_tokenAmount[k].add(tokenBalance);\\n                }\\n            }\\n        }\\n        return (new_pool_tokenList, new_pool_tokenAmount);\\n    }\\n\\n    function recordTokenInfo(\\n        address kol,\\n        address user,\\n        address[] calldata poolTokens,\\n        uint[] calldata tokensAmount\\n    ) external {\\n        address pool = msg.sender;\\n        uint len = poolTokens.length;\\n        require(len == tokensAmount.length, \\\"ERR_TOKEN_LENGTH_NOT_MATCH\\\");\\n        require(crpFactory.isCrp(pool), \\\"ERR_INVALID_POOL_ADDRESS\\\");\\n        if (kol_token_list[pool].length == 0) {\\n            kol_token_list[pool] = poolTokens;\\n        }\\n        address newKol = user_kol_list[pool][user];\\n        if (user_kol_list[pool][user] == address(0)) {\\n            user_kol_list[pool][user] = kol;\\n            if (!kols_list[pool].contains(kol)) {\\n                kols_list[pool].addValue(kol);\\n            }\\n            newKol = kol;\\n        }\\n        require(newKol != address(0), \\\"ERR_INVALID_KOL_ADDRESS\\\");\\n        //total amount record\\n        init_totalAmount_list[pool] = init_totalAmount_list[pool].add(tokensAmount[0]);\\n        uint[] memory totalAmounts = new uint[](len);\\n        for (uint i = 0; i < len; i++) {\\n            if (kol_totalAmount_list[pool][newKol].length == 0) {\\n                totalAmounts[i] = tokensAmount[i];\\n            } else {\\n                totalAmounts[i] = tokensAmount[i].add(kol_totalAmount_list[pool][newKol][i]);\\n            }\\n        }\\n        kol_totalAmount_list[pool][newKol] = totalAmounts;\\n        //kol user info record\\n        KolUserInfo[] storage userInfoArray = kol_user_info[pool][newKol];\\n        uint index = user_index_list[pool][user];\\n        if (index == 0) {\\n            KolUserInfo memory userInfo;\\n            userInfo.userAdr = user;\\n            userInfo.userAmount = tokensAmount;\\n            userInfoArray.push(userInfo);\\n            user_index_list[pool][user] = userInfoArray.length;\\n        } else {\\n            KolUserInfo storage userInfo = kol_user_info[pool][newKol][index - 1];\\n            for (uint a = 0; a < userInfo.userAmount.length; a++) {\\n                userInfo.userAmount[a] = userInfo.userAmount[a].add(tokensAmount[a]);\\n            }\\n        }\\n    }\\n\\n    function setPoolParams(address pool, SmartPoolManager.KolPoolParams memory _poolParams) external {\\n        PoolStatus storage status = poolsStatus[pool];\\n        require(crpFactory.isCrp(pool), \\\"ERR_INVALID_POOL_ADDRESS\\\");\\n        require(!status.isSetParams, \\\"ERR_HAS_SETED\\\");\\n\\n        status.isSetParams = true;\\n        status.kolPoolConfig = _poolParams;\\n    }\\n\\n    function managerClaimList(address pool) external view returns (ClaimTokenInfo[1] memory) {\\n        ClaimTokenInfo memory token;\\n        address issueToken = kol_token_list[pool][0];\\n\\n        token.token = issueToken;\\n        token.amount = this.getUnManagerReward(pool, msg.sender);\\n        token.decimals = IERC20(issueToken).decimals();\\n        ClaimTokenInfo[1] memory tokens = [token]; // for front-end call same as vault\\n        return tokens;\\n    }\\n\\n    function getKolsAdr(address pool) external view returns (address[] memory) {\\n        return kols_list[pool].values();\\n    }\\n\\n    function getPoolUserList(address pool) external view returns (address[] memory tokenList) {\\n        return kol_token_list[pool];\\n    }\\n\\n    function getPoolUserKolAdr(address pool, address user) external view returns (address tokenAddress) {\\n        return user_kol_list[pool][user];\\n    }\\n\\n    function getPoolKolUserInfo(address pool, address kol) external view returns (KolUserInfo[] memory info) {\\n        return kol_user_info[pool][kol];\\n    }\\n\\n    function getPoolKolTotalAmounts(address pool, address kol) external view returns (uint[] memory) {\\n        return kol_totalAmount_list[pool][kol];\\n    }\\n\\n    function poolManagerTokenList(address pool) external view returns (address[] memory tokens) {\\n        return poolsTokens[pool].tokenList;\\n    }\\n\\n    function poolManagerTokenAmount(address pool) external view returns (uint[] memory tokenAmount) {\\n        return poolsTokens[pool].managerAmount;\\n    }\\n\\n    function poolIssueTokenList(address pool) external view returns (address[] memory tokens) {\\n        return poolsTokens[pool].issueTokens;\\n    }\\n\\n    function poolRedeemTokenList(address pool) external view returns (address[] memory tokens) {\\n        return poolsTokens[pool].redeemTokens;\\n    }\\n\\n    function poolIssueTokenAmount(address pool) external view returns (uint[] memory tokenAmount) {\\n        return poolsTokens[pool].issueAmount;\\n    }\\n\\n    function poolRedeemTokenAmount(address pool) external view returns (uint[] memory tokenAmount) {\\n        return poolsTokens[pool].redeemAmount;\\n    }\\n\\n    function poolPerfermanceTokenList(address pool) external view returns (address[] memory tokens) {\\n        return poolsTokens[pool].perfermanceTokens;\\n    }\\n\\n    function poolPerfermanceTokenAmount(address pool) external view returns (uint[] memory tokenAmount) {\\n        return poolsTokens[pool].perfermanceAmount;\\n    }\\n\\n    function getManagerClaimBool(address pool) external view returns (bool bools) {\\n        bools = poolsStatus[pool].couldManagerClaim;\\n    }\\n\\n    function setBlackList(address pool, bool bools) external onlyOwner {\\n        poolsStatus[pool].isBlackList = bools;\\n    }\\n\\n    function setCrpFactory(address adr) external onlyOwner {\\n        crpFactory = ICRPFactory(adr);\\n    }\\n\\n    function adminClaimToken(\\n        address token,\\n        address user,\\n        uint amount\\n    ) external onlyOwner {\\n        IERC20(token).transfer(user, amount);\\n    }\\n\\n    function getBNB() external payable onlyOwner {\\n        msg.sender.transfer(address(this).balance);\\n    }\\n\\n    function setVaultAdr(address adr) external onlyOwner {\\n        require(adr != address(0), \\\"ERR_INVALID_VAULT_ADDRESS\\\");\\n        vaultAddress = adr;\\n        emit LOGVaultAdr(adr, msg.sender);\\n    }\\n\\n    modifier onlyVault() {\\n        require(vaultAddress == msg.sender, \\\"ERR_NOT_CONTROLLER\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xa7241a8fd914513d9af8a50d9c089db4e9935bdebac3dfa882494388af8701f9\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IBFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\nimport \\\"../libraries/SmartPoolManager.sol\\\";\\n\\ninterface IBPool {\\n    function rebind(\\n        address token,\\n        uint balance,\\n        uint denorm\\n    ) external;\\n\\n    function rebindSmart(\\n        address tokenA,\\n        address tokenB,\\n        uint deltaWeight,\\n        uint deltaBalance,\\n        bool isSoldout,\\n        uint minAmountOut\\n    ) external;\\n\\n    function execute(\\n        address _target,\\n        uint _value,\\n        bytes calldata _data\\n    ) external returns (bytes memory _returnValue);\\n\\n    function bind(\\n        address token,\\n        uint balance,\\n        uint denorm\\n    ) external;\\n\\n    function unbind(address token) external;\\n\\n    function unbindPure(address token) external;\\n\\n    function isBound(address token) external view returns (bool);\\n\\n    function getBalance(address token) external view returns (uint);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function getSwapFee() external view returns (uint);\\n\\n    function isPublicSwap() external view returns (bool);\\n\\n    function getDenormalizedWeight(address token) external view returns (uint);\\n\\n    function getTotalDenormalizedWeight() external view returns (uint);\\n\\n    function EXIT_FEE() external view returns (uint);\\n\\n    function getCurrentTokens() external view returns (address[] memory tokens);\\n\\n    function setController(address owner) external;\\n}\\n\\ninterface IBFactory {\\n    function newLiquidityPool() external returns (IBPool);\\n\\n    function setBLabs(address b) external;\\n\\n    function collect(IBPool pool) external;\\n\\n    function isBPool(address b) external view returns (bool);\\n\\n    function getBLabs() external view returns (address);\\n\\n    function getSwapRouter() external view returns (address);\\n\\n    function getVault() external view returns (address);\\n\\n    function getUserVault() external view returns (address);\\n\\n    function getVaultAddress() external view returns (address);\\n\\n    function getOracleAddress() external view returns (address);\\n\\n    function getManagerOwner() external view returns (address);\\n\\n    function isTokenWhitelistedForVerify(uint sort, address token) external view returns (bool);\\n\\n    function isTokenWhitelistedForVerify(address token) external view returns (bool);\\n\\n    function getModuleStatus(address etf, address module) external view returns (bool);\\n}\\n\\ninterface IVault {\\n    function depositManagerToken(address[] calldata poolTokens, uint[] calldata tokensAmount) external;\\n\\n    function depositIssueRedeemPToken(\\n        address[] calldata poolTokens,\\n        uint[] calldata tokensAmount,\\n        uint[] calldata tokensAmountP,\\n        bool isPerfermance\\n    ) external;\\n\\n    function managerClaim(address pool) external;\\n\\n    function getManagerClaimBool(address pool) external view returns (bool);\\n}\\n\\ninterface IUserVault {\\n    function recordTokenInfo(\\n        address kol,\\n        address user,\\n        address[] calldata poolTokens,\\n        uint[] calldata tokensAmount\\n    ) external;\\n}\\n\\ninterface Oracles {\\n    function getPrice(address tokenAddress) external returns (uint price);\\n\\n    function getAllPrice(address[] calldata poolTokens, uint[] calldata tokensAmount) external returns (uint);\\n}\\n\",\"keccak256\":\"0x13c400ca7a5f59c8730f553fcf189c14af0c0d65a79012793cbde56ce221a419\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IConfigurableRightsPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Interface declarations\\n\\n// Introduce to avoid circularity (otherwise, the CRP and SmartPoolManager include each other)\\n// Removing circularity allows flattener tools to work, which enables Etherscan verification\\ninterface IConfigurableRightsPool {\\n    function mintPoolShareFromLib(uint amount) external;\\n\\n    function pushPoolShareFromLib(address to, uint amount) external;\\n\\n    function pullPoolShareFromLib(address from, uint amount) external;\\n\\n    function burnPoolShareFromLib(uint amount) external;\\n\\n    function balanceOf(address account) external view returns (uint);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function getController() external view returns (address);\\n\\n    function vaultAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0x1326889b57f63cc031e7c9e383b0fd3b172a9b86eb623cf0faba32c0768c4ec4\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Interface declarations\\n\\n/* solhint-disable func-order */\\n\\ninterface IERC20 {\\n    // Emitted when the allowance of a spender for an owner is set by a call to approve.\\n    // Value is the new allowance\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n\\n    // Emitted when value tokens are moved from one account (from) to another (to).\\n    // Note that value may be zero\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    // Returns the amount of tokens in existence\\n    function totalSupply() external view returns (uint);\\n\\n    // Returns the amount of tokens owned by account\\n    function balanceOf(address account) external view returns (uint);\\n\\n    // Returns the decimals of tokens\\n    function decimals() external view returns (uint8);\\n\\n    function symbol() external view returns (string memory);\\n\\n    // Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner\\n    // through transferFrom. This is zero by default\\n    // This value changes when approve or transferFrom are called\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    // Sets amount as the allowance of spender over the caller\\u2019s tokens\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits an Approval event.\\n    function approve(address spender, uint amount) external returns (bool);\\n\\n    // Moves amount tokens from the caller\\u2019s account to recipient\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits a Transfer event.\\n    function transfer(address recipient, uint amount) external returns (bool);\\n\\n    // Moves amount tokens from sender to recipient using the allowance mechanism\\n    // Amount is then deducted from the caller\\u2019s allowance\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits a Transfer event\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xfe22b6d6029b400b9cce7f9b39c546f99cd6922b2fd926e480e2b4d476ab26f8\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/DesynConstants.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n/**\\n * @author Desyn Labs\\n * @title Put all the constants in one place\\n */\\n\\nlibrary DesynConstants {\\n    // State variables (must be constant in a library)\\n\\n    // B \\\"ONE\\\" - all math is in the \\\"realm\\\" of 10 ** 18;\\n    // where numeric 1 = 10 ** 18\\n    uint public constant BONE = 10**18;\\n    uint public constant MIN_WEIGHT = BONE;\\n    uint public constant MAX_WEIGHT = BONE * 50;\\n    uint public constant MAX_TOTAL_WEIGHT = BONE * 50;\\n    uint public constant MIN_BALANCE = 0;\\n    uint public constant MAX_BALANCE = BONE * 10**12;\\n    uint public constant MIN_POOL_SUPPLY = BONE * 100;\\n    uint public constant MAX_POOL_SUPPLY = BONE * 10**9;\\n    uint public constant MIN_FEE = BONE / 10**6;\\n    uint public constant MAX_FEE = BONE / 10;\\n    //Fee Set\\n    uint public constant MANAGER_MIN_FEE = 0;\\n    uint public constant MANAGER_MAX_FEE = BONE / 10;\\n    uint public constant ISSUE_MIN_FEE = 0;\\n    uint public constant ISSUE_MAX_FEE = BONE / 10;\\n    uint public constant REDEEM_MIN_FEE = 0;\\n    uint public constant REDEEM_MAX_FEE = BONE / 10;\\n    uint public constant PERFERMANCE_MIN_FEE = 0;\\n    uint public constant PERFERMANCE_MAX_FEE = BONE / 2;\\n    // EXIT_FEE must always be zero, or ConfigurableRightsPool._pushUnderlying will fail\\n    uint public constant EXIT_FEE = 0;\\n    uint public constant MAX_IN_RATIO = BONE / 2;\\n    uint public constant MAX_OUT_RATIO = (BONE / 3) + 1 wei;\\n    // Must match BConst.MIN_BOUND_TOKENS and BConst.MAX_BOUND_TOKENS\\n    uint public constant MIN_ASSET_LIMIT = 1;\\n    uint public constant MAX_ASSET_LIMIT = 16;\\n    uint public constant MAX_UINT = uint(-1);\\n    uint public constant MAX_COLLECT_PERIOD = 60 days;\\n}\\n\",\"keccak256\":\"0x25a552ca1ae8ef2bd0de4fca892fc10173a22719eb4f60aa47ca9eba5096b513\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/DesynSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Imports\\n\\nimport \\\"./DesynConstants.sol\\\";\\n\\n/**\\n * @author Desyn Labs\\n * @title SafeMath - wrap Solidity operators to prevent underflow/overflow\\n * @dev badd and bsub are basically identical to OpenZeppelin SafeMath; mul/div have extra checks\\n */\\nlibrary DesynSafeMath {\\n    /**\\n     * @notice Safe addition\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev if we are adding b to a, the resulting sum must be greater than a\\n     * @return - sum of operands; throws if overflow\\n     */\\n    function badd(uint a, uint b) internal pure returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, \\\"ERR_ADD_OVERFLOW\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned subtraction\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Do a signed subtraction, and check that it produces a positive value\\n     *      (i.e., a - b is valid if b <= a)\\n     * @return - a - b; throws if underflow\\n     */\\n    function bsub(uint a, uint b) internal pure returns (uint) {\\n        (uint c, bool negativeResult) = bsubSign(a, b);\\n        require(!negativeResult, \\\"ERR_SUB_UNDERFLOW\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Safe signed subtraction\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Do a signed subtraction\\n     * @return - difference between a and b, and a flag indicating a negative result\\n     *           (i.e., a - b if a is greater than or equal to b; otherwise b - a)\\n     */\\n    function bsubSign(uint a, uint b) internal pure returns (uint, bool) {\\n        if (b <= a) {\\n            return (a - b, false);\\n        } else {\\n            return (b - a, true);\\n        }\\n    }\\n\\n    /**\\n     * @notice Safe multiplication\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Multiply safely (and efficiently), rounding down\\n     * @return - product of operands; throws if overflow or rounding error\\n     */\\n    function bmul(uint a, uint b) internal pure returns (uint) {\\n        // Gas optimization (see github.com/OpenZeppelin/openzeppelin-contracts/pull/522)\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // Standard overflow check: a/a*b=b\\n        uint c0 = a * b;\\n        require(c0 / a == b, \\\"ERR_MUL_OVERFLOW\\\");\\n\\n        // Round to 0 if x*y < BONE/2?\\n        uint c1 = c0 + (DesynConstants.BONE / 2);\\n        require(c1 >= c0, \\\"ERR_MUL_OVERFLOW\\\");\\n        uint c2 = c1 / DesynConstants.BONE;\\n        return c2;\\n    }\\n\\n    /**\\n     * @notice Safe division\\n     * @param dividend - first operand\\n     * @param divisor - second operand\\n     * @dev Divide safely (and efficiently), rounding down\\n     * @return - quotient; throws if overflow or rounding error\\n     */\\n    function bdiv(uint dividend, uint divisor) internal pure returns (uint) {\\n        require(divisor != 0, \\\"ERR_DIV_ZERO\\\");\\n\\n        // Gas optimization\\n        if (dividend == 0) {\\n            return 0;\\n        }\\n\\n        uint c0 = dividend * DesynConstants.BONE;\\n        require(c0 / dividend == DesynConstants.BONE, \\\"ERR_DIV_INTERNAL\\\"); // bmul overflow\\n\\n        uint c1 = c0 + (divisor / 2);\\n        require(c1 >= c0, \\\"ERR_DIV_INTERNAL\\\"); //  badd require\\n\\n        uint c2 = c1 / divisor;\\n        return c2;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer modulo\\n     * @dev Returns the remainder of dividing two unsigned integers.\\n     *      Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * @param dividend - first operand\\n     * @param divisor - second operand -- cannot be zero\\n     * @return - quotient; throws if overflow or rounding error\\n     */\\n    function bmod(uint dividend, uint divisor) internal pure returns (uint) {\\n        require(divisor != 0, \\\"ERR_MODULO_BY_ZERO\\\");\\n\\n        return dividend % divisor;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer max\\n     * @dev Returns the greater of the two input values\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the maximum of a and b\\n     */\\n    function bmax(uint a, uint b) internal pure returns (uint) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer min\\n     * @dev returns b, if b < a; otherwise returns a\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the lesser of the two input values\\n     */\\n    function bmin(uint a, uint b) internal pure returns (uint) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer average\\n     * @dev Guard against (a+b) overflow by dividing each operand separately\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the average of the two values\\n     */\\n    function baverage(uint a, uint b) internal pure returns (uint) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\\n    }\\n\\n    /**\\n     * @notice Babylonian square root implementation\\n     * @dev (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n     * @param y - operand\\n     * @return z - the square root result\\n     */\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9baf30b98a5f3a8c13ac9c4d5d4b176eabfd936aba8f5172c95b7c568fba68f3\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/SafeApprove.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Imports\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n// Libraries\\n\\n/**\\n * @author PieDAO (ported to Desyn Labs)\\n * @title SafeApprove - set approval for tokens that require 0 prior approval\\n * @dev Perhaps to address the known ERC20 race condition issue\\n *      See https://github.com/crytic/not-so-smart-contracts/tree/master/race_condition\\n *      Some tokens - notably KNC - only allow approvals to be increased from 0\\n */\\nlibrary SafeApprove {\\n    /**\\n     * @notice handle approvals of tokens that require approving from a base of 0\\n     * @param token - the token we're approving\\n     * @param spender - entity the owner (sender) is approving to spend his tokens\\n     * @param amount - number of tokens being approved\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint amount\\n    ) internal returns (bool) {\\n        uint currentAllowance = token.allowance(address(this), spender);\\n\\n        // Do nothing if allowance is already set to this value\\n        if (currentAllowance == amount) {\\n            return true;\\n        }\\n\\n        // If approval is not zero reset it to zero first\\n        if (currentAllowance != 0) {\\n            token.approve(spender, 0);\\n        }\\n\\n        // do the actual approval\\n        return token.approve(spender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xa51ebf770f2676085b89b1636688cc086289cfe27f614dfd0c15142535c26752\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/SmartPoolManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Needed to pass in structs\\npragma experimental ABIEncoderV2;\\n\\n// Imports\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IConfigurableRightsPool.sol\\\";\\nimport \\\"../interfaces/IBFactory.sol\\\"; // unused\\nimport \\\"./DesynSafeMath.sol\\\"; // unused\\nimport \\\"./SafeApprove.sol\\\";\\n\\n/**\\n * @author Desyn Labs\\n * @title Factor out the weight updates\\n */\\nlibrary SmartPoolManager {\\n    using SafeApprove for IERC20;\\n\\n    //kol pool params\\n    struct levelParams {\\n        uint level;\\n        uint ratio;\\n    }\\n\\n    struct feeParams {\\n        levelParams firstLevel;\\n        levelParams secondLevel;\\n        levelParams thirdLevel;\\n        levelParams fourLevel;\\n    }\\n    struct KolPoolParams {\\n        feeParams managerFee;\\n        feeParams issueFee;\\n        feeParams redeemFee;\\n        feeParams perfermanceFee;\\n    }\\n\\n    // Type declarations\\n    enum Etypes {\\n        OPENED,\\n        CLOSED\\n    }\\n\\n    enum Period {\\n        HALF,\\n        ONE,\\n        TWO\\n    }\\n\\n    // updateWeight and pokeWeights are unavoidably long\\n    /* solhint-disable function-max-lines */\\n    struct Status {\\n        uint collectPeriod;\\n        uint collectEndTime;\\n        uint closurePeriod;\\n        uint closureEndTime;\\n        uint upperCap;\\n        uint floorCap;\\n        uint managerFee;\\n        uint redeemFee;\\n        uint issueFee;\\n        uint perfermanceFee;\\n        uint startClaimFeeTime;\\n    }\\n\\n    struct PoolParams {\\n        // Desyn Pool Token (representing shares of the pool)\\n        string poolTokenSymbol;\\n        string poolTokenName;\\n        // Tokens inside the Pool\\n        address[] constituentTokens;\\n        uint[] tokenBalances;\\n        uint[] tokenWeights;\\n        uint swapFee;\\n        uint managerFee;\\n        uint redeemFee;\\n        uint issueFee;\\n        uint perfermanceFee;\\n        Etypes etype;\\n    }\\n\\n    struct PoolTokenRange {\\n        uint bspFloor;\\n        uint bspCap;\\n    }\\n\\n    struct Fund {\\n        uint etfAmount;\\n        uint fundAmount;\\n    }\\n\\n    function initRequire(\\n        uint swapFee,\\n        uint managerFee,\\n        uint issueFee,\\n        uint redeemFee,\\n        uint perfermanceFee,\\n        uint tokenBalancesLength,\\n        uint tokenWeightsLength,\\n        uint constituentTokensLength,\\n        bool initBool\\n    ) external pure {\\n        // We don't have a pool yet; check now or it will fail later (in order of likelihood to fail)\\n        // (and be unrecoverable if they don't have permission set to change it)\\n        // Most likely to fail, so check first\\n        require(!initBool, \\\"Init fail\\\");\\n        require(swapFee >= DesynConstants.MIN_FEE, \\\"ERR_INVALID_SWAP_FEE\\\");\\n        require(swapFee <= DesynConstants.MAX_FEE, \\\"ERR_INVALID_SWAP_FEE\\\");\\n        require(managerFee >= DesynConstants.MANAGER_MIN_FEE, \\\"ERR_INVALID_MANAGER_FEE\\\");\\n        require(managerFee <= DesynConstants.MANAGER_MAX_FEE, \\\"ERR_INVALID_MANAGER_FEE\\\");\\n        require(issueFee >= DesynConstants.ISSUE_MIN_FEE, \\\"ERR_INVALID_ISSUE_MIN_FEE\\\");\\n        require(issueFee <= DesynConstants.ISSUE_MAX_FEE, \\\"ERR_INVALID_ISSUE_MAX_FEE\\\");\\n        require(redeemFee >= DesynConstants.REDEEM_MIN_FEE, \\\"ERR_INVALID_REDEEM_MIN_FEE\\\");\\n        require(redeemFee <= DesynConstants.REDEEM_MAX_FEE, \\\"ERR_INVALID_REDEEM_MAX_FEE\\\");\\n        require(perfermanceFee >= DesynConstants.PERFERMANCE_MIN_FEE, \\\"ERR_INVALID_PERFERMANCE_MIN_FEE\\\");\\n        require(perfermanceFee <= DesynConstants.PERFERMANCE_MAX_FEE, \\\"ERR_INVALID_PERFERMANCE_MAX_FEE\\\");\\n\\n        // Arrays must be parallel\\n        require(tokenBalancesLength == constituentTokensLength, \\\"ERR_START_BALANCES_MISMATCH\\\");\\n        require(tokenWeightsLength == constituentTokensLength, \\\"ERR_START_WEIGHTS_MISMATCH\\\");\\n        // Cannot have too many or too few - technically redundant, since BPool.bind() would fail later\\n        // But if we don't check now, we could have a useless contract with no way to create a pool\\n\\n        require(constituentTokensLength >= DesynConstants.MIN_ASSET_LIMIT, \\\"ERR_TOO_FEW_TOKENS\\\");\\n        require(constituentTokensLength <= DesynConstants.MAX_ASSET_LIMIT, \\\"ERR_TOO_MANY_TOKENS\\\");\\n        // There are further possible checks (e.g., if they use the same token twice), but\\n        // we can let bind() catch things like that (i.e., not things that might reasonably work)\\n    }\\n\\n    /**\\n     * @notice Update the weight of an existing token\\n     * @dev Refactored to library to make CRPFactory deployable\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param tokenA - token to sell\\n     * @param tokenB - token to buy\\n     */\\n    function rebalance(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address tokenA,\\n        address tokenB,\\n        uint deltaWeight,\\n        uint minAmountOut\\n    ) external {\\n        uint currentWeightA = bPool.getDenormalizedWeight(tokenA);\\n        uint currentBalanceA = bPool.getBalance(tokenA);\\n        // uint currentWeightB = bPool.getDenormalizedWeight(tokenB);\\n\\n        require(deltaWeight <= currentWeightA, \\\"ERR_DELTA_WEIGHT_TOO_BIG\\\");\\n\\n        // deltaBalance = currentBalance * (deltaWeight / currentWeight)\\n        uint deltaBalanceA = DesynSafeMath.bmul(currentBalanceA, DesynSafeMath.bdiv(deltaWeight, currentWeightA));\\n\\n        // uint currentBalanceB = bPool.getBalance(tokenB);\\n\\n        // uint deltaWeight = DesynSafeMath.bsub(newWeight, currentWeightA);\\n\\n        // uint newWeightB = DesynSafeMath.bsub(currentWeightB, deltaWeight);\\n        // require(newWeightB >= 0, \\\"ERR_INCORRECT_WEIGHT_B\\\");\\n        bool soldout;\\n        if (deltaWeight == currentWeightA) {\\n            // reduct token A\\n            bPool.unbindPure(tokenA);\\n            soldout = true;\\n        }\\n\\n        // Now with the tokens this contract can bind them to the pool it controls\\n        bPool.rebindSmart(tokenA, tokenB, deltaWeight, deltaBalanceA, soldout, minAmountOut);\\n    }\\n\\n    /**\\n     * @notice Non ERC20-conforming tokens are problematic; don't allow them in pools\\n     * @dev Will revert if invalid\\n     * @param token - The prospective token to verify\\n     */\\n    function verifyTokenCompliance(address token) external {\\n        verifyTokenComplianceInternal(token);\\n    }\\n\\n    /**\\n     * @notice Non ERC20-conforming tokens are problematic; don't allow them in pools\\n     * @dev Will revert if invalid - overloaded to save space in the main contract\\n     * @param tokens - The prospective tokens to verify\\n     */\\n    function verifyTokenCompliance(address[] calldata tokens) external {\\n        for (uint i = 0; i < tokens.length; i++) {\\n            verifyTokenComplianceInternal(tokens[i]);\\n        }\\n    }\\n\\n    function createPoolInternalHandle(IBPool bPool, uint initialSupply) external view {\\n        require(initialSupply >= DesynConstants.MIN_POOL_SUPPLY, \\\"ERR_INIT_SUPPLY_MIN\\\");\\n        require(initialSupply <= DesynConstants.MAX_POOL_SUPPLY, \\\"ERR_INIT_SUPPLY_MAX\\\");\\n        require(bPool.EXIT_FEE() == 0, \\\"ERR_NONZERO_EXIT_FEE\\\");\\n        // EXIT_FEE must always be zero, or ConfigurableRightsPool._pushUnderlying will fail\\n        require(DesynConstants.EXIT_FEE == 0, \\\"ERR_NONZERO_EXIT_FEE\\\");\\n    }\\n\\n    function createPoolHandle(\\n        uint collectPeriod,\\n        uint upperCap,\\n        uint initialSupply\\n    ) external pure {\\n        require(collectPeriod <= DesynConstants.MAX_COLLECT_PERIOD, \\\"ERR_EXCEEDS_FUND_RAISING_PERIOD\\\");\\n        require(upperCap >= initialSupply, \\\"ERR_CAP_BIGGER_THAN_INITSUPPLY\\\");\\n    }\\n\\n    function exitPoolHandle(\\n        uint _endEtfAmount,\\n        uint _endFundAmount,\\n        uint _beginEtfAmount,\\n        uint _beginFundAmount,\\n        uint poolAmountIn,\\n        uint totalEnd\\n    )\\n        external\\n        pure\\n        returns (\\n            uint endEtfAmount,\\n            uint endFundAmount,\\n            uint profitRate\\n        )\\n    {\\n        endEtfAmount = DesynSafeMath.badd(_endEtfAmount, poolAmountIn);\\n        endFundAmount = DesynSafeMath.badd(_endFundAmount, totalEnd);\\n        uint amount1 = DesynSafeMath.bdiv(endFundAmount, endEtfAmount);\\n        uint amount2 = DesynSafeMath.bdiv(_beginFundAmount, _beginEtfAmount);\\n        if (amount1 > amount2) {\\n            profitRate = DesynSafeMath.bdiv(\\n                DesynSafeMath.bmul(DesynSafeMath.bsub(DesynSafeMath.bdiv(endFundAmount, endEtfAmount), DesynSafeMath.bdiv(_beginFundAmount, _beginEtfAmount)), poolAmountIn),\\n                totalEnd\\n            );\\n        }\\n    }\\n\\n    function exitPoolHandleA(\\n        uint _tokenAmountOut,\\n        uint redeemFee,\\n        uint profitRate,\\n        uint perfermanceFee\\n    )\\n        external\\n        pure\\n        returns (\\n            uint redeemAndPerformanceFeeReceived,\\n            uint finalAmountOut,\\n            uint redeemFeeReceived\\n        )\\n    {\\n        // redeem fee\\n        redeemFeeReceived = DesynSafeMath.bmul(_tokenAmountOut, redeemFee);\\n\\n        // performance fee\\n        uint performanceFeeReceived = DesynSafeMath.bmul(DesynSafeMath.bmul(_tokenAmountOut, profitRate), perfermanceFee);\\n        \\n        // redeem fee and performance fee\\n        redeemAndPerformanceFeeReceived = DesynSafeMath.badd(performanceFeeReceived, redeemFeeReceived);\\n\\n        // final amount the user got\\n        finalAmountOut = DesynSafeMath.bsub(_tokenAmountOut, redeemAndPerformanceFeeReceived);\\n    }\\n\\n    function exitPoolHandleB(\\n        IConfigurableRightsPool self,\\n        bool bools,\\n        bool isCompletedCollect,\\n        uint closureEndTime,\\n        uint collectEndTime,\\n        uint _etfAmount,\\n        uint _fundAmount,\\n        uint poolAmountIn\\n    ) external view returns (uint etfAmount, uint fundAmount, uint actualPoolAmountIn) {\\n        actualPoolAmountIn = poolAmountIn;\\n        if (bools) {\\n            bool isCloseEtfCollectEndWithFailure = isCompletedCollect == false && block.timestamp >= collectEndTime;\\n            bool isCloseEtfClosureEnd = block.timestamp >= closureEndTime;\\n            require(isCloseEtfCollectEndWithFailure || isCloseEtfClosureEnd, \\\"ERR_CLOSURE_TIME_NOT_ARRIVED!\\\");\\n\\n            actualPoolAmountIn = self.balanceOf(msg.sender);\\n        }\\n        fundAmount = _fundAmount;\\n        etfAmount = _etfAmount;\\n    }\\n\\n    function joinPoolHandle(\\n        bool canWhitelistLPs,\\n        bool isList,\\n        bool bools,\\n        uint collectEndTime\\n    ) external view {\\n        require(!canWhitelistLPs || isList, \\\"ERR_NOT_ON_WHITELIST\\\");\\n\\n        if (bools) {\\n            require(block.timestamp <= collectEndTime, \\\"ERR_COLLECT_PERIOD_FINISHED!\\\");\\n        }\\n    }\\n\\n    function rebalanceHandle(\\n        IBPool bPool,\\n        bool bools,\\n        uint collectEndTime,\\n        uint closureEndTime,\\n        bool canChangeWeights,\\n        address tokenA,\\n        address tokenB\\n    ) external {\\n        require(bPool.isBound(tokenA), \\\"ERR_TOKEN_NOT_BOUND\\\");\\n        if (bools) {\\n            require(block.timestamp > collectEndTime && block.timestamp < closureEndTime, \\\"ERR_NOT_REBALANCE_PERIOD\\\");\\n        }\\n\\n        if (!bPool.isBound(tokenB)) {\\n            bool returnValue = IERC20(tokenB).safeApprove(address(bPool), DesynConstants.MAX_UINT);\\n            require(returnValue, \\\"ERR_ERC20_FALSE\\\");\\n        }\\n\\n        require(canChangeWeights, \\\"ERR_NOT_CONFIGURABLE_WEIGHTS\\\");\\n        require(tokenA != tokenB, \\\"ERR_TOKENS_SAME\\\");\\n    }\\n\\n    /**\\n     * @notice Join a pool\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param poolAmountOut - number of pool tokens to receive\\n     * @param maxAmountsIn - Max amount of asset tokens to spend\\n     * @return actualAmountsIn - calculated values of the tokens to pull in\\n     */\\n    function joinPool(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        uint poolAmountOut,\\n        uint[] calldata maxAmountsIn\\n    ) external view returns (uint[] memory actualAmountsIn) {\\n        address[] memory tokens = bPool.getCurrentTokens();\\n\\n        require(maxAmountsIn.length == tokens.length, \\\"ERR_AMOUNTS_MISMATCH\\\");\\n\\n        uint poolTotal = self.totalSupply();\\n        // Subtract  1 to ensure any rounding errors favor the pool\\n        uint ratio = DesynSafeMath.bdiv(poolAmountOut, DesynSafeMath.bsub(poolTotal, 1));\\n\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        // We know the length of the array; initialize it, and fill it below\\n        // Cannot do \\\"push\\\" in memory\\n        actualAmountsIn = new uint[](tokens.length);\\n\\n        // This loop contains external calls\\n        // External calls are to math libraries or the underlying pool, so low risk\\n        for (uint i = 0; i < tokens.length; i++) {\\n            address t = tokens[i];\\n            uint bal = bPool.getBalance(t);\\n            // Add 1 to ensure any rounding errors favor the pool\\n            uint tokenAmountIn = DesynSafeMath.bmul(ratio, DesynSafeMath.badd(bal, 1));\\n\\n            require(tokenAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountIn <= maxAmountsIn[i], \\\"ERR_LIMIT_IN\\\");\\n\\n            actualAmountsIn[i] = tokenAmountIn;\\n        }\\n    }\\n\\n    /**\\n     * @notice Exit a pool - redeem pool tokens for underlying assets\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param poolAmountIn - amount of pool tokens to redeem\\n     * @param minAmountsOut - minimum amount of asset tokens to receive\\n     * @return actualAmountsOut - calculated amounts of each token to pull\\n     */\\n    function exitPool(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        uint poolAmountIn,\\n        uint[] calldata minAmountsOut\\n    ) external view returns (uint[] memory actualAmountsOut) {\\n        address[] memory tokens = bPool.getCurrentTokens();\\n\\n        require(minAmountsOut.length == tokens.length, \\\"ERR_AMOUNTS_MISMATCH\\\");\\n\\n        uint poolTotal = self.totalSupply();\\n\\n        uint ratio = DesynSafeMath.bdiv(poolAmountIn, DesynSafeMath.badd(poolTotal, 1));\\n\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        actualAmountsOut = new uint[](tokens.length);\\n\\n        // This loop contains external calls\\n        // External calls are to math libraries or the underlying pool, so low risk\\n        for (uint i = 0; i < tokens.length; i++) {\\n            address t = tokens[i];\\n            uint bal = bPool.getBalance(t);\\n            // Subtract 1 to ensure any rounding errors favor the pool\\n            uint tokenAmountOut = DesynSafeMath.bmul(ratio, DesynSafeMath.bsub(bal, 1));\\n\\n            require(tokenAmountOut != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountOut >= minAmountsOut[i], \\\"ERR_LIMIT_OUT\\\");\\n\\n            actualAmountsOut[i] = tokenAmountOut;\\n        }\\n    }\\n\\n    // Internal functions\\n    // Check for zero transfer, and make sure it returns true to returnValue\\n    function verifyTokenComplianceInternal(address token) internal {\\n        bool returnValue = IERC20(token).transfer(msg.sender, 0);\\n        require(returnValue, \\\"ERR_NONCONFORMING_TOKEN\\\");\\n    }\\n\\n    function handleTransferInTokens(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address poolToken,\\n        uint actualAmountIn,\\n        uint _actualIssueFee\\n    ) external returns (uint issueFeeReceived) {\\n        issueFeeReceived = DesynSafeMath.bmul(actualAmountIn, _actualIssueFee);\\n        uint amount = DesynSafeMath.bsub(actualAmountIn, issueFeeReceived);\\n        // uint tokenBalance = bPool.getBalance(poolToken);\\n        // uint tokenWeight = bPool.getDenormalizedWeight(poolToken);\\n\\n        // bool xfer = IERC20(poolToken).transferFrom(msg.sender, address(this), amount);\\n        // require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n\\n        // bPool.rebind(poolToken, DesynSafeMath.badd(tokenBalance, amount), tokenWeight);\\n\\n        _pullUnderlying(bPool, poolToken, msg.sender, amount);\\n\\n        if (_actualIssueFee != 0) {\\n            bool xfer = IERC20(poolToken).transferFrom(msg.sender, address(this), issueFeeReceived);\\n            require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n\\n            IERC20(poolToken).safeApprove(self.vaultAddress(), issueFeeReceived);\\n        }\\n    }\\n\\n    function handleClaim(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address[] calldata poolTokens,\\n        uint managerFee,\\n        uint time\\n    ) external returns (uint[] memory tokensAmount) {\\n        for (uint i = 0; i < poolTokens.length; i++) {\\n            address t = poolTokens[i];\\n            uint tokenBalance = bPool.getBalance(t);\\n            uint tokenAmountOut = DesynSafeMath.bmul(tokenBalance, (managerFee * time) / 12);\\n            _pushUnderlying(bPool, t, msg.sender, tokenAmountOut);\\n\\n            IERC20(t).safeApprove(self.vaultAddress(), tokenAmountOut);\\n            tokensAmount[i] = tokenAmountOut;\\n        }\\n    }\\n\\n    function WhitelistHandle(\\n        bool bool1,\\n        bool bool2,\\n        address adr\\n    ) external pure {\\n        require(bool1, \\\"ERR_CANNOT_WHITELIST_LPS\\\");\\n        require(bool2, \\\"ERR_LP_NOT_WHITELISTED\\\");\\n        require(adr != address(0), \\\"ERR_INVALID_ADDRESS\\\");\\n    }\\n\\n    function _pullUnderlying(\\n        IBPool bPool,\\n        address erc20,\\n        address from,\\n        uint amount\\n    ) internal {\\n        uint tokenBalance = bPool.getBalance(erc20);\\n        uint tokenWeight = bPool.getDenormalizedWeight(erc20);\\n\\n        bool xfer = IERC20(erc20).transferFrom(from, address(this), amount);\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n        bPool.rebind(erc20, DesynSafeMath.badd(tokenBalance, amount), tokenWeight);\\n    }\\n\\n    function _pushUnderlying(\\n        IBPool bPool,\\n        address erc20,\\n        address to,\\n        uint amount\\n    ) internal {\\n        uint tokenBalance = bPool.getBalance(erc20);\\n        uint tokenWeight = bPool.getDenormalizedWeight(erc20);\\n        bPool.rebind(erc20, DesynSafeMath.bsub(tokenBalance, amount), tokenWeight);\\n\\n        bool xfer = IERC20(erc20).transfer(to, amount);\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x4df28e3715d50805b8b39238cae12d8a55ad5b79df3683b5d8f120636ba0a104\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/DesynOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract DesynOwnable {\\n    // State variables\\n\\n    address private _owner;\\n    mapping(address => bool) public adminList;\\n    address[] public owners;\\n    uint[] public ownerPercentage;\\n    uint public allOwnerPercentage;\\n    bool private initialized;\\n    // Event declarations\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    event AddAdmin(address indexed newAdmin, uint indexed amount);\\n    event RemoveAdmin(address indexed oldAdmin, uint indexed amount);\\n\\n    // Modifiers\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"ERR_NOT_CONTROLLER\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(adminList[msg.sender] || msg.sender == _owner, \\\"onlyAdmin\\\");\\n        _;\\n    }\\n\\n    // Function declarations\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() internal {\\n        _owner = msg.sender;\\n    }\\n\\n    function initHandle(address[] memory _owners, uint[] memory _ownerPercentage) external onlyOwner {\\n        require(_owners.length == _ownerPercentage.length, \\\"ownerP\\\");\\n        require(!initialized, \\\"initialized!\\\");\\n        for (uint i = 0; i < _owners.length; i++) {\\n            allOwnerPercentage += _ownerPercentage[i];\\n            adminList[_owners[i]] = true;\\n        }\\n        owners = _owners;\\n        ownerPercentage = _ownerPercentage;\\n\\n        initialized = true;\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n     *         Can only be called by the current owner\\n     * @dev external for gas optimization\\n     * @param newOwner - address of new owner\\n     */\\n    function setController(address newOwner) external onlyOwner {\\n        require(newOwner != address(0), \\\"ERR_ZERO_ADDRESS\\\");\\n\\n        emit OwnershipTransferred(_owner, newOwner);\\n\\n        _owner = newOwner;\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n     *         Can only be called by the current owner\\n     * @dev external for gas optimization\\n     * @param newOwner - address of new owner\\n     */\\n    function setAddAdminList(address newOwner, uint _ownerPercentage) external onlyOwner {\\n        require(!adminList[newOwner], \\\"Address is Owner\\\");\\n\\n        adminList[newOwner] = true;\\n        owners.push(newOwner);\\n        ownerPercentage.push(_ownerPercentage);\\n        allOwnerPercentage += _ownerPercentage;\\n        emit AddAdmin(newOwner, _ownerPercentage);\\n    }\\n\\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\\n    /// @param owner Address of owner.\\n    function removeOwner(address owner) external onlyOwner {\\n        adminList[owner] = false;\\n        uint amount = 0;\\n        for (uint i = 0; i < owners.length; i++) {\\n            if (owners[i] == owner) {\\n                owners[i] = owners[owners.length - 1];\\n                amount = ownerPercentage[i];\\n                ownerPercentage[i] = ownerPercentage[ownerPercentage.length - 1];\\n                break;\\n            }\\n        }\\n        owners.pop();\\n        ownerPercentage.pop();\\n        allOwnerPercentage -= amount;\\n        emit RemoveAdmin(owner, amount);\\n    }\\n\\n    // @dev Returns list of owners.\\n    // @return List of owner addresses.\\n    function getOwners() public view returns (address[] memory) {\\n        return owners;\\n    }\\n\\n    // @dev Returns list of owners.\\n    // @return List of owner addresses.\\n    function getOwnerPercentage() public view returns (uint[] memory) {\\n        return ownerPercentage;\\n    }\\n\\n    /**\\n     * @notice Returns the address of the current owner\\n     * @dev external for gas optimization\\n     * @return address - of the owner (AKA controller)\\n     */\\n    function getController() external view returns (address) {\\n        return _owner;\\n    }\\n}\\n\",\"keccak256\":\"0x9ed25e36bdc9ad4a3159c03fdd2d8118cb50ee28a62de58b74ef316ec4bbbd1d\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x6080604052606460155534801561001557600080fd5b50600080546001600160a01b03191633179055615c6280620000386000396000f3fe6080604052600436106102b05760003560e01c806368092bd91161016c57806368092bd9146106965780636936674d146106b657806378a619de146106d657806379f66374146106de5780638da901ba146106fe5780638f799e121461071e5780639155dae71461073e57806392eefe9b1461075e578063992f6ba51461077e578063a0e67e2b1461079e578063a5168ee2146107b3578063a97f9f33146107d3578063bbb6e808146107f3578063c0fcb16614610813578063c1e5762214610833578063c3e4d04f14610853578063c5318d0f14610873578063c90361dd14610893578063cf4fe635146108b3578063d29986c1146108e0578063d6b485a5146108f5578063d7256c7014610915578063de7f302214610935578063e0bea5ac14610955578063e65065d914610975578063ebef44d914610995578063ec7a4b52146109b5578063edb12adf146109d5578063edbfb5f5146109f5578063f36ed92814610a15576102b7565b8063025e7c27146102bc57806303a68ecb146102f25780630b83e6291461031f5780630e99089c1461034c57806311e1532a1461036c578063154726b21461038c578063173825d9146103ac5780631a46506e146103ce5780631cc9a579146103ee5780631eae039c1461041b5780631f70e80b1461043b57806327304dfd146104505780632b5230a91461047d5780632c0bdbcf1461049d5780632c7c1bb5146104ca5780633018205f146104ea578063309a042c146104ff5780633eedcfa0146105145780633ef144791461053457806341c65e8314610554578063430bf08a146105745780634660c5a51461058957806346bead89146105a95780634bbe2fca146105c95780634d4ae12d146105e95780634da3841614610616578063528b5853146106365780635834bac41461065657806358d2dbf014610676576102b7565b366102b757005b600080fd5b3480156102c857600080fd5b506102dc6102d73660046155c3565b610a35565b6040516102e9919061564e565b60405180910390f35b3480156102fe57600080fd5b5061031261030d36600461523d565b610a5c565b6040516102e99190615bbb565b34801561032b57600080fd5b5061033f61033a366004615174565b610a97565b6040516102e99190615879565b34801561035857600080fd5b5061031261036736600461513c565b610b11565b34801561037857600080fd5b5061031261038736600461513c565b610ee3565b34801561039857600080fd5b506103126103a7366004615174565b610fd6565b3480156103b857600080fd5b506103cc6103c736600461513c565b61108c565b005b3480156103da57600080fd5b5061033f6103e936600461513c565b611277565b3480156103fa57600080fd5b5061040e61040936600461513c565b6112e6565b6040516102e99190615706565b34801561042757600080fd5b506103cc61043636600461523d565b611452565b34801561044757600080fd5b50610312611502565b34801561045c57600080fd5b5061047061046b36600461513c565b611508565b6040516102e9919061588c565b34801561048957600080fd5b5061033f61049836600461513c565b61151d565b3480156104a957600080fd5b506104bd6104b836600461513c565b61158a565b6040516102e991906156b9565b3480156104d657600080fd5b506103126104e5366004615174565b611602565b3480156104f657600080fd5b506102dc61161f565b34801561050b57600080fd5b5061033f61162e565b34801561052057600080fd5b5061031261052f366004615174565b611686565b34801561054057600080fd5b506103cc61054f366004615443565b6116a3565b34801561056057600080fd5b506104bd61056f36600461513c565b6117c5565b34801561058057600080fd5b506102dc61183c565b34801561059557600080fd5b506103cc6105a43660046152aa565b61184b565b3480156105b557600080fd5b506103126105c4366004615174565b611a73565b3480156105d557600080fd5b506103126105e436600461533b565b611cdc565b3480156105f557600080fd5b5061060961060436600461513c565b611cf9565b6040516102e991906157b9565b34801561062257600080fd5b506104bd61063136600461513c565b611e5b565b34801561064257600080fd5b5061031261065136600461513c565b611ecf565b34801561066257600080fd5b5061031261067136600461523d565b611ee1565b34801561068257600080fd5b506102dc610691366004615174565b6125c3565b3480156106a257600080fd5b506103cc6106b136600461527d565b6125ed565b3480156106c257600080fd5b506103cc6106d136600461513c565b612648565b6103cc612b08565b3480156106ea57600080fd5b506102dc6106f9366004615174565b612b5e565b34801561070a57600080fd5b5061047061071936600461513c565b612b84565b34801561072a57600080fd5b50610312610739366004615174565b612c0b565b34801561074a57600080fd5b506103cc610759366004615366565b612c28565b34801561076a57600080fd5b506103cc61077936600461513c565b612d93565b34801561078a57600080fd5b506103cc61079936600461533b565b612e3e565b3480156107aa57600080fd5b506104bd612f67565b3480156107bf57600080fd5b5061033f6107ce36600461513c565b612fc8565b3480156107df57600080fd5b5061033f6107ee36600461513c565b613035565b3480156107ff57600080fd5b506102dc61080e36600461523d565b6130a2565b34801561081f57600080fd5b5061047061082e36600461513c565b6130e9565b34801561083f57600080fd5b506103cc61084e36600461513c565b613107565b34801561085f57600080fd5b506102dc61086e36600461513c565b613159565b34801561087f57600080fd5b5061031261088e3660046155c3565b613174565b34801561089f57600080fd5b506104bd6108ae36600461513c565b613192565b3480156108bf57600080fd5b506108d36108ce366004615174565b6131b6565b6040516102e9919061580d565b3480156108ec57600080fd5b5061031261329b565b34801561090157600080fd5b506103cc61091036600461513c565b6132a1565b34801561092157600080fd5b506103cc6109303660046151ac565b61333e565b34801561094157600080fd5b506104bd61095036600461513c565b6138be565b34801561096157600080fd5b506102dc61097036600461533b565b613935565b34801561098157600080fd5b50610312610990366004615174565b61396a565b3480156109a157600080fd5b506104bd6109b036600461513c565b613b14565b3480156109c157600080fd5b506103126109d0366004615174565b613b88565b3480156109e157600080fd5b506103cc6109f036600461513c565b613bda565b348015610a0157600080fd5b50610312610a1036600461513c565b614221565b348015610a2157600080fd5b50610312610a3036600461513c565b614233565b60028181548110610a4257fe5b6000918252602090912001546001600160a01b0316905081565b60116020528260005260406000206020528160005260406000208181548110610a8157fe5b9060005260206000200160009250925050505481565b6001600160a01b038083166000908152601160209081526040808320938516835292815290829020805483518184028101840190945280845260609392830182828015610b0357602002820191906000526020600020905b815481526020019060010190808311610aef575b505050505090505b92915050565b6000610b1b614d6a565b6001600160a01b038316600090815260086020908152604091829020825181546101209381028201840190945261010081018481529093919284928491840182828015610b9157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610b73575b5050505050815260200160018201805480602002602001604051908101604052809291908181526020018280548015610bf357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610bd5575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015610c5557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610c37575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015610cb757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610c99575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015610d0f57602002820191906000526020600020905b815481526020019060010190808311610cfb575b5050505050815260200160058201805480602002602001604051908101604052809291908181526020018280548015610d6757602002820191906000526020600020905b815481526020019060010190808311610d53575b5050505050815260200160068201805480602002602001604051908101604052809291908181526020018280548015610dbf57602002820191906000526020600020905b815481526020019060010190808311610dab575b5050505050815260200160078201805480602002602001604051908101604052809291908181526020018280548015610e1757602002820191906000526020600020905b815481526020019060010190808311610e03575b5050505050815250509050600081608001515111610e36576000610e50565b8060800151600081518110610e4757fe5b60200260200101515b60a082015151920191610e64576000610e7e565b8060a00151600081518110610e7557fe5b60200260200101515b60c082015151920191610e92576000610eac565b8060c00151600081518110610ea357fe5b60200260200101515b60e082015151920191610ec0576000610eda565b8060e00151600081518110610ed157fe5b60200260200101515b90910192915050565b604051631e6ddb2560e31b8152600090610b0b90309063f36ed92890610f0d90869060040161564e565b60206040518083038186803b158015610f2557600080fd5b505afa158015610f39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5d91906155db565b6040516303a6422760e21b81523090630e99089c90610f8090879060040161564e565b60206040518083038186803b158015610f9857600080fd5b505afa158015610fac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd091906155db565b906142f4565b60405163e65065d960e01b81526000908190309063e65065d990611000908790879060040161567b565b60206040518083038186803b15801561101857600080fd5b505afa15801561102c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105091906155db565b6001600160a01b0380861660009081526010602090815260408083209388168352929052205490915061108382826142f4565b95945050505050565b6000546001600160a01b031633146110bf5760405162461bcd60e51b81526004016110b6906158ea565b60405180910390fd5b6001600160a01b0381166000908152600160205260408120805460ff19169055805b6002548110156111e357826001600160a01b03166002828154811061110257fe5b6000918252602090912001546001600160a01b031614156111db5760028054600019810190811061112f57fe5b600091825260209091200154600280546001600160a01b03909216918390811061115557fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506003818154811061119057fe5b906000526020600020015491506003600160038054905003815481106111b257fe5b9060005260206000200154600382815481106111ca57fe5b6000918252602090912001556111e3565b6001016110e1565b5060028054806111ef57fe5b600082815260209020810160001990810180546001600160a01b0319169055019055600380548061121c57fe5b600082815260208120820160001990810182905590910190915560048054839003905560405182916001600160a01b038516917f7b0884b4b6bb4e0c1385ad42168fa556c14d4d799c1bf22f081aff3efff6ea0c9190a35050565b6001600160a01b0381166000908152600860209081526040918290206007018054835181840281018401909452808452606093928301828280156112da57602002820191906000526020600020905b8154815260200190600101908083116112c6575b50505050509050919050565b6001600160a01b0381166000908152600a602052604090205460609081816001600160401b038111801561131957600080fd5b5060405190808252806020026020018201604052801561135357816020015b611340614daf565b8152602001906001900390816113385790505b50905060015b8260010181101561144a5761136c614daf565b6001600160a01b0386166000908152600b60209081526040808320858452825280832081518083018352815481526001820180548451818702810187019095528085529195929486810194939192919084015b82821015611414576000848152602090819020604080516060810182526003860290920180546001600160a01b03168352600180820154848601526002909101549183019190915290835290920191016113bf565b5050509152509091508190508361142c8460016142f4565b8151811061143657fe5b602090810291909101015250600101611359565b509392505050565b6000546001600160a01b0316331461147c5760405162461bcd60e51b81526004016110b6906158ea565b60405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb906114aa9085908590600401615662565b602060405180830381600087803b1580156114c457600080fd5b505af11580156114d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114fc9190615588565b50505050565b60155481565b60016020526000908152604090205460ff1681565b6001600160a01b0381166000908152600860209081526040918290206006018054835181840281018401909452808452606093928301828280156112da57602002820191906000526020600020908154815260200190600101908083116112c65750505050509050919050565b6001600160a01b0381166000908152600860209081526040918290206002018054835181840281018401909452808452606093928301828280156112da57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116115d95750505050509050919050565b601360209081526000928352604080842090915290825290205481565b6000546001600160a01b031690565b6060600380548060200260200160405190810160405280929190818152602001828054801561167c57602002820191906000526020600020905b815481526020019060010190808311611668575b5050505050905090565b601060209081526000928352604080842090915290825290205481565b6000546001600160a01b031633146116cd5760405162461bcd60e51b81526004016110b6906158ea565b80518251146116ee5760405162461bcd60e51b81526004016110b690615a9b565b60055460ff16156117115760405162461bcd60e51b81526004016110b690615976565b60005b825181101561178b5781818151811061172957fe5b6020026020010151600460008282540192505081905550600180600085848151811061175157fe5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055600101611714565b50815161179f906002906020850190614dc9565b5080516117b3906003906020840190614e2e565b50506005805460ff1916600117905550565b6001600160a01b0381166000908152600860209081526040918290206003018054835181840281018401909452808452606093928301828280156112da576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116115d95750505050509050919050565b6006546001600160a01b031681565b6001600160a01b03808316600090815260096020526040908190206005549151636e0cf42160e11b815290926101009092049091169063dc19e8429061189590869060040161564e565b60206040518083038186803b1580156118ad57600080fd5b505afa1580156118c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e59190615588565b6119015760405162461bcd60e51b81526004016110b690615abb565b805462010000900460ff16156119295760405162461bcd60e51b81526004016110b690615b2e565b805462ff0000191662010000178155815180518051600184015560209081015160028401558082015180516003850155810151600484015560408083015180516005860155820151600685015560609283015180516007860155820151600885015581850151805180516009870155830151600a860155808301518051600b870155830151600c860155808201518051600d870155830151600e8601558301518051600f8601558201516010850155808501518051805160118701558301516012860155808301518051601387015583015160148601558082015180516015870155830151601686015583015180516017860155820151601885015593820151805180516019860155820151601a850155808201518051601b860155820151601c850155938401518051601d850155810151601e8401559201518051601f83015582015191015550565b6040516308f0a99560e11b8152600090819030906311e1532a90611a9b90879060040161564e565b60206040518083038186803b158015611ab357600080fd5b505afa158015611ac7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aeb91906155db565b90506060846001600160a01b031663a0e67e2b6040518163ffffffff1660e01b815260040160006040518083038186803b158015611b2857600080fd5b505afa158015611b3c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b6491908101906153ab565b90506060856001600160a01b031663309a042c6040518163ffffffff1660e01b815260040160006040518083038186803b158015611ba157600080fd5b505afa158015611bb5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611bdd9190810190615505565b90506000866001600160a01b031663d29986c16040518163ffffffff1660e01b815260040160206040518083038186803b158015611c1a57600080fd5b505afa158015611c2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c5291906155db565b905060005b8351811015611cd157838181518110611c6c57fe5b60200260200101516001600160a01b0316876001600160a01b03161415611cc957611cbd82611cb7858481518110611ca057fe5b60200260200101518861433690919063ffffffff16565b90614370565b95505050505050610b0b565b600101611c57565b505050505092915050565b600b60209081526000928352604080842090915290825290205481565b611d01614e75565b611d09614ea2565b6001600160a01b0383166000908152600c6020526040812080548290611d2b57fe5b6000918252602090912001546001600160a01b031680835260405163763d25a960e11b8152909150309063ec7a4b5290611d6b908790339060040161567b565b60206040518083038186803b158015611d8357600080fd5b505afa158015611d97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dbb91906155db565b826040018181525050806001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611dfd57600080fd5b505afa158015611e11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e3591906155f3565b60ff166020830152611e45614e75565b5050604080516020810190915290815292915050565b6001600160a01b0381166000908152600c60209081526040918290208054835181840281018401909452808452606093928301828280156112da576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116115d95750505050509050919050565b600d6020526000908152604090205481565b6001600160a01b0380841660009081526011602090815260408083209386168352929052908120548190611f16576000611f54565b6001600160a01b03808616600090815260116020908152604080832093881683529290529081208054909190611f4857fe5b90600052602060002001545b9050611f5e614ecc565b506001600160a01b03851660009081526009602081815260408084208151610140810183526001820154610100820190815260028301546101208301526080808301918252845180860186526003850154815260048501548188015260a080850191909152855180870187526005860154815260068601548189015260c08086019190915286518088018852600787015481526008870154818a015260e08601529284528551808401875297850154888301908152600a86015489830152885285518087018752600b8601548152600c860154818901528888015285518087018752600d8601548152600e860154818901528887015285518087018752600f860154815260108601548189015260608981019190915284880198909852855180840187526011860154818401908152601287015482840152815286518088018852601387015481526014870154818a01528189015286518088018852601587015481526016870154818a01528188015286518088018852601787015481526018870154818a0152818a015284870152855192830186526019850154918301918252601a85015490830152815283518085018552601b8401548152601c840154818701528186015283518085018552601d8401548152601e84015481870152818501528351808501909452601f83015484529184015493830193909352808401919091529181019190915290612171614d6a565b6001600160a01b0388166000908152600860209081526040918290208251815461012093810282018401909452610100810184815290939192849284918401828280156121e757602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116121c9575b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561224957602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161222b575b50505050508152602001600282018054806020026020016040519081016040528092919081815260200182805480156122ab57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161228d575b505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561230d57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116122ef575b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561236557602002820191906000526020600020905b815481526020019060010190808311612351575b50505050508152602001600582018054806020026020016040519081016040528092919081815260200182805480156123bd57602002820191906000526020600020905b8154815260200190600101908083116123a9575b505050505081526020016006820180548060200260200160405190810160405280929190818152602001828054801561241557602002820191906000526020600020905b815481526020019060010190808311612401575b505050505081526020016007820180548060200260200160405190810160405280929190818152602001828054801561246d57602002820191906000526020600020905b815481526020019060010190808311612459575b5050505050815250509050836000141561248e5760009450505050506125bc565b851580156124a157506000816080015151115b156124e7576124e4601554611cb76124bd8787600001516143af565b84608001516000815181106124ce57fe5b602002602001015161433690919063ffffffff16565b91505b8560011480156124fc575060008160a0015151115b1561252c57612529601554611cb76125188787602001516143af565b8460a001516000815181106124ce57fe5b91505b856002148015612541575060008160c0015151115b156125715761256e601554611cb761255d8787604001516143af565b8460c001516000815181106124ce57fe5b91505b856003148015612586575060008160e0015151115b156125b6576125b3601554611cb76125a28787606001516143af565b8460e001516000815181106124ce57fe5b91505b50925050505b9392505050565b6001600160a01b039182166000908152601460209081526040808320938516835292905220541690565b6000546001600160a01b031633146126175760405162461bcd60e51b81526004016110b6906158ea565b6001600160a01b03909116600090815260096020526040902080549115156101000261ff0019909216919091179055565b60065460405163edb12adf60e01b81526001600160a01b039091169063edb12adf9061267890849060040161564e565b600060405180830381600087803b15801561269257600080fd5b505af19250505080156126a3575060015b506040516346d480dd60e11b81523090638da901ba906126c790849060040161564e565b60206040518083038186803b1580156126df57600080fd5b505afa1580156126f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127179190615588565b15612b0557600554604051636e0cf42160e11b81526101009091046001600160a01b03169063dc19e8429061275090849060040161564e565b60206040518083038186803b15801561276857600080fd5b505afa15801561277c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127a09190615588565b6127bc5760405162461bcd60e51b81526004016110b690615abb565b806001600160a01b0316635468d6d76040518163ffffffff1660e01b815260040160206040518083038186803b1580156127f557600080fd5b505afa158015612809573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061282d9190615588565b6128495760405162461bcd60e51b81526004016110b690615b88565b604051630aa3935960e11b8152600090309063154726b290612871908590339060040161567b565b60206040518083038186803b15801561288957600080fd5b505afa15801561289d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128c191906155db565b9050600081116128e35760405162461bcd60e51b81526004016110b690615916565b6001600160a01b03821660009081526010602090815260408083203380855292529091208054830190556129169061448a565b15612a51576001600160a01b0382166000908152600c60205260408120805490919061293e57fe5b9060005260206000200160009054906101000a90046001600160a01b03166001600160a01b031663a9059cbb336001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156129a357600080fd5b505afa1580156129b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129db9190615158565b836040518363ffffffff1660e01b81526004016129f9929190615662565b602060405180830381600087803b158015612a1357600080fd5b505af1158015612a27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a4b9190615588565b50612b03565b6001600160a01b0382166000908152600c602052604081208054909190612a7457fe5b60009182526020909120015460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90612aaf9033908590600401615662565b602060405180830381600087803b158015612ac957600080fd5b505af1158015612add573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b019190615588565b505b505b50565b6000546001600160a01b03163314612b325760405162461bcd60e51b81526004016110b6906158ea565b60405133904780156108fc02916000818181858888f19350505050158015612b05573d6000803e3d6000fd5b60146020908152600092835260408084209091529082529020546001600160a01b031681565b60006001826001600160a01b03166373a9855c6040518163ffffffff1660e01b815260040160206040518083038186803b158015612bc157600080fd5b505afa158015612bd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bf991906155a4565b6001811115612c0457fe5b1492915050565b600e60209081526000928352604080842090915290825290205481565b6006546001600160a01b03163314612c525760405162461bcd60e51b81526004016110b6906158ea565b828114612c715760405162461bcd60e51b81526004016110b69061599c565b6001600160a01b0386811660009081526007602052604090205416612d3157856001600160a01b0316633018205f6040518163ffffffff1660e01b815260040160206040518083038186803b158015612cc957600080fd5b505afa158015612cdd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d019190615158565b6001600160a01b03878116600090815260076020526040902080546001600160a01b031916929091169190911790555b606080612d3e88886144c3565b91509150606080612d54888888888e898961485b565b91509150612d648a8a8484614ac1565b5050506001600160a01b039096166000908152600960205260409020805460ff19166001179055505050505050565b6000546001600160a01b03163314612dbd5760405162461bcd60e51b81526004016110b6906158ea565b6001600160a01b038116612de35760405162461bcd60e51b81526004016110b690615a4e565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314612e685760405162461bcd60e51b81526004016110b6906158ea565b6001600160a01b03821660009081526001602052604090205460ff1615612ea15760405162461bcd60e51b81526004016110b6906159f3565b6001600160a01b0382166000818152600160208190526040808320805460ff191683179055600280548084019091557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319168517905560038054928301815583527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b9091018490556004805485019055518392917fbd5dcf0b25226117c4a68a0129ffdd4b0541ef5e482ad7de9a96ccb6d6a8ebde91a35050565b6060600280548060200260200160405190810160405280929190818152602001828054801561167c57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612fa1575050505050905090565b6001600160a01b0381166000908152600860209081526040918290206005018054835181840281018401909452808452606093928301828280156112da57602002820191906000526020600020908154815260200190600101908083116112c65750505050509050919050565b6001600160a01b0381166000908152600860209081526040918290206004018054835181840281018401909452808452606093928301828280156112da57602002820191906000526020600020908154815260200190600101908083116112c65750505050509050919050565b601260205282600052604060002060205281600052604060002081815481106130c757fe5b60009182526020909120600290910201546001600160a01b0316925083915050565b6001600160a01b031660009081526009602052604090205460ff1690565b6000546001600160a01b031633146131315760405162461bcd60e51b81526004016110b6906158ea565b600580546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b6007602052600090815260409020546001600160a01b031681565b6003818154811061318157fe5b600091825260209091200154905081565b6001600160a01b0381166000908152600f60205260409020606090610b0b90614bb1565b6001600160a01b0380831660009081526012602090815260408083209385168352928152828220805484518184028101840190955280855260609493919290919084015b8282101561328f5760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561327757602002820191906000526020600020905b815481526020019060010190808311613263575b505050505081525050815260200190600101906131fa565b50505050905092915050565b60045481565b6000546001600160a01b031633146132cb5760405162461bcd60e51b81526004016110b6906158ea565b6001600160a01b0381166132f15760405162461bcd60e51b81526004016110b690615b55565b600680546001600160a01b0319166001600160a01b0383169081179091556040513391907ff5e71cc69e4610808e8e7c9099d63353897264c5dfc4da1a0320395866de497190600090a350565b338382811461335f5760405162461bcd60e51b81526004016110b69061599c565b600554604051636e0cf42160e11b81526101009091046001600160a01b03169063dc19e8429061339390859060040161564e565b60206040518083038186803b1580156133ab57600080fd5b505afa1580156133bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133e39190615588565b6133ff5760405162461bcd60e51b81526004016110b690615abb565b6001600160a01b0382166000908152600c6020526040902054613441576001600160a01b0382166000908152600c6020526040902061343f908787614f0b565b505b6001600160a01b0382811660009081526014602090815260408083208b8516845290915290205416806134e8576001600160a01b0383811660008181526014602090815260408083208d86168452825280832080546001600160a01b031916958f1695909517909455918152600f909152206134bd908a614bbd565b6134e5576001600160a01b0383166000908152600f602052604090206134e3908a614bd2565b505b50875b6001600160a01b03811661350e5760405162461bcd60e51b81526004016110b690615a1d565b6135468585600081811061351e57fe5b6001600160a01b0387166000908152600d602090815260409091205493910201359050614be7565b6001600160a01b0384166000908152600d60205260409020556060826001600160401b038111801561357757600080fd5b506040519080825280602002602001820160405280156135a1578160200160208202803683370190505b50905060005b8381101561368c576001600160a01b03808616600090815260116020908152604080832093871683529290522054613609578686828181106135e557fe5b905060200201358282815181106135f857fe5b602002602001018181525050613684565b6001600160a01b038086166000908152601160209081526040808320938716835292905220805461366b91908390811061363f57fe5b906000526020600020015488888481811061365657fe5b90506020020135614be790919063ffffffff16565b82828151811061367757fe5b6020026020010181815250505b6001016135a7565b506001600160a01b038085166000908152601160209081526040808320938616835292815291902082516136c292840190614e2e565b506001600160a01b0380851660008181526012602090815260408083208786168452825280832093835260138252808320948e1683529390529190912054806137f65761370d614f5e565b6001600160a01b038c168152604080516020808b0282810182019093528a825290918b918b91829185019084908082843760009201829052506020868101958652885460018082018b558a845292829020885160029092020180546001600160a01b0319166001600160a01b03909216919091178155955180518897965061379c955092860193500190614e2e565b505050828054905060136000896001600160a01b03166001600160a01b0316815260200190815260200160002060008e6001600160a01b03166001600160a01b0316815260200190815260200160002081905550506138b0565b6001600160a01b03808716600090815260126020908152604080832093881683529290529081208054600019840190811061382d57fe5b9060005260206000209060020201905060005b60018201548110156138ad5761388a8a8a8381811061385b57fe5b9050602002013583600101838154811061387157fe5b9060005260206000200154614be790919063ffffffff16565b82600101828154811061389957fe5b600091825260209091200155600101613840565b50505b505050505050505050505050565b6001600160a01b0381166000908152600860209081526040918290206001018054835181840281018401909452808452606093928301828280156112da576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116115d95750505050509050919050565b600c602052816000526040600020818154811061394e57fe5b6000918252602090912001546001600160a01b03169150829050565b6001600160a01b038083166000908152601160209081526040808320938516835292905290812054819061399f579050610b0b565b60405163160d2eb160e21b8152613a22903090635834bac4906139cb9088908890600090600401615695565b60206040518083038186803b1580156139e357600080fd5b505afa1580156139f7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a1b91906155db565b8290614be7565b60405163160d2eb160e21b8152909150613a51903090635834bac4906139cb9088908890600190600401615695565b60405163160d2eb160e21b8152909150613a80903090635834bac4906139cb9088908890600290600401615695565b60405163160d2eb160e21b8152909150613aaf903090635834bac4906139cb9088908890600390600401615695565b6001600160a01b038086166000908152600d60209081526040808320546011835281842094891684529390915281208054939450613b0c93611cb79290613af257fe5b90600052602060002001548461433690919063ffffffff16565b949350505050565b6001600160a01b0381166000908152600860209081526040918290208054835181840281018401909452808452606093928301828280156112da576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116115d95750505050509050919050565b6001600160a01b038083166000908152600e6020908152604080832093851683529290528181205491516346bead8960e01b815290916125bc9130906346bead8990610f80908890889060040161567b565b60065460405163edb12adf60e01b81526001600160a01b039091169063edb12adf90613c0a90849060040161564e565b600060405180830381600087803b158015613c2457600080fd5b505af1925050508015613c35575060015b506040516346d480dd60e11b81523090638da901ba90613c5990849060040161564e565b60206040518083038186803b158015613c7157600080fd5b505afa158015613c85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ca99190615588565b15612b0557600554604051636e0cf42160e11b81526101009091046001600160a01b03169063dc19e84290613ce290849060040161564e565b60206040518083038186803b158015613cfa57600080fd5b505afa158015613d0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d329190615588565b613d4e5760405162461bcd60e51b81526004016110b690615abb565b806001600160a01b0316635468d6d76040518163ffffffff1660e01b815260040160206040518083038186803b158015613d8757600080fd5b505afa158015613d9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613dbf9190615588565b613ddb5760405162461bcd60e51b81526004016110b690615b88565b6040516327304dfd60e01b81526001600160a01b038216906327304dfd90613e0790339060040161564e565b60206040518083038186803b158015613e1f57600080fd5b505afa158015613e33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e579190615588565b80613ee35750336001600160a01b0316816001600160a01b0316633018205f6040518163ffffffff1660e01b815260040160206040518083038186803b158015613ea057600080fd5b505afa158015613eb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ed89190615158565b6001600160a01b0316145b613eff5760405162461bcd60e51b81526004016110b690615a78565b60405163763d25a960e11b8152600090309063ec7a4b5290613f27908590339060040161567b565b60206040518083038186803b158015613f3f57600080fd5b505afa158015613f53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f7791906155db565b905060008111613f995760405162461bcd60e51b81526004016110b690615916565b6001600160a01b0382166000818152600e602090815260408083203384528252808320805486019055928252600a905290812054613fd8906001614be7565b6001600160a01b0384166000908152600c60205260408120805492935090918290613fff57fe5b60009182526020822001546001600160a01b0316915061401e3361448a565b6140285733614099565b336001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561406157600080fd5b505afa158015614075573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140999190615158565b90506140a3614ea2565b826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156140dc57600080fd5b505afa1580156140f0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061411491906155f3565b60ff1660208201526001600160a01b03831680825260408083018790525163a9059cbb60e01b815263a9059cbb906141529085908990600401615662565b602060405180830381600087803b15801561416c57600080fd5b505af1158015614180573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141a49190615588565b506001600160a01b039586166000908152600a60209081526040808320879055600b825280832096835295815285822042815560019081018054808301825590845292829020845160039094020180546001600160a01b031916939099169290921788558201519087015590920151600290940193909355505050565b600a6020526000908152604090205481565b6001600160a01b0381166000908152600f602052604081208161425582614c0c565b905060005b818110156142ec573063e65065d9866142738685614c17565b6040518363ffffffff1660e01b815260040161429092919061567b565b60206040518083038186803b1580156142a857600080fd5b505afa1580156142bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142e091906155db565b9093019260010161425a565b505050919050565b60006125bc83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250614c23565b60008261434557506000610b0b565b8282028284828161435257fe5b04146125bc5760405162461bcd60e51b81526004016110b690615aed565b60006125bc83836040518060400160405280601a815260200179536166654d6174683a206469766973696f6e206279207a65726f60301b815250614c4f565b6000805b600481101561448357806143e95782515184108015906143d7575060208301515184105b156143e9575050805160200151610b0b565b806001141561441f57602083015151841080159061440b575060408301515184105b1561441f5750506020808201510151610b0b565b8060021415614456576040830151518410801590614441575060608301515184105b15614456575050604081015160200151610b0b565b806003141561447b57606083015151841061447b575050606081015160200151610b0b565b6001016143b3565b5092915050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590613b0c575050151592915050565b606080600483106144e65760405162461bcd60e51b81526004016110b6906159d0565b6144ee614d6a565b6001600160a01b03851660009081526008602090815260409182902082518154610120938102820184019094526101008101848152909391928492849184018282801561456457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311614546575b50505050508152602001600182018054806020026020016040519081016040528092919081815260200182805480156145c657602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116145a8575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561462857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161460a575b505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561468a57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161466c575b50505050508152602001600482018054806020026020016040519081016040528092919081815260200182805480156146e257602002820191906000526020600020905b8154815260200190600101908083116146ce575b505050505081526020016005820180548060200260200160405190810160405280929190818152602001828054801561473a57602002820191906000526020600020905b815481526020019060010190808311614726575b505050505081526020016006820180548060200260200160405190810160405280929190818152602001828054801561479257602002820191906000526020600020905b81548152602001906001019080831161477e575b50505050508152602001600782018054806020026020016040519081016040528092919081815260200182805480156147ea57602002820191906000526020600020905b8154815260200190600101908083116147d6575b5050505050815250509050836000141561480b578051608082015190935091505b836001141561482357806020015192508060a0015191505b836002141561483b57806040015192508060c0015191505b836003141561485357806060015192508060e0015191505b509250929050565b60608087806001600160401b038111801561487557600080fd5b5060405190808252806020026020018201604052801561489f578160200160208202803683370190505b509250806001600160401b03811180156148b857600080fd5b506040519080825280602002602001820160405280156148e2578160200160208202803683370190505b509150835185511480156148f557508451155b8061491957506001600160a01b03861660009081526009602052604090205460ff16155b156149ae5760005b818110156149a8578a8a8281811061493557fe5b905060200201602081019061494a919061513c565b84828151811061495657fe5b60200260200101906001600160a01b031690816001600160a01b03168152505088888281811061498257fe5b9050602002013583828151811061499557fe5b6020908102919091010152600101614921565b50614ab4565b60005b81811015614ab2578a8a828181106149c557fe5b90506020020160208101906149da919061513c565b6001600160a01b03168682815181106149ef57fe5b60200260200101516001600160a01b03161415614aaa576000898983818110614a1457fe5b9050602002013590508b8b83818110614a2957fe5b9050602002016020810190614a3e919061513c565b858381518110614a4a57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050614a9081878481518110614a7a57fe5b6020026020010151614be790919063ffffffff16565b848381518110614a9c57fe5b602002602001018181525050505b6001016149b1565b505b5097509795505050505050565b6001600160a01b038416600090815260086020526040902083614b08578251614af09082906020860190614dc9565b508151614b069060048301906020850190614e2e565b505b8360011415614b3e578251614b269060018301906020860190614dc9565b508151614b3c9060058301906020850190614e2e565b505b8360021415614b74578251614b5c9060028301906020860190614dc9565b508151614b729060068301906020850190614e2e565b505b8360031415614baa578251614b929060038301906020860190614dc9565b508151614ba89060078301906020850190614e2e565b505b5050505050565b6060806125bc83614c86565b60006125bc836001600160a01b038416614ce0565b60006125bc836001600160a01b038416614cf8565b6000828201838110156125bc5760405162461bcd60e51b81526004016110b690615941565b6000610b0b82614d42565b60006125bc8383614d46565b60008184841115614c475760405162461bcd60e51b81526004016110b69190615897565b505050900390565b60008183614c705760405162461bcd60e51b81526004016110b69190615897565b506000838581614c7c57fe5b0495945050505050565b6060816000018054806020026020016040519081016040528092919081815260200182805480156112da57602002820191906000526020600020908154815260200190600101908083116112c65750505050509050919050565b60009081526001919091016020526040902054151590565b6000614d048383614ce0565b614d3a57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610b0b565b506000610b0b565b5490565b6000826000018281548110614d5757fe5b9060005260206000200154905092915050565b60405180610100016040528060608152602001606081526020016060815260200160608152602001606081526020016060815260200160608152602001606081525090565b604051806040016040528060008152602001606081525090565b828054828255906000526020600020908101928215614e1e579160200282015b82811115614e1e57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190614de9565b50614e2a929150614f76565b5090565b828054828255906000526020600020908101928215614e69579160200282015b82811115614e69578251825591602001919060010190614e4e565b50614e2a929150614f95565b60405180602001604052806001905b614e8c614ea2565b815260200190600190039081614e845790505090565b604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b6040518060800160405280614edf614faa565b8152602001614eec614faa565b8152602001614ef9614faa565b8152602001614f06614faa565b905290565b828054828255906000526020600020908101928215614e1e579160200282015b82811115614e1e5781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190614f2b565b60408051808201909152600081526060602082015290565b5b80821115614e2a5780546001600160a01b0319168155600101614f77565b5b80821115614e2a5760008155600101614f96565b6040518060800160405280614fbd614fe0565b8152602001614fca614fe0565b8152602001614fd7614fe0565b8152602001614f065b604051806040016040528060008152602001600081525090565b60008083601f84011261500b578182fd5b5081356001600160401b03811115615021578182fd5b602083019150836020808302850101111561503b57600080fd5b9250929050565b600082601f830112615052578081fd5b813561506561506082615bea565b615bc4565b81815291506020808301908481018184028601820187101561508657600080fd5b60005b84811015611cd157813584529282019290820190600101615089565b600061010082840312156150b7578081fd5b6150c16080615bc4565b90506150cd838361510b565b81526150dc836040840161510b565b60208201526150ee836080840161510b565b60408201526151008360c0840161510b565b606082015292915050565b60006040828403121561511c578081fd5b6151266040615bc4565b9050813581526020820135602082015292915050565b60006020828403121561514d578081fd5b81356125bc81615c09565b600060208284031215615169578081fd5b81516125bc81615c09565b60008060408385031215615186578081fd5b823561519181615c09565b915060208301356151a181615c09565b809150509250929050565b600080600080600080608087890312156151c4578182fd5b86356151cf81615c09565b955060208701356151df81615c09565b945060408701356001600160401b03808211156151fa578384fd5b6152068a838b01614ffa565b9096509450606089013591508082111561521e578384fd5b5061522b89828a01614ffa565b979a9699509497509295939492505050565b600080600060608486031215615251578283fd5b833561525c81615c09565b9250602084013561526c81615c09565b929592945050506040919091013590565b6000806040838503121561528f578182fd5b823561529a81615c09565b915060208301356151a181615c1e565b6000808284036104208112156152be578283fd5b83356152c981615c09565b9250610400601f19820112156152dd578182fd5b506152e86080615bc4565b6152f585602086016150a5565b81526153058561012086016150a5565b60208201526153188561022086016150a5565b604082015261532b8561032086016150a5565b6060820152809150509250929050565b6000806040838503121561534d578182fd5b823561535881615c09565b946020939093013593505050565b6000806000806000806080878903121561537e578384fd5b863561538981615c09565b95506020870135945060408701356001600160401b03808211156151fa578586fd5b600060208083850312156153bd578182fd5b82516001600160401b038111156153d2578283fd5b8301601f810185136153e2578283fd5b80516153f061506082615bea565b818152838101908385018584028501860189101561540c578687fd5b8694505b8385101561543757805161542381615c09565b835260019490940193918501918501615410565b50979650505050505050565b60008060408385031215615455578182fd5b82356001600160401b038082111561546b578384fd5b818501915085601f83011261547e578384fd5b813561548c61506082615bea565b80828252602080830192508086018a8283870289010111156154ac578889fd5b8896505b848710156154d75780356154c381615c09565b8452600196909601959281019281016154b0565b5090965087013593505050808211156154ee578283fd5b506154fb85828601615042565b9150509250929050565b60006020808385031215615517578182fd5b82516001600160401b0381111561552c578283fd5b8301601f8101851361553c578283fd5b805161554a61506082615bea565b8181528381019083850185840285018601891015615566578687fd5b8694505b8385101561543757805183526001949094019391850191850161556a565b600060208284031215615599578081fd5b81516125bc81615c1e565b6000602082840312156155b5578081fd5b8151600281106125bc578182fd5b6000602082840312156155d4578081fd5b5035919050565b6000602082840312156155ec578081fd5b5051919050565b600060208284031215615604578081fd5b815160ff811681146125bc578182fd5b6000815180845260208085019450808401835b8381101561564357815187529582019590820190600101615627565b509495945050505050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6020808252825182820181905260009190848201906040850190845b818110156156fa5783516001600160a01b0316835292840192918401916001016156d5565b50909695505050505050565b60208082528251828201819052600091906040908185019080840286018301878501865b838110156157ab57888303603f19018552815180518452870151878401879052805187850181905290880190606090818601908b5b8181101561579557845180516001600160a01b031684528c8101518d8501528b01518b840152938b01939183019160010161575f565b505096890196945050509086019060010161572a565b509098975050505050505050565b606081810190828460005b600181101561580357815180516001600160a01b03168452602080820151818601526040918201519185019190915292840192909101906001016157c4565b5050505092915050565b60208082528251828201819052600091906040908185019080840286018301878501865b838110156157ab57888303603f19018552815180516001600160a01b0316845287015187840187905261586687850182615614565b9588019593505090860190600101615831565b6000602082526125bc6020830184615614565b901515815260200190565b6000602080835283518082850152825b818110156158c3578581018301518582016040015282016158a7565b818111156158d45783604083870101525b50601f01601f1916929092016040019392505050565b60208082526012908201527122a9292fa727aa2fa1a7a72a2927a62622a960711b604082015260600190565b60208082526011908201527011549497d21054d7d393d7d49155d05491607a1b604082015260600190565b6020808252601b908201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604082015260600190565b6020808252600c908201526b696e697469616c697a65642160a01b604082015260600190565b6020808252601a908201527908aa4a4bea89e968a9cbe988a9c8ea890be9c9ea8be9a82a886960331b604082015260600190565b6020808252600990820152684552525f545950455360b81b604082015260600190565b60208082526010908201526f20b2323932b9b99034b99027bbb732b960811b604082015260600190565b6020808252601790820152764552525f494e56414c49445f4b4f4c5f4144445245535360481b604082015260600190565b60208082526010908201526f4552525f5a45524f5f4144445245535360801b604082015260600190565b6020808252600990820152682737ba1027bbb732b960b91b604082015260600190565b60208082526006908201526506f776e6572560d41b604082015260600190565b6020808252601890820152774552525f494e56414c49445f504f4f4c5f4144445245535360401b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252600d908201526c11549497d21054d7d4d1551151609a1b604082015260600190565b6020808252601990820152784552525f494e56414c49445f5641554c545f4144445245535360381b604082015260600190565b60208082526019908201527811549497d393d517d0d3d354131155115117d0d3d3131150d5603a1b604082015260600190565b90815260200190565b6040518181016001600160401b0381118282101715615be257600080fd5b604052919050565b60006001600160401b03821115615bff578081fd5b5060209081020190565b6001600160a01b0381168114612b0557600080fd5b8015158114612b0557600080fdfea26469706673582212205531285caddcccd6689f3f8f99bf183f4d515a098d3616db74ad1a430e585d3d64736f6c634300060c0033",
  "deployedBytecode": "0x6080604052600436106102b05760003560e01c806368092bd91161016c57806368092bd9146106965780636936674d146106b657806378a619de146106d657806379f66374146106de5780638da901ba146106fe5780638f799e121461071e5780639155dae71461073e57806392eefe9b1461075e578063992f6ba51461077e578063a0e67e2b1461079e578063a5168ee2146107b3578063a97f9f33146107d3578063bbb6e808146107f3578063c0fcb16614610813578063c1e5762214610833578063c3e4d04f14610853578063c5318d0f14610873578063c90361dd14610893578063cf4fe635146108b3578063d29986c1146108e0578063d6b485a5146108f5578063d7256c7014610915578063de7f302214610935578063e0bea5ac14610955578063e65065d914610975578063ebef44d914610995578063ec7a4b52146109b5578063edb12adf146109d5578063edbfb5f5146109f5578063f36ed92814610a15576102b7565b8063025e7c27146102bc57806303a68ecb146102f25780630b83e6291461031f5780630e99089c1461034c57806311e1532a1461036c578063154726b21461038c578063173825d9146103ac5780631a46506e146103ce5780631cc9a579146103ee5780631eae039c1461041b5780631f70e80b1461043b57806327304dfd146104505780632b5230a91461047d5780632c0bdbcf1461049d5780632c7c1bb5146104ca5780633018205f146104ea578063309a042c146104ff5780633eedcfa0146105145780633ef144791461053457806341c65e8314610554578063430bf08a146105745780634660c5a51461058957806346bead89146105a95780634bbe2fca146105c95780634d4ae12d146105e95780634da3841614610616578063528b5853146106365780635834bac41461065657806358d2dbf014610676576102b7565b366102b757005b600080fd5b3480156102c857600080fd5b506102dc6102d73660046155c3565b610a35565b6040516102e9919061564e565b60405180910390f35b3480156102fe57600080fd5b5061031261030d36600461523d565b610a5c565b6040516102e99190615bbb565b34801561032b57600080fd5b5061033f61033a366004615174565b610a97565b6040516102e99190615879565b34801561035857600080fd5b5061031261036736600461513c565b610b11565b34801561037857600080fd5b5061031261038736600461513c565b610ee3565b34801561039857600080fd5b506103126103a7366004615174565b610fd6565b3480156103b857600080fd5b506103cc6103c736600461513c565b61108c565b005b3480156103da57600080fd5b5061033f6103e936600461513c565b611277565b3480156103fa57600080fd5b5061040e61040936600461513c565b6112e6565b6040516102e99190615706565b34801561042757600080fd5b506103cc61043636600461523d565b611452565b34801561044757600080fd5b50610312611502565b34801561045c57600080fd5b5061047061046b36600461513c565b611508565b6040516102e9919061588c565b34801561048957600080fd5b5061033f61049836600461513c565b61151d565b3480156104a957600080fd5b506104bd6104b836600461513c565b61158a565b6040516102e991906156b9565b3480156104d657600080fd5b506103126104e5366004615174565b611602565b3480156104f657600080fd5b506102dc61161f565b34801561050b57600080fd5b5061033f61162e565b34801561052057600080fd5b5061031261052f366004615174565b611686565b34801561054057600080fd5b506103cc61054f366004615443565b6116a3565b34801561056057600080fd5b506104bd61056f36600461513c565b6117c5565b34801561058057600080fd5b506102dc61183c565b34801561059557600080fd5b506103cc6105a43660046152aa565b61184b565b3480156105b557600080fd5b506103126105c4366004615174565b611a73565b3480156105d557600080fd5b506103126105e436600461533b565b611cdc565b3480156105f557600080fd5b5061060961060436600461513c565b611cf9565b6040516102e991906157b9565b34801561062257600080fd5b506104bd61063136600461513c565b611e5b565b34801561064257600080fd5b5061031261065136600461513c565b611ecf565b34801561066257600080fd5b5061031261067136600461523d565b611ee1565b34801561068257600080fd5b506102dc610691366004615174565b6125c3565b3480156106a257600080fd5b506103cc6106b136600461527d565b6125ed565b3480156106c257600080fd5b506103cc6106d136600461513c565b612648565b6103cc612b08565b3480156106ea57600080fd5b506102dc6106f9366004615174565b612b5e565b34801561070a57600080fd5b5061047061071936600461513c565b612b84565b34801561072a57600080fd5b50610312610739366004615174565b612c0b565b34801561074a57600080fd5b506103cc610759366004615366565b612c28565b34801561076a57600080fd5b506103cc61077936600461513c565b612d93565b34801561078a57600080fd5b506103cc61079936600461533b565b612e3e565b3480156107aa57600080fd5b506104bd612f67565b3480156107bf57600080fd5b5061033f6107ce36600461513c565b612fc8565b3480156107df57600080fd5b5061033f6107ee36600461513c565b613035565b3480156107ff57600080fd5b506102dc61080e36600461523d565b6130a2565b34801561081f57600080fd5b5061047061082e36600461513c565b6130e9565b34801561083f57600080fd5b506103cc61084e36600461513c565b613107565b34801561085f57600080fd5b506102dc61086e36600461513c565b613159565b34801561087f57600080fd5b5061031261088e3660046155c3565b613174565b34801561089f57600080fd5b506104bd6108ae36600461513c565b613192565b3480156108bf57600080fd5b506108d36108ce366004615174565b6131b6565b6040516102e9919061580d565b3480156108ec57600080fd5b5061031261329b565b34801561090157600080fd5b506103cc61091036600461513c565b6132a1565b34801561092157600080fd5b506103cc6109303660046151ac565b61333e565b34801561094157600080fd5b506104bd61095036600461513c565b6138be565b34801561096157600080fd5b506102dc61097036600461533b565b613935565b34801561098157600080fd5b50610312610990366004615174565b61396a565b3480156109a157600080fd5b506104bd6109b036600461513c565b613b14565b3480156109c157600080fd5b506103126109d0366004615174565b613b88565b3480156109e157600080fd5b506103cc6109f036600461513c565b613bda565b348015610a0157600080fd5b50610312610a1036600461513c565b614221565b348015610a2157600080fd5b50610312610a3036600461513c565b614233565b60028181548110610a4257fe5b6000918252602090912001546001600160a01b0316905081565b60116020528260005260406000206020528160005260406000208181548110610a8157fe5b9060005260206000200160009250925050505481565b6001600160a01b038083166000908152601160209081526040808320938516835292815290829020805483518184028101840190945280845260609392830182828015610b0357602002820191906000526020600020905b815481526020019060010190808311610aef575b505050505090505b92915050565b6000610b1b614d6a565b6001600160a01b038316600090815260086020908152604091829020825181546101209381028201840190945261010081018481529093919284928491840182828015610b9157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610b73575b5050505050815260200160018201805480602002602001604051908101604052809291908181526020018280548015610bf357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610bd5575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015610c5557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610c37575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015610cb757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610c99575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015610d0f57602002820191906000526020600020905b815481526020019060010190808311610cfb575b5050505050815260200160058201805480602002602001604051908101604052809291908181526020018280548015610d6757602002820191906000526020600020905b815481526020019060010190808311610d53575b5050505050815260200160068201805480602002602001604051908101604052809291908181526020018280548015610dbf57602002820191906000526020600020905b815481526020019060010190808311610dab575b5050505050815260200160078201805480602002602001604051908101604052809291908181526020018280548015610e1757602002820191906000526020600020905b815481526020019060010190808311610e03575b5050505050815250509050600081608001515111610e36576000610e50565b8060800151600081518110610e4757fe5b60200260200101515b60a082015151920191610e64576000610e7e565b8060a00151600081518110610e7557fe5b60200260200101515b60c082015151920191610e92576000610eac565b8060c00151600081518110610ea357fe5b60200260200101515b60e082015151920191610ec0576000610eda565b8060e00151600081518110610ed157fe5b60200260200101515b90910192915050565b604051631e6ddb2560e31b8152600090610b0b90309063f36ed92890610f0d90869060040161564e565b60206040518083038186803b158015610f2557600080fd5b505afa158015610f39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5d91906155db565b6040516303a6422760e21b81523090630e99089c90610f8090879060040161564e565b60206040518083038186803b158015610f9857600080fd5b505afa158015610fac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd091906155db565b906142f4565b60405163e65065d960e01b81526000908190309063e65065d990611000908790879060040161567b565b60206040518083038186803b15801561101857600080fd5b505afa15801561102c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105091906155db565b6001600160a01b0380861660009081526010602090815260408083209388168352929052205490915061108382826142f4565b95945050505050565b6000546001600160a01b031633146110bf5760405162461bcd60e51b81526004016110b6906158ea565b60405180910390fd5b6001600160a01b0381166000908152600160205260408120805460ff19169055805b6002548110156111e357826001600160a01b03166002828154811061110257fe5b6000918252602090912001546001600160a01b031614156111db5760028054600019810190811061112f57fe5b600091825260209091200154600280546001600160a01b03909216918390811061115557fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506003818154811061119057fe5b906000526020600020015491506003600160038054905003815481106111b257fe5b9060005260206000200154600382815481106111ca57fe5b6000918252602090912001556111e3565b6001016110e1565b5060028054806111ef57fe5b600082815260209020810160001990810180546001600160a01b0319169055019055600380548061121c57fe5b600082815260208120820160001990810182905590910190915560048054839003905560405182916001600160a01b038516917f7b0884b4b6bb4e0c1385ad42168fa556c14d4d799c1bf22f081aff3efff6ea0c9190a35050565b6001600160a01b0381166000908152600860209081526040918290206007018054835181840281018401909452808452606093928301828280156112da57602002820191906000526020600020905b8154815260200190600101908083116112c6575b50505050509050919050565b6001600160a01b0381166000908152600a602052604090205460609081816001600160401b038111801561131957600080fd5b5060405190808252806020026020018201604052801561135357816020015b611340614daf565b8152602001906001900390816113385790505b50905060015b8260010181101561144a5761136c614daf565b6001600160a01b0386166000908152600b60209081526040808320858452825280832081518083018352815481526001820180548451818702810187019095528085529195929486810194939192919084015b82821015611414576000848152602090819020604080516060810182526003860290920180546001600160a01b03168352600180820154848601526002909101549183019190915290835290920191016113bf565b5050509152509091508190508361142c8460016142f4565b8151811061143657fe5b602090810291909101015250600101611359565b509392505050565b6000546001600160a01b0316331461147c5760405162461bcd60e51b81526004016110b6906158ea565b60405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb906114aa9085908590600401615662565b602060405180830381600087803b1580156114c457600080fd5b505af11580156114d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114fc9190615588565b50505050565b60155481565b60016020526000908152604090205460ff1681565b6001600160a01b0381166000908152600860209081526040918290206006018054835181840281018401909452808452606093928301828280156112da57602002820191906000526020600020908154815260200190600101908083116112c65750505050509050919050565b6001600160a01b0381166000908152600860209081526040918290206002018054835181840281018401909452808452606093928301828280156112da57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116115d95750505050509050919050565b601360209081526000928352604080842090915290825290205481565b6000546001600160a01b031690565b6060600380548060200260200160405190810160405280929190818152602001828054801561167c57602002820191906000526020600020905b815481526020019060010190808311611668575b5050505050905090565b601060209081526000928352604080842090915290825290205481565b6000546001600160a01b031633146116cd5760405162461bcd60e51b81526004016110b6906158ea565b80518251146116ee5760405162461bcd60e51b81526004016110b690615a9b565b60055460ff16156117115760405162461bcd60e51b81526004016110b690615976565b60005b825181101561178b5781818151811061172957fe5b6020026020010151600460008282540192505081905550600180600085848151811061175157fe5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055600101611714565b50815161179f906002906020850190614dc9565b5080516117b3906003906020840190614e2e565b50506005805460ff1916600117905550565b6001600160a01b0381166000908152600860209081526040918290206003018054835181840281018401909452808452606093928301828280156112da576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116115d95750505050509050919050565b6006546001600160a01b031681565b6001600160a01b03808316600090815260096020526040908190206005549151636e0cf42160e11b815290926101009092049091169063dc19e8429061189590869060040161564e565b60206040518083038186803b1580156118ad57600080fd5b505afa1580156118c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e59190615588565b6119015760405162461bcd60e51b81526004016110b690615abb565b805462010000900460ff16156119295760405162461bcd60e51b81526004016110b690615b2e565b805462ff0000191662010000178155815180518051600184015560209081015160028401558082015180516003850155810151600484015560408083015180516005860155820151600685015560609283015180516007860155820151600885015581850151805180516009870155830151600a860155808301518051600b870155830151600c860155808201518051600d870155830151600e8601558301518051600f8601558201516010850155808501518051805160118701558301516012860155808301518051601387015583015160148601558082015180516015870155830151601686015583015180516017860155820151601885015593820151805180516019860155820151601a850155808201518051601b860155820151601c850155938401518051601d850155810151601e8401559201518051601f83015582015191015550565b6040516308f0a99560e11b8152600090819030906311e1532a90611a9b90879060040161564e565b60206040518083038186803b158015611ab357600080fd5b505afa158015611ac7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aeb91906155db565b90506060846001600160a01b031663a0e67e2b6040518163ffffffff1660e01b815260040160006040518083038186803b158015611b2857600080fd5b505afa158015611b3c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b6491908101906153ab565b90506060856001600160a01b031663309a042c6040518163ffffffff1660e01b815260040160006040518083038186803b158015611ba157600080fd5b505afa158015611bb5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611bdd9190810190615505565b90506000866001600160a01b031663d29986c16040518163ffffffff1660e01b815260040160206040518083038186803b158015611c1a57600080fd5b505afa158015611c2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c5291906155db565b905060005b8351811015611cd157838181518110611c6c57fe5b60200260200101516001600160a01b0316876001600160a01b03161415611cc957611cbd82611cb7858481518110611ca057fe5b60200260200101518861433690919063ffffffff16565b90614370565b95505050505050610b0b565b600101611c57565b505050505092915050565b600b60209081526000928352604080842090915290825290205481565b611d01614e75565b611d09614ea2565b6001600160a01b0383166000908152600c6020526040812080548290611d2b57fe5b6000918252602090912001546001600160a01b031680835260405163763d25a960e11b8152909150309063ec7a4b5290611d6b908790339060040161567b565b60206040518083038186803b158015611d8357600080fd5b505afa158015611d97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dbb91906155db565b826040018181525050806001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611dfd57600080fd5b505afa158015611e11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e3591906155f3565b60ff166020830152611e45614e75565b5050604080516020810190915290815292915050565b6001600160a01b0381166000908152600c60209081526040918290208054835181840281018401909452808452606093928301828280156112da576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116115d95750505050509050919050565b600d6020526000908152604090205481565b6001600160a01b0380841660009081526011602090815260408083209386168352929052908120548190611f16576000611f54565b6001600160a01b03808616600090815260116020908152604080832093881683529290529081208054909190611f4857fe5b90600052602060002001545b9050611f5e614ecc565b506001600160a01b03851660009081526009602081815260408084208151610140810183526001820154610100820190815260028301546101208301526080808301918252845180860186526003850154815260048501548188015260a080850191909152855180870187526005860154815260068601548189015260c08086019190915286518088018852600787015481526008870154818a015260e08601529284528551808401875297850154888301908152600a86015489830152885285518087018752600b8601548152600c860154818901528888015285518087018752600d8601548152600e860154818901528887015285518087018752600f860154815260108601548189015260608981019190915284880198909852855180840187526011860154818401908152601287015482840152815286518088018852601387015481526014870154818a01528189015286518088018852601587015481526016870154818a01528188015286518088018852601787015481526018870154818a0152818a015284870152855192830186526019850154918301918252601a85015490830152815283518085018552601b8401548152601c840154818701528186015283518085018552601d8401548152601e84015481870152818501528351808501909452601f83015484529184015493830193909352808401919091529181019190915290612171614d6a565b6001600160a01b0388166000908152600860209081526040918290208251815461012093810282018401909452610100810184815290939192849284918401828280156121e757602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116121c9575b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561224957602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161222b575b50505050508152602001600282018054806020026020016040519081016040528092919081815260200182805480156122ab57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161228d575b505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561230d57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116122ef575b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561236557602002820191906000526020600020905b815481526020019060010190808311612351575b50505050508152602001600582018054806020026020016040519081016040528092919081815260200182805480156123bd57602002820191906000526020600020905b8154815260200190600101908083116123a9575b505050505081526020016006820180548060200260200160405190810160405280929190818152602001828054801561241557602002820191906000526020600020905b815481526020019060010190808311612401575b505050505081526020016007820180548060200260200160405190810160405280929190818152602001828054801561246d57602002820191906000526020600020905b815481526020019060010190808311612459575b5050505050815250509050836000141561248e5760009450505050506125bc565b851580156124a157506000816080015151115b156124e7576124e4601554611cb76124bd8787600001516143af565b84608001516000815181106124ce57fe5b602002602001015161433690919063ffffffff16565b91505b8560011480156124fc575060008160a0015151115b1561252c57612529601554611cb76125188787602001516143af565b8460a001516000815181106124ce57fe5b91505b856002148015612541575060008160c0015151115b156125715761256e601554611cb761255d8787604001516143af565b8460c001516000815181106124ce57fe5b91505b856003148015612586575060008160e0015151115b156125b6576125b3601554611cb76125a28787606001516143af565b8460e001516000815181106124ce57fe5b91505b50925050505b9392505050565b6001600160a01b039182166000908152601460209081526040808320938516835292905220541690565b6000546001600160a01b031633146126175760405162461bcd60e51b81526004016110b6906158ea565b6001600160a01b03909116600090815260096020526040902080549115156101000261ff0019909216919091179055565b60065460405163edb12adf60e01b81526001600160a01b039091169063edb12adf9061267890849060040161564e565b600060405180830381600087803b15801561269257600080fd5b505af19250505080156126a3575060015b506040516346d480dd60e11b81523090638da901ba906126c790849060040161564e565b60206040518083038186803b1580156126df57600080fd5b505afa1580156126f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127179190615588565b15612b0557600554604051636e0cf42160e11b81526101009091046001600160a01b03169063dc19e8429061275090849060040161564e565b60206040518083038186803b15801561276857600080fd5b505afa15801561277c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127a09190615588565b6127bc5760405162461bcd60e51b81526004016110b690615abb565b806001600160a01b0316635468d6d76040518163ffffffff1660e01b815260040160206040518083038186803b1580156127f557600080fd5b505afa158015612809573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061282d9190615588565b6128495760405162461bcd60e51b81526004016110b690615b88565b604051630aa3935960e11b8152600090309063154726b290612871908590339060040161567b565b60206040518083038186803b15801561288957600080fd5b505afa15801561289d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128c191906155db565b9050600081116128e35760405162461bcd60e51b81526004016110b690615916565b6001600160a01b03821660009081526010602090815260408083203380855292529091208054830190556129169061448a565b15612a51576001600160a01b0382166000908152600c60205260408120805490919061293e57fe5b9060005260206000200160009054906101000a90046001600160a01b03166001600160a01b031663a9059cbb336001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156129a357600080fd5b505afa1580156129b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129db9190615158565b836040518363ffffffff1660e01b81526004016129f9929190615662565b602060405180830381600087803b158015612a1357600080fd5b505af1158015612a27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a4b9190615588565b50612b03565b6001600160a01b0382166000908152600c602052604081208054909190612a7457fe5b60009182526020909120015460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90612aaf9033908590600401615662565b602060405180830381600087803b158015612ac957600080fd5b505af1158015612add573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b019190615588565b505b505b50565b6000546001600160a01b03163314612b325760405162461bcd60e51b81526004016110b6906158ea565b60405133904780156108fc02916000818181858888f19350505050158015612b05573d6000803e3d6000fd5b60146020908152600092835260408084209091529082529020546001600160a01b031681565b60006001826001600160a01b03166373a9855c6040518163ffffffff1660e01b815260040160206040518083038186803b158015612bc157600080fd5b505afa158015612bd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bf991906155a4565b6001811115612c0457fe5b1492915050565b600e60209081526000928352604080842090915290825290205481565b6006546001600160a01b03163314612c525760405162461bcd60e51b81526004016110b6906158ea565b828114612c715760405162461bcd60e51b81526004016110b69061599c565b6001600160a01b0386811660009081526007602052604090205416612d3157856001600160a01b0316633018205f6040518163ffffffff1660e01b815260040160206040518083038186803b158015612cc957600080fd5b505afa158015612cdd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d019190615158565b6001600160a01b03878116600090815260076020526040902080546001600160a01b031916929091169190911790555b606080612d3e88886144c3565b91509150606080612d54888888888e898961485b565b91509150612d648a8a8484614ac1565b5050506001600160a01b039096166000908152600960205260409020805460ff19166001179055505050505050565b6000546001600160a01b03163314612dbd5760405162461bcd60e51b81526004016110b6906158ea565b6001600160a01b038116612de35760405162461bcd60e51b81526004016110b690615a4e565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314612e685760405162461bcd60e51b81526004016110b6906158ea565b6001600160a01b03821660009081526001602052604090205460ff1615612ea15760405162461bcd60e51b81526004016110b6906159f3565b6001600160a01b0382166000818152600160208190526040808320805460ff191683179055600280548084019091557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319168517905560038054928301815583527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b9091018490556004805485019055518392917fbd5dcf0b25226117c4a68a0129ffdd4b0541ef5e482ad7de9a96ccb6d6a8ebde91a35050565b6060600280548060200260200160405190810160405280929190818152602001828054801561167c57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612fa1575050505050905090565b6001600160a01b0381166000908152600860209081526040918290206005018054835181840281018401909452808452606093928301828280156112da57602002820191906000526020600020908154815260200190600101908083116112c65750505050509050919050565b6001600160a01b0381166000908152600860209081526040918290206004018054835181840281018401909452808452606093928301828280156112da57602002820191906000526020600020908154815260200190600101908083116112c65750505050509050919050565b601260205282600052604060002060205281600052604060002081815481106130c757fe5b60009182526020909120600290910201546001600160a01b0316925083915050565b6001600160a01b031660009081526009602052604090205460ff1690565b6000546001600160a01b031633146131315760405162461bcd60e51b81526004016110b6906158ea565b600580546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b6007602052600090815260409020546001600160a01b031681565b6003818154811061318157fe5b600091825260209091200154905081565b6001600160a01b0381166000908152600f60205260409020606090610b0b90614bb1565b6001600160a01b0380831660009081526012602090815260408083209385168352928152828220805484518184028101840190955280855260609493919290919084015b8282101561328f5760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561327757602002820191906000526020600020905b815481526020019060010190808311613263575b505050505081525050815260200190600101906131fa565b50505050905092915050565b60045481565b6000546001600160a01b031633146132cb5760405162461bcd60e51b81526004016110b6906158ea565b6001600160a01b0381166132f15760405162461bcd60e51b81526004016110b690615b55565b600680546001600160a01b0319166001600160a01b0383169081179091556040513391907ff5e71cc69e4610808e8e7c9099d63353897264c5dfc4da1a0320395866de497190600090a350565b338382811461335f5760405162461bcd60e51b81526004016110b69061599c565b600554604051636e0cf42160e11b81526101009091046001600160a01b03169063dc19e8429061339390859060040161564e565b60206040518083038186803b1580156133ab57600080fd5b505afa1580156133bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133e39190615588565b6133ff5760405162461bcd60e51b81526004016110b690615abb565b6001600160a01b0382166000908152600c6020526040902054613441576001600160a01b0382166000908152600c6020526040902061343f908787614f0b565b505b6001600160a01b0382811660009081526014602090815260408083208b8516845290915290205416806134e8576001600160a01b0383811660008181526014602090815260408083208d86168452825280832080546001600160a01b031916958f1695909517909455918152600f909152206134bd908a614bbd565b6134e5576001600160a01b0383166000908152600f602052604090206134e3908a614bd2565b505b50875b6001600160a01b03811661350e5760405162461bcd60e51b81526004016110b690615a1d565b6135468585600081811061351e57fe5b6001600160a01b0387166000908152600d602090815260409091205493910201359050614be7565b6001600160a01b0384166000908152600d60205260409020556060826001600160401b038111801561357757600080fd5b506040519080825280602002602001820160405280156135a1578160200160208202803683370190505b50905060005b8381101561368c576001600160a01b03808616600090815260116020908152604080832093871683529290522054613609578686828181106135e557fe5b905060200201358282815181106135f857fe5b602002602001018181525050613684565b6001600160a01b038086166000908152601160209081526040808320938716835292905220805461366b91908390811061363f57fe5b906000526020600020015488888481811061365657fe5b90506020020135614be790919063ffffffff16565b82828151811061367757fe5b6020026020010181815250505b6001016135a7565b506001600160a01b038085166000908152601160209081526040808320938616835292815291902082516136c292840190614e2e565b506001600160a01b0380851660008181526012602090815260408083208786168452825280832093835260138252808320948e1683529390529190912054806137f65761370d614f5e565b6001600160a01b038c168152604080516020808b0282810182019093528a825290918b918b91829185019084908082843760009201829052506020868101958652885460018082018b558a845292829020885160029092020180546001600160a01b0319166001600160a01b03909216919091178155955180518897965061379c955092860193500190614e2e565b505050828054905060136000896001600160a01b03166001600160a01b0316815260200190815260200160002060008e6001600160a01b03166001600160a01b0316815260200190815260200160002081905550506138b0565b6001600160a01b03808716600090815260126020908152604080832093881683529290529081208054600019840190811061382d57fe5b9060005260206000209060020201905060005b60018201548110156138ad5761388a8a8a8381811061385b57fe5b9050602002013583600101838154811061387157fe5b9060005260206000200154614be790919063ffffffff16565b82600101828154811061389957fe5b600091825260209091200155600101613840565b50505b505050505050505050505050565b6001600160a01b0381166000908152600860209081526040918290206001018054835181840281018401909452808452606093928301828280156112da576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116115d95750505050509050919050565b600c602052816000526040600020818154811061394e57fe5b6000918252602090912001546001600160a01b03169150829050565b6001600160a01b038083166000908152601160209081526040808320938516835292905290812054819061399f579050610b0b565b60405163160d2eb160e21b8152613a22903090635834bac4906139cb9088908890600090600401615695565b60206040518083038186803b1580156139e357600080fd5b505afa1580156139f7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a1b91906155db565b8290614be7565b60405163160d2eb160e21b8152909150613a51903090635834bac4906139cb9088908890600190600401615695565b60405163160d2eb160e21b8152909150613a80903090635834bac4906139cb9088908890600290600401615695565b60405163160d2eb160e21b8152909150613aaf903090635834bac4906139cb9088908890600390600401615695565b6001600160a01b038086166000908152600d60209081526040808320546011835281842094891684529390915281208054939450613b0c93611cb79290613af257fe5b90600052602060002001548461433690919063ffffffff16565b949350505050565b6001600160a01b0381166000908152600860209081526040918290208054835181840281018401909452808452606093928301828280156112da576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116115d95750505050509050919050565b6001600160a01b038083166000908152600e6020908152604080832093851683529290528181205491516346bead8960e01b815290916125bc9130906346bead8990610f80908890889060040161567b565b60065460405163edb12adf60e01b81526001600160a01b039091169063edb12adf90613c0a90849060040161564e565b600060405180830381600087803b158015613c2457600080fd5b505af1925050508015613c35575060015b506040516346d480dd60e11b81523090638da901ba90613c5990849060040161564e565b60206040518083038186803b158015613c7157600080fd5b505afa158015613c85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ca99190615588565b15612b0557600554604051636e0cf42160e11b81526101009091046001600160a01b03169063dc19e84290613ce290849060040161564e565b60206040518083038186803b158015613cfa57600080fd5b505afa158015613d0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d329190615588565b613d4e5760405162461bcd60e51b81526004016110b690615abb565b806001600160a01b0316635468d6d76040518163ffffffff1660e01b815260040160206040518083038186803b158015613d8757600080fd5b505afa158015613d9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613dbf9190615588565b613ddb5760405162461bcd60e51b81526004016110b690615b88565b6040516327304dfd60e01b81526001600160a01b038216906327304dfd90613e0790339060040161564e565b60206040518083038186803b158015613e1f57600080fd5b505afa158015613e33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e579190615588565b80613ee35750336001600160a01b0316816001600160a01b0316633018205f6040518163ffffffff1660e01b815260040160206040518083038186803b158015613ea057600080fd5b505afa158015613eb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ed89190615158565b6001600160a01b0316145b613eff5760405162461bcd60e51b81526004016110b690615a78565b60405163763d25a960e11b8152600090309063ec7a4b5290613f27908590339060040161567b565b60206040518083038186803b158015613f3f57600080fd5b505afa158015613f53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f7791906155db565b905060008111613f995760405162461bcd60e51b81526004016110b690615916565b6001600160a01b0382166000818152600e602090815260408083203384528252808320805486019055928252600a905290812054613fd8906001614be7565b6001600160a01b0384166000908152600c60205260408120805492935090918290613fff57fe5b60009182526020822001546001600160a01b0316915061401e3361448a565b6140285733614099565b336001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561406157600080fd5b505afa158015614075573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140999190615158565b90506140a3614ea2565b826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156140dc57600080fd5b505afa1580156140f0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061411491906155f3565b60ff1660208201526001600160a01b03831680825260408083018790525163a9059cbb60e01b815263a9059cbb906141529085908990600401615662565b602060405180830381600087803b15801561416c57600080fd5b505af1158015614180573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141a49190615588565b506001600160a01b039586166000908152600a60209081526040808320879055600b825280832096835295815285822042815560019081018054808301825590845292829020845160039094020180546001600160a01b031916939099169290921788558201519087015590920151600290940193909355505050565b600a6020526000908152604090205481565b6001600160a01b0381166000908152600f602052604081208161425582614c0c565b905060005b818110156142ec573063e65065d9866142738685614c17565b6040518363ffffffff1660e01b815260040161429092919061567b565b60206040518083038186803b1580156142a857600080fd5b505afa1580156142bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142e091906155db565b9093019260010161425a565b505050919050565b60006125bc83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250614c23565b60008261434557506000610b0b565b8282028284828161435257fe5b04146125bc5760405162461bcd60e51b81526004016110b690615aed565b60006125bc83836040518060400160405280601a815260200179536166654d6174683a206469766973696f6e206279207a65726f60301b815250614c4f565b6000805b600481101561448357806143e95782515184108015906143d7575060208301515184105b156143e9575050805160200151610b0b565b806001141561441f57602083015151841080159061440b575060408301515184105b1561441f5750506020808201510151610b0b565b8060021415614456576040830151518410801590614441575060608301515184105b15614456575050604081015160200151610b0b565b806003141561447b57606083015151841061447b575050606081015160200151610b0b565b6001016143b3565b5092915050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590613b0c575050151592915050565b606080600483106144e65760405162461bcd60e51b81526004016110b6906159d0565b6144ee614d6a565b6001600160a01b03851660009081526008602090815260409182902082518154610120938102820184019094526101008101848152909391928492849184018282801561456457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311614546575b50505050508152602001600182018054806020026020016040519081016040528092919081815260200182805480156145c657602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116145a8575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561462857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161460a575b505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561468a57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161466c575b50505050508152602001600482018054806020026020016040519081016040528092919081815260200182805480156146e257602002820191906000526020600020905b8154815260200190600101908083116146ce575b505050505081526020016005820180548060200260200160405190810160405280929190818152602001828054801561473a57602002820191906000526020600020905b815481526020019060010190808311614726575b505050505081526020016006820180548060200260200160405190810160405280929190818152602001828054801561479257602002820191906000526020600020905b81548152602001906001019080831161477e575b50505050508152602001600782018054806020026020016040519081016040528092919081815260200182805480156147ea57602002820191906000526020600020905b8154815260200190600101908083116147d6575b5050505050815250509050836000141561480b578051608082015190935091505b836001141561482357806020015192508060a0015191505b836002141561483b57806040015192508060c0015191505b836003141561485357806060015192508060e0015191505b509250929050565b60608087806001600160401b038111801561487557600080fd5b5060405190808252806020026020018201604052801561489f578160200160208202803683370190505b509250806001600160401b03811180156148b857600080fd5b506040519080825280602002602001820160405280156148e2578160200160208202803683370190505b509150835185511480156148f557508451155b8061491957506001600160a01b03861660009081526009602052604090205460ff16155b156149ae5760005b818110156149a8578a8a8281811061493557fe5b905060200201602081019061494a919061513c565b84828151811061495657fe5b60200260200101906001600160a01b031690816001600160a01b03168152505088888281811061498257fe5b9050602002013583828151811061499557fe5b6020908102919091010152600101614921565b50614ab4565b60005b81811015614ab2578a8a828181106149c557fe5b90506020020160208101906149da919061513c565b6001600160a01b03168682815181106149ef57fe5b60200260200101516001600160a01b03161415614aaa576000898983818110614a1457fe5b9050602002013590508b8b83818110614a2957fe5b9050602002016020810190614a3e919061513c565b858381518110614a4a57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050614a9081878481518110614a7a57fe5b6020026020010151614be790919063ffffffff16565b848381518110614a9c57fe5b602002602001018181525050505b6001016149b1565b505b5097509795505050505050565b6001600160a01b038416600090815260086020526040902083614b08578251614af09082906020860190614dc9565b508151614b069060048301906020850190614e2e565b505b8360011415614b3e578251614b269060018301906020860190614dc9565b508151614b3c9060058301906020850190614e2e565b505b8360021415614b74578251614b5c9060028301906020860190614dc9565b508151614b729060068301906020850190614e2e565b505b8360031415614baa578251614b929060038301906020860190614dc9565b508151614ba89060078301906020850190614e2e565b505b5050505050565b6060806125bc83614c86565b60006125bc836001600160a01b038416614ce0565b60006125bc836001600160a01b038416614cf8565b6000828201838110156125bc5760405162461bcd60e51b81526004016110b690615941565b6000610b0b82614d42565b60006125bc8383614d46565b60008184841115614c475760405162461bcd60e51b81526004016110b69190615897565b505050900390565b60008183614c705760405162461bcd60e51b81526004016110b69190615897565b506000838581614c7c57fe5b0495945050505050565b6060816000018054806020026020016040519081016040528092919081815260200182805480156112da57602002820191906000526020600020908154815260200190600101908083116112c65750505050509050919050565b60009081526001919091016020526040902054151590565b6000614d048383614ce0565b614d3a57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610b0b565b506000610b0b565b5490565b6000826000018281548110614d5757fe5b9060005260206000200154905092915050565b60405180610100016040528060608152602001606081526020016060815260200160608152602001606081526020016060815260200160608152602001606081525090565b604051806040016040528060008152602001606081525090565b828054828255906000526020600020908101928215614e1e579160200282015b82811115614e1e57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190614de9565b50614e2a929150614f76565b5090565b828054828255906000526020600020908101928215614e69579160200282015b82811115614e69578251825591602001919060010190614e4e565b50614e2a929150614f95565b60405180602001604052806001905b614e8c614ea2565b815260200190600190039081614e845790505090565b604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b6040518060800160405280614edf614faa565b8152602001614eec614faa565b8152602001614ef9614faa565b8152602001614f06614faa565b905290565b828054828255906000526020600020908101928215614e1e579160200282015b82811115614e1e5781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190614f2b565b60408051808201909152600081526060602082015290565b5b80821115614e2a5780546001600160a01b0319168155600101614f77565b5b80821115614e2a5760008155600101614f96565b6040518060800160405280614fbd614fe0565b8152602001614fca614fe0565b8152602001614fd7614fe0565b8152602001614f065b604051806040016040528060008152602001600081525090565b60008083601f84011261500b578182fd5b5081356001600160401b03811115615021578182fd5b602083019150836020808302850101111561503b57600080fd5b9250929050565b600082601f830112615052578081fd5b813561506561506082615bea565b615bc4565b81815291506020808301908481018184028601820187101561508657600080fd5b60005b84811015611cd157813584529282019290820190600101615089565b600061010082840312156150b7578081fd5b6150c16080615bc4565b90506150cd838361510b565b81526150dc836040840161510b565b60208201526150ee836080840161510b565b60408201526151008360c0840161510b565b606082015292915050565b60006040828403121561511c578081fd5b6151266040615bc4565b9050813581526020820135602082015292915050565b60006020828403121561514d578081fd5b81356125bc81615c09565b600060208284031215615169578081fd5b81516125bc81615c09565b60008060408385031215615186578081fd5b823561519181615c09565b915060208301356151a181615c09565b809150509250929050565b600080600080600080608087890312156151c4578182fd5b86356151cf81615c09565b955060208701356151df81615c09565b945060408701356001600160401b03808211156151fa578384fd5b6152068a838b01614ffa565b9096509450606089013591508082111561521e578384fd5b5061522b89828a01614ffa565b979a9699509497509295939492505050565b600080600060608486031215615251578283fd5b833561525c81615c09565b9250602084013561526c81615c09565b929592945050506040919091013590565b6000806040838503121561528f578182fd5b823561529a81615c09565b915060208301356151a181615c1e565b6000808284036104208112156152be578283fd5b83356152c981615c09565b9250610400601f19820112156152dd578182fd5b506152e86080615bc4565b6152f585602086016150a5565b81526153058561012086016150a5565b60208201526153188561022086016150a5565b604082015261532b8561032086016150a5565b6060820152809150509250929050565b6000806040838503121561534d578182fd5b823561535881615c09565b946020939093013593505050565b6000806000806000806080878903121561537e578384fd5b863561538981615c09565b95506020870135945060408701356001600160401b03808211156151fa578586fd5b600060208083850312156153bd578182fd5b82516001600160401b038111156153d2578283fd5b8301601f810185136153e2578283fd5b80516153f061506082615bea565b818152838101908385018584028501860189101561540c578687fd5b8694505b8385101561543757805161542381615c09565b835260019490940193918501918501615410565b50979650505050505050565b60008060408385031215615455578182fd5b82356001600160401b038082111561546b578384fd5b818501915085601f83011261547e578384fd5b813561548c61506082615bea565b80828252602080830192508086018a8283870289010111156154ac578889fd5b8896505b848710156154d75780356154c381615c09565b8452600196909601959281019281016154b0565b5090965087013593505050808211156154ee578283fd5b506154fb85828601615042565b9150509250929050565b60006020808385031215615517578182fd5b82516001600160401b0381111561552c578283fd5b8301601f8101851361553c578283fd5b805161554a61506082615bea565b8181528381019083850185840285018601891015615566578687fd5b8694505b8385101561543757805183526001949094019391850191850161556a565b600060208284031215615599578081fd5b81516125bc81615c1e565b6000602082840312156155b5578081fd5b8151600281106125bc578182fd5b6000602082840312156155d4578081fd5b5035919050565b6000602082840312156155ec578081fd5b5051919050565b600060208284031215615604578081fd5b815160ff811681146125bc578182fd5b6000815180845260208085019450808401835b8381101561564357815187529582019590820190600101615627565b509495945050505050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6020808252825182820181905260009190848201906040850190845b818110156156fa5783516001600160a01b0316835292840192918401916001016156d5565b50909695505050505050565b60208082528251828201819052600091906040908185019080840286018301878501865b838110156157ab57888303603f19018552815180518452870151878401879052805187850181905290880190606090818601908b5b8181101561579557845180516001600160a01b031684528c8101518d8501528b01518b840152938b01939183019160010161575f565b505096890196945050509086019060010161572a565b509098975050505050505050565b606081810190828460005b600181101561580357815180516001600160a01b03168452602080820151818601526040918201519185019190915292840192909101906001016157c4565b5050505092915050565b60208082528251828201819052600091906040908185019080840286018301878501865b838110156157ab57888303603f19018552815180516001600160a01b0316845287015187840187905261586687850182615614565b9588019593505090860190600101615831565b6000602082526125bc6020830184615614565b901515815260200190565b6000602080835283518082850152825b818110156158c3578581018301518582016040015282016158a7565b818111156158d45783604083870101525b50601f01601f1916929092016040019392505050565b60208082526012908201527122a9292fa727aa2fa1a7a72a2927a62622a960711b604082015260600190565b60208082526011908201527011549497d21054d7d393d7d49155d05491607a1b604082015260600190565b6020808252601b908201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604082015260600190565b6020808252600c908201526b696e697469616c697a65642160a01b604082015260600190565b6020808252601a908201527908aa4a4bea89e968a9cbe988a9c8ea890be9c9ea8be9a82a886960331b604082015260600190565b6020808252600990820152684552525f545950455360b81b604082015260600190565b60208082526010908201526f20b2323932b9b99034b99027bbb732b960811b604082015260600190565b6020808252601790820152764552525f494e56414c49445f4b4f4c5f4144445245535360481b604082015260600190565b60208082526010908201526f4552525f5a45524f5f4144445245535360801b604082015260600190565b6020808252600990820152682737ba1027bbb732b960b91b604082015260600190565b60208082526006908201526506f776e6572560d41b604082015260600190565b6020808252601890820152774552525f494e56414c49445f504f4f4c5f4144445245535360401b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252600d908201526c11549497d21054d7d4d1551151609a1b604082015260600190565b6020808252601990820152784552525f494e56414c49445f5641554c545f4144445245535360381b604082015260600190565b60208082526019908201527811549497d393d517d0d3d354131155115117d0d3d3131150d5603a1b604082015260600190565b90815260200190565b6040518181016001600160401b0381118282101715615be257600080fd5b604052919050565b60006001600160401b03821115615bff578081fd5b5060209081020190565b6001600160a01b0381168114612b0557600080fd5b8015158114612b0557600080fdfea26469706673582212205531285caddcccd6689f3f8f99bf183f4d515a098d3616db74ad1a430e585d3d64736f6c634300060c0033",
  "devdoc": {
    "author": "Desyn Labs",
    "kind": "dev",
    "methods": {
      "getController()": {
        "details": "external for gas optimization",
        "returns": {
          "_0": "address - of the owner (AKA controller)"
        }
      },
      "removeOwner(address)": {
        "details": "Allows to remove an owner. Transaction has to be sent by wallet.",
        "params": {
          "owner": "Address of owner."
        }
      },
      "setAddAdminList(address,uint256)": {
        "details": "external for gas optimization",
        "params": {
          "newOwner": "- address of new owner"
        }
      },
      "setController(address)": {
        "details": "external for gas optimization",
        "params": {
          "newOwner": "- address of new owner"
        }
      }
    },
    "title": "Vault managerFee",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getController()": {
        "notice": "Returns the address of the current owner"
      },
      "setAddAdminList(address,uint256)": {
        "notice": "Transfers ownership of the contract to a new account (`newOwner`).         Can only be called by the current owner"
      },
      "setController(address)": {
        "notice": "Transfers ownership of the contract to a new account (`newOwner`).         Can only be called by the current owner"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 18091,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 18095,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "adminList",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 18098,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "owners",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 18101,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "ownerPercentage",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 18103,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "allOwnerPercentage",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 18105,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "initialized",
        "offset": 0,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 10170,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "crpFactory",
        "offset": 1,
        "slot": "5",
        "type": "t_contract(ICRPFactory)10156"
      },
      {
        "astId": 10172,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "vaultAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 10235,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "pool_manager",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 10239,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "poolsTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(PoolTokens)10216_storage)"
      },
      {
        "astId": 10243,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "poolsStatus",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_struct(PoolStatus)10225_storage)"
      },
      {
        "astId": 10247,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "record_number",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10253,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "record_List",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(ClaimRecordInfo)10191_storage))"
      },
      {
        "astId": 10258,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "kol_token_list",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 10262,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "init_totalAmount_list",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10268,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "manager_claimed_list",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 10272,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "kols_list",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_struct(AddressSet)9934_storage)"
      },
      {
        "astId": 10278,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "kol_claimed_list",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 10285,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "kol_totalAmount_list",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_mapping(t_address,t_array(t_uint256)dyn_storage))"
      },
      {
        "astId": 10292,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "kol_user_info",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_mapping(t_address,t_array(t_struct(KolUserInfo)10231_storage)dyn_storage))"
      },
      {
        "astId": 10298,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "user_index_list",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 10304,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "user_kol_list",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 10307,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "RATIO_TOTAL",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(ClaimTokenInfo)10185_storage)dyn_storage": {
        "base": "t_struct(ClaimTokenInfo)10185_storage",
        "encoding": "dynamic_array",
        "label": "struct UserVault.ClaimTokenInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(KolUserInfo)10231_storage)dyn_storage": {
        "base": "t_struct(KolUserInfo)10231_storage",
        "encoding": "dynamic_array",
        "label": "struct UserVault.KolUserInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ICRPFactory)10156": {
        "encoding": "inplace",
        "label": "contract ICRPFactory",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_struct(KolUserInfo)10231_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct UserVault.KolUserInfo[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(KolUserInfo)10231_storage)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_array(t_struct(KolUserInfo)10231_storage)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct UserVault.KolUserInfo[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_struct(KolUserInfo)10231_storage)dyn_storage)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_array(t_uint256)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(ClaimRecordInfo)10191_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct UserVault.ClaimRecordInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(ClaimRecordInfo)10191_storage)"
      },
      "t_mapping(t_address,t_struct(AddressSet)9934_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)9934_storage"
      },
      "t_mapping(t_address,t_struct(PoolStatus)10225_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct UserVault.PoolStatus)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolStatus)10225_storage"
      },
      "t_mapping(t_address,t_struct(PoolTokens)10216_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct UserVault.PoolTokens)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolTokens)10216_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(ClaimRecordInfo)10191_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct UserVault.ClaimRecordInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(ClaimRecordInfo)10191_storage"
      },
      "t_struct(AddressSet)9934_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 9933,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)9747_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ClaimRecordInfo)10191_storage": {
        "encoding": "inplace",
        "label": "struct UserVault.ClaimRecordInfo",
        "members": [
          {
            "astId": 10187,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "time",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10190,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "tokens",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_struct(ClaimTokenInfo)10185_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ClaimTokenInfo)10185_storage": {
        "encoding": "inplace",
        "label": "struct UserVault.ClaimTokenInfo",
        "members": [
          {
            "astId": 10180,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 10182,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "decimals",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10184,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(KolPoolParams)16800_storage": {
        "encoding": "inplace",
        "label": "struct SmartPoolManager.KolPoolParams",
        "members": [
          {
            "astId": 16793,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "managerFee",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(feeParams)16791_storage"
          },
          {
            "astId": 16795,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "issueFee",
            "offset": 0,
            "slot": "8",
            "type": "t_struct(feeParams)16791_storage"
          },
          {
            "astId": 16797,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "redeemFee",
            "offset": 0,
            "slot": "16",
            "type": "t_struct(feeParams)16791_storage"
          },
          {
            "astId": 16799,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "perfermanceFee",
            "offset": 0,
            "slot": "24",
            "type": "t_struct(feeParams)16791_storage"
          }
        ],
        "numberOfBytes": "1024"
      },
      "t_struct(KolUserInfo)10231_storage": {
        "encoding": "inplace",
        "label": "struct UserVault.KolUserInfo",
        "members": [
          {
            "astId": 10227,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "userAdr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 10230,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "userAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PoolStatus)10225_storage": {
        "encoding": "inplace",
        "label": "struct UserVault.PoolStatus",
        "members": [
          {
            "astId": 10218,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "couldManagerClaim",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 10220,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "isBlackList",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 10222,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "isSetParams",
            "offset": 2,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 10224,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "kolPoolConfig",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(KolPoolParams)16800_storage"
          }
        ],
        "numberOfBytes": "1056"
      },
      "t_struct(PoolTokens)10216_storage": {
        "encoding": "inplace",
        "label": "struct UserVault.PoolTokens",
        "members": [
          {
            "astId": 10194,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "tokenList",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 10197,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "issueTokens",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 10200,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "redeemTokens",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 10203,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "perfermanceTokens",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 10206,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "managerAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 10209,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "issueAmount",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 10212,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "redeemAmount",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 10215,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "perfermanceAmount",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(Set)9747_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 9742,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 9746,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(feeParams)16791_storage": {
        "encoding": "inplace",
        "label": "struct SmartPoolManager.feeParams",
        "members": [
          {
            "astId": 16784,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "firstLevel",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(levelParams)16782_storage"
          },
          {
            "astId": 16786,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "secondLevel",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(levelParams)16782_storage"
          },
          {
            "astId": 16788,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "thirdLevel",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(levelParams)16782_storage"
          },
          {
            "astId": 16790,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "fourLevel",
            "offset": 0,
            "slot": "6",
            "type": "t_struct(levelParams)16782_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(levelParams)16782_storage": {
        "encoding": "inplace",
        "label": "struct SmartPoolManager.levelParams",
        "members": [
          {
            "astId": 16779,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "level",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 16781,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "ratio",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
