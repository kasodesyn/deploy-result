{
  "address": "0x081fc1307509827C1C75c19742C69f86f5225A3A",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "IssueRatio",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "LOGUserVaultAdr",
      "type": "event"
    },
    {
      "anonymous": true,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes4",
          "name": "sig",
          "type": "bytes4"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "LOG_CALL",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "ManagerClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ManagerRatio",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "ManagersClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RedeemRatio",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "RATIO_ISSUE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RATIO_MANAGER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RATIO_PERFERMANCE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RATIO_REDEEM",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RATIO_TOTAL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "adminClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "poolTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokensAmount",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokensAmountIR",
          "type": "uint256[]"
        },
        {
          "internalType": "bool",
          "name": "isPerfermance",
          "type": "bool"
        }
      ],
      "name": "depositIssueRedeemPToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokensIn",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amountsIn",
          "type": "uint256[]"
        }
      ],
      "name": "depositManagerToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBNB",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getManagerClaimBool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getManagerFeeTypes",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "tokenList",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "managerAmount",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "issueAmount",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "redeemAmount",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "perfermanceAmount",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct Vault.FeeTypesTokens",
          "name": "result",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getUnManagerReward",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "managerClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "managerClaimList",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "decimals",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct Vault.ClaimTokenInfo[]",
          "name": "claimTokenInfos",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "managerClaimRecordList",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "time",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Vault.ClaimTokenInfo[]",
              "name": "tokens",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Vault.ClaimRecordInfo[]",
          "name": "claimRecordInfos",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "poolIssueTokenAmount",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "poolIssueTokenList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "poolManagerTokenAmount",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "poolManagerTokenList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "poolPerfermanceTokenAmount",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "poolPerfermanceTokenList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "poolRedeemTokenAmount",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "poolRedeemTokenList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolsStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "couldManagerClaim",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isBlackList",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "pooltokens",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "tokenList",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "issueTokens",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "redeemTokens",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "perfermanceTokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "managerAmount",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "issueAmount",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "redeemAmount",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "perfermanceAmount",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct Vault.PoolTokens",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "record_List",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "record_number",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "bools",
          "type": "bool"
        }
      ],
      "name": "setBlackList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adr",
          "type": "address"
        }
      ],
      "name": "setCrpFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setIssueRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setManagerRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setPerfermanceRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setRedeemRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adr",
          "type": "address"
        }
      ],
      "name": "setUserVaultAdr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "userVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x587c35deaf20877579ca095935c70fa30a068e9163141140959e506a96d5fce0",
  "receipt": {
    "to": null,
    "from": "0x595b85b4A418e3B8df897D02F5BD49167D00862F",
    "contractAddress": "0x081fc1307509827C1C75c19742C69f86f5225A3A",
    "transactionIndex": 2,
    "gasUsed": "4751767",
    "logsBloom": "0x
    "blockHash": "0x31886e15e06d1fbe5c1df809988b76891dec90c8a35d4878b32f4f306917d4af",
    "transactionHash": "0x587c35deaf20877579ca095935c70fa30a068e9163141140959e506a96d5fce0",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 8162027,
        "transactionHash": "0x587c35deaf20877579ca095935c70fa30a068e9163141140959e506a96d5fce0",
        "address": "0x081fc1307509827C1C75c19742C69f86f5225A3A",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000595b85b4a418e3b8df897d02f5bd49167d00862f"
        ],
        "data": "0x",
        "logIndex": 10,
        "blockHash": "0x31886e15e06d1fbe5c1df809988b76891dec90c8a35d4878b32f4f306917d4af"
      }
    ],
    "blockNumber": 8162027,
    "cumulativeGasUsed": "5519083",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f3f40e75f34851262c6dcc334fe9a5d7",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"IssueRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"LOGUserVaultAdr\",\"type\":\"event\"},{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"LOG_CALL\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ManagerClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ManagerRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ManagersClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RedeemRatio\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RATIO_ISSUE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RATIO_MANAGER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RATIO_PERFERMANCE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RATIO_REDEEM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RATIO_TOTAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"adminClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"poolTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokensAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokensAmountIR\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"isPerfermance\",\"type\":\"bool\"}],\"name\":\"depositIssueRedeemPToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokensIn\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsIn\",\"type\":\"uint256[]\"}],\"name\":\"depositManagerToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBNB\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getManagerClaimBool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getManagerFeeTypes\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"tokenList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"managerAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"issueAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"redeemAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"perfermanceAmount\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Vault.FeeTypesTokens\",\"name\":\"result\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getUnManagerReward\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"managerClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"managerClaimList\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Vault.ClaimTokenInfo[]\",\"name\":\"claimTokenInfos\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"managerClaimRecordList\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Vault.ClaimTokenInfo[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Vault.ClaimRecordInfo[]\",\"name\":\"claimRecordInfos\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"poolIssueTokenAmount\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"poolIssueTokenList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"poolManagerTokenAmount\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"poolManagerTokenList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"poolPerfermanceTokenAmount\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"poolPerfermanceTokenList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"poolRedeemTokenAmount\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"poolRedeemTokenList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolsStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"couldManagerClaim\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isBlackList\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"pooltokens\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"tokenList\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"issueTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"redeemTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"perfermanceTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"managerAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"issueAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"redeemAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"perfermanceAmount\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Vault.PoolTokens\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"record_List\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"record_number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"bools\",\"type\":\"bool\"}],\"name\":\"setBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setCrpFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setIssueRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setManagerRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setPerfermanceRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setRedeemRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setUserVaultAdr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Desyn Labs\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Vault managerFee\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/deploy/Vault.sol\":\"Vault\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"contracts/base/Logs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\ncontract Logs {\\n    event LOG_CALL(bytes4 indexed sig, address indexed caller, bytes data) anonymous;\\n\\n    modifier _logs_() {\\n        emit LOG_CALL(msg.sig, msg.sender, msg.data);\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x942b3c172dd3f0910c3589d703b4f224c94c76a13cc84d7add6318206cff512e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/deploy/Vault.sol\":{\"content\":\"pragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../openzeppelin/Ownable.sol\\\";\\nimport \\\"../interfaces/IDSProxy.sol\\\";\\nimport \\\"../libraries/SafeMath.sol\\\";\\nimport \\\"../libraries/Address.sol\\\";\\nimport \\\"../libraries/SafeERC20.sol\\\";\\nimport \\\"../base/Logs.sol\\\";\\n\\ninterface ICRPPool {\\n    function getController() external view returns (address);\\n\\n    enum Etypes {\\n        OPENED,\\n        CLOSED\\n    }\\n\\n    function etype() external view returns (Etypes);\\n}\\n\\ninterface IDesynOwnable {\\n    function adminList(address adr) external view returns (bool);\\n    function getController() external view returns (address);\\n    function getOwners() external view returns (address[] memory);\\n    function getOwnerPercentage() external view returns (uint[] memory);\\n    function allOwnerPercentage() external view returns (uint);\\n}\\n\\ninterface IUserVault {\\n    function depositToken(\\n        address pool,\\n        uint types,\\n        address[] calldata poolTokens,\\n        uint[] calldata tokensAmount\\n    ) external;\\n}\\n\\ninterface ICRPFactory {\\n    function isCrp(address addr) external view returns (bool);\\n}\\n\\n/**\\n * @author Desyn Labs\\n * @title Vault managerFee\\n */\\ncontract Vault is Ownable, Logs {\\n    using SafeMath for uint;\\n    using Address for address;\\n    using SafeERC20 for IERC20;\\n\\n    ICRPFactory crpFactory;\\n    address public userVault;\\n\\n    event ManagerRatio(address indexed caller, uint indexed amount);\\n    event LOGUserVaultAdr(address indexed manager, address indexed caller);\\n    event IssueRatio(address indexed caller, uint indexed amount);\\n    event RedeemRatio(address indexed caller, uint indexed amount);\\n\\n    event ManagersClaim(address indexed caller,address indexed pool, address token, uint amount, uint time);\\n    event ManagerClaim(address indexed caller,address indexed manager, address token, uint amount, uint time);\\n\\n    struct ClaimTokenInfo {\\n        address token;\\n        uint decimals;\\n        uint amount;\\n    }\\n\\n    struct ClaimRecordInfo {\\n        uint time;\\n        ClaimTokenInfo[] tokens;\\n    }\\n\\n    // pool of tokens\\n    struct PoolTokens {\\n        address[] tokenList;\\n        address[] issueTokens;\\n        address[] redeemTokens;\\n        address[] perfermanceTokens;\\n        uint[] managerAmount;\\n        uint[] issueAmount;\\n        uint[] redeemAmount;\\n        uint[] perfermanceAmount;\\n    }\\n\\n    struct PoolStatus {\\n        bool couldManagerClaim;\\n        bool isBlackList;\\n    }\\n\\n    // pool tokens\\n    mapping(address => PoolTokens) poolsTokens;\\n    mapping(address => PoolStatus) public poolsStatus;\\n\\n    //history record\\n    mapping(address => uint) public record_number;\\n    mapping(address => mapping(uint => ClaimRecordInfo)) public record_List;\\n\\n    //pool=>manager\\n    mapping(address => address) public poolManager;\\n\\n    struct FeeTypesTokens {\\n        address[] tokenList;\\n        uint[] managerAmount;\\n        uint[] issueAmount;\\n        uint[] redeemAmount;\\n        uint[] perfermanceAmount;\\n    }\\n\\n    // default ratio config\\n    uint public RATIO_TOTAL = 1000;\\n    uint public RATIO_MANAGER = 800;\\n    uint public RATIO_ISSUE = 800;\\n    uint public RATIO_REDEEM = 800;\\n    uint public RATIO_PERFERMANCE = 800;\\n\\n    receive() external payable {}\\n\\n    function depositManagerToken(address[] calldata tokensIn, uint[] calldata amountsIn) external {\\n        address pool = msg.sender;\\n        require(crpFactory.isCrp(pool), \\\"ERR_INVALID_POOL_ADDRESS\\\");\\n        require(tokensIn.length == amountsIn.length, \\\"ERR_TOKEN_LENGTH_NOT_MATCH\\\");\\n        _checkInitPoolController(pool);\\n\\n        PoolTokens storage tokens = poolsTokens[pool];\\n        _communaldepositToken(tokensIn, amountsIn, tokens.tokenList,tokens.managerAmount);\\n\\n        poolsStatus[pool].couldManagerClaim = true;\\n        \\n        if (_isClosePool(pool)) this.managerClaim(pool);\\n    }\\n\\n    function depositIssueRedeemPToken(\\n        address[] calldata poolTokens,\\n        uint[] calldata tokensAmount,\\n        uint[] calldata tokensAmountIR,\\n        bool isPerfermance\\n    ) external {\\n        address pool = msg.sender;\\n        require(crpFactory.isCrp(pool), \\\"ERR_INVALID_POOL_ADDRESS\\\");\\n        require(poolTokens.length == tokensAmount.length, \\\"ERR_TOKEN_LENGTH_NOT_MATCH\\\");\\n        _checkInitPoolController(pool);\\n\\n        PoolTokens storage tokens = poolsTokens[pool];\\n        isPerfermance\\n                ? _communaldepositTokenNew(poolTokens, tokensAmount, tokensAmountIR, pool)\\n                : _communaldepositToken(poolTokens, tokensAmount, tokens.issueTokens, tokens.issueAmount);\\n\\n        poolsStatus[pool].couldManagerClaim = true;\\n\\n        if (_isClosePool(pool)) this.managerClaim(pool);   \\n    }\\n\\n    function poolManagerTokenList(address pool) external view returns (address[] memory) {\\n        return poolsTokens[pool].tokenList;\\n    }\\n\\n    function poolManagerTokenAmount(address pool) external view returns (uint[] memory ) {\\n        return poolsTokens[pool].managerAmount;\\n    }\\n\\n    function poolIssueTokenList(address pool) external view returns (address[] memory) {\\n        return poolsTokens[pool].issueTokens;\\n    }\\n\\n    function pooltokens(address pool) external view returns(PoolTokens memory){\\n        return poolsTokens[pool];\\n    }\\n\\n    function poolRedeemTokenList(address pool) external view returns (address[] memory) {\\n        return poolsTokens[pool].redeemTokens;\\n    }\\n\\n    function poolIssueTokenAmount(address pool) external view returns (uint[] memory ) {\\n        return poolsTokens[pool].issueAmount;\\n    }\\n\\n    function poolRedeemTokenAmount(address pool) external view returns (uint[] memory  ) {\\n        return poolsTokens[pool].redeemAmount;\\n    }\\n\\n    function poolPerfermanceTokenList(address pool) external view returns (address[] memory) {\\n        return poolsTokens[pool].perfermanceTokens;\\n    }\\n\\n    function poolPerfermanceTokenAmount(address pool) external view returns (uint[] memory ) {\\n        return poolsTokens[pool].perfermanceAmount;\\n    }\\n\\n    function getManagerClaimBool(address pool) external view returns (bool) {\\n        return poolsStatus[pool].couldManagerClaim;\\n    }\\n\\n    function setBlackList(address pool, bool bools) external onlyOwner _logs_ {\\n        poolsStatus[pool].isBlackList = bools;\\n    }\\n\\n    function setUserVaultAdr(address adr) external onlyOwner {\\n        require(adr != address(0), \\\"ERR_INVALID_USERVAULT_ADDRESS\\\");\\n        userVault = adr;\\n        emit LOGUserVaultAdr(adr, msg.sender);\\n    }\\n\\n    function setCrpFactory(address adr) external onlyOwner _logs_ {\\n        crpFactory = ICRPFactory(adr);\\n    }\\n\\n    function adminClaim(\\n        address token,\\n        address user,\\n        uint amount\\n    ) external onlyOwner {\\n        IERC20(token).safeTransfer(user, amount);\\n    }\\n\\n    function getBNB() external payable onlyOwner {\\n        msg.sender.transfer(address(this).balance);\\n    }\\n\\n    function setManagerRatio(uint amount) external onlyOwner {\\n        require(amount <= RATIO_TOTAL, \\\"Maximum limit exceeded\\\");\\n        RATIO_MANAGER = amount;\\n        emit ManagerRatio(msg.sender, amount);\\n    }\\n\\n    function setIssueRatio(uint amount) external onlyOwner {\\n        require(amount <= RATIO_TOTAL, \\\"Maximum limit exceeded\\\");\\n        RATIO_ISSUE = amount;\\n        emit IssueRatio(msg.sender, amount);\\n    }\\n\\n    function setRedeemRatio(uint amount) external onlyOwner {\\n        require(amount <= RATIO_TOTAL, \\\"Maximum limit exceeded\\\");\\n        RATIO_REDEEM = amount;\\n        emit RedeemRatio(msg.sender, amount);\\n    }\\n\\n    function setPerfermanceRatio(uint amount) external onlyOwner _logs_{\\n        RATIO_PERFERMANCE = amount;\\n    }\\n\\n    function managerClaim(address pool) external {\\n        require(crpFactory.isCrp(pool), \\\"ERR_INVALID_POOL_ADDRESS\\\");\\n        address manager_address = ICRPPool(pool).getController();\\n\\n        PoolTokens memory tokens = poolsTokens[pool];\\n        PoolStatus storage status = poolsStatus[pool];\\n\\n        address[] memory poolManageTokens = tokens.tokenList.length != 0\\n            ? tokens.tokenList\\n            : (tokens.issueTokens.length != 0 ? tokens.issueTokens : (tokens.redeemTokens.length != 0 ? tokens.redeemTokens : tokens.perfermanceTokens));\\n        uint len = poolManageTokens.length;\\n        require(!status.isBlackList, \\\"ERR_POOL_IS_BLACKLIST\\\");\\n        if (poolManager[pool] != manager_address) {\\n            poolManager[pool] = manager_address;\\n        }\\n        require(len > 0, \\\"ERR_NOT_MANGER_FEE\\\");\\n        require(status.couldManagerClaim, \\\"ERR_MANAGER_COULD_NOT_CLAIM\\\");\\n        status.couldManagerClaim = false;\\n        //record\\n        ClaimRecordInfo storage recordInfo = record_List[pool][record_number[pool].add(1)];\\n        delete recordInfo.time;\\n        delete recordInfo.tokens;\\n        recordInfo.time = block.timestamp;\\n        uint[] memory managerTokenAmount = new uint[](len);\\n        uint[] memory issueTokenAmount = new uint[](len);\\n        uint[] memory redeemTokenAmount = new uint[](len);\\n        uint[] memory perfermanceTokenAmount = new uint[](len);\\n        for (uint i; i < len; i++) {\\n            uint balance;\\n            ClaimTokenInfo memory tokenInfo;\\n            (balance, managerTokenAmount[i], issueTokenAmount[i], redeemTokenAmount[i], perfermanceTokenAmount[i]) = _computeBalance(i, pool);\\n            address t = poolManageTokens[i];\\n            tokenInfo.token = t;\\n            tokenInfo.amount = balance;\\n            tokenInfo.decimals = IERC20(t).decimals();\\n            recordInfo.tokens.push(tokenInfo);\\n            _transferHandle(pool, manager_address, t, balance);\\n        }\\n        \\n        if (_isClosePool(pool)) _recordUserVault(pool, poolManageTokens, managerTokenAmount, issueTokenAmount, redeemTokenAmount, perfermanceTokenAmount);\\n\\n        record_number[pool] = record_number[pool].add(1);\\n        record_List[pool][record_number[pool]] = recordInfo;\\n        _clearPool(pool);        \\n    }\\n\\n    function getManagerFeeTypes(address pool) external view returns(FeeTypesTokens memory result){     \\n        PoolTokens memory tokens = poolsTokens[pool];\\n           address[] memory poolManageTokens = tokens.tokenList.length != 0\\n            ? tokens.tokenList\\n            : (tokens.issueTokens.length != 0 ? tokens.issueTokens : (tokens.redeemTokens.length != 0 ? tokens.redeemTokens : tokens.perfermanceTokens));\\n        uint len = poolManageTokens.length;\\n\\n        result.tokenList = tokens.tokenList;\\n        result.managerAmount = new uint[](len);\\n        result.issueAmount = new uint[](len);\\n        result.redeemAmount = new uint[](len);\\n        result.perfermanceAmount = new uint[](len);\\n\\n        for(uint i; i< len; i++){\\n            (,result.managerAmount[i],result.issueAmount[i],result.redeemAmount[i],result.perfermanceAmount[i]) = _computeBalance(i,pool);\\n        }\\n    }\\n\\n    function managerClaimRecordList(address pool) external view returns (ClaimRecordInfo[] memory claimRecordInfos) {\\n        uint num = record_number[pool];\\n        ClaimRecordInfo[] memory records = new ClaimRecordInfo[](num);\\n        for (uint i = 1; i < num + 1; i++) {\\n            ClaimRecordInfo memory record;\\n            record = record_List[pool][i];\\n            records[i.sub(1)] = record;\\n        }\\n        return records;\\n    }\\n\\n    function getUnManagerReward(address pool) external returns (address[] memory tokens, uint[] memory amounts) {\\n        ClaimTokenInfo[] memory claimTokenInfos = this.managerClaimList(pool);\\n\\n        uint len = claimTokenInfos.length;\\n        tokens = new address[](len);\\n        amounts = new uint[](len);\\n        for(uint i; i < len; i++){\\n            tokens[i] = claimTokenInfos[i].token;\\n            amounts[i] = claimTokenInfos[i].amount;\\n        }\\n    }\\n\\n    function managerClaimList(address pool) external view returns (ClaimTokenInfo[] memory claimTokenInfos) {\\n        PoolTokens memory tokens = poolsTokens[pool];\\n        address[] memory _pool_manager_tokenList = tokens.tokenList.length != 0\\n            ? tokens.tokenList\\n            : (tokens.issueTokens.length != 0 ? tokens.issueTokens : (tokens.redeemTokens.length != 0 ? tokens.redeemTokens : tokens.perfermanceTokens));\\n        uint len = _pool_manager_tokenList.length;\\n\\n        ClaimTokenInfo[] memory infos = new ClaimTokenInfo[](len);\\n        for (uint i = 0; i < len; i++) {\\n            {\\n                ClaimTokenInfo memory tokenInfo;\\n                tokenInfo.token = _pool_manager_tokenList[i];\\n\\n                (uint balance,,,,) = _computeBalance(i,pool);\\n                tokenInfo.amount = balance;\\n                tokenInfo.decimals = IERC20(_pool_manager_tokenList[i]).decimals();\\n                \\n                infos[i] = tokenInfo;\\n            }\\n        }\\n\\n        return infos;\\n    }\\n\\n    function _communaldepositToken(\\n        address[] memory tokensIn,\\n        uint[] memory amountsIn,\\n        address[] storage curTokenList,\\n        uint[] storage curTokensAmount\\n    ) internal {\\n        uint len = tokensIn.length;\\n        for (uint k; k < len; k++) {\\n            address t = tokensIn[k];\\n            uint b = amountsIn[k];\\n            IERC20(t).safeTransferFrom(msg.sender, address(this), b);\\n            (bool isExit, uint index) = _arrIncludeAddr(curTokenList,t);\\n            if (isExit) {\\n                curTokensAmount[index] = curTokensAmount[k].add(b);\\n            } else {\\n                curTokenList.push(t);\\n                curTokensAmount.push(b);\\n            }\\n        }\\n    }\\n\\n    function _arrIncludeAddr(address[] memory tokens, address target) internal pure returns(bool isInclude, uint index){\\n        for(uint i; i<tokens.length; i++){\\n            if(tokens[i] == target){ \\n                isInclude = true;\\n                index = i;\\n            }\\n        }\\n    }\\n\\n    function _communaldepositTokenNew(\\n        address[] calldata poolTokens,\\n        uint[] calldata tokensAmount,\\n        uint[] calldata tokensAmountIR,\\n        address poolAdr\\n    ) internal {\\n        uint len = poolTokens.length;\\n        PoolTokens storage tokens = poolsTokens[poolAdr];\\n\\n        for (uint i; i < len; i++) {\\n            address t = poolTokens[i];\\n            uint b = tokensAmount[i];\\n            uint bIR = tokensAmountIR[i];\\n            IERC20(t).safeTransferFrom(msg.sender, address(this), b);\\n\\n            (bool isExitOnRedeem,uint index) = _arrIncludeAddr(tokens.redeemTokens,t);\\n            if(isExitOnRedeem){\\n                tokens.redeemAmount[index] = tokens.perfermanceAmount[i].add(bIR);\\n            } else {\\n                tokens.redeemTokens.push(t);\\n                tokens.redeemAmount.push(bIR);\\n            }\\n\\n            (bool isExitOnPerfermance, uint index2) = _arrIncludeAddr(tokens.perfermanceTokens, t);\\n            if(isExitOnPerfermance){\\n                tokens.perfermanceAmount[index2] = tokens.perfermanceAmount[i].add(b.sub(bIR));\\n            } else{\\n                tokens.perfermanceTokens.push(t);\\n                tokens.perfermanceAmount.push(b.sub(bIR));\\n            }\\n        }\\n    }\\n\\n    function _isClosePool(address pool) internal view returns (bool) {\\n        return ICRPPool(pool).etype() == ICRPPool.Etypes.CLOSED;\\n    }\\n\\n    function _computeBalance(uint i, address pool)\\n        internal\\n        view\\n        returns (\\n            uint balance,\\n            uint bManagerAmount,\\n            uint bIssueAmount,\\n            uint bRedeemAmount,\\n            uint bPerfermanceAmount\\n        )\\n    {\\n        PoolTokens memory tokens = poolsTokens[pool];\\n\\n        //manager fee\\n        if (tokens.managerAmount.length != 0) {\\n            bManagerAmount = tokens.managerAmount[i].mul(RATIO_MANAGER).div(RATIO_TOTAL);\\n            balance = balance.add(bManagerAmount);\\n        }\\n        if (tokens.issueAmount.length != 0) {\\n            bIssueAmount = tokens.issueAmount[i].mul(RATIO_ISSUE).div(RATIO_TOTAL);\\n            balance = balance.add(bIssueAmount);\\n        }\\n        if (tokens.redeemAmount.length != 0) {\\n            bRedeemAmount = tokens.redeemAmount[i].mul(RATIO_REDEEM).div(RATIO_TOTAL);\\n            balance = balance.add(bRedeemAmount);\\n        }\\n        if (tokens.perfermanceAmount.length != 0) {\\n            bPerfermanceAmount = tokens.perfermanceAmount[i].mul(RATIO_PERFERMANCE).div(RATIO_TOTAL);\\n            balance = balance.add(bPerfermanceAmount);\\n        }\\n    }\\n\\n    function _clearPool(address pool) internal {\\n        delete poolsTokens[pool];\\n    }\\n\\n    function _recordUserVault(\\n        address pool,\\n        address[] memory tokenList,\\n        uint[] memory managerTokenAmount,\\n        uint[] memory issueTokenAmount,\\n        uint[] memory redeemTokenAmount,\\n        uint[] memory perfermanceTokenAmount\\n    ) internal {\\n        PoolTokens memory tokens = poolsTokens[pool];\\n\\n        if (tokens.managerAmount.length != 0) {\\n            IUserVault(userVault).depositToken(pool, 0, tokenList, managerTokenAmount);\\n        }\\n        if (tokens.issueAmount.length != 0) {\\n            IUserVault(userVault).depositToken(pool, 1, tokenList, issueTokenAmount);\\n        }\\n        if (tokens.redeemAmount.length != 0) {\\n            IUserVault(userVault).depositToken(pool, 2, tokenList, redeemTokenAmount);\\n        }\\n        if (tokens.perfermanceAmount.length != 0) {\\n            IUserVault(userVault).depositToken(pool, 3, tokenList, perfermanceTokenAmount);\\n        }\\n    }\\n\\n    function _checkInitPoolController(address pool) internal {\\n        if (poolManager[pool] == address(0)) {\\n            poolManager[pool] = ICRPPool(pool).getController();\\n        }\\n    }\\n\\n    function _transferHandle(\\n        address pool,\\n        address manager_address,\\n        address t,\\n        uint balance\\n    ) internal {\\n        bool isCloseETF = _isClosePool(pool);\\n        bool isOpenETF = !isCloseETF;\\n        bool isContractManager = manager_address.isContract();\\n\\n        if(isCloseETF){\\n            IERC20(t).safeTransfer(userVault, balance);\\n        }\\n\\n        if(isOpenETF && isContractManager){\\n            address[] memory managerAddressList = IDesynOwnable(pool).getOwners();\\n            uint[] memory ownerPercentage = IDesynOwnable(pool).getOwnerPercentage();\\n            uint allOwnerPercentage = IDesynOwnable(pool).allOwnerPercentage();\\n\\n            for (uint k; k < managerAddressList.length; k++) {\\n                address reciver = address(managerAddressList[k]).isContract()? IDSProxy(managerAddressList[k]).owner(): managerAddressList[k];\\n                uint b = balance.mul(ownerPercentage[k]).div(allOwnerPercentage);\\n                IERC20(t).safeTransfer(reciver, b);\\n                emit ManagerClaim(msg.sender,reciver,t,b,block.timestamp);\\n            }\\n            emit ManagersClaim(msg.sender, pool, t, balance, block.timestamp);\\n        }\\n\\n        if(isOpenETF && !isContractManager){\\n            IERC20(t).safeTransfer(manager_address, balance);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcfd17e136e701fc68cdb0787e0d48fab79fa60c5602371dc7dcdbbf10da37b29\"},\"contracts/interfaces/IDSProxy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\ninterface IDSProxy {\\n    function owner() external view returns(address);\\n}\",\"keccak256\":\"0xe330359819e40d60365ba92005c9b8b1eccdf18ae583352a0cff0a2a4cf7ff14\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Interface declarations\\n\\n/* solhint-disable func-order */\\n\\ninterface IERC20 {\\n    // Emitted when the allowance of a spender for an owner is set by a call to approve.\\n    // Value is the new allowance\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n\\n    // Emitted when value tokens are moved from one account (from) to another (to).\\n    // Note that value may be zero\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    // Returns the amount of tokens in existence\\n    function totalSupply() external view returns (uint);\\n\\n    // Returns the amount of tokens owned by account\\n    function balanceOf(address account) external view returns (uint);\\n\\n    // Returns the decimals of tokens\\n    function decimals() external view returns (uint8);\\n\\n    function symbol() external view returns (string memory);\\n\\n    // Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner\\n    // through transferFrom. This is zero by default\\n    // This value changes when approve or transferFrom are called\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    // Sets amount as the allowance of spender over the caller\\u2019s tokens\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits an Approval event.\\n    function approve(address spender, uint amount) external returns (bool);\\n\\n    // Moves amount tokens from the caller\\u2019s account to recipient\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits a Transfer event.\\n    function transfer(address recipient, uint amount) external returns (bool);\\n\\n    // Moves amount tokens from sender to recipient using the allowance mechanism\\n    // Amount is then deducted from the caller\\u2019s allowance\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits a Transfer event\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xfe22b6d6029b400b9cce7f9b39c546f99cd6922b2fd926e480e2b4d476ab26f8\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            codehash := extcodehash(account)\\n        }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint weiValue,\\n        string memory errorMessage\\n    ) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2f31de87a6037a6a1ab4cefb32f22352df92b082dde0c182801bf421bacc303c\",\"license\":\"agpl-3.0\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\nimport {SafeMath} from \\\"./SafeMath.sol\\\";\\nimport {Address} from \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint value\\n    ) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint value\\n    ) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint value\\n    ) internal {\\n        require((value == 0) || (token.allowance(address(this), spender) == 0), \\\"SafeERC20: approve from non-zero to non-zero allowance\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdb66e9e24513d153d62e792a46c723eeff7ad7c93215a56aa3a27f1143d95ae9\",\"license\":\"MIT\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint a, uint b) internal pure returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint a, uint b) internal pure returns (uint) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint a,\\n        uint b,\\n        string memory errorMessage\\n    ) internal pure returns (uint) {\\n        require(b <= a, errorMessage);\\n        uint c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint a, uint b) internal pure returns (uint) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint a, uint b) internal pure returns (uint) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint a,\\n        uint b,\\n        string memory errorMessage\\n    ) internal pure returns (uint) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint a, uint b) internal pure returns (uint) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint a,\\n        uint b,\\n        string memory errorMessage\\n    ) internal pure returns (uint) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x7ce3fd7d17047f684821e1a20b4f5989630f6755a377b12c087dfde359f710d6\",\"license\":\"agpl-3.0\"},\"contracts/openzeppelin/Ownable.sol\":{\"content\":\"pragma solidity >=0.6.0 <0.8.0;\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\",\"keccak256\":\"0x8e1e573ff7c1a90087b58f618ae87f33f04616ec7f959f73db4a3b73ff1ee939\"}},\"version\":1}",
  "bytecode": "0x60806040526103e8600855610320600955610320600a55610320600b55610320600c553480156200002f57600080fd5b5060006200003c6200008c565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35062000090565b3390565b61528580620000a06000396000f3fe6080604052600436106101d45760003560e01c80636fd4ba9c116100fe5780636fd4ba9c14610493578063715018a6146104c157806371bb41a9146104d657806378a619de146104f657806386d0afa3146104fe57806389a612e51461052b5780638da5cb5b1461054b5780639daafec714610560578063a5168ee214610575578063a5d2bf6314610595578063a97f9f33146105aa578063b8baccb8146105ca578063c0fcb166146105ea578063c1cad45814610617578063c1e576221461062c578063de7f30221461064c578063ebef44d91461066c578063edb12adf1461068c578063edbfb5f5146106ac578063f2fde38b146106cc576101db565b80630922f29d146101e05780630a014864146102025780630b6b3b2a1461022d5780630bac7b811461024d5780631483d99d1461026d5780631a46506e1461028d5780631cc9a579146102ba5780631f70e80b146102e7578063265f30da146102fc5780632b5230a9146103115780632c0bdbcf1461033157806336e4c87f1461035e57806341c65e831461038c578063483e1948146103ac5780634934d18f146103cc5780634bbe2fca146103f95780634d4ae12d14610419578063598797ad1461044657806368092bd914610473576101db565b366101db57005b600080fd5b3480156101ec57600080fd5b506102006101fb366004614617565b6106ec565b005b34801561020e57600080fd5b506102176107a7565b60405161022491906151b2565b60405180910390f35b34801561023957600080fd5b506102006102483660046149fb565b6107ad565b34801561025957600080fd5b506102006102683660046146f2565b61082b565b34801561027957600080fd5b5061020061028836600461475a565b610a09565b34801561029957600080fd5b506102ad6102a8366004614617565b610c05565b6040516102249190614c95565b3480156102c657600080fd5b506102da6102d5366004614617565b610c74565b6040516102249190614c1f565b3480156102f357600080fd5b50610217610de0565b34801561030857600080fd5b50610217610de6565b34801561031d57600080fd5b506102ad61032c366004614617565b610dec565b34801561033d57600080fd5b5061035161034c366004614617565b610e59565b6040516102249190614bde565b34801561036a57600080fd5b5061037e610379366004614617565b610ed1565b604051610224929190614cb3565b34801561039857600080fd5b506103516103a7366004614617565b610eef565b3480156103b857600080fd5b506102006103c73660046149fb565b610f66565b3480156103d857600080fd5b506103ec6103e7366004614617565b610ffc565b6040516102249190614b28565b34801561040557600080fd5b506102176104143660046146c7565b611017565b34801561042557600080fd5b50610439610434366004614617565b611034565b6040516102249190614c82565b34801561045257600080fd5b50610466610461366004614617565b6114f2565b604051610224919061502b565b34801561047f57600080fd5b5061020061048e36600461468f565b611a07565b34801561049f57600080fd5b506104b36104ae366004614617565b611ab1565b604051610224929190614bf1565b3480156104cd57600080fd5b50610200611c48565b3480156104e257600080fd5b506102006104f13660046149fb565b611cd1565b610200611d67565b34801561050a57600080fd5b5061051e610519366004614617565b611dd5565b60405161022491906150bd565b34801561053757600080fd5b506102006105463660046149fb565b6120e9565b34801561055757600080fd5b506103ec61217f565b34801561056c57600080fd5b506103ec61218e565b34801561058157600080fd5b506102ad610590366004614617565b61219d565b3480156105a157600080fd5b5061021761220a565b3480156105b657600080fd5b506102ad6105c5366004614617565b612210565b3480156105d657600080fd5b506102006105e536600461464f565b61227d565b3480156105f657600080fd5b5061060a610605366004614617565b6122d5565b6040516102249190614ca8565b34801561062357600080fd5b506102176122f3565b34801561063857600080fd5b50610200610647366004614617565b6122f9565b34801561065857600080fd5b50610351610667366004614617565b612394565b34801561067857600080fd5b50610351610687366004614617565b61240b565b34801561069857600080fd5b506102006106a7366004614617565b61247f565b3480156106b857600080fd5b506102176106c7366004614617565b612d5e565b3480156106d857600080fd5b506102006106e7366004614617565b612d70565b6106f4612e30565b6001600160a01b031661070561217f565b6001600160a01b0316146107345760405162461bcd60e51b815260040161072b90614f11565b60405180910390fd5b6001600160a01b03811661075a5760405162461bcd60e51b815260040161072b90614d9d565b600280546001600160a01b0319166001600160a01b0383169081179091556040513391907fda49b6b843d6c52e6a8fa0f8645f8a33373438a8bf8500d292bf7a96a0a8041790600090a350565b600a5481565b6107b5612e30565b6001600160a01b03166107c661217f565b6001600160a01b0316146107ec5760405162461bcd60e51b815260040161072b90614f11565b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405161081e929190614cc5565b60405180910390a2600c55565b600154604051636e0cf42160e11b815233916001600160a01b03169063dc19e8429061085b908490600401614b28565b60206040518083038186803b15801561087357600080fd5b505afa158015610887573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ab91906149c0565b6108c75760405162461bcd60e51b815260040161072b90614e9e565b8382146108e65760405162461bcd60e51b815260040161072b90614e09565b6108ef81612e34565b6001600160a01b03811660009081526003602090815260409182902082518783028181018401909452878152909261097a928991899182919085019084908082843760009201919091525050604080516020808a0282810182019093528982529093508992508891829185019084908082843760009201919091525086925050600482019050612ef2565b6001600160a01b0382166000908152600460205260409020805460ff191660011790556109a68261304f565b15610a015760405163edb12adf60e01b8152309063edb12adf906109ce908590600401614b28565b600060405180830381600087803b1580156109e857600080fd5b505af11580156109fc573d6000803e3d6000fd5b505050505b505050505050565b600154604051636e0cf42160e11b815233916001600160a01b03169063dc19e84290610a39908490600401614b28565b60206040518083038186803b158015610a5157600080fd5b505afa158015610a65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8991906149c0565b610aa55760405162461bcd60e51b815260040161072b90614e9e565b868514610ac45760405162461bcd60e51b815260040161072b90614e09565b610acd81612e34565b6001600160a01b038116600090815260036020526040902082610b6457610b5f89898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808d0282810182019093528c82529093508c92508b918291850190849080828437600092019190915250506001860191505060058501612ef2565b610b73565b610b73898989898989886130d6565b6001600160a01b0382166000908152600460205260409020805460ff19166001179055610b9f8261304f565b15610bfa5760405163edb12adf60e01b8152309063edb12adf90610bc7908590600401614b28565b600060405180830381600087803b158015610be157600080fd5b505af1158015610bf5573d6000803e3d6000fd5b505050505b505050505050505050565b6001600160a01b038116600090815260036020908152604091829020600701805483518184028101840190945280845260609392830182828015610c6857602002820191906000526020600020905b815481526020019060010190808311610c54575b50505050509050919050565b6001600160a01b03811660009081526005602052604090205460609081816001600160401b0381118015610ca757600080fd5b50604051908082528060200260200182016040528015610ce157816020015b610cce6143ce565b815260200190600190039081610cc65790505b50905060015b82600101811015610dd857610cfa6143ce565b6001600160a01b0386166000908152600660209081526040808320858452825280832081518083018352815481526001820180548451818702810187019095528085529195929486810194939192919084015b82821015610da2576000848152602090819020604080516060810182526003860290920180546001600160a01b0316835260018082015484860152600290910154918301919091529083529092019101610d4d565b50505091525090915081905083610dba846001613368565b81518110610dc457fe5b602090810291909101015250600101610ce7565b509392505050565b60085481565b600c5481565b6001600160a01b038116600090815260036020908152604091829020600601805483518184028101840190945280845260609392830182828015610c685760200282019190600052602060002090815481526020019060010190808311610c545750505050509050919050565b6001600160a01b038116600090815260036020908152604091829020600201805483518184028101840190945280845260609392830182828015610c6857602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610ea85750505050509050919050565b60046020526000908152604090205460ff8082169161010090041682565b6001600160a01b038116600090815260036020818152604092839020909101805483518184028101840190945280845260609392830182828015610c68576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610ea85750505050509050919050565b610f6e612e30565b6001600160a01b0316610f7f61217f565b6001600160a01b031614610fa55760405162461bcd60e51b815260040161072b90614f11565b600854811115610fc75760405162461bcd60e51b815260040161072b90614d6d565b600b819055604051819033907f401a2e9de953ac26f52ac90650c1c1c1d95f78ef7661efad2ab1f2c59b9fd5e490600090a350565b6007602052600090815260409020546001600160a01b031681565b600660209081526000928352604080842090915290825290205481565b606061103e6143e8565b6001600160a01b0383166000908152600360209081526040918290208251815461012093810282018401909452610100810184815290939192849284918401828280156110b457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611096575b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561111657602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116110f8575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561117857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161115a575b50505050508152602001600382018054806020026020016040519081016040528092919081815260200182805480156111da57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116111bc575b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561123257602002820191906000526020600020905b81548152602001906001019080831161121e575b505050505081526020016005820180548060200260200160405190810160405280929190818152602001828054801561128a57602002820191906000526020600020905b815481526020019060010190808311611276575b50505050508152602001600682018054806020026020016040519081016040528092919081815260200182805480156112e257602002820191906000526020600020905b8154815260200190600101908083116112ce575b505050505081526020016007820180548060200260200160405190810160405280929190818152602001828054801561133a57602002820191906000526020600020905b815481526020019060010190808311611326575b50505050508152505090506060816000015151600014156113895760208201515161137e57604082015151611373578160600151611379565b81604001515b611384565b81602001515b61138c565b81515b80519091506060816001600160401b03811180156113a957600080fd5b506040519080825280602002602001820160405280156113e357816020015b6113d061442d565b8152602001906001900390816113c85790505b50905060005b828110156114e8576113f961442d565b84828151811061140557fe5b60209081029190910101516001600160a01b031681526000611427838a6133b3565b5050505090508082604001818152505085838151811061144357fe5b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561148357600080fd5b505afa158015611497573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114bb9190614a2b565b60ff166020830152835182908590859081106114d357fe5b602090810291909101015250506001016113e9565b5095945050505050565b6114fa614457565b6115026143e8565b6001600160a01b03831660009081526003602090815260409182902082518154610120938102820184019094526101008101848152909391928492849184018282801561157857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161155a575b50505050508152602001600182018054806020026020016040519081016040528092919081815260200182805480156115da57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116115bc575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561163c57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161161e575b505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561169e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611680575b50505050508152602001600482018054806020026020016040519081016040528092919081815260200182805480156116f657602002820191906000526020600020905b8154815260200190600101908083116116e2575b505050505081526020016005820180548060200260200160405190810160405280929190818152602001828054801561174e57602002820191906000526020600020905b81548152602001906001019080831161173a575b50505050508152602001600682018054806020026020016040519081016040528092919081815260200182805480156117a657602002820191906000526020600020905b815481526020019060010190808311611792575b50505050508152602001600782018054806020026020016040519081016040528092919081815260200182805480156117fe57602002820191906000526020600020905b8154815260200190600101908083116117ea575b505050505081525050905060608160000151516000141561184d576020820151516118425760408201515161183757816060015161183d565b81604001515b611848565b81602001515b611850565b81515b805183518552909150806001600160401b038111801561186f57600080fd5b50604051908082528060200260200182016040528015611899578160200160208202803683370190505b506020850152806001600160401b03811180156118b557600080fd5b506040519080825280602002602001820160405280156118df578160200160208202803683370190505b506040850152806001600160401b03811180156118fb57600080fd5b50604051908082528060200260200182016040528015611925578160200160208202803683370190505b506060850152806001600160401b038111801561194157600080fd5b5060405190808252806020026020018201604052801561196b578160200160208202803683370190505b50608085015260005b818110156119fe5761198681876133b3565b90919293508860200151858151811061199b57fe5b60200260200101896040015186815181106119b257fe5b602002602001018a6060015187815181106119c957fe5b602002602001018b6080015188815181106119e057fe5b60209081029190910101939093529290915291905252600101611974565b50505050919050565b611a0f612e30565b6001600160a01b0316611a2061217f565b6001600160a01b031614611a465760405162461bcd60e51b815260040161072b90614f11565b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051611a78929190614cc5565b60405180910390a26001600160a01b03909116600090815260046020526040902080549115156101000261ff0019909216919091179055565b604051634d4ae12d60e01b8152606090819081903090634d4ae12d90611adb908790600401614b28565b60006040518083038186803b158015611af357600080fd5b505afa158015611b07573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b2f91908101906148a0565b8051909150806001600160401b0381118015611b4a57600080fd5b50604051908082528060200260200182016040528015611b74578160200160208202803683370190505b509350806001600160401b0381118015611b8d57600080fd5b50604051908082528060200260200182016040528015611bb7578160200160208202803683370190505b50925060005b81811015611c4057828181518110611bd157fe5b602002602001015160000151858281518110611be957fe5b60200260200101906001600160a01b031690816001600160a01b031681525050828181518110611c1557fe5b602002602001015160400151848281518110611c2d57fe5b6020908102919091010152600101611bbd565b505050915091565b611c50612e30565b6001600160a01b0316611c6161217f565b6001600160a01b031614611c875760405162461bcd60e51b815260040161072b90614f11565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b611cd9612e30565b6001600160a01b0316611cea61217f565b6001600160a01b031614611d105760405162461bcd60e51b815260040161072b90614f11565b600854811115611d325760405162461bcd60e51b815260040161072b90614d6d565b600a819055604051819033907f448dcad41b13f10b7abd9393b3e1bb9887110740a9f0f9c7d2ed0b762652971f90600090a350565b611d6f612e30565b6001600160a01b0316611d8061217f565b6001600160a01b031614611da65760405162461bcd60e51b815260040161072b90614f11565b60405133904780156108fc02916000818181858888f19350505050158015611dd2573d6000803e3d6000fd5b50565b611ddd6143e8565b6001600160a01b038216600090815260036020908152604091829020825181546101209381028201840190945261010081018481529093919284928491840182828015611e5357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611e35575b5050505050815260200160018201805480602002602001604051908101604052809291908181526020018280548015611eb557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611e97575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015611f1757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611ef9575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015611f7957602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611f5b575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015611fd157602002820191906000526020600020905b815481526020019060010190808311611fbd575b505050505081526020016005820180548060200260200160405190810160405280929190818152602001828054801561202957602002820191906000526020600020905b815481526020019060010190808311612015575b505050505081526020016006820180548060200260200160405190810160405280929190818152602001828054801561208157602002820191906000526020600020905b81548152602001906001019080831161206d575b50505050508152602001600782018054806020026020016040519081016040528092919081815260200182805480156120d957602002820191906000526020600020905b8154815260200190600101908083116120c5575b5050505050815250509050919050565b6120f1612e30565b6001600160a01b031661210261217f565b6001600160a01b0316146121285760405162461bcd60e51b815260040161072b90614f11565b60085481111561214a5760405162461bcd60e51b815260040161072b90614d6d565b6009819055604051819033907f7d624dbda9646ad98f8b1fbd8de61497fb7a4e93b94bc13a6548b81c9b0ce91a90600090a350565b6000546001600160a01b031690565b6002546001600160a01b031681565b6001600160a01b038116600090815260036020908152604091829020600501805483518184028101840190945280845260609392830182828015610c685760200282019190600052602060002090815481526020019060010190808311610c545750505050509050919050565b600b5481565b6001600160a01b038116600090815260036020908152604091829020600401805483518184028101840190945280845260609392830182828015610c685760200282019190600052602060002090815481526020019060010190808311610c545750505050509050919050565b612285612e30565b6001600160a01b031661229661217f565b6001600160a01b0316146122bc5760405162461bcd60e51b815260040161072b90614f11565b6122d06001600160a01b03841683836137cb565b505050565b6001600160a01b031660009081526004602052604090205460ff1690565b60095481565b612301612e30565b6001600160a01b031661231261217f565b6001600160a01b0316146123385760405162461bcd60e51b815260040161072b90614f11565b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405161236a929190614cc5565b60405180910390a2600180546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038116600090815260036020908152604091829020600101805483518184028101840190945280845260609392830182828015610c68576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610ea85750505050509050919050565b6001600160a01b038116600090815260036020908152604091829020805483518184028101840190945280845260609392830182828015610c68576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610ea85750505050509050919050565b600154604051636e0cf42160e11b81526001600160a01b039091169063dc19e842906124af908490600401614b28565b60206040518083038186803b1580156124c757600080fd5b505afa1580156124db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124ff91906149c0565b61251b5760405162461bcd60e51b815260040161072b90614e9e565b6000816001600160a01b0316633018205f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561255657600080fd5b505afa15801561256a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061258e9190614633565b90506125986143e8565b6001600160a01b03831660009081526003602090815260409182902082518154610120938102820184019094526101008101848152909391928492849184018282801561260e57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116125f0575b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561267057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612652575b50505050508152602001600282018054806020026020016040519081016040528092919081815260200182805480156126d257602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116126b4575b505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561273457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612716575b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561278c57602002820191906000526020600020905b815481526020019060010190808311612778575b50505050508152602001600582018054806020026020016040519081016040528092919081815260200182805480156127e457602002820191906000526020600020905b8154815260200190600101908083116127d0575b505050505081526020016006820180548060200260200160405190810160405280929190818152602001828054801561283c57602002820191906000526020600020905b815481526020019060010190808311612828575b505050505081526020016007820180548060200260200160405190810160405280929190818152602001828054801561289457602002820191906000526020600020905b815481526020019060010190808311612880575b505050919092525050506001600160a01b0384166000908152600460205260409020815151919250906060906128f8576020830151516128ed576040830151516128e25782606001516128e8565b82604001515b6128f3565b82602001515b6128fb565b82515b8051835491925090610100900460ff16156129285760405162461bcd60e51b815260040161072b90614f7b565b6001600160a01b0386811660009081526007602052604090205481169086161461297b576001600160a01b03868116600090815260076020526040902080546001600160a01b0319169187169190911790555b6000811161299b5760405162461bcd60e51b815260040161072b90614e72565b825460ff166129bc5760405162461bcd60e51b815260040161072b90614f46565b825460ff191683556001600160a01b0386166000908152600660209081526040808320600590925282205482906129f4906001613821565b815260200190815260200160002090508060000160009055806001016000612a1c9190614486565b4281556060826001600160401b0381118015612a3757600080fd5b50604051908082528060200260200182016040528015612a61578160200160208202803683370190505b5090506060836001600160401b0381118015612a7c57600080fd5b50604051908082528060200260200182016040528015612aa6578160200160208202803683370190505b5090506060846001600160401b0381118015612ac157600080fd5b50604051908082528060200260200182016040528015612aeb578160200160208202803683370190505b5090506060856001600160401b0381118015612b0657600080fd5b50604051908082528060200260200182016040528015612b30578160200160208202803683370190505b50905060005b86811015612cbc576000612b4861442d565b612b52838f6133b3565b8b8881518110612b5e57fe5b602002602001018b8981518110612b7157fe5b602002602001018b8a81518110612b8457fe5b602002602001018b8b81518110612b9757fe5b602090810291909101019390935292909152919052528a519092506000908b9085908110612bc157fe5b6020908102919091018101516001600160a01b0381168085526040808601879052805163313ce56760e01b81529051929450909263313ce56792600480840193829003018186803b158015612c1557600080fd5b505afa158015612c29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c4d9190614a2b565b60ff16602083810191825260018b8101805480830182556000918252929020855160039093020180546001600160a01b0319166001600160a01b039093169290921782559151918101919091556040830151600290910155612cb18f8f8386613846565b505050600101612b36565b50612cc68b61304f565b15612cd957612cd98b8886868686613bf3565b6001600160a01b038b16600090815260056020526040902054612cfd906001613821565b6001600160a01b038c16600090815260056020908152604080832084905560068252808320938352929052208554815560018087018054889392612d4492908401916144a7565b50905050612d518b6140d1565b5050505050505050505050565b60056020526000908152604090205481565b612d78612e30565b6001600160a01b0316612d8961217f565b6001600160a01b031614612daf5760405162461bcd60e51b815260040161072b90614f11565b6001600160a01b038116612dd55760405162461bcd60e51b815260040161072b90614d27565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b6001600160a01b0381811660009081526007602052604090205416611dd257806001600160a01b0316633018205f6040518163ffffffff1660e01b815260040160206040518083038186803b158015612e8c57600080fd5b505afa158015612ea0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ec49190614633565b6001600160a01b03918216600090815260076020526040902080546001600160a01b03191691909216179055565b835160005b81811015610a01576000868281518110612f0d57fe5b602002602001015190506000868381518110612f2557fe5b60209081029190910101519050612f476001600160a01b038316333084614156565b600080612fad88805480602002602001604051908101604052809291908181526020018280548015612fa257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612f84575b50505050508561417d565b915091508115612ffd57612fe083888781548110612fc757fe5b906000526020600020015461382190919063ffffffff16565b878281548110612fec57fe5b60009182526020909120015561303f565b875460018082018a5560008a8152602080822090930180546001600160a01b0319166001600160a01b03891617905589549182018a5589815291909120018390555b505060019092019150612ef79050565b60006001826001600160a01b03166373a9855c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561308c57600080fd5b505afa1580156130a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130c491906149dc565b60018111156130cf57fe5b1492915050565b6001600160a01b038116600090815260036020526040812087915b828110156109fc5760008a8a8381811061310757fe5b905060200201602081019061311c9190614617565b9050600089898481811061312c57fe5b905060200201359050600088888581811061314357fe5b6020029190910135915061316490506001600160a01b038416333085614156565b6000806131cd876002018054806020026020016040519081016040528092919081815260200182805480156131c257602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116131a4575b50505050508661417d565b91509150811561320a576131ea83886007018881548110612fc757fe5b8760060182815481106131f957fe5b600091825260209091200155613251565b600287018054600180820183556000928352602080842090920180546001600160a01b0319166001600160a01b038a1617905560068a018054918201815583529120018390555b6000806132ba896003018054806020026020016040519081016040528092919081815260200182805480156132af57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613291575b50505050508861417d565b915091508115613300576132e06132d18787613368565b8a6007018a81548110612fc757fe5b8960070182815481106132ef57fe5b600091825260209091200155613355565b600389018054600181018255600091825260209091200180546001600160a01b0319166001600160a01b0389161790556007890161333e8787613368565b815460018101835560009283526020909220909101555b5050600190950194506130f19350505050565b60006133aa83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506141d1565b90505b92915050565b60008060008060006133c36143e8565b6001600160a01b03871660009081526003602090815260409182902082518154610120938102820184019094526101008101848152909391928492849184018282801561343957602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161341b575b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561349b57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161347d575b50505050508152602001600282018054806020026020016040519081016040528092919081815260200182805480156134fd57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116134df575b505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561355f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613541575b50505050508152602001600482018054806020026020016040519081016040528092919081815260200182805480156135b757602002820191906000526020600020905b8154815260200190600101908083116135a3575b505050505081526020016005820180548060200260200160405190810160405280929190818152602001828054801561360f57602002820191906000526020600020905b8154815260200190600101908083116135fb575b505050505081526020016006820180548060200260200160405190810160405280929190818152602001828054801561366757602002820191906000526020600020905b815481526020019060010190808311613653575b50505050508152602001600782018054806020026020016040519081016040528092919081815260200182805480156136bf57602002820191906000526020600020905b8154815260200190600101908083116136ab575b505050505081525050905080608001515160001461371e5761370f60085461370960095484608001518c815181106136f357fe5b60200260200101516141fd90919063ffffffff16565b90614237565b945061371b8686613821565b95505b60a0810151511561375457613745600854613709600a548460a001518c815181106136f357fe5b93506137518685613821565b95505b60c0810151511561378a5761377b600854613709600b548460c001518c815181106136f357fe5b92506137878684613821565b95505b60e081015151156137c0576137b1600854613709600c548460e001518c815181106136f357fe5b91506137bd8683613821565b95505b509295509295909350565b6122d08363a9059cbb60e01b84846040516024016137ea929190614ba4565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614276565b6000828201838110156133aa5760405162461bcd60e51b815260040161072b90614dd4565b60006138518561304f565b9050801560006138696001600160a01b03871661435b565b9050821561388b5760025461388b906001600160a01b038781169116866137cb565b8180156138955750805b15613bc6576060876001600160a01b031663a0e67e2b6040518163ffffffff1660e01b815260040160006040518083038186803b1580156138d557600080fd5b505afa1580156138e9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526139119190810190614803565b90506060886001600160a01b031663309a042c6040518163ffffffff1660e01b815260040160006040518083038186803b15801561394e57600080fd5b505afa158015613962573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261398a919081019061493d565b90506000896001600160a01b031663d29986c16040518163ffffffff1660e01b815260040160206040518083038186803b1580156139c757600080fd5b505afa1580156139db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139ff9190614a13565b905060005b8351811015613b72576000613a34858381518110613a1e57fe5b60200260200101516001600160a01b031661435b565b613a5157848281518110613a4457fe5b6020026020010151613ad5565b848281518110613a5d57fe5b60200260200101516001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015613a9d57600080fd5b505afa158015613ab1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ad59190614633565b90506000613b0384613709878681518110613aec57fe5b60200260200101518d6141fd90919063ffffffff16565b9050613b196001600160a01b038c1683836137cb565b816001600160a01b0316336001600160a01b03167f749a9ef4b9bff1f02a1a1d45429a3949e524fd93e3948001eab8dca05f1fcd6d8d8442604051613b6093929190614bbd565b60405180910390a35050600101613a04565b50896001600160a01b0316336001600160a01b03167f1bf0129823b56213a46996bc874ce50b318995cae2bbdcd2000933d36012547d8a8a42604051613bba93929190614bbd565b60405180910390a35050505b818015613bd1575080155b15613bea57613bea6001600160a01b03861687866137cb565b50505050505050565b613bfb6143e8565b6001600160a01b038716600090815260036020908152604091829020825181546101209381028201840190945261010081018481529093919284928491840182828015613c7157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613c53575b5050505050815260200160018201805480602002602001604051908101604052809291908181526020018280548015613cd357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613cb5575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015613d3557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613d17575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015613d9757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613d79575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015613def57602002820191906000526020600020905b815481526020019060010190808311613ddb575b5050505050815260200160058201805480602002602001604051908101604052809291908181526020018280548015613e4757602002820191906000526020600020905b815481526020019060010190808311613e33575b5050505050815260200160068201805480602002602001604051908101604052809291908181526020018280548015613e9f57602002820191906000526020600020905b815481526020019060010190808311613e8b575b5050505050815260200160078201805480602002602001604051908101604052809291908181526020018280548015613ef757602002820191906000526020600020905b815481526020019060010190808311613ee3575b5050505050815250509050806080015151600014613f7957600254604051639155dae760e01b81526001600160a01b0390911690639155dae790613f46908a906000908b908b90600401614b60565b600060405180830381600087803b158015613f6057600080fd5b505af1158015613f74573d6000803e3d6000fd5b505050505b60a08101515115613fee57600254604051639155dae760e01b81526001600160a01b0390911690639155dae790613fbb908a906001908b908a90600401614b60565b600060405180830381600087803b158015613fd557600080fd5b505af1158015613fe9573d6000803e3d6000fd5b505050505b60c081015151156140615760028054604051639155dae760e01b81526001600160a01b0390911691639155dae79161402e918b918b908990600401614b60565b600060405180830381600087803b15801561404857600080fd5b505af115801561405c573d6000803e3d6000fd5b505050505b60e08101515115613bea57600254604051639155dae760e01b81526001600160a01b0390911690639155dae7906140a3908a906003908b908890600401614b60565b600060405180830381600087803b1580156140bd57600080fd5b505af1158015612d51573d6000803e3d6000fd5b6001600160a01b0381166000908152600360205260408120906140f48282614529565b614102600183016000614529565b614110600283016000614529565b61411e600383016000614529565b61412c600483016000614529565b61413a600583016000614529565b614148600683016000614529565b6122d0600783016000614529565b614177846323b872dd60e01b8585856040516024016137ea93929190614b3c565b50505050565b60008060005b84518110156141c957836001600160a01b03168582815181106141a257fe5b60200260200101516001600160a01b031614156141c157600192508091505b600101614183565b509250929050565b600081848411156141f55760405162461bcd60e51b815260040161072b9190614cf4565b505050900390565b60008261420c575060006133ad565b8282028284828161421957fe5b04146133aa5760405162461bcd60e51b815260040161072b90614ed0565b60006133aa83836040518060400160405280601a815260200179536166654d6174683a206469766973696f6e206279207a65726f60301b815250614397565b614288826001600160a01b031661435b565b6142a45760405162461bcd60e51b815260040161072b90614ff4565b60006060836001600160a01b0316836040516142c09190614b0c565b6000604051808303816000865af19150503d80600081146142fd576040519150601f19603f3d011682016040523d82523d6000602084013e614302565b606091505b5091509150816143245760405162461bcd60e51b815260040161072b90614e3d565b805115614177578080602001905181019061433f91906149c0565b6141775760405162461bcd60e51b815260040161072b90614faa565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081811480159061438f57508115155b949350505050565b600081836143b85760405162461bcd60e51b815260040161072b9190614cf4565b5060008385816143c457fe5b0495945050505050565b604051806040016040528060008152602001606081525090565b60405180610100016040528060608152602001606081526020016060815260200160608152602001606081526020016060815260200160608152602001606081525090565b604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b6040518060a0016040528060608152602001606081526020016060815260200160608152602001606081525090565b5080546000825560030290600052602060002090810190611dd29190614547565b8280548282559060005260206000209060030281019282156145195760005260206000209160030282015b8281111561451957825482546001600160a01b0319166001600160a01b039091161782556001808401549083015560028084015490830155600392830192909101906144d2565b50614525929150614547565b5090565b5080546000825590600052602060002090810190611dd29190614574565b5b808211156145255780546001600160a01b03191681556000600182018190556002820155600301614548565b5b808211156145255760008155600101614575565b60008083601f84011261459a578182fd5b5081356001600160401b038111156145b0578182fd5b60208301915083602080830285010111156145ca57600080fd5b9250929050565b6000606082840312156145e2578081fd5b6145ec60606151bb565b905081516145f98161522c565b80825250602082015160208201526040820151604082015292915050565b600060208284031215614628578081fd5b81356133aa8161522c565b600060208284031215614644578081fd5b81516133aa8161522c565b600080600060608486031215614663578182fd5b833561466e8161522c565b9250602084013561467e8161522c565b929592945050506040919091013590565b600080604083850312156146a1578182fd5b82356146ac8161522c565b915060208301356146bc81615241565b809150509250929050565b600080604083850312156146d9578182fd5b82356146e48161522c565b946020939093013593505050565b60008060008060408587031215614707578081fd5b84356001600160401b038082111561471d578283fd5b61472988838901614589565b90965094506020870135915080821115614741578283fd5b5061474e87828801614589565b95989497509550505050565b60008060008060008060006080888a031215614774578283fd5b87356001600160401b038082111561478a578485fd5b6147968b838c01614589565b909950975060208a01359150808211156147ae578485fd5b6147ba8b838c01614589565b909750955060408a01359150808211156147d2578485fd5b506147df8a828b01614589565b90945092505060608801356147f381615241565b8091505092959891949750929550565b60006020808385031215614815578182fd5b82516001600160401b0381111561482a578283fd5b8301601f8101851361483a578283fd5b805161484d614848826151e1565b6151bb565b8181528381019083850185840285018601891015614869578687fd5b8694505b838510156148945780516148808161522c565b83526001949094019391850191850161486d565b50979650505050505050565b600060208083850312156148b2578182fd5b82516001600160401b038111156148c7578283fd5b8301601f810185136148d7578283fd5b80516148e5614848826151e1565b818152838101908385016060808502860187018a1015614903578788fd5b8795505b8486101561492f576149198a836145d1565b8452600195909501949286019290810190614907565b509098975050505050505050565b6000602080838503121561494f578182fd5b82516001600160401b03811115614964578283fd5b8301601f81018513614974578283fd5b8051614982614848826151e1565b818152838101908385018584028501860189101561499e578687fd5b8694505b838510156148945780518352600194909401939185019185016149a2565b6000602082840312156149d1578081fd5b81516133aa81615241565b6000602082840312156149ed578081fd5b8151600281106133aa578182fd5b600060208284031215614a0c578081fd5b5035919050565b600060208284031215614a24578081fd5b5051919050565b600060208284031215614a3c578081fd5b815160ff811681146133aa578182fd5b6000815180845260208085019450808401835b83811015614a845781516001600160a01b031687529582019590820190600101614a5f565b509495945050505050565b6000815180845260208085019450808401835b83811015614a8457815180516001600160a01b0316885283810151848901526040908101519088015260609096019590820190600101614aa2565b6000815180845260208085019450808401835b83811015614a8457815187529582019590820190600101614af0565b60008251614b1e818460208701615200565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060018060a01b038616825284602083015260806040830152614b876080830185614a4c565b8281036060840152614b998185614add565b979650505050505050565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b6000602082526133aa6020830184614a4c565b600060408252614c046040830185614a4c565b8281036020840152614c168185614add565b95945050505050565b60208082528251828201819052600091906040908185019080840286018301878501865b8381101561492f57888303603f19018552815180518452870151878401879052614c6f87850182614a8f565b9588019593505090860190600101614c43565b6000602082526133aa6020830184614a8f565b6000602082526133aa6020830184614add565b901515815260200190565b91151582521515602082015260400190565b60006020825282602083015282846040840137818301604090810191909152601f909201601f19160101919050565b6000602082528251806020840152614d13816040850160208701615200565b601f01601f19169190910160400192915050565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526016908201527513585e1a5b5d5b481b1a5b5a5d08195e18d95959195960521b604082015260600190565b6020808252601d908201527f4552525f494e56414c49445f555345525641554c545f41444452455353000000604082015260600190565b6020808252601b908201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604082015260600190565b6020808252601a908201527908aa4a4bea89e968a9cbe988a9c8ea890be9c9ea8be9a82a886960331b604082015260600190565b6020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b6020808252601290820152714552525f4e4f545f4d414e4745525f46454560701b604082015260600190565b6020808252601890820152774552525f494e56414c49445f504f4f4c5f4144445245535360401b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601b908201527a4552525f4d414e414745525f434f554c445f4e4f545f434c41494d60281b604082015260600190565b60208082526015908201527411549497d413d3d317d254d7d0931050d2d31254d5605a1b604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b6020808252601f908201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604082015260600190565b600060208252825160a0602084015261504760c0840182614a4c565b90506020840151601f19808584030160408601526150658383614add565b925060408601519150808584030160608601526150828383614add565b9250606086015191508085840301608086015261509f8383614add565b925060808601519150808584030160a086015250614c168282614add565b60006020825282516101008060208501526150dc610120850183614a4c565b91506020850151601f19808685030160408701526150fa8483614a4c565b935060408701519150808685030160608701526151178483614a4c565b935060608701519150808685030160808701526151348483614a4c565b935060808701519150808685030160a08701526151518483614add565b935060a08701519150808685030160c087015261516e8483614add565b935060c08701519150808685030160e087015261518b8483614add565b935060e08701519150808685030183870152506151a88382614add565b9695505050505050565b90815260200190565b6040518181016001600160401b03811182821017156151d957600080fd5b604052919050565b60006001600160401b038211156151f6578081fd5b5060209081020190565b60005b8381101561521b578181015183820152602001615203565b838111156141775750506000910152565b6001600160a01b0381168114611dd257600080fd5b8015158114611dd257600080fdfea2646970667358221220136d06b2f4854825ef66d1cfe7be4a369884b24ff0fa920bf2e8797acf18eb3964736f6c634300060c0033",
  "deployedBytecode": "",
  "libraries": {},
  "devdoc": {
    "author": "Desyn Labs",
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Vault managerFee",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 18434,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 12582,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "crpFactory",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ICRPFactory)12566"
      },
      {
        "astId": 12584,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "userVault",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 12679,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "poolsTokens",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(PoolTokens)12670_storage)"
      },
      {
        "astId": 12683,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "poolsStatus",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(PoolStatus)12675_storage)"
      },
      {
        "astId": 12687,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "record_number",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12693,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "record_List",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(ClaimRecordInfo)12645_storage))"
      },
      {
        "astId": 12697,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "poolManager",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 12716,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "RATIO_TOTAL",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 12719,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "RATIO_MANAGER",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 12722,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "RATIO_ISSUE",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 12725,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "RATIO_REDEEM",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 12728,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "RATIO_PERFERMANCE",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(ClaimTokenInfo)12639_storage)dyn_storage": {
        "base": "t_struct(ClaimTokenInfo)12639_storage",
        "encoding": "dynamic_array",
        "label": "struct Vault.ClaimTokenInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ICRPFactory)12566": {
        "encoding": "inplace",
        "label": "contract ICRPFactory",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(ClaimRecordInfo)12645_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct Vault.ClaimRecordInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(ClaimRecordInfo)12645_storage)"
      },
      "t_mapping(t_address,t_struct(PoolStatus)12675_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Vault.PoolStatus)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolStatus)12675_storage"
      },
      "t_mapping(t_address,t_struct(PoolTokens)12670_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Vault.PoolTokens)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolTokens)12670_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(ClaimRecordInfo)12645_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Vault.ClaimRecordInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(ClaimRecordInfo)12645_storage"
      },
      "t_struct(ClaimRecordInfo)12645_storage": {
        "encoding": "inplace",
        "label": "struct Vault.ClaimRecordInfo",
        "members": [
          {
            "astId": 12641,
            "contract": "contracts/deploy/Vault.sol:Vault",
            "label": "time",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 12644,
            "contract": "contracts/deploy/Vault.sol:Vault",
            "label": "tokens",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_struct(ClaimTokenInfo)12639_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ClaimTokenInfo)12639_storage": {
        "encoding": "inplace",
        "label": "struct Vault.ClaimTokenInfo",
        "members": [
          {
            "astId": 12634,
            "contract": "contracts/deploy/Vault.sol:Vault",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 12636,
            "contract": "contracts/deploy/Vault.sol:Vault",
            "label": "decimals",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 12638,
            "contract": "contracts/deploy/Vault.sol:Vault",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(PoolStatus)12675_storage": {
        "encoding": "inplace",
        "label": "struct Vault.PoolStatus",
        "members": [
          {
            "astId": 12672,
            "contract": "contracts/deploy/Vault.sol:Vault",
            "label": "couldManagerClaim",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 12674,
            "contract": "contracts/deploy/Vault.sol:Vault",
            "label": "isBlackList",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(PoolTokens)12670_storage": {
        "encoding": "inplace",
        "label": "struct Vault.PoolTokens",
        "members": [
          {
            "astId": 12648,
            "contract": "contracts/deploy/Vault.sol:Vault",
            "label": "tokenList",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 12651,
            "contract": "contracts/deploy/Vault.sol:Vault",
            "label": "issueTokens",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 12654,
            "contract": "contracts/deploy/Vault.sol:Vault",
            "label": "redeemTokens",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 12657,
            "contract": "contracts/deploy/Vault.sol:Vault",
            "label": "perfermanceTokens",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 12660,
            "contract": "contracts/deploy/Vault.sol:Vault",
            "label": "managerAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 12663,
            "contract": "contracts/deploy/Vault.sol:Vault",
            "label": "issueAmount",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 12666,
            "contract": "contracts/deploy/Vault.sol:Vault",
            "label": "redeemAmount",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 12669,
            "contract": "contracts/deploy/Vault.sol:Vault",
            "label": "perfermanceAmount",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
