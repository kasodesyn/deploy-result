{
  "address": "0x11BbF998206820e79e766Ab443bf964872f08D4D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenSymbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenName",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AddAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "monent",
          "type": "uint256"
        }
      ],
      "name": "CloseETFColletdCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "sort",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "LOG_DEL_WHITELIST",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "sort",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "LOG_WHITELIST",
      "type": "event"
    },
    {
      "anonymous": true,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes4",
          "name": "sig",
          "type": "bytes4"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "LogCall",
      "type": "event"
    },
    {
      "anonymous": true,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmountOut",
          "type": "uint256"
        }
      ],
      "name": "LogExit",
      "type": "event"
    },
    {
      "anonymous": true,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmountIn",
          "type": "uint256"
        }
      ],
      "name": "LogJoin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RemoveAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "managerFee",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "issueFee",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "redeemFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "perfermanceFee",
          "type": "uint256"
        }
      ],
      "name": "SetManagerFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "sizeType",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldSize",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSize",
          "type": "uint256"
        }
      ],
      "name": "sizeChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DECIMALS",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "sort",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "token",
          "type": "address[]"
        }
      ],
      "name": "addTokenToWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "adminList",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allOwnerPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bFactory",
      "outputs": [
        {
          "internalType": "contract IBFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bPool",
      "outputs": [
        {
          "internalType": "contract IBPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "beginFund",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "etfAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fundAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnPoolShareFromLib",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        }
      ],
      "name": "canProvideLiquidity",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimManagerFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "initialSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collectPeriod",
          "type": "uint256"
        },
        {
          "internalType": "enum SmartPoolManager.Period",
          "name": "closurePeriod",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "bspFloor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bspCap",
              "type": "uint256"
            }
          ],
          "internalType": "struct SmartPoolManager.PoolTokenRange",
          "name": "tokenRange",
          "type": "tuple"
        }
      ],
      "name": "createPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "initialSupply",
          "type": "uint256"
        }
      ],
      "name": "createPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "decreaseApproval",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "endFund",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "etfAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fundAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "etfStatus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "collectPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collectEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "closurePeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "closureEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "upperCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "floorCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "managerFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "redeemFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "issueFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "perfermanceFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startClaimFeeTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "etype",
      "outputs": [
        {
          "internalType": "enum SmartPoolManager.Etypes",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "_returnValue",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolAmountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "minAmountsOut",
          "type": "uint256[]"
        }
      ],
      "name": "exitPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getController",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDesynSafeMathVersion",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwnerPercentage",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwners",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRightsManagerVersion",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSmartPoolManagerVersion",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum RightsManager.Permissions",
          "name": "permission",
          "type": "uint8"
        }
      ],
      "name": "hasPermission",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "increaseApproval",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factoryAddress",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "poolTokenSymbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "poolTokenName",
              "type": "string"
            },
            {
              "internalType": "address[]",
              "name": "constituentTokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenBalances",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenWeights",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "swapFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "managerFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "redeemFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "issueFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "perfermanceFee",
              "type": "uint256"
            },
            {
              "internalType": "enum SmartPoolManager.Etypes",
              "name": "etype",
              "type": "uint8"
            }
          ],
          "internalType": "struct SmartPoolManager.PoolParams",
          "name": "poolParams",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "canPauseSwapping",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canChangeSwapFee",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canChangeWeights",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canAddRemoveTokens",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canWhitelistLPs",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canTokenWhiteLists",
              "type": "bool"
            }
          ],
          "internalType": "struct RightsManager.Rights",
          "name": "rightsStruct",
          "type": "tuple"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initBool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_ownerPercentage",
          "type": "uint256[]"
        }
      ],
      "name": "initHandle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isCompletedCollect",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "maxAmountsIn",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "kol",
          "type": "address"
        }
      ],
      "name": "joinPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mintPoolShareFromLib",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ownerPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "owners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "pullPoolShareFromLib",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "pushPoolShareFromLib",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deltaWeight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmountOut",
          "type": "uint256"
        }
      ],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "removeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        }
      ],
      "name": "removeWhitelistedLiquidityProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rights",
      "outputs": [
        {
          "internalType": "bool",
          "name": "canPauseSwapping",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "canChangeSwapFee",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "canChangeWeights",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "canAddRemoveTokens",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "canWhitelistLPs",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "canTokenWhiteLists",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_ownerPercentage",
          "type": "uint256"
        }
      ],
      "name": "setAddAdminList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newCap",
          "type": "uint256"
        }
      ],
      "name": "setCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "setController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        }
      ],
      "name": "whitelistLiquidityProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe595fb1d9f62fb0b428fccb2b593afe82954c48a285e04271caa8295e3d4f94d",
  "receipt": {
    "to": null,
    "from": "0x595b85b4A418e3B8df897D02F5BD49167D00862F",
    "contractAddress": "0x11BbF998206820e79e766Ab443bf964872f08D4D",
    "transactionIndex": 64,
    "gasUsed": "5479216",
    "logsBloom": "0x
    "blockHash": "0x30658c53e574b23654caa5f92941873bdb4655ac50bf13300529f92ea3e2aa11",
    "transactionHash": "0xe595fb1d9f62fb0b428fccb2b593afe82954c48a285e04271caa8295e3d4f94d",
    "logs": [],
    "blockNumber": 7882959,
    "cumulativeGasUsed": "16482371",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "aaaaa",
    "swwsww"
  ],
  "numDeployments": 1,
  "solcInputHash": "c4935c7bbb687e1b5444e68bf79f180c",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"monent\",\"type\":\"uint256\"}],\"name\":\"CloseETFColletdCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sort\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"LOG_DEL_WHITELIST\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sort\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"LOG_WHITELIST\",\"type\":\"event\"},{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"LogCall\",\"type\":\"event\"},{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmountOut\",\"type\":\"uint256\"}],\"name\":\"LogExit\",\"type\":\"event\"},{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmountIn\",\"type\":\"uint256\"}],\"name\":\"LogJoin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RemoveAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"managerFee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"issueFee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"redeemFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"perfermanceFee\",\"type\":\"uint256\"}],\"name\":\"SetManagerFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"sizeType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSize\",\"type\":\"uint256\"}],\"name\":\"sizeChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"sort\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"token\",\"type\":\"address[]\"}],\"name\":\"addTokenToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"adminList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allOwnerPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bFactory\",\"outputs\":[{\"internalType\":\"contract IBFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bPool\",\"outputs\":[{\"internalType\":\"contract IBPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"beginFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"etfAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnPoolShareFromLib\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"canProvideLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimManagerFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collectPeriod\",\"type\":\"uint256\"},{\"internalType\":\"enum SmartPoolManager.Period\",\"name\":\"closurePeriod\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"bspFloor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bspCap\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.PoolTokenRange\",\"name\":\"tokenRange\",\"type\":\"tuple\"}],\"name\":\"createPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"}],\"name\":\"createPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"endFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"etfAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"etfStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collectPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collectEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closurePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closureEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"floorCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"managerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"issueFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perfermanceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startClaimFeeTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"etype\",\"outputs\":[{\"internalType\":\"enum SmartPoolManager.Etypes\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"_returnValue\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsOut\",\"type\":\"uint256[]\"}],\"name\":\"exitPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDesynSafeMathVersion\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwnerPercentage\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRightsManagerVersion\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSmartPoolManagerVersion\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum RightsManager.Permissions\",\"name\":\"permission\",\"type\":\"uint8\"}],\"name\":\"hasPermission\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factoryAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"poolTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"poolTokenName\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"constituentTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenBalances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenWeights\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"managerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"issueFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perfermanceFee\",\"type\":\"uint256\"},{\"internalType\":\"enum SmartPoolManager.Etypes\",\"name\":\"etype\",\"type\":\"uint8\"}],\"internalType\":\"struct SmartPoolManager.PoolParams\",\"name\":\"poolParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"canPauseSwapping\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canChangeSwapFee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canChangeWeights\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canAddRemoveTokens\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canWhitelistLPs\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canTokenWhiteLists\",\"type\":\"bool\"}],\"internalType\":\"struct RightsManager.Rights\",\"name\":\"rightsStruct\",\"type\":\"tuple\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initBool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ownerPercentage\",\"type\":\"uint256[]\"}],\"name\":\"initHandle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isCompletedCollect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"maxAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"kol\",\"type\":\"address\"}],\"name\":\"joinPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintPoolShareFromLib\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"pullPoolShareFromLib\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"pushPoolShareFromLib\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deltaWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"}],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"removeWhitelistedLiquidityProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rights\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"canPauseSwapping\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canChangeSwapFee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canChangeWeights\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canAddRemoveTokens\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canWhitelistLPs\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canTokenWhiteLists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ownerPercentage\",\"type\":\"uint256\"}],\"name\":\"setAddAdminList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCap\",\"type\":\"uint256\"}],\"name\":\"setCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"whitelistLiquidityProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Desyn Labs\",\"details\":\"Rights are defined as follows (index values into the array) Note that functions called on bPool and bFactory may look like internal calls,   but since they are contracts accessed through an interface, they are really external. To make this explicit, we could write \\\"IBPool(address(bPool)).function()\\\" everywhere,   instead of \\\"bPool.function()\\\".\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"params\":{\"owner\":\"- owner of the tokens\",\"spender\":\"- entity allowed to spend the tokens\"},\"returns\":{\"_0\":\"uint - remaining amount spender is allowed to transfer\"}},\"approve(address,uint256)\":{\"details\":\"emits an Approval event\",\"params\":{\"amount\":\"- number of tokens being approved\",\"spender\":\"- entity the owner (sender) is approving to spend his tokens\"},\"returns\":{\"_0\":\"bool - result of the approval (will always be true if it doesn't revert)\"}},\"balanceOf(address)\":{\"params\":{\"account\":\"- address we're checking the balance of\"},\"returns\":{\"_0\":\"uint - token balance in the account\"}},\"canProvideLiquidity(address)\":{\"details\":\"If the whitelist feature is not enabled, anyone can provide liquidity (assuming finalized)\",\"returns\":{\"_0\":\"boolean value indicating whether the address can join a pool\"}},\"createPool(uint256)\":{\"details\":\"Delegates to internal function\",\"params\":{\"initialSupply\":\"starting token balance\"}},\"createPool(uint256,uint256,uint8,(uint256,uint256))\":{\"details\":\"Delegates to internal function\",\"params\":{\"closurePeriod\":\"the etf closure period\",\"initialSupply\":\"starting token balance\"}},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseApproval(address,uint256)\":{\"details\":\"emits an Approval eventIf you try to decrease it below the current limit, it's just set to zero (not an error)\",\"params\":{\"amount\":\"- number of tokens being approved\",\"spender\":\"- entity the owner (sender) is approving to spend his tokens\"},\"returns\":{\"_0\":\"bool - result of the approval (will always be true if it doesn't revert)\"}},\"exitPool(uint256,uint256[])\":{\"details\":\"Emits a LogExit event for each token      bPool is a contract interface; function calls on it are external\",\"params\":{\"minAmountsOut\":\"- minimum amount of asset tokens to receive\",\"poolAmountIn\":\"- amount of pool tokens to redeem\"}},\"getController()\":{\"details\":\"external for gas optimization\",\"returns\":{\"_0\":\"address - of the owner (AKA controller)\"}},\"getDesynSafeMathVersion()\":{\"details\":\"Convenience function to get the address of the DesynSafeMath library (so clients can check version)\",\"returns\":{\"_0\":\"address of the DesynSafeMath library\"}},\"getRightsManagerVersion()\":{\"details\":\"Convenience function to get the address of the RightsManager library (so clients can check version)\",\"returns\":{\"_0\":\"address of the RightsManager library\"}},\"getSmartPoolManagerVersion()\":{\"details\":\"Convenience function to get the address of the SmartPoolManager library (so clients can check version)\",\"returns\":{\"_0\":\"address of the SmartPoolManager library\"}},\"hasPermission(uint8)\":{\"details\":\"value of the enum is just the 0-based index in the enumeration      For instance canPauseSwapping is 0; canChangeWeights is 2\",\"returns\":{\"_0\":\"token boolean true if we have the given permission\"}},\"increaseApproval(address,uint256)\":{\"details\":\"emits an Approval event\",\"params\":{\"amount\":\"- number of tokens being approved\",\"spender\":\"- entity the owner (sender) is approving to spend his tokens\"},\"returns\":{\"_0\":\"bool - result of the approval (will always be true if it doesn't revert)\"}},\"init(address,(string,string,address[],uint256[],uint256[],uint256,uint256,uint256,uint256,uint256,uint8),(bool,bool,bool,bool,bool,bool))\":{\"details\":\"_initialTokens and _swapFee are only used for temporary storage between construction      and create pool, and should not be used thereafter! _initialTokens is destroyed in      createPool to prevent this, and _swapFee is kept in sync (defensively), but      should never be used except in this constructor and createPool()\",\"params\":{\"factoryAddress\":\"- the BPoolFactory used to create the underlying pool\",\"poolParams\":\"- struct containing pool parameters\",\"rightsStruct\":\"- Set of permissions we are assigning to this smart pool\"}},\"joinPool(uint256,uint256[],address)\":{\"details\":\"Emits a LogJoin event (for each token)      bPool is a contract interface; function calls on it are external\",\"params\":{\"maxAmountsIn\":\"- Max amount of asset tokens to spend\",\"poolAmountOut\":\"- number of pool tokens to receive\"}},\"name()\":{\"details\":\"Returns the name of the token.      We allow the user to set this name (as well as the symbol).      Alternatives are 1) A fixed string (original design)                       2) A fixed string plus the user-defined symbol                          return string(abi.encodePacked(NAME, \\\"-\\\", _symbol));\"},\"removeOwner(address)\":{\"details\":\"Allows to remove an owner. Transaction has to be sent by wallet.\",\"params\":{\"owner\":\"Address of owner.\"}},\"removeWhitelistedLiquidityProvider(address)\":{\"params\":{\"provider\":\"- address of the liquidity provider\"}},\"setAddAdminList(address,uint256)\":{\"details\":\"external for gas optimization\",\"params\":{\"newOwner\":\"- address of new owner\"}},\"setCap(uint256)\":{\"details\":\"_bspCap defaults in the constructor to unlimited      Can set to 0 (or anywhere below the current supply), to halt new investment      Prevent setting it before creating a pool, since createPool sets to intialSupply      (it does this to avoid an unlimited cap window between construction and createPool)      Therefore setting it before then has no effect, so should not be allowed\",\"params\":{\"newCap\":\"- new value of the cap\"}},\"setController(address)\":{\"details\":\"external for gas optimization\",\"params\":{\"newOwner\":\"- address of new owner\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"declared external for gas optimization\",\"returns\":{\"_0\":\"uint - total number of tokens in existence\"}},\"transfer(address,uint256)\":{\"details\":\"_move emits a Transfer event if successful\",\"params\":{\"amount\":\"- number of tokens being transferred\",\"recipient\":\"- entity receiving the tokens\"},\"returns\":{\"_0\":\"bool - result of the transfer (will always be true if it doesn't revert)\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"_move emits a Transfer event if successful; may also emit an Approval event\",\"params\":{\"amount\":\"- number of tokens being transferred\",\"recipient\":\"- recipient of the tokens\",\"sender\":\"- entity sending the tokens (must be caller or allowed to spend on behalf of caller)\"},\"returns\":{\"_0\":\"bool - result of the transfer (will always be true if it doesn't revert)\"}},\"whitelistLiquidityProvider(address)\":{\"params\":{\"provider\":\"- address of the liquidity provider\"}}},\"title\":\"Smart Pool with customizable features\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowance(address,address)\":{\"notice\":\"Getter for allowance: amount spender will be allowed to spend on behalf of owner\"},\"approve(address,uint256)\":{\"notice\":\"Approve owner (sender) to spend a certain amount\"},\"balanceOf(address)\":{\"notice\":\"Getter for current account balance\"},\"canProvideLiquidity(address)\":{\"notice\":\"Check if an address is a liquidity provider\"},\"createPool(uint256)\":{\"notice\":\"Create a new Smart Pool\"},\"createPool(uint256,uint256,uint8,(uint256,uint256))\":{\"notice\":\"Create a new Smart Pool\"},\"decreaseApproval(address,uint256)\":{\"notice\":\"Decrease the amount the spender is allowed to spend on behalf of the owner (sender)\"},\"exitPool(uint256,uint256[])\":{\"notice\":\"Exit a pool - redeem pool tokens for underlying assets\"},\"getController()\":{\"notice\":\"Returns the address of the current owner\"},\"getDesynSafeMathVersion()\":{\"notice\":\"Getter for the DesynSafeMath contract\"},\"getRightsManagerVersion()\":{\"notice\":\"Getter for the RightsManager contract\"},\"getSmartPoolManagerVersion()\":{\"notice\":\"Getter for the SmartPoolManager contract\"},\"hasPermission(uint8)\":{\"notice\":\"Getter for specific permissions\"},\"increaseApproval(address,uint256)\":{\"notice\":\"Increase the amount the spender is allowed to spend on behalf of the owner (sender)\"},\"init(address,(string,string,address[],uint256[],uint256[],uint256,uint256,uint256,uint256,uint256,uint8),(bool,bool,bool,bool,bool,bool))\":{\"notice\":\"Construct a new Configurable Rights Pool (wrapper around BPool)\"},\"joinPool(uint256,uint256[],address)\":{\"notice\":\"Join a pool\"},\"removeWhitelistedLiquidityProvider(address)\":{\"notice\":\"Remove from the whitelist of liquidity providers (if enabled)\"},\"setAddAdminList(address,uint256)\":{\"notice\":\"Transfers ownership of the contract to a new account (`newOwner`).         Can only be called by the current owner\"},\"setCap(uint256)\":{\"notice\":\"Set the cap (max # of pool tokens)\"},\"setController(address)\":{\"notice\":\"Transfers ownership of the contract to a new account (`newOwner`).         Can only be called by the current owner\"},\"totalSupply()\":{\"notice\":\"Getter for the total supply\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer the given amount from sender (caller) to recipient\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer the given amount from sender to recipient\"},\"whitelistLiquidityProvider(address)\":{\"notice\":\"Add to the whitelist of liquidity providers (if enabled)\"}},\"notice\":\"PCToken is the \\\"Desyn Smart Pool\\\" token (transferred upon finalization)\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/base/ConfigurableRightsPool.sol\":\"ConfigurableRightsPool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"contracts/base/ConfigurableRightsPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n// Needed to handle structures externally\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./PCToken.sol\\\";\\nimport \\\"../utils/DesynReentrancyGuard.sol\\\";\\nimport \\\"../utils/DesynOwnable.sol\\\";\\nimport \\\"../interfaces/IBFactory.sol\\\";\\nimport {RightsManager} from \\\"../libraries/RightsManager.sol\\\";\\nimport \\\"../libraries/SmartPoolManager.sol\\\";\\nimport \\\"../libraries/SafeApprove.sol\\\";\\nimport \\\"./WhiteToken.sol\\\";\\n\\n/**\\n * @author Desyn Labs\\n * @title Smart Pool with customizable features\\n * @notice PCToken is the \\\"Desyn Smart Pool\\\" token (transferred upon finalization)\\n * @dev Rights are defined as follows (index values into the array)\\n * Note that functions called on bPool and bFactory may look like internal calls,\\n *   but since they are contracts accessed through an interface, they are really external.\\n * To make this explicit, we could write \\\"IBPool(address(bPool)).function()\\\" everywhere,\\n *   instead of \\\"bPool.function()\\\".\\n */\\ncontract ConfigurableRightsPool is PCToken, DesynOwnable, DesynReentrancyGuard, WhiteToken {\\n    using DesynSafeMath for uint;\\n    using SafeApprove for IERC20;\\n\\n    // State variables\\n    IBFactory public bFactory;\\n    IBPool public bPool;\\n\\n    // Struct holding the rights configuration\\n    RightsManager.Rights public rights;\\n\\n    SmartPoolManager.Status public etfStatus;\\n\\n    // Fee is initialized on creation, and can be changed if permission is set\\n    // Only needed for temporary storage between construction and createPool\\n    // Thereafter, the swap fee should always be read from the underlying pool\\n    uint private _initialSwapFee;\\n\\n    // Store the list of tokens in the pool, and balances\\n    // NOTE that the token list is *only* used to store the pool tokens between\\n    //   construction and createPool - thereafter, use the underlying BPool's list\\n    //   (avoids synchronization issues)\\n    address[] private _initialTokens;\\n    uint[] private _initialBalances;\\n    uint[] private _initialWeights;\\n\\n    // Whitelist of LPs (if configured)\\n    mapping(address => bool) private _liquidityProviderWhitelist;\\n\\n    // Cap on the pool size (i.e., # of tokens minted when joining)\\n    // Limits the risk of experimental pools; failsafe/backup for fixed-size pools\\n    uint public claimPeriod = 60 * 60 * 24 * 30;\\n\\n    address public vaultAddress;\\n    address public oracleAddress;\\n\\n    bool hasSetWhiteTokens;\\n    bool public initBool;\\n    bool public isCompletedCollect;\\n\\n    mapping(address => SmartPoolManager.Fund) public beginFund;\\n    mapping(address => SmartPoolManager.Fund) public endFund;\\n    SmartPoolManager.Etypes public etype;\\n\\n    // Event declarations\\n    // Anonymous logger event - can only be filtered by contract address\\n    event LogCall(bytes4 indexed sig, address indexed caller, bytes data) anonymous;\\n    event LogJoin(address indexed caller, address indexed tokenIn, uint tokenAmountIn) anonymous;\\n    event LogExit(address indexed caller, address indexed tokenOut, uint tokenAmountOut) anonymous;\\n    event sizeChanged(address indexed caller, string indexed sizeType, uint oldSize, uint newSize);\\n    // event FloorChanged(address indexed caller, uint oldFloor, uint newFloor);\\n    // event setRangeOfToken(address indexed caller, address pool, address token, uint floor, uint cap);\\n    event SetManagerFee(uint indexed managerFee, uint indexed issueFee, uint indexed redeemFee, uint perfermanceFee);\\n    event CloseETFColletdCompleted(address indexed caller, address indexed pool, uint monent);\\n\\n    // Modifiers\\n    modifier onlyManager() {\\n        require(bFactory.getManagerOwner() == msg.sender, \\\"OwnableN\\\");\\n        _;\\n    }\\n\\n    // Modifiers\\n    modifier logs() {\\n        emit LogCall(msg.sig, msg.sender, msg.data);\\n        _;\\n    }\\n\\n    // Mark functions that require delegation to the underlying Pool\\n    modifier needsBPool() {\\n        require(address(bPool) != address(0), \\\"ERR_NOT_CREATED\\\");\\n        _;\\n    }\\n\\n    // modifier lockUnderlyingPool() {\\n    //     // Turn off swapping on the underlying pool during joins\\n    //     // Otherwise tokens with callbacks would enable attacks involving simultaneous swaps and joins\\n    //     bool origSwapState = bPool.isPublicSwap();\\n    //     bPool.setPublicSwap(false);\\n    //     _;\\n    //     bPool.setPublicSwap(origSwapState);\\n    // }\\n\\n    constructor(string memory tokenSymbol, string memory tokenName) public PCToken(tokenSymbol, tokenName) {}\\n\\n    /**\\n     * @notice Construct a new Configurable Rights Pool (wrapper around BPool)\\n     * @dev _initialTokens and _swapFee are only used for temporary storage between construction\\n     *      and create pool, and should not be used thereafter! _initialTokens is destroyed in\\n     *      createPool to prevent this, and _swapFee is kept in sync (defensively), but\\n     *      should never be used except in this constructor and createPool()\\n     * @param factoryAddress - the BPoolFactory used to create the underlying pool\\n     * @param poolParams - struct containing pool parameters\\n     * @param rightsStruct - Set of permissions we are assigning to this smart pool\\n     */\\n\\n    function init(\\n        address factoryAddress,\\n        SmartPoolManager.PoolParams memory poolParams,\\n        RightsManager.Rights memory rightsStruct\\n    ) public {\\n        SmartPoolManager.initRequire(\\n            poolParams.swapFee,\\n            poolParams.managerFee,\\n            poolParams.issueFee,\\n            poolParams.redeemFee,\\n            poolParams.perfermanceFee,\\n            poolParams.tokenBalances.length,\\n            poolParams.tokenWeights.length,\\n            poolParams.constituentTokens.length,\\n            initBool\\n        );\\n        initBool = true;\\n        rights = rightsStruct;\\n        _initialTokens = poolParams.constituentTokens;\\n        _initialBalances = poolParams.tokenBalances;\\n        _initialWeights = poolParams.tokenWeights;\\n\\n        etfStatus = SmartPoolManager.Status({\\n            collectPeriod: 0,\\n            collectEndTime: 0,\\n            closurePeriod: 0,\\n            closureEndTime: 0,\\n            upperCap: DesynConstants.MAX_UINT,\\n            floorCap: 0,\\n            managerFee: poolParams.managerFee,\\n            redeemFee: poolParams.redeemFee,\\n            issueFee: poolParams.issueFee,\\n            perfermanceFee: poolParams.perfermanceFee,\\n            startClaimFeeTime: block.timestamp\\n        });\\n\\n        etype = poolParams.etype;\\n\\n        bFactory = IBFactory(factoryAddress);\\n        oracleAddress = bFactory.getOracleAddress();\\n        vaultAddress = bFactory.getVault();\\n        emit SetManagerFee(etfStatus.managerFee, etfStatus.issueFee, etfStatus.redeemFee, etfStatus.perfermanceFee);\\n    }\\n\\n    /**\\n     * @notice Set the cap (max # of pool tokens)\\n     * @dev _bspCap defaults in the constructor to unlimited\\n     *      Can set to 0 (or anywhere below the current supply), to halt new investment\\n     *      Prevent setting it before creating a pool, since createPool sets to intialSupply\\n     *      (it does this to avoid an unlimited cap window between construction and createPool)\\n     *      Therefore setting it before then has no effect, so should not be allowed\\n     * @param newCap - new value of the cap\\n     */\\n    function setCap(uint newCap) external logs lock needsBPool onlyOwner {\\n        require(etype == SmartPoolManager.Etypes.OPENED, \\\"ERR_MUST_OPEN_ETF\\\");\\n        // emit CapChanged(msg.sender, etfStatus.upperCap, newCap);\\n        emit sizeChanged(msg.sender, \\\"UPPER\\\", etfStatus.upperCap, newCap);\\n        etfStatus.upperCap = newCap;\\n    }\\n\\n    // function _setCap(uint newCap) internal {\\n    //     // require(rights.canChangeCap, \\\"ERR_CANNOT_CHANGE_CAP\\\");\\n\\n    //     emit CapChanged(msg.sender, etfStatus.upperCap, newCap);\\n\\n    //     etfStatus.upperCap = newCap;\\n    // }\\n\\n    // function _setFloor(uint newFloor) internal {\\n    //     require(rights.canChangeFloor, \\\"ERR_CANNOT_CHANGE_FLOOR\\\");\\n\\n    //     emit FloorChanged(msg.sender, etfStatus.floorCap, newFloor);\\n\\n    //     etfStatus.floorCap = newFloor;\\n    // }\\n\\n    function execute(\\n        address _target,\\n        uint _value,\\n        bytes calldata _data\\n    ) external logs lock needsBPool returns (bytes memory _returnValue) {\\n        require(bFactory.getModuleStatus(address(this), msg.sender), \\\"MODULE IS NOT REGISTER\\\");\\n\\n        _returnValue = bPool.execute(_target, _value, _data);\\n    }\\n\\n    function claimManagerFee() external virtual logs lock onlyManager needsBPool {\\n        uint lastClaimTime = DesynSafeMath.bsub(block.timestamp, etfStatus.startClaimFeeTime);\\n        require(lastClaimTime >= claimPeriod, \\\"The collection cycle is not reached\\\");\\n        uint time = lastClaimTime / claimPeriod;\\n        address[] memory poolTokens = bPool.getCurrentTokens();\\n        uint[] memory tokensAmount = new uint[](poolTokens.length);\\n        for (uint i = 0; i < poolTokens.length; i++) {\\n            address t = poolTokens[i];\\n            uint tokenBalance = bPool.getBalance(t);\\n            uint tokenAmountOut = DesynSafeMath.bmul(tokenBalance, (etfStatus.managerFee * time) / 12);\\n            _pushUnderlying(t, address(this), tokenAmountOut);\\n            IERC20(t).safeApprove(vaultAddress, tokenAmountOut);\\n            tokensAmount[i] = tokenAmountOut;\\n        }\\n        IVault(vaultAddress).depositManagerToken(poolTokens, tokensAmount);\\n        etfStatus.startClaimFeeTime = etfStatus.startClaimFeeTime + time * claimPeriod;\\n    }\\n\\n    /**\\n     * @notice Create a new Smart Pool\\n     * @dev Delegates to internal function\\n     * @param initialSupply starting token balance\\n     */\\n    function createPool(uint initialSupply) external virtual onlyOwner logs lock {\\n        createPoolInternal(initialSupply);\\n    }\\n\\n    /**\\n     * @notice Create a new Smart Pool\\n     * @dev Delegates to internal function\\n     * @param initialSupply starting token balance\\n     * @param closurePeriod the etf closure period\\n     */\\n    function createPool(\\n        uint initialSupply,\\n        uint collectPeriod,\\n        SmartPoolManager.Period closurePeriod,\\n        SmartPoolManager.PoolTokenRange memory tokenRange\\n    ) external virtual onlyOwner logs lock {\\n        if (etype == SmartPoolManager.Etypes.CLOSED) {\\n            // require(collectPeriod <= DesynConstants.MAX_COLLECT_PERIOD, \\\"ERR_EXCEEDS_FUND_RAISING_PERIOD\\\");\\n            // require(etfStatus.upperCap >= initialSupply, \\\"ERR_CAP_BIGGER_THAN_INITSUPPLY\\\");\\n            SmartPoolManager.createPoolHandle(collectPeriod, etfStatus.upperCap, initialSupply);\\n\\n            etfStatus.upperCap = initialSupply.bmul(tokenRange.bspCap).bdiv(_initialBalances[0]);\\n            etfStatus.floorCap = initialSupply.bmul(tokenRange.bspFloor).bdiv(_initialBalances[0]);\\n            emit sizeChanged(msg.sender, \\\"UPPER\\\", 0, etfStatus.upperCap);\\n            emit sizeChanged(msg.sender, \\\"FLOOR\\\", 0, etfStatus.floorCap);\\n\\n            uint period;\\n            uint collectEndTime = block.timestamp + collectPeriod;\\n            if (closurePeriod == SmartPoolManager.Period.HALF) {\\n                // TODO\\n                period = 30 seconds;\\n                // period = 1 seconds; // TEST CONFIG\\uff1afor test only\\n            } else if (closurePeriod == SmartPoolManager.Period.ONE) {\\n                period = 365 days;\\n            } else {\\n                period = 730 days;\\n            }\\n            uint closureEndTime = collectEndTime + period;\\n            //   (uint period,uint collectEndTime,uint closureEndTime) = SmartPoolManager.createPoolHandle(collectPeriod, closurePeriod == Period.HALF, closurePeriod == Period.ONE);\\n\\n            // etfStatus = SmartPoolManager.Status(collectPeriod, collectEndTime, period, closureEndTime);\\n            etfStatus.collectPeriod = collectPeriod;\\n            etfStatus.collectEndTime = collectEndTime;\\n            etfStatus.closurePeriod = period;\\n            etfStatus.closureEndTime = closureEndTime;\\n\\n            // _addPoolRangeConfig(poolRange);\\n        }\\n\\n        createPoolInternal(initialSupply);\\n    }\\n\\n    function rebalance(\\n        address tokenA,\\n        address tokenB,\\n        uint deltaWeight,\\n        uint minAmountOut\\n    ) external virtual logs lock onlyAdmin needsBPool {\\n        // if (etype == SmartPoolManager.Etypes.CLOSED) {\\n        //     require(block.timestamp > etfStatus.collectEndTime && block.timestamp < etfStatus.closureEndTime, \\\"ERR_NOT_REBALANCE_PERIOD\\\");\\n        // }\\n\\n        // require(rights.canChangeWeights, \\\"ERR_NOT_CONFIGURABLE_WEIGHTS\\\");\\n        // require(tokenA != tokenB, \\\"ERR_TOKENS_SAME\\\");\\n        SmartPoolManager.rebalanceHandle(etype == SmartPoolManager.Etypes.CLOSED, etfStatus.collectEndTime, etfStatus.closureEndTime, rights.canChangeWeights, tokenA, tokenB);\\n\\n        // require(this.isTokenWhitelisted(tokenB), \\\"ERR_TOKEN_NOT_IN_WHITELIST\\\");\\n        _verifyWhiteToken(tokenB);\\n        bool bools = IVault(vaultAddress).getManagerClaimBool(address(this));\\n        if (bools) {\\n            IVault(vaultAddress).managerClaim(address(this));\\n        }\\n        if (!bPool.isBound(tokenB)) {\\n            bool returnValue = IERC20(tokenB).safeApprove(address(bPool), DesynConstants.MAX_UINT);\\n            require(returnValue, \\\"ERR_ERC20_FALSE\\\");\\n        }\\n        // Delegate to library to save space\\n        SmartPoolManager.rebalance(IConfigurableRightsPool(address(this)), bPool, tokenA, tokenB, deltaWeight, minAmountOut);\\n    }\\n\\n    /**\\n     * @notice Join a pool\\n     * @dev Emits a LogJoin event (for each token)\\n     *      bPool is a contract interface; function calls on it are external\\n     * @param poolAmountOut - number of pool tokens to receive\\n     * @param maxAmountsIn - Max amount of asset tokens to spend\\n     */\\n    function joinPool(\\n        uint poolAmountOut,\\n        uint[] calldata maxAmountsIn,\\n        address kol\\n    ) external logs lock needsBPool {\\n        SmartPoolManager.joinPoolHandle(rights.canWhitelistLPs, _liquidityProviderWhitelist[msg.sender], etype == SmartPoolManager.Etypes.CLOSED, etfStatus.collectEndTime);\\n        // Delegate to library to save space\\n\\n        // Library computes actualAmountsIn, and does many validations\\n        // Cannot call the push/pull/min from an external library for\\n        // any of these pool functions. Since msg.sender can be anybody,\\n        // they must be internal\\n        uint[] memory actualAmountsIn = SmartPoolManager.joinPool(IConfigurableRightsPool(address(this)), bPool, poolAmountOut, maxAmountsIn);\\n\\n        // After createPool, token list is maintained in the underlying BPool\\n        address[] memory poolTokens = bPool.getCurrentTokens();\\n        uint[] memory tokensAmount = new uint[](poolTokens.length);\\n\\n        uint totalBegin;\\n        uint _actualIssueFee = etfStatus.issueFee;\\n        if (etype == SmartPoolManager.Etypes.CLOSED) {\\n            totalBegin = Oracles(oracleAddress).getAllPrice(poolTokens, actualAmountsIn);\\n            IUserVault(bFactory.getUserVault()).recordTokenInfo(kol, msg.sender, poolTokens, actualAmountsIn);\\n            if (isCompletedCollect == false) {\\n                _actualIssueFee = 0;\\n            }\\n        }\\n\\n        for (uint i = 0; i < poolTokens.length; i++) {\\n            address t = poolTokens[i];\\n            uint tokenAmountIn = actualAmountsIn[i];\\n            emit LogJoin(msg.sender, t, tokenAmountIn);\\n            uint tokenAmountInNew = DesynSafeMath.bmul(tokenAmountIn, _actualIssueFee);\\n            _pullUnderlying(t, msg.sender, DesynSafeMath.bsub(tokenAmountIn, tokenAmountInNew));\\n\\n            if (_actualIssueFee != 0) {\\n                bool xfer = IERC20(t).transferFrom(msg.sender, address(this), tokenAmountInNew);\\n                bool returnValue = IERC20(t).safeApprove(vaultAddress, tokenAmountInNew);\\n                require(xfer && returnValue, \\\"ERR_ERC20_FALSE\\\");\\n                tokensAmount[i] = tokenAmountInNew;\\n            }\\n        }\\n\\n        if (_actualIssueFee != 0) {\\n            IVault(vaultAddress).depositIssueRedeemPToken(poolTokens, tokensAmount, tokensAmount, false);\\n        }\\n\\n        _mintPoolShare(poolAmountOut);\\n        _pushPoolShare(msg.sender, poolAmountOut);\\n        if (totalBegin > 0) {\\n            SmartPoolManager.Fund storage fund = beginFund[msg.sender];\\n            fund.etfAmount = DesynSafeMath.badd(beginFund[msg.sender].etfAmount, poolAmountOut);\\n            fund.fundAmount = DesynSafeMath.badd(beginFund[msg.sender].fundAmount, totalBegin);\\n        }\\n\\n        // checkout the state that elose ETF collect completed and claime fee.\\n        bool isCompletedMoment = etype == SmartPoolManager.Etypes.CLOSED && this.totalSupply() >= etfStatus.floorCap && isCompletedCollect == false;\\n        if (isCompletedMoment) {\\n            isCompletedCollect = true;\\n            _closeEtfCollectCompletedToClaimeIssueFee();\\n\\n            emit CloseETFColletdCompleted(msg.sender, address(this), block.timestamp);\\n        }\\n    }\\n\\n    // @notice Claime issueFee fee when close ETF collect completed moment.\\n    function _closeEtfCollectCompletedToClaimeIssueFee() internal {\\n        if (etfStatus.issueFee != 0) {\\n            address[] memory poolTokens = bPool.getCurrentTokens(); // get all token\\n            uint[] memory tokensAmount = new uint[](poolTokens.length); // all amount temp\\n\\n            for (uint i = 0; i < poolTokens.length; i++) {\\n                address t = poolTokens[i];\\n                uint currentAmount = bPool.getBalance(t);\\n                uint currentAmountFee = DesynSafeMath.bmul(currentAmount, etfStatus.issueFee);\\n\\n                _pushUnderlying(t, address(this), currentAmountFee);\\n                tokensAmount[i] = currentAmountFee;\\n                bool returnValue = IERC20(t).safeApprove(vaultAddress, currentAmountFee);\\n                require(returnValue, \\\"ERR_ERC20_FALSE\\\");\\n            }\\n\\n            IVault(vaultAddress).depositIssueRedeemPToken(poolTokens, tokensAmount, tokensAmount, false);\\n        }\\n    }\\n\\n    /**\\n     * @notice Exit a pool - redeem pool tokens for underlying assets\\n     * @dev Emits a LogExit event for each token\\n     *      bPool is a contract interface; function calls on it are external\\n     * @param poolAmountIn - amount of pool tokens to redeem\\n     * @param minAmountsOut - minimum amount of asset tokens to receive\\n     */\\n    function exitPool(uint poolAmountIn, uint[] calldata minAmountsOut) external logs lock needsBPool {\\n        (beginFund[msg.sender].etfAmount, beginFund[msg.sender].fundAmount) = SmartPoolManager.exitPoolHandleB(\\n            etype == SmartPoolManager.Etypes.CLOSED,\\n            isCompletedCollect,\\n            etfStatus.closureEndTime,\\n            etfStatus.collectEndTime,\\n            beginFund[msg.sender].etfAmount,\\n            beginFund[msg.sender].fundAmount,\\n            poolAmountIn\\n        );\\n        // Library computes actualAmountsOut, and does many validations\\n        // Also computes the exitFee and pAiAfterExitFee\\n        (uint pAiAfterExitFee, uint[] memory actualAmountsOut) = SmartPoolManager.exitPool(IConfigurableRightsPool(address(this)), bPool, poolAmountIn, minAmountsOut);\\n        _pullPoolShare(msg.sender, poolAmountIn);\\n        _burnPoolShare(pAiAfterExitFee);\\n\\n        // After createPool, token list is maintained in the underlying BPool\\n        address[] memory poolTokens = bPool.getCurrentTokens();\\n        uint[] memory tokensAmount = new uint[](poolTokens.length);\\n        //perfermance fee\\n        uint totalEnd;\\n        uint profitRate;\\n        if (etype == SmartPoolManager.Etypes.CLOSED && block.timestamp >= etfStatus.closureEndTime) {\\n            totalEnd = Oracles(oracleAddress).getAllPrice(poolTokens, actualAmountsOut);\\n        }\\n\\n        uint _actualRedeemFee = etfStatus.redeemFee;\\n        if (etype == SmartPoolManager.Etypes.CLOSED) {\\n            bool isCloseEtfCollectEndWithFailure = isCompletedCollect == false && block.timestamp >= etfStatus.collectEndTime;\\n            if (isCloseEtfCollectEndWithFailure) {\\n                _actualRedeemFee = 0;\\n            }\\n        }\\n\\n        if (totalEnd > 0) {\\n            uint _poolAmountIn = poolAmountIn;\\n            (endFund[msg.sender].etfAmount, endFund[msg.sender].fundAmount, profitRate) = SmartPoolManager.exitPoolHandle(\\n                endFund[msg.sender].etfAmount,\\n                endFund[msg.sender].fundAmount,\\n                beginFund[msg.sender].etfAmount,\\n                beginFund[msg.sender].fundAmount,\\n                _poolAmountIn,\\n                totalEnd\\n            );\\n        }\\n        uint[] memory tokensAmountRedeem = new uint[](poolTokens.length);\\n        for (uint i = 0; i < poolTokens.length; i++) {\\n            address t = poolTokens[i];\\n            (uint tokenAmountOutNew, uint amount, uint redeemAmount) = SmartPoolManager.exitPoolHandleA(\\n                actualAmountsOut[i],\\n                _actualRedeemFee,\\n                profitRate,\\n                etfStatus.perfermanceFee\\n            );\\n            tokensAmountRedeem[i] = redeemAmount;\\n            emit LogExit(msg.sender, t, amount);\\n            _pushUnderlying(t, msg.sender, amount);\\n\\n            if (_actualRedeemFee != 0 || (profitRate > 0 && etfStatus.perfermanceFee != 0)) {\\n                _pushUnderlying(t, address(this), tokenAmountOutNew);\\n                bool returnValue = IERC20(t).safeApprove(vaultAddress, tokenAmountOutNew);\\n                require(returnValue, \\\"ERR_ERC20_APPROVE_FALSE\\\");\\n                tokensAmount[i] = tokenAmountOutNew;\\n            }\\n        }\\n\\n        if (_actualRedeemFee != 0 || (profitRate > 0 && etfStatus.perfermanceFee != 0)) {\\n            IVault(vaultAddress).depositIssueRedeemPToken(poolTokens, tokensAmount, tokensAmountRedeem, true);\\n        }\\n    }\\n\\n    /**\\n     * @notice Add to the whitelist of liquidity providers (if enabled)\\n     * @param provider - address of the liquidity provider\\n     */\\n    function whitelistLiquidityProvider(address provider) external onlyOwner lock logs {\\n        SmartPoolManager.WhitelistHandle(rights.canWhitelistLPs, true, provider);\\n        //  require(rights.canWhitelistLPs, \\\"ERR_CANNOT_WHITELIST_LPS\\\");\\n        // require(provider != address(0), \\\"ERR_INVALID_ADDRESS\\\");\\n        _liquidityProviderWhitelist[provider] = true;\\n    }\\n\\n    /**\\n     * @notice Remove from the whitelist of liquidity providers (if enabled)\\n     * @param provider - address of the liquidity provider\\n     */\\n    function removeWhitelistedLiquidityProvider(address provider) external onlyOwner lock logs {\\n        SmartPoolManager.WhitelistHandle(rights.canWhitelistLPs, _liquidityProviderWhitelist[provider], provider);\\n        //  require(rights.canWhitelistLPs, \\\"ERR_CANNOT_WHITELIST_LPS\\\");\\n        // require(_liquidityProviderWhitelist[provider], \\\"ERR_LP_NOT_WHITELISTED\\\");\\n        // require(provider != address(0), \\\"ERR_INVALID_ADDRESS\\\");\\n        _liquidityProviderWhitelist[provider] = false;\\n    }\\n\\n    /**\\n     * @notice Check if an address is a liquidity provider\\n     * @dev If the whitelist feature is not enabled, anyone can provide liquidity (assuming finalized)\\n     * @return boolean value indicating whether the address can join a pool\\n     */\\n    function canProvideLiquidity(address provider) external view returns (bool) {\\n        if (rights.canWhitelistLPs) {\\n            return _liquidityProviderWhitelist[provider];\\n        } else {\\n            // Probably don't strictly need this (could just return true)\\n            // But the null address can't provide funds\\n            return provider != address(0);\\n        }\\n    }\\n\\n    /**\\n     * @notice Getter for specific permissions\\n     * @dev value of the enum is just the 0-based index in the enumeration\\n     *      For instance canPauseSwapping is 0; canChangeWeights is 2\\n     * @return token boolean true if we have the given permission\\n     */\\n    function hasPermission(RightsManager.Permissions permission) external view virtual returns (bool) {\\n        return RightsManager.hasPermission(rights, permission);\\n    }\\n\\n    /**\\n     * @notice Getter for the RightsManager contract\\n     * @dev Convenience function to get the address of the RightsManager library (so clients can check version)\\n     * @return address of the RightsManager library\\n     */\\n    function getRightsManagerVersion() external pure returns (address) {\\n        return address(RightsManager);\\n    }\\n\\n    /**\\n     * @notice Getter for the DesynSafeMath contract\\n     * @dev Convenience function to get the address of the DesynSafeMath library (so clients can check version)\\n     * @return address of the DesynSafeMath library\\n     */\\n    function getDesynSafeMathVersion() external pure returns (address) {\\n        return address(DesynSafeMath);\\n    }\\n\\n    /**\\n     * @notice Getter for the SmartPoolManager contract\\n     * @dev Convenience function to get the address of the SmartPoolManager library (so clients can check version)\\n     * @return address of the SmartPoolManager library\\n     */\\n    function getSmartPoolManagerVersion() external pure returns (address) {\\n        return address(SmartPoolManager);\\n    }\\n\\n    // Public functions\\n\\n    // \\\"Public\\\" versions that can safely be called from SmartPoolManager\\n    // Allows only the contract itself to call them (not the controller or any external account)\\n\\n    function mintPoolShareFromLib(uint amount) public {\\n        require(msg.sender == address(this), \\\"ERR_NOT_CONTROLLER\\\");\\n\\n        _mint(amount);\\n    }\\n\\n    function pushPoolShareFromLib(address to, uint amount) public {\\n        require(msg.sender == address(this), \\\"ERR_NOT_CONTROLLER\\\");\\n\\n        _push(to, amount);\\n    }\\n\\n    function pullPoolShareFromLib(address from, uint amount) public {\\n        require(msg.sender == address(this), \\\"ERR_NOT_CONTROLLER\\\");\\n\\n        _pull(from, amount);\\n    }\\n\\n    function burnPoolShareFromLib(uint amount) public {\\n        require(msg.sender == address(this), \\\"ERR_NOT_CONTROLLER\\\");\\n\\n        _burn(amount);\\n    }\\n\\n    // Internal functions\\n\\n    // Lint wants the function to have a leading underscore too\\n    /* solhint-disable private-vars-leading-underscore */\\n\\n    /**\\n     * @notice Create a new Smart Pool\\n     * @dev Initialize the swap fee to the value provided in the CRP constructor\\n     *      Can be changed if the canChangeSwapFee permission is enabled\\n     * @param initialSupply starting token balance\\n     */\\n    function createPoolInternal(uint initialSupply) internal {\\n        require(address(bPool) == address(0), \\\"ERR_IS_CREATED\\\");\\n        // require(initialSupply >= DesynConstants.MIN_POOL_SUPPLY, \\\"ERR_INIT_SUPPLY_MIN\\\");\\n        // require(initialSupply <= DesynConstants.MAX_POOL_SUPPLY, \\\"ERR_INIT_SUPPLY_MAX\\\");\\n\\n        // require(DesynConstants.EXIT_FEE == 0, \\\"ERR_NONZERO_EXIT_FEE\\\");\\n\\n        // To the extent possible, modify state variables before calling functions\\n        _mintPoolShare(initialSupply);\\n        _pushPoolShare(msg.sender, initialSupply);\\n\\n        // Deploy new BPool (bFactory and bPool are interfaces; all calls are external)\\n        bPool = bFactory.newLiquidityPool();\\n        // EXIT_FEE must always be zero, or ConfigurableRightsPool._pushUnderlying will fail\\n        //   require(bPool.EXIT_FEE() == 0, \\\"ERR_NONZERO_EXIT_FEE\\\");\\n        SmartPoolManager.createPoolInternalHandle(bPool, initialSupply);\\n        for (uint i = 0; i < _initialTokens.length; i++) {\\n            address t = _initialTokens[i];\\n            uint bal = _initialBalances[i];\\n            uint denorm = _initialWeights[i];\\n\\n            // require(this.isTokenWhitelisted(t), \\\"ERR_TOKEN_NOT_IN_WHITELIST\\\");\\n            _verifyWhiteToken(t);\\n\\n            bool returnValue = IERC20(t).transferFrom(msg.sender, address(this), bal);\\n            require(returnValue, \\\"ERR_ERC20_FALSE\\\");\\n\\n            returnValue = IERC20(t).safeApprove(address(bPool), DesynConstants.MAX_UINT);\\n            require(returnValue, \\\"ERR_ERC20_FALSE\\\");\\n\\n            bPool.bind(t, bal, denorm);\\n        }\\n\\n        while (_initialTokens.length > 0) {\\n            // Modifying state variable after external calls here,\\n            // but not essential, so not dangerous\\n            _initialTokens.pop();\\n        }\\n\\n        // Set fee to the initial value set in the constructor\\n        // Hereafter, read the swapFee from the underlying pool, not the local state variable\\n        // bPool.setSwapFee(_initialSwapFee);\\n        // bPool.setPublicSwap(false);\\n    }\\n\\n    function addTokenToWhitelist(uint[] memory sort, address[] memory token) external onlyOwner {\\n        require(rights.canTokenWhiteLists && hasSetWhiteTokens == false, \\\"ERR_NO_RIGHTS\\\");\\n        require(sort.length == token.length, \\\"ERR_SORT_TOKEN_MISMATCH\\\");\\n        for (uint i = 0; i < token.length; i++) {\\n            bool inRange = bFactory.isTokenWhitelistedForVerify(sort[i], token[i]);\\n            require(inRange, \\\"TOKEN_MUST_IN_WHITE_LISTS\\\");\\n            _addTokenToWhitelist(sort[i], token[i]);\\n        }\\n        hasSetWhiteTokens = true;\\n    }\\n\\n    function _verifyWhiteToken(address token) internal view {\\n        require(bFactory.isTokenWhitelistedForVerify(token), \\\"ERR_NOT_WHITE_TOKEN_IN_FACTORY\\\");\\n\\n        if (hasSetWhiteTokens) {\\n            require(_queryIsTokenWhitelisted(token), \\\"ERR_NOT_WHITE_TOKEN_IN_POOL\\\");\\n        }\\n    }\\n\\n    // Rebind BPool and pull tokens from address\\n    // bPool is a contract interface; function calls on it are external\\n    function _pullUnderlying(\\n        address erc20,\\n        address from,\\n        uint amount\\n    ) internal needsBPool {\\n        // Gets current Balance of token i, Bi, and weight of token i, Wi, from BPool.\\n        uint tokenBalance = bPool.getBalance(erc20);\\n        uint tokenWeight = bPool.getDenormalizedWeight(erc20);\\n\\n        bool xfer = IERC20(erc20).transferFrom(from, address(this), amount);\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n        bPool.rebind(erc20, DesynSafeMath.badd(tokenBalance, amount), tokenWeight);\\n    }\\n\\n    // Rebind BPool and push tokens to address\\n    // bPool is a contract interface; function calls on it are external\\n    function _pushUnderlying(\\n        address erc20,\\n        address to,\\n        uint amount\\n    ) internal needsBPool {\\n        // Gets current Balance of token i, Bi, and weight of token i, Wi, from BPool.\\n        uint tokenBalance = bPool.getBalance(erc20);\\n        uint tokenWeight = bPool.getDenormalizedWeight(erc20);\\n        bPool.rebind(erc20, DesynSafeMath.bsub(tokenBalance, amount), tokenWeight);\\n\\n        bool xfer = IERC20(erc20).transfer(to, amount);\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n    }\\n\\n    // Wrappers around corresponding core functions\\n\\n    function _mint(uint amount) internal override {\\n        super._mint(amount);\\n        require(varTotalSupply <= etfStatus.upperCap, \\\"ERR_CAP_LIMIT_REACHED\\\");\\n    }\\n\\n    function _mintPoolShare(uint amount) internal {\\n        _mint(amount);\\n    }\\n\\n    function _pushPoolShare(address to, uint amount) internal {\\n        _push(to, amount);\\n    }\\n\\n    function _pullPoolShare(address from, uint amount) internal {\\n        _pull(from, amount);\\n    }\\n\\n    function _burnPoolShare(uint amount) internal {\\n        _burn(amount);\\n    }\\n}\\n\",\"keccak256\":\"0x35c2591eee72053a3f5d239be1c81941cdfcb1e77454a1f68f0329e5da6b4a9c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/base/PCToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Imports\\n\\nimport \\\"../libraries/DesynSafeMath.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n// Contracts\\n\\n/* solhint-disable func-order */\\n\\n/**\\n * @author Desyn Labs\\n * @title Highly opinionated token implementation\\n */\\ncontract PCToken is IERC20 {\\n    using DesynSafeMath for uint;\\n\\n    // State variables\\n    string public constant NAME = \\\"Desyn Smart Pool\\\";\\n    uint8 public constant DECIMALS = 18;\\n\\n    // No leading underscore per naming convention (non-private)\\n    // Cannot call totalSupply (name conflict)\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    uint internal varTotalSupply;\\n\\n    mapping(address => uint) private _balance;\\n    mapping(address => mapping(address => uint)) private _allowance;\\n\\n    string private _symbol;\\n    string private _name;\\n\\n    // Event declarations\\n\\n    // See definitions above; must be redeclared to be emitted from this contract\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    // Function declarations\\n\\n    /**\\n     * @notice Base token constructor\\n     * @param tokenSymbol - the token symbol\\n     */\\n    constructor(string memory tokenSymbol, string memory tokenName) public {\\n        _symbol = tokenSymbol;\\n        _name = tokenName;\\n    }\\n\\n    // External functions\\n\\n    /**\\n     * @notice Getter for allowance: amount spender will be allowed to spend on behalf of owner\\n     * @param owner - owner of the tokens\\n     * @param spender - entity allowed to spend the tokens\\n     * @return uint - remaining amount spender is allowed to transfer\\n     */\\n    function allowance(address owner, address spender) external view override returns (uint) {\\n        return _allowance[owner][spender];\\n    }\\n\\n    /**\\n     * @notice Getter for current account balance\\n     * @param account - address we're checking the balance of\\n     * @return uint - token balance in the account\\n     */\\n    function balanceOf(address account) external view override returns (uint) {\\n        return _balance[account];\\n    }\\n\\n    /**\\n     * @notice Approve owner (sender) to spend a certain amount\\n     * @dev emits an Approval event\\n     * @param spender - entity the owner (sender) is approving to spend his tokens\\n     * @param amount - number of tokens being approved\\n     * @return bool - result of the approval (will always be true if it doesn't revert)\\n     */\\n    function approve(address spender, uint amount) external override returns (bool) {\\n        /* In addition to the increase/decreaseApproval functions, could\\n           avoid the \\\"approval race condition\\\" by only allowing calls to approve\\n           when the current approval amount is 0\\n        \\n           require(_allowance[msg.sender][spender] == 0, \\\"ERR_RACE_CONDITION\\\");\\n\\n           Some token contracts (e.g., KNC), already revert if you call approve \\n           on a non-zero allocation. To deal with these, we use the SafeApprove library\\n           and safeApprove function when adding tokens to the pool.\\n        */\\n\\n        _allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Increase the amount the spender is allowed to spend on behalf of the owner (sender)\\n     * @dev emits an Approval event\\n     * @param spender - entity the owner (sender) is approving to spend his tokens\\n     * @param amount - number of tokens being approved\\n     * @return bool - result of the approval (will always be true if it doesn't revert)\\n     */\\n    function increaseApproval(address spender, uint amount) external returns (bool) {\\n        _allowance[msg.sender][spender] = DesynSafeMath.badd(_allowance[msg.sender][spender], amount);\\n\\n        emit Approval(msg.sender, spender, _allowance[msg.sender][spender]);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Decrease the amount the spender is allowed to spend on behalf of the owner (sender)\\n     * @dev emits an Approval event\\n     * @dev If you try to decrease it below the current limit, it's just set to zero (not an error)\\n     * @param spender - entity the owner (sender) is approving to spend his tokens\\n     * @param amount - number of tokens being approved\\n     * @return bool - result of the approval (will always be true if it doesn't revert)\\n     */\\n    function decreaseApproval(address spender, uint amount) external returns (bool) {\\n        uint oldValue = _allowance[msg.sender][spender];\\n        // Gas optimization - if amount == oldValue (or is larger), set to zero immediately\\n        if (amount >= oldValue) {\\n            _allowance[msg.sender][spender] = 0;\\n        } else {\\n            _allowance[msg.sender][spender] = DesynSafeMath.bsub(oldValue, amount);\\n        }\\n\\n        emit Approval(msg.sender, spender, _allowance[msg.sender][spender]);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer the given amount from sender (caller) to recipient\\n     * @dev _move emits a Transfer event if successful\\n     * @param recipient - entity receiving the tokens\\n     * @param amount - number of tokens being transferred\\n     * @return bool - result of the transfer (will always be true if it doesn't revert)\\n     */\\n    function transfer(address recipient, uint amount) external override returns (bool) {\\n        require(recipient != address(0), \\\"ERR_ZERO_ADDRESS\\\");\\n\\n        _move(msg.sender, recipient, amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer the given amount from sender to recipient\\n     * @dev _move emits a Transfer event if successful; may also emit an Approval event\\n     * @param sender - entity sending the tokens (must be caller or allowed to spend on behalf of caller)\\n     * @param recipient - recipient of the tokens\\n     * @param amount - number of tokens being transferred\\n     * @return bool - result of the transfer (will always be true if it doesn't revert)\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint amount\\n    ) external override returns (bool) {\\n        require(recipient != address(0), \\\"ERR_ZERO_ADDRESS\\\");\\n        require(msg.sender == sender || amount <= _allowance[sender][msg.sender], \\\"ERR_PCTOKEN_BAD_CALLER\\\");\\n\\n        _move(sender, recipient, amount);\\n\\n        // memoize for gas optimization\\n        uint oldAllowance = _allowance[sender][msg.sender];\\n\\n        // If the sender is not the caller, adjust the allowance by the amount transferred\\n        if (msg.sender != sender && oldAllowance != uint(-1)) {\\n            _allowance[sender][msg.sender] = DesynSafeMath.bsub(oldAllowance, amount);\\n\\n            emit Approval(sender, msg.sender, _allowance[sender][msg.sender]);\\n        }\\n\\n        return true;\\n    }\\n\\n    // public functions\\n\\n    /**\\n     * @notice Getter for the total supply\\n     * @dev declared external for gas optimization\\n     * @return uint - total number of tokens in existence\\n     */\\n    function totalSupply() external view override returns (uint) {\\n        return varTotalSupply;\\n    }\\n\\n    // Public functions\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     *      We allow the user to set this name (as well as the symbol).\\n     *      Alternatives are 1) A fixed string (original design)\\n     *                       2) A fixed string plus the user-defined symbol\\n     *                          return string(abi.encodePacked(NAME, \\\"-\\\", _symbol));\\n     */\\n    function name() external view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() external view override returns (uint8) {\\n        return DECIMALS;\\n    }\\n\\n    // internal functions\\n\\n    // Mint an amount of new tokens, and add them to the balance (and total supply)\\n    // Emit a transfer amount from the null address to this contract\\n    function _mint(uint amount) internal virtual {\\n        _balance[address(this)] = DesynSafeMath.badd(_balance[address(this)], amount);\\n        varTotalSupply = DesynSafeMath.badd(varTotalSupply, amount);\\n\\n        emit Transfer(address(0), address(this), amount);\\n    }\\n\\n    // Burn an amount of new tokens, and subtract them from the balance (and total supply)\\n    // Emit a transfer amount from this contract to the null address\\n    function _burn(uint amount) internal virtual {\\n        // Can't burn more than we have\\n        // Remove require for gas optimization - bsub will revert on underflow\\n        // require(_balance[address(this)] >= amount, \\\"ERR_INSUFFICIENT_BAL\\\");\\n\\n        _balance[address(this)] = DesynSafeMath.bsub(_balance[address(this)], amount);\\n        varTotalSupply = DesynSafeMath.bsub(varTotalSupply, amount);\\n\\n        emit Transfer(address(this), address(0), amount);\\n    }\\n\\n    // Transfer tokens from sender to recipient\\n    // Adjust balances, and emit a Transfer event\\n    function _move(\\n        address sender,\\n        address recipient,\\n        uint amount\\n    ) internal virtual {\\n        // Can't send more than sender has\\n        // Remove require for gas optimization - bsub will revert on underflow\\n        // require(_balance[sender] >= amount, \\\"ERR_INSUFFICIENT_BAL\\\");\\n\\n        _balance[sender] = DesynSafeMath.bsub(_balance[sender], amount);\\n        _balance[recipient] = DesynSafeMath.badd(_balance[recipient], amount);\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    // Transfer from this contract to recipient\\n    // Emits a transfer event if successful\\n    function _push(address recipient, uint amount) internal {\\n        _move(address(this), recipient, amount);\\n    }\\n\\n    // Transfer from recipient to this contract\\n    // Emits a transfer event if successful\\n    function _pull(address sender, uint amount) internal {\\n        _move(sender, address(this), amount);\\n    }\\n}\\n\",\"keccak256\":\"0xca3dfd87d1e5f511f4e105cbb3f99c6d270d88d5057f09c147ad61141ebb9b55\",\"license\":\"GPL-3.0-or-later\"},\"contracts/base/WhiteToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\ncontract WhiteToken {\\n    // add token log\\n    event LOG_WHITELIST(address indexed spender, uint indexed sort, address indexed caller, address token);\\n    // del token log\\n    event LOG_DEL_WHITELIST(address indexed spender, uint indexed sort, address indexed caller, address token);\\n\\n    // has config state\\n    bool private _hasInit;\\n    // record the number of whitelists.\\n    uint private _whiteTokenCount;\\n    // token address => is white token.\\n    mapping(address => bool) private _isTokenWhitelisted;\\n    // Multi level white token.\\n    // type => token address => is white token.\\n    mapping(uint => mapping(address => bool)) private _tokenWhitelistedInfo;\\n\\n    function _queryIsTokenWhitelisted(address token) internal view returns (bool) {\\n        return _isTokenWhitelisted[token];\\n    }\\n\\n    // for factory to verify\\n    function _isTokenWhitelistedForVerify(uint sort, address token) internal view returns (bool) {\\n        return _tokenWhitelistedInfo[sort][token];\\n    }\\n\\n    // add sort token\\n    function _addTokenToWhitelist(uint sort, address token) internal {\\n        require(token != address(0), \\\"ERR_INVALID_TOKEN_ADDRESS\\\");\\n        require(_queryIsTokenWhitelisted(token) == false, \\\"ERR_HAS_BEEN_ADDED_WHITE\\\");\\n\\n        _tokenWhitelistedInfo[sort][token] = true;\\n        _isTokenWhitelisted[token] = true;\\n        if (_hasInit == false) {\\n            _hasInit = true;\\n        }\\n        _whiteTokenCount++;\\n        _countListener();\\n\\n        emit LOG_WHITELIST(address(this), sort, msg.sender, token);\\n    }\\n\\n    // remove sort token\\n    function _removeTokenFromWhitelist(uint sort, address token) internal {\\n        require(_queryIsTokenWhitelisted(token) == true, \\\"ERR_NOT_WHITE_TOKEN\\\");\\n\\n        _tokenWhitelistedInfo[sort][token] = false;\\n        _isTokenWhitelisted[token] = false;\\n        _whiteTokenCount--;\\n        _countListener();\\n\\n        emit LOG_DEL_WHITELIST(address(this), sort, msg.sender, token);\\n    }\\n\\n    // listen the white token counts change.\\n    function _countListener() private {\\n        _whiteTokenCount == 0 ? _hasInit = false : _hasInit = true;\\n    }\\n\\n    // already has init\\n    function _initWhiteTokenState() internal view returns (bool) {\\n        return _hasInit;\\n    }\\n}\\n\",\"keccak256\":\"0x4756e4c5f8d46f79babf536bee07b1e4426dda27c7863fe7178722eeb36a6799\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IBFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\nimport \\\"../libraries/SmartPoolManager.sol\\\";\\n\\ninterface IBPool {\\n    function rebind(\\n        address token,\\n        uint balance,\\n        uint denorm\\n    ) external;\\n\\n    function rebindSmart(\\n        address tokenA,\\n        address tokenB,\\n        uint deltaWeight,\\n        uint deltaBalance,\\n        bool isSoldout,\\n        uint minAmountOut\\n    ) external;\\n\\n    function execute(\\n        address _target,\\n        uint _value,\\n        bytes calldata _data\\n    ) external returns (bytes memory _returnValue);\\n\\n    function bind(\\n        address token,\\n        uint balance,\\n        uint denorm\\n    ) external;\\n\\n    function unbind(address token) external;\\n\\n    function unbindPure(address token) external;\\n\\n    function isBound(address token) external view returns (bool);\\n\\n    function getBalance(address token) external view returns (uint);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function getSwapFee() external view returns (uint);\\n\\n    function isPublicSwap() external view returns (bool);\\n\\n    function getDenormalizedWeight(address token) external view returns (uint);\\n\\n    function getTotalDenormalizedWeight() external view returns (uint);\\n\\n    function EXIT_FEE() external view returns (uint);\\n\\n    function getCurrentTokens() external view returns (address[] memory tokens);\\n\\n    function setController(address owner) external;\\n}\\n\\ninterface IBFactory {\\n    function newLiquidityPool() external returns (IBPool);\\n\\n    function setBLabs(address b) external;\\n\\n    function collect(IBPool pool) external;\\n\\n    function isBPool(address b) external view returns (bool);\\n\\n    function getBLabs() external view returns (address);\\n\\n    function getSwapRouter() external view returns (address);\\n\\n    function getVault() external view returns (address);\\n\\n    function getUserVault() external view returns (address);\\n\\n    function getVaultAddress() external view returns (address);\\n\\n    function getOracleAddress() external view returns (address);\\n\\n    function getManagerOwner() external view returns (address);\\n\\n    function isTokenWhitelistedForVerify(uint sort, address token) external view returns (bool);\\n\\n    function isTokenWhitelistedForVerify(address token) external view returns (bool);\\n\\n    function getModuleStatus(address etf, address module) external view returns (bool);\\n}\\n\\ninterface IVault {\\n    function depositManagerToken(address[] calldata poolTokens, uint[] calldata tokensAmount) external;\\n\\n    function depositIssueRedeemPToken(\\n        address[] calldata poolTokens,\\n        uint[] calldata tokensAmount,\\n        uint[] calldata tokensAmountP,\\n        bool isPerfermance\\n    ) external;\\n\\n    function managerClaim(address pool) external;\\n\\n    function getManagerClaimBool(address pool) external view returns (bool);\\n}\\n\\ninterface IUserVault {\\n    function recordTokenInfo(\\n        address kol,\\n        address user,\\n        address[] calldata poolTokens,\\n        uint[] calldata tokensAmount\\n    ) external;\\n}\\n\\ninterface Oracles {\\n    function getPrice(address tokenAddress) external returns (uint price);\\n\\n    function getAllPrice(address[] calldata poolTokens, uint[] calldata tokensAmount) external returns (uint);\\n}\\n\",\"keccak256\":\"0x13c400ca7a5f59c8730f553fcf189c14af0c0d65a79012793cbde56ce221a419\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IConfigurableRightsPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Interface declarations\\n\\n// Introduce to avoid circularity (otherwise, the CRP and SmartPoolManager include each other)\\n// Removing circularity allows flattener tools to work, which enables Etherscan verification\\ninterface IConfigurableRightsPool {\\n    function mintPoolShareFromLib(uint amount) external;\\n\\n    function pushPoolShareFromLib(address to, uint amount) external;\\n\\n    function pullPoolShareFromLib(address from, uint amount) external;\\n\\n    function burnPoolShareFromLib(uint amount) external;\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function getController() external view returns (address);\\n}\\n\",\"keccak256\":\"0x54defbc333ab8f90c4fe352c694c360cc38fd707606199caf05fc165a64da788\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Interface declarations\\n\\n/* solhint-disable func-order */\\n\\ninterface IERC20 {\\n    // Emitted when the allowance of a spender for an owner is set by a call to approve.\\n    // Value is the new allowance\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n\\n    // Emitted when value tokens are moved from one account (from) to another (to).\\n    // Note that value may be zero\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    // Returns the amount of tokens in existence\\n    function totalSupply() external view returns (uint);\\n\\n    // Returns the amount of tokens owned by account\\n    function balanceOf(address account) external view returns (uint);\\n\\n    // Returns the decimals of tokens\\n    function decimals() external view returns (uint8);\\n\\n    function symbol() external view returns (string memory);\\n\\n    // Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner\\n    // through transferFrom. This is zero by default\\n    // This value changes when approve or transferFrom are called\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    // Sets amount as the allowance of spender over the caller\\u2019s tokens\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits an Approval event.\\n    function approve(address spender, uint amount) external returns (bool);\\n\\n    // Moves amount tokens from the caller\\u2019s account to recipient\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits a Transfer event.\\n    function transfer(address recipient, uint amount) external returns (bool);\\n\\n    // Moves amount tokens from sender to recipient using the allowance mechanism\\n    // Amount is then deducted from the caller\\u2019s allowance\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits a Transfer event\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xfe22b6d6029b400b9cce7f9b39c546f99cd6922b2fd926e480e2b4d476ab26f8\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/DesynConstants.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n/**\\n * @author Desyn Labs\\n * @title Put all the constants in one place\\n */\\n\\nlibrary DesynConstants {\\n    // State variables (must be constant in a library)\\n\\n    // B \\\"ONE\\\" - all math is in the \\\"realm\\\" of 10 ** 18;\\n    // where numeric 1 = 10 ** 18\\n    uint public constant BONE = 10**18;\\n    uint public constant MIN_WEIGHT = BONE;\\n    uint public constant MAX_WEIGHT = BONE * 50;\\n    uint public constant MAX_TOTAL_WEIGHT = BONE * 50;\\n    uint public constant MIN_BALANCE = BONE / 10**6;\\n    uint public constant MAX_BALANCE = BONE * 10**12;\\n    uint public constant MIN_POOL_SUPPLY = BONE * 100;\\n    uint public constant MAX_POOL_SUPPLY = BONE * 10**9;\\n    uint public constant MIN_FEE = BONE / 10**6;\\n    uint public constant MAX_FEE = BONE / 10;\\n    //Fee Set\\n    uint public constant MANAGER_MIN_FEE = 0;\\n    uint public constant MANAGER_MAX_FEE = BONE / 10;\\n    uint public constant ISSUE_MIN_FEE = 0;\\n    uint public constant ISSUE_MAX_FEE = BONE / 10;\\n    uint public constant REDEEM_MIN_FEE = 0;\\n    uint public constant REDEEM_MAX_FEE = BONE / 10;\\n    uint public constant PERFERMANCE_MIN_FEE = 0;\\n    uint public constant PERFERMANCE_MAX_FEE = BONE / 2;\\n    // EXIT_FEE must always be zero, or ConfigurableRightsPool._pushUnderlying will fail\\n    uint public constant EXIT_FEE = 0;\\n    uint public constant MAX_IN_RATIO = BONE / 2;\\n    uint public constant MAX_OUT_RATIO = (BONE / 3) + 1 wei;\\n    // Must match BConst.MIN_BOUND_TOKENS and BConst.MAX_BOUND_TOKENS\\n    uint public constant MIN_ASSET_LIMIT = 1;\\n    uint public constant MAX_ASSET_LIMIT = 16;\\n    uint public constant MAX_UINT = uint(-1);\\n    uint public constant MAX_COLLECT_PERIOD = 60 days;\\n}\\n\",\"keccak256\":\"0x7980d0f32316714804b3fa02faa0f450ce206920e5538a27921b5de4e85de737\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/DesynSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Imports\\n\\nimport \\\"./DesynConstants.sol\\\";\\n\\n/**\\n * @author Desyn Labs\\n * @title SafeMath - wrap Solidity operators to prevent underflow/overflow\\n * @dev badd and bsub are basically identical to OpenZeppelin SafeMath; mul/div have extra checks\\n */\\nlibrary DesynSafeMath {\\n    /**\\n     * @notice Safe addition\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev if we are adding b to a, the resulting sum must be greater than a\\n     * @return - sum of operands; throws if overflow\\n     */\\n    function badd(uint a, uint b) internal pure returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, \\\"ERR_ADD_OVERFLOW\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned subtraction\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Do a signed subtraction, and check that it produces a positive value\\n     *      (i.e., a - b is valid if b <= a)\\n     * @return - a - b; throws if underflow\\n     */\\n    function bsub(uint a, uint b) internal pure returns (uint) {\\n        (uint c, bool negativeResult) = bsubSign(a, b);\\n        require(!negativeResult, \\\"ERR_SUB_UNDERFLOW\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Safe signed subtraction\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Do a signed subtraction\\n     * @return - difference between a and b, and a flag indicating a negative result\\n     *           (i.e., a - b if a is greater than or equal to b; otherwise b - a)\\n     */\\n    function bsubSign(uint a, uint b) internal pure returns (uint, bool) {\\n        if (b <= a) {\\n            return (a - b, false);\\n        } else {\\n            return (b - a, true);\\n        }\\n    }\\n\\n    /**\\n     * @notice Safe multiplication\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Multiply safely (and efficiently), rounding down\\n     * @return - product of operands; throws if overflow or rounding error\\n     */\\n    function bmul(uint a, uint b) internal pure returns (uint) {\\n        // Gas optimization (see github.com/OpenZeppelin/openzeppelin-contracts/pull/522)\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // Standard overflow check: a/a*b=b\\n        uint c0 = a * b;\\n        require(c0 / a == b, \\\"ERR_MUL_OVERFLOW\\\");\\n\\n        // Round to 0 if x*y < BONE/2?\\n        uint c1 = c0 + (DesynConstants.BONE / 2);\\n        require(c1 >= c0, \\\"ERR_MUL_OVERFLOW\\\");\\n        uint c2 = c1 / DesynConstants.BONE;\\n        return c2;\\n    }\\n\\n    /**\\n     * @notice Safe division\\n     * @param dividend - first operand\\n     * @param divisor - second operand\\n     * @dev Divide safely (and efficiently), rounding down\\n     * @return - quotient; throws if overflow or rounding error\\n     */\\n    function bdiv(uint dividend, uint divisor) internal pure returns (uint) {\\n        require(divisor != 0, \\\"ERR_DIV_ZERO\\\");\\n\\n        // Gas optimization\\n        if (dividend == 0) {\\n            return 0;\\n        }\\n\\n        uint c0 = dividend * DesynConstants.BONE;\\n        require(c0 / dividend == DesynConstants.BONE, \\\"ERR_DIV_INTERNAL\\\"); // bmul overflow\\n\\n        uint c1 = c0 + (divisor / 2);\\n        require(c1 >= c0, \\\"ERR_DIV_INTERNAL\\\"); //  badd require\\n\\n        uint c2 = c1 / divisor;\\n        return c2;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer modulo\\n     * @dev Returns the remainder of dividing two unsigned integers.\\n     *      Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * @param dividend - first operand\\n     * @param divisor - second operand -- cannot be zero\\n     * @return - quotient; throws if overflow or rounding error\\n     */\\n    function bmod(uint dividend, uint divisor) internal pure returns (uint) {\\n        require(divisor != 0, \\\"ERR_MODULO_BY_ZERO\\\");\\n\\n        return dividend % divisor;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer max\\n     * @dev Returns the greater of the two input values\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the maximum of a and b\\n     */\\n    function bmax(uint a, uint b) internal pure returns (uint) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer min\\n     * @dev returns b, if b < a; otherwise returns a\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the lesser of the two input values\\n     */\\n    function bmin(uint a, uint b) internal pure returns (uint) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer average\\n     * @dev Guard against (a+b) overflow by dividing each operand separately\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the average of the two values\\n     */\\n    function baverage(uint a, uint b) internal pure returns (uint) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\\n    }\\n\\n    /**\\n     * @notice Babylonian square root implementation\\n     * @dev (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n     * @param y - operand\\n     * @return z - the square root result\\n     */\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9baf30b98a5f3a8c13ac9c4d5d4b176eabfd936aba8f5172c95b7c568fba68f3\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/RightsManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Needed to handle structures externally\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @author Desyn Labs\\n * @title Manage Configurable Rights for the smart pool\\n *      canPauseSwapping - can setPublicSwap back to false after turning it on\\n *                         by default, it is off on initialization and can only be turned on\\n *      canChangeSwapFee - can setSwapFee after initialization (by default, it is fixed at create time)\\n *      canChangeWeights - can bind new token weights (allowed by default in base pool)\\n *      canAddRemoveTokens - can bind/unbind tokens (allowed by default in base pool)\\n *      canWhitelistLPs - can limit liquidity providers to a given set of addresses\\n *      canChangeCap - can change the BSP cap (max # of pool tokens)\\n *      canChangeFloor - can change the BSP floor for Closure ETF (min # of pool tokens)\\n */\\nlibrary RightsManager {\\n    // Type declarations\\n\\n    enum Permissions {\\n        PAUSE_SWAPPING,\\n        CHANGE_SWAP_FEE,\\n        CHANGE_WEIGHTS,\\n        ADD_REMOVE_TOKENS,\\n        WHITELIST_LPS,\\n        TOKEN_WHITELISTS\\n        // CHANGE_CAP,\\n        // CHANGE_FLOOR\\n    }\\n\\n    struct Rights {\\n        bool canPauseSwapping;\\n        bool canChangeSwapFee;\\n        bool canChangeWeights;\\n        bool canAddRemoveTokens;\\n        bool canWhitelistLPs;\\n        bool canTokenWhiteLists;\\n        // bool canChangeCap;\\n        // bool canChangeFloor;\\n    }\\n\\n    // State variables (can only be constants in a library)\\n    bool public constant DEFAULT_CAN_PAUSE_SWAPPING = false;\\n    bool public constant DEFAULT_CAN_CHANGE_SWAP_FEE = true;\\n    bool public constant DEFAULT_CAN_CHANGE_WEIGHTS = true;\\n    bool public constant DEFAULT_CAN_ADD_REMOVE_TOKENS = false;\\n    bool public constant DEFAULT_CAN_WHITELIST_LPS = false;\\n    bool public constant DEFAULT_CAN_TOKEN_WHITELISTS = false;\\n    // bool public constant DEFAULT_CAN_CHANGE_CAP = false;\\n    // bool public constant DEFAULT_CAN_CHANGE_FLOOR = false;\\n\\n    // Functions\\n\\n    /**\\n     * @notice create a struct from an array (or return defaults)\\n     * @dev If you pass an empty array, it will construct it using the defaults\\n     * @param a - array input\\n     * @return Rights struct\\n     */\\n    function constructRights(bool[] calldata a) external pure returns (Rights memory) {\\n        if (a.length < 6) {\\n            return\\n                Rights(\\n                    DEFAULT_CAN_PAUSE_SWAPPING,\\n                    DEFAULT_CAN_CHANGE_SWAP_FEE,\\n                    DEFAULT_CAN_CHANGE_WEIGHTS,\\n                    DEFAULT_CAN_ADD_REMOVE_TOKENS,\\n                    DEFAULT_CAN_WHITELIST_LPS,\\n                    DEFAULT_CAN_TOKEN_WHITELISTS\\n                    // DEFAULT_CAN_CHANGE_CAP,\\n                    // DEFAULT_CAN_CHANGE_FLOOR\\n                );\\n        } else {\\n            // return Rights(a[0], a[1], a[2], a[3], a[4], a[5], a[6]);\\n            return Rights(a[0], a[1], a[2], a[3], a[4], a[5]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Convert rights struct to an array (e.g., for events, GUI)\\n     * @dev avoids multiple calls to hasPermission\\n     * @param rights - the rights struct to convert\\n     * @return boolean array containing the rights settings\\n     */\\n    function convertRights(Rights calldata rights) external pure returns (bool[] memory) {\\n        bool[] memory result = new bool[](7);\\n\\n        result[0] = rights.canPauseSwapping;\\n        result[1] = rights.canChangeSwapFee;\\n        result[2] = rights.canChangeWeights;\\n        result[3] = rights.canAddRemoveTokens;\\n        result[4] = rights.canWhitelistLPs;\\n        result[5] = rights.canTokenWhiteLists;\\n        // result[5] = rights.canChangeCap;\\n        // result[6] = rights.canChangeFloor;\\n\\n        return result;\\n    }\\n\\n    // Though it is actually simple, the number of branches triggers code-complexity\\n    /* solhint-disable code-complexity */\\n\\n    /**\\n     * @notice Externally check permissions using the Enum\\n     * @param self - Rights struct containing the permissions\\n     * @param permission - The permission to check\\n     * @return Boolean true if it has the permission\\n     */\\n    function hasPermission(Rights calldata self, Permissions permission) external pure returns (bool) {\\n        if (Permissions.PAUSE_SWAPPING == permission) {\\n            return self.canPauseSwapping;\\n        } else if (Permissions.CHANGE_SWAP_FEE == permission) {\\n            return self.canChangeSwapFee;\\n        } else if (Permissions.CHANGE_WEIGHTS == permission) {\\n            return self.canChangeWeights;\\n        } else if (Permissions.ADD_REMOVE_TOKENS == permission) {\\n            return self.canAddRemoveTokens;\\n        } else if (Permissions.WHITELIST_LPS == permission) {\\n            return self.canWhitelistLPs;\\n        }  else if (Permissions.TOKEN_WHITELISTS == permission) {\\n            return self.canTokenWhiteLists;\\n        }\\n        // else if (Permissions.CHANGE_CAP == permission) {\\n        //     return self.canChangeCap;\\n        // } else if (Permissions.CHANGE_FLOOR == permission) {\\n        //     return self.canChangeFloor;\\n        // }\\n    }\\n\\n    /* solhint-enable code-complexity */\\n}\\n\",\"keccak256\":\"0x4141fba7172e2018d45ed376fadf71b53d3c05421979d22511fbd5cd922db962\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/SafeApprove.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Imports\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n// Libraries\\n\\n/**\\n * @author PieDAO (ported to Desyn Labs)\\n * @title SafeApprove - set approval for tokens that require 0 prior approval\\n * @dev Perhaps to address the known ERC20 race condition issue\\n *      See https://github.com/crytic/not-so-smart-contracts/tree/master/race_condition\\n *      Some tokens - notably KNC - only allow approvals to be increased from 0\\n */\\nlibrary SafeApprove {\\n    /**\\n     * @notice handle approvals of tokens that require approving from a base of 0\\n     * @param token - the token we're approving\\n     * @param spender - entity the owner (sender) is approving to spend his tokens\\n     * @param amount - number of tokens being approved\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint amount\\n    ) internal returns (bool) {\\n        uint currentAllowance = token.allowance(address(this), spender);\\n\\n        // Do nothing if allowance is already set to this value\\n        if (currentAllowance == amount) {\\n            return true;\\n        }\\n\\n        // If approval is not zero reset it to zero first\\n        if (currentAllowance != 0) {\\n            token.approve(spender, 0);\\n        }\\n\\n        // do the actual approval\\n        return token.approve(spender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xa51ebf770f2676085b89b1636688cc086289cfe27f614dfd0c15142535c26752\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/SmartPoolManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Needed to pass in structs\\npragma experimental ABIEncoderV2;\\n\\n// Imports\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IConfigurableRightsPool.sol\\\";\\nimport \\\"../interfaces/IBFactory.sol\\\"; // unused\\nimport \\\"./DesynSafeMath.sol\\\"; // unused\\nimport \\\"./SafeApprove.sol\\\";\\n\\n/**\\n * @author Desyn Labs\\n * @title Factor out the weight updates\\n */\\nlibrary SmartPoolManager {\\n    //kol pool params\\n    struct levelParams {\\n        uint level;\\n        uint ratio;\\n    }\\n\\n    struct feeParams {\\n        levelParams firstLevel;\\n        levelParams secondLevel;\\n        levelParams thirdLevel;\\n        levelParams fourLevel;\\n    }\\n    struct KolPoolParams {\\n        feeParams managerFee;\\n        feeParams issueFee;\\n        feeParams redeemFee;\\n        feeParams perfermanceFee;\\n    }\\n\\n    // Type declarations\\n    enum Etypes {\\n        OPENED,\\n        CLOSED\\n    }\\n\\n    enum Period {\\n        HALF,\\n        ONE,\\n        TWO\\n    }\\n\\n    // updateWeight and pokeWeights are unavoidably long\\n    /* solhint-disable function-max-lines */\\n    struct Status {\\n        uint collectPeriod;\\n        uint collectEndTime;\\n        uint closurePeriod;\\n        uint closureEndTime;\\n        uint upperCap;\\n        uint floorCap;\\n        uint managerFee;\\n        uint redeemFee;\\n        uint issueFee;\\n        uint perfermanceFee;\\n        uint startClaimFeeTime;\\n    }\\n\\n    struct PoolParams {\\n        // Desyn Pool Token (representing shares of the pool)\\n        string poolTokenSymbol;\\n        string poolTokenName;\\n        // Tokens inside the Pool\\n        address[] constituentTokens;\\n        uint[] tokenBalances;\\n        uint[] tokenWeights;\\n        uint swapFee;\\n        uint managerFee;\\n        uint redeemFee;\\n        uint issueFee;\\n        uint perfermanceFee;\\n        Etypes etype;\\n    }\\n\\n    struct PoolTokenRange {\\n        uint bspFloor;\\n        uint bspCap;\\n    }\\n\\n    struct Fund {\\n        uint etfAmount;\\n        uint fundAmount;\\n    }\\n\\n    function initRequire(\\n        uint swapFee,\\n        uint managerFee,\\n        uint issueFee,\\n        uint redeemFee,\\n        uint perfermanceFee,\\n        uint tokenBalancesLength,\\n        uint tokenWeightsLength,\\n        uint constituentTokensLength,\\n        bool initBool\\n    ) external pure {\\n        // We don't have a pool yet; check now or it will fail later (in order of likelihood to fail)\\n        // (and be unrecoverable if they don't have permission set to change it)\\n        // Most likely to fail, so check first\\n        require(!initBool, \\\"Init fail\\\");\\n        require(swapFee >= DesynConstants.MIN_FEE, \\\"ERR_INVALID_SWAP_FEE\\\");\\n        require(swapFee <= DesynConstants.MAX_FEE, \\\"ERR_INVALID_SWAP_FEE\\\");\\n        require(managerFee >= DesynConstants.MANAGER_MIN_FEE, \\\"ERR_INVALID_MANAGER_FEE\\\");\\n        require(managerFee <= DesynConstants.MANAGER_MAX_FEE, \\\"ERR_INVALID_MANAGER_FEE\\\");\\n        require(issueFee >= DesynConstants.ISSUE_MIN_FEE, \\\"ERR_INVALID_ISSUE_MIN_FEE\\\");\\n        require(issueFee <= DesynConstants.ISSUE_MAX_FEE, \\\"ERR_INVALID_ISSUE_MAX_FEE\\\");\\n        require(redeemFee >= DesynConstants.REDEEM_MIN_FEE, \\\"ERR_INVALID_REDEEM_MIN_FEE\\\");\\n        require(redeemFee <= DesynConstants.REDEEM_MAX_FEE, \\\"ERR_INVALID_REDEEM_MAX_FEE\\\");\\n        require(perfermanceFee >= DesynConstants.PERFERMANCE_MIN_FEE, \\\"ERR_INVALID_PERFERMANCE_MIN_FEE\\\");\\n        require(perfermanceFee <= DesynConstants.PERFERMANCE_MAX_FEE, \\\"ERR_INVALID_PERFERMANCE_MAX_FEE\\\");\\n\\n        // Arrays must be parallel\\n        require(tokenBalancesLength == constituentTokensLength, \\\"ERR_START_BALANCES_MISMATCH\\\");\\n        require(tokenWeightsLength == constituentTokensLength, \\\"ERR_START_WEIGHTS_MISMATCH\\\");\\n        // Cannot have too many or too few - technically redundant, since BPool.bind() would fail later\\n        // But if we don't check now, we could have a useless contract with no way to create a pool\\n\\n        require(constituentTokensLength >= DesynConstants.MIN_ASSET_LIMIT, \\\"ERR_TOO_FEW_TOKENS\\\");\\n        require(constituentTokensLength <= DesynConstants.MAX_ASSET_LIMIT, \\\"ERR_TOO_MANY_TOKENS\\\");\\n        // There are further possible checks (e.g., if they use the same token twice), but\\n        // we can let bind() catch things like that (i.e., not things that might reasonably work)\\n    }\\n\\n    /**\\n     * @notice Update the weight of an existing token\\n     * @dev Refactored to library to make CRPFactory deployable\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param tokenA - token to sell\\n     * @param tokenB - token to buy\\n     */\\n    function rebalance(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address tokenA,\\n        address tokenB,\\n        uint deltaWeight,\\n        uint minAmountOut\\n    ) external {\\n        uint currentWeightA = bPool.getDenormalizedWeight(tokenA);\\n        uint currentBalanceA = bPool.getBalance(tokenA);\\n        // uint currentWeightB = bPool.getDenormalizedWeight(tokenB);\\n\\n        require(deltaWeight <= currentWeightA, \\\"ERR_DELTA_WEIGHT_TOO_BIG\\\");\\n\\n        // deltaBalance = currentBalance * (deltaWeight / currentWeight)\\n        uint deltaBalanceA = DesynSafeMath.bmul(currentBalanceA, DesynSafeMath.bdiv(deltaWeight, currentWeightA));\\n\\n        // uint currentBalanceB = bPool.getBalance(tokenB);\\n\\n        // uint deltaWeight = DesynSafeMath.bsub(newWeight, currentWeightA);\\n\\n        // uint newWeightB = DesynSafeMath.bsub(currentWeightB, deltaWeight);\\n        // require(newWeightB >= 0, \\\"ERR_INCORRECT_WEIGHT_B\\\");\\n        bool soldout;\\n        if (deltaWeight == currentWeightA) {\\n            // reduct token A\\n            bPool.unbindPure(tokenA);\\n            soldout = true;\\n        }\\n\\n        // Now with the tokens this contract can bind them to the pool it controls\\n        bPool.rebindSmart(tokenA, tokenB, deltaWeight, deltaBalanceA, soldout, minAmountOut);\\n    }\\n\\n    /**\\n     * @notice Non ERC20-conforming tokens are problematic; don't allow them in pools\\n     * @dev Will revert if invalid\\n     * @param token - The prospective token to verify\\n     */\\n    function verifyTokenCompliance(address token) external {\\n        verifyTokenComplianceInternal(token);\\n    }\\n\\n    /**\\n     * @notice Non ERC20-conforming tokens are problematic; don't allow them in pools\\n     * @dev Will revert if invalid - overloaded to save space in the main contract\\n     * @param tokens - The prospective tokens to verify\\n     */\\n    function verifyTokenCompliance(address[] calldata tokens) external {\\n        for (uint i = 0; i < tokens.length; i++) {\\n            verifyTokenComplianceInternal(tokens[i]);\\n        }\\n    }\\n\\n    function createPoolInternalHandle(IBPool bPool, uint initialSupply) external view {\\n        require(initialSupply >= DesynConstants.MIN_POOL_SUPPLY, \\\"ERR_INIT_SUPPLY_MIN\\\");\\n        require(initialSupply <= DesynConstants.MAX_POOL_SUPPLY, \\\"ERR_INIT_SUPPLY_MAX\\\");\\n        require(bPool.EXIT_FEE() == 0, \\\"ERR_NONZERO_EXIT_FEE\\\");\\n        // EXIT_FEE must always be zero, or ConfigurableRightsPool._pushUnderlying will fail\\n        require(DesynConstants.EXIT_FEE == 0, \\\"ERR_NONZERO_EXIT_FEE\\\");\\n    }\\n\\n    function createPoolHandle(\\n        uint collectPeriod,\\n        uint upperCap,\\n        uint initialSupply\\n    ) external pure {\\n        require(collectPeriod <= DesynConstants.MAX_COLLECT_PERIOD, \\\"ERR_EXCEEDS_FUND_RAISING_PERIOD\\\");\\n        require(upperCap >= initialSupply, \\\"ERR_CAP_BIGGER_THAN_INITSUPPLY\\\");\\n        // collectEndTime = block.timestamp + collectPeriod;\\n        // if (boolA) {\\n        //     period = 1 seconds; // for test only\\n        // } else if (boolB) {\\n        //     period = 365 days;\\n        // } else {\\n        //     period = 730 days;\\n        // }\\n        // closureEndTime = period + collectEndTime;\\n    }\\n\\n    function exitPoolHandle(\\n        uint _endEtfAmount,\\n        uint _endFundAmount,\\n        uint _beginEtfAmount,\\n        uint _beginFundAmount,\\n        uint poolAmountIn,\\n        uint totalEnd\\n    )\\n        external\\n        pure\\n        returns (\\n            uint endEtfAmount,\\n            uint endFundAmount,\\n            uint profitRate\\n        )\\n    {\\n        endEtfAmount = DesynSafeMath.badd(_endEtfAmount, poolAmountIn);\\n        endFundAmount = DesynSafeMath.badd(_endFundAmount, totalEnd);\\n        uint amount1 = DesynSafeMath.bdiv(endFundAmount, endEtfAmount);\\n        uint amount2 = DesynSafeMath.bdiv(_beginFundAmount, _beginEtfAmount);\\n        if (amount1 > amount2) {\\n            profitRate = DesynSafeMath.bdiv(\\n                DesynSafeMath.bmul(DesynSafeMath.bsub(DesynSafeMath.bdiv(endFundAmount, endEtfAmount), DesynSafeMath.bdiv(_beginFundAmount, _beginEtfAmount)), poolAmountIn),\\n                totalEnd\\n            );\\n        }\\n    }\\n\\n    function exitPoolHandleA(\\n        uint _tokenAmountOut,\\n        uint redeemFee,\\n        uint profitRate,\\n        uint perfermanceFee\\n    )\\n        external\\n        pure\\n        returns (\\n            uint tokenAmountOutNew,\\n            uint amount,\\n            uint tokensAmountRedeem\\n        )\\n    {\\n        uint tokenAmountOut = _tokenAmountOut;\\n        tokenAmountOutNew = DesynSafeMath.bmul(tokenAmountOut, redeemFee);\\n        tokensAmountRedeem = tokenAmountOutNew;\\n        tokenAmountOutNew = DesynSafeMath.badd(DesynSafeMath.bmul(DesynSafeMath.bmul(tokenAmountOut, profitRate), perfermanceFee), tokenAmountOutNew);\\n        amount = DesynSafeMath.bsub(tokenAmountOut, tokenAmountOutNew);\\n    }\\n\\n    function exitPoolHandleB(\\n        bool bools,\\n        bool isCompletedCollect,\\n        uint closureEndTime,\\n        uint collectEndTime,\\n        uint _etfAmount,\\n        uint _fundAmount,\\n        uint poolAmountIn\\n    ) external view returns (uint etfAmount, uint fundAmount) {\\n        if (bools) {\\n            bool isCloseEtfCollectEndWithFailure = isCompletedCollect == false && block.timestamp >= collectEndTime;\\n            bool isCloseEtfClosureEnd = block.timestamp >= closureEndTime;\\n            require(isCloseEtfCollectEndWithFailure || isCloseEtfClosureEnd, \\\"ERR_CLOSURE_TIME_NOT_ARRIVED!\\\");\\n        }\\n        fundAmount = _fundAmount;\\n        etfAmount = _etfAmount;\\n        if (bools && block.timestamp <= collectEndTime) {\\n            fundAmount = DesynSafeMath.bmul(DesynSafeMath.bdiv(DesynSafeMath.bsub(_etfAmount, poolAmountIn), _etfAmount), _fundAmount);\\n            etfAmount = DesynSafeMath.bsub(_etfAmount, poolAmountIn);\\n        }\\n    }\\n\\n    function joinPoolHandle(\\n        bool canWhitelistLPs,\\n        bool isList,\\n        bool bools,\\n        uint collectEndTime\\n    ) external view {\\n        require(!canWhitelistLPs || isList, \\\"ERR_NOT_ON_WHITELIST\\\");\\n\\n        if (bools) {\\n            require(block.timestamp <= collectEndTime, \\\"ERR_COLLECT_PERIOD_FINISHED!\\\");\\n        }\\n    }\\n\\n    function rebalanceHandle(\\n        bool bools,\\n        uint collectEndTime,\\n        uint closureEndTime,\\n        bool canChangeWeights,\\n        address tokenA,\\n        address tokenB\\n    ) external view {\\n        if (bools) {\\n            require(block.timestamp > collectEndTime && block.timestamp < closureEndTime, \\\"ERR_NOT_REBALANCE_PERIOD\\\");\\n        }\\n\\n        require(canChangeWeights, \\\"ERR_NOT_CONFIGURABLE_WEIGHTS\\\");\\n        require(tokenA != tokenB, \\\"ERR_TOKENS_SAME\\\");\\n    }\\n\\n    /**\\n     * @notice Join a pool\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param poolAmountOut - number of pool tokens to receive\\n     * @param maxAmountsIn - Max amount of asset tokens to spend\\n     * @return actualAmountsIn - calculated values of the tokens to pull in\\n     */\\n    function joinPool(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        uint poolAmountOut,\\n        uint[] calldata maxAmountsIn\\n    ) external view returns (uint[] memory actualAmountsIn) {\\n        address[] memory tokens = bPool.getCurrentTokens();\\n\\n        require(maxAmountsIn.length == tokens.length, \\\"ERR_AMOUNTS_MISMATCH\\\");\\n\\n        uint poolTotal = self.totalSupply();\\n        // Subtract  1 to ensure any rounding errors favor the pool\\n        uint ratio = DesynSafeMath.bdiv(poolAmountOut, DesynSafeMath.bsub(poolTotal, 1));\\n\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        // We know the length of the array; initialize it, and fill it below\\n        // Cannot do \\\"push\\\" in memory\\n        actualAmountsIn = new uint[](tokens.length);\\n\\n        // This loop contains external calls\\n        // External calls are to math libraries or the underlying pool, so low risk\\n        for (uint i = 0; i < tokens.length; i++) {\\n            address t = tokens[i];\\n            uint bal = bPool.getBalance(t);\\n            // Add 1 to ensure any rounding errors favor the pool\\n            uint tokenAmountIn = DesynSafeMath.bmul(ratio, DesynSafeMath.badd(bal, 1));\\n\\n            require(tokenAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountIn <= maxAmountsIn[i], \\\"ERR_LIMIT_IN\\\");\\n\\n            actualAmountsIn[i] = tokenAmountIn;\\n        }\\n    }\\n\\n    /**\\n     * @notice Exit a pool - redeem pool tokens for underlying assets\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param poolAmountIn - amount of pool tokens to redeem\\n     * @param minAmountsOut - minimum amount of asset tokens to receive\\n     * @return pAiAfterExitFee - final amount in (after accounting for exit fee)\\n     * @return actualAmountsOut - calculated amounts of each token to pull\\n     */\\n    function exitPool(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        uint poolAmountIn,\\n        uint[] calldata minAmountsOut\\n    ) external view returns (uint pAiAfterExitFee, uint[] memory actualAmountsOut) {\\n        address[] memory tokens = bPool.getCurrentTokens();\\n\\n        require(minAmountsOut.length == tokens.length, \\\"ERR_AMOUNTS_MISMATCH\\\");\\n\\n        uint poolTotal = self.totalSupply();\\n\\n        // Calculate exit fee and the final amount in\\n        pAiAfterExitFee = DesynSafeMath.bsub(poolAmountIn, 0);\\n\\n        uint ratio = DesynSafeMath.bdiv(pAiAfterExitFee, DesynSafeMath.badd(poolTotal, 1));\\n\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        actualAmountsOut = new uint[](tokens.length);\\n\\n        // This loop contains external calls\\n        // External calls are to math libraries or the underlying pool, so low risk\\n        for (uint i = 0; i < tokens.length; i++) {\\n            address t = tokens[i];\\n            uint bal = bPool.getBalance(t);\\n            // Subtract 1 to ensure any rounding errors favor the pool\\n            uint tokenAmountOut = DesynSafeMath.bmul(ratio, DesynSafeMath.bsub(bal, 1));\\n\\n            require(tokenAmountOut != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountOut >= minAmountsOut[i], \\\"ERR_LIMIT_OUT\\\");\\n\\n            actualAmountsOut[i] = tokenAmountOut;\\n        }\\n    }\\n\\n    // Internal functions\\n    // Check for zero transfer, and make sure it returns true to returnValue\\n    function verifyTokenComplianceInternal(address token) internal {\\n        bool returnValue = IERC20(token).transfer(msg.sender, 0);\\n        require(returnValue, \\\"ERR_NONCONFORMING_TOKEN\\\");\\n    }\\n\\n    function WhitelistHandle(\\n        bool bool1,\\n        bool bool2,\\n        address adr\\n    ) external pure {\\n        require(bool1, \\\"ERR_CANNOT_WHITELIST_LPS\\\");\\n        require(bool2, \\\"ERR_LP_NOT_WHITELISTED\\\");\\n        require(adr != address(0), \\\"ERR_INVALID_ADDRESS\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x661001d283d11be82aca3a46a41378006d086545f28fc7582b8fd26122f82c14\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/DesynOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract DesynOwnable {\\n    // State variables\\n\\n    address private _owner;\\n    mapping(address => bool) public adminList;\\n    address[] public owners;\\n    uint[] public ownerPercentage;\\n    uint public allOwnerPercentage;\\n    // Event declarations\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    event AddAdmin(address indexed newAdmin, uint indexed amount);\\n    event RemoveAdmin(address indexed oldAdmin, uint indexed amount);\\n\\n    // Modifiers\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"ERR_NOT_CONTROLLER\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(adminList[msg.sender] || msg.sender == _owner, \\\"onlyAdmin\\\");\\n        _;\\n    }\\n\\n    // Function declarations\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() internal {\\n        _owner = msg.sender;\\n    }\\n\\n    function initHandle(address[] memory _owners, uint[] memory _ownerPercentage) external onlyOwner {\\n        require(_owners.length == _ownerPercentage.length, \\\"ownerP\\\");\\n        for (uint i = 0; i < _owners.length; i++) {\\n            allOwnerPercentage += _ownerPercentage[i];\\n            adminList[_owners[i]] = true;\\n        }\\n        owners = _owners;\\n        ownerPercentage = _ownerPercentage;\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n     *         Can only be called by the current owner\\n     * @dev external for gas optimization\\n     * @param newOwner - address of new owner\\n     */\\n    function setController(address newOwner) external onlyOwner {\\n        require(newOwner != address(0), \\\"ERR_ZERO_ADDRESS\\\");\\n\\n        emit OwnershipTransferred(_owner, newOwner);\\n\\n        _owner = newOwner;\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n     *         Can only be called by the current owner\\n     * @dev external for gas optimization\\n     * @param newOwner - address of new owner\\n     */\\n    function setAddAdminList(address newOwner, uint _ownerPercentage) external onlyOwner {\\n        require(!adminList[newOwner], \\\"Address is Owner\\\");\\n\\n        adminList[newOwner] = true;\\n        owners.push(newOwner);\\n        ownerPercentage.push(_ownerPercentage);\\n        allOwnerPercentage += _ownerPercentage;\\n        emit AddAdmin(newOwner, _ownerPercentage);\\n    }\\n\\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\\n    /// @param owner Address of owner.\\n    function removeOwner(address owner) external onlyOwner {\\n        adminList[owner] = false;\\n        uint amount = 0;\\n        for (uint i = 0; i < owners.length; i++) {\\n            if (owners[i] == owner) {\\n                owners[i] = owners[owners.length - 1];\\n                amount = ownerPercentage[i];\\n                ownerPercentage[i] = ownerPercentage[ownerPercentage.length - 1];\\n                break;\\n            }\\n        }\\n        owners.pop();\\n        ownerPercentage.pop();\\n        allOwnerPercentage -= amount;\\n        emit RemoveAdmin(owner, amount);\\n    }\\n\\n    // @dev Returns list of owners.\\n    // @return List of owner addresses.\\n    function getOwners() public view returns (address[] memory) {\\n        return owners;\\n    }\\n\\n    // @dev Returns list of owners.\\n    // @return List of owner addresses.\\n    function getOwnerPercentage() public view returns (uint[] memory) {\\n        return ownerPercentage;\\n    }\\n\\n    /**\\n     * @notice Returns the address of the current owner\\n     * @dev external for gas optimization\\n     * @return address - of the owner (AKA controller)\\n     */\\n    function getController() external view returns (address) {\\n        return _owner;\\n    }\\n}\\n\",\"keccak256\":\"0xd7f4d3132bf1b6abb6d07d9caf29a083ddb5d4319b59b573bf6008f4aef289af\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/DesynReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n/**\\n * @author Desyn Labs (and OpenZeppelin)\\n * @title Protect against reentrant calls (and also selectively protect view functions)\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {_lock_} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `_lock_` guard, functions marked as\\n * `_lock_` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `_lock_` entry\\n * points to them.\\n *\\n * Also adds a _lockview_ modifier, which doesn't create a lock, but fails\\n *   if another _lock_ call is in progress\\n */\\ncontract DesynReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint private constant _NOT_ENTERED = 1;\\n    uint private constant _ENTERED = 2;\\n\\n    uint private _status;\\n\\n    constructor() internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `_lock_` function from another `_lock_`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `_lock_` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier lock() {\\n        // On the first call to _lock_, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ERR_REENTRY\\\");\\n\\n        // Any calls to _lock_ after this point will fail\\n        _status = _ENTERED;\\n        _;\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Also add a modifier that doesn't create a lock, but protects functions that\\n     *      should not be called while a _lock_ function is running\\n     */\\n    modifier viewlock() {\\n        require(_status != _ENTERED, \\\"ERR_REENTRY_VIEW\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xe9fc9af6c8d6ea80fe862d7d82523d3629aaad317181e13428dd98e5c74a33e1\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405262278d006022553480156200001857600080fd5b5060405162006236380380620062368339810160408190526200003b91620001cf565b815182908290620000549060039060208501906200008c565b5080516200006a9060049060208401906200008c565b5050600580546001600160a01b0319163317905550506001600a555062000236565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620000cf57805160ff1916838001178555620000ff565b82800160010185558215620000ff579182015b82811115620000ff578251825591602001919060010190620000e2565b506200010d92915062000111565b5090565b5b808211156200010d576000815560010162000112565b600082601f83011262000139578081fd5b81516001600160401b038082111562000150578283fd5b6040516020601f8401601f191682018101838111838210171562000172578586fd5b806040525081945083825286818588010111156200018f57600080fd5b600092505b83831015620001b3578583018101518284018201529182019162000194565b83831115620001c55760008185840101525b5050505092915050565b60008060408385031215620001e2578182fd5b82516001600160401b0380821115620001f9578384fd5b620002078683870162000128565b935060208501519150808211156200021d578283fd5b506200022c8582860162000128565b9150509250929050565b615ff080620002466000396000f3fe608060405234801561001057600080fd5b50600436106102a35760003560e01c80637228c87b1161016e5780637228c87b146104a757806372ba9acd146104c657806373a9855c146104e757806374983a0d146104fc5780637dc2cd9814610504578063806c6f871461050c5780638259e6a01461051f57806391a806c91461053257806392eefe9b1461054557806395d89b4114610558578063980e8db614610560578063992f6ba51461057a5780639d829c2b1461058d578063a0e67e2b14610595578063a3f4df7e146105aa578063a6c245c4146105b2578063a89ae4ba146105c5578063a9059cbb146105cd578063b02f0b73146105e0578063b61d27f6146105f3578063b64ef17b14610606578063c5318d0f1461060e578063c83a1c2d14610621578063d29986c114610634578063d2fed42e1461063c578063d73dd62314610644578063dd62ed3e14610657578063e2762d4b1461066a578063f3b085721461067d576102a3565b8063025e7c27146102a857806306fdde03146102d15780630892b93d146102e6578063095dcccc146102fb578063095ea7b31461030e5780630a1659401461032e578063173825d91461033657806318160ddd14610349578063220eb7601461035e57806323b872dd1461037157806327304dfd146103845780632e0f2625146103975780633018205f146103ac578063309a042c146103b4578063313ce567146103c957806337c6f4d9146103d15780633befcde8146103e45780633ef14479146103f7578063430bf08a1461040a57806347786d37146104125780634ba57882146104255780635468d6d71461043857806355b190551461044057806355c32a231461045357806356fb3bd614610466578063661884631461046e5780636e49db1c1461048157806370a0823114610494575b600080fd5b6102bb6102b636600461520d565b610685565b6040516102c891906154c9565b60405180910390f35b6102d96106ac565b6040516102c89190615761565b6102f96102f436600461533f565b610742565b005b6102f9610309366004614f33565b6109b7565b61032161031c366004614f33565b6109e4565b6040516102c89190615668565b6102bb610a3d565b6102f9610344366004614cd3565b610a4c565b610351610c2e565b6040516102c89190615d7e565b6102f961036c36600461520d565b610c34565b61032161037f366004614d43565b610c5f565b610321610392366004614cd3565b610d89565b61039f610d9e565b6040516102c89190615e86565b6102bb610da3565b6103bc610db2565b6040516102c89190615655565b61039f610e09565b6103216103df3660046151ee565b610e0e565b6102f96103f2366004615286565b610ea3565b6102f9610405366004615079565b61165d565b6102bb611750565b6102f961042036600461520d565b61175f565b6102f961043336600461520d565b61188d565b6103216118b5565b6102f961044e366004614dc8565b6118c5565b6102f9610461366004614f33565b611cb8565b610321611ce1565b61032161047c366004614f33565b611cf1565b6102f961048f366004614d83565b611dcb565b6103516104a2366004614cd3565b612176565b6104af612191565b6040516102c89b9a99989796959493929190615e38565b6104d96104d4366004614cd3565b6121b5565b6040516102c892919061581e565b6104ef6121ce565b6040516102c8919061580a565b6102bb6121d7565b6103516121ef565b61032161051a366004614cd3565b6121f5565b6102f961052d36600461520d565b61223e565b6104d9610540366004614cd3565b6122db565b6102f9610553366004614cd3565b6122f4565b6102d96123a0565b610568612401565b6040516102c896959493929190615694565b6102f9610588366004614f33565b61243a565b6102bb612563565b61059d61257b565b6040516102c891906155d0565b6102d96125dc565b6102f96105c0366004615113565b612608565b6102bb6127bb565b6103216105db366004614f33565b6127ca565b6102f96105ee36600461523d565b612806565b6102d9610601366004614f5e565b612f6e565b6102bb613132565b61035161061c36600461520d565b613141565b6102f961062f366004614cd3565b61315f565b61035161327b565b6102f9613281565b610321610652366004614f33565b61365b565b610351610665366004614d0b565b6136cf565b6102f9610678366004614cd3565b6136fa565b6102bb61382f565b6007818154811061069257fe5b6000918252602090912001546001600160a01b0316905081565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156107385780601f1061070d57610100808354040283529160200191610738565b820191906000526020600020905b81548152906001019060200180831161071b57829003601f168201915b5050505050905090565b6005546001600160a01b031633146107755760405162461bcd60e51b815260040161076c9061584f565b60405180910390fd5b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516107a792919061574d565b60405180910390a26002600a5414156107d25760405162461bcd60e51b815260040161076c90615a4b565b6002600a55600160275460ff1660018111156107ea57fe5b14156109a357601654604051633e9fc0bd60e01b8152732c01d185d15Ec01f0cD461452DA6F13A8d6cA68a91633e9fc0bd9161082c9187918990600401615d9e565b60006040518083038186803b15801561084457600080fd5b505af4158015610858573d6000803e3d6000fd5b50505050610895601f60008154811061086d57fe5b906000526020600020015461088f83602001518761384790919063ffffffff16565b906138c4565b601655601f80546108c391906000906108aa57fe5b600091825260209091200154825161088f908790613847565b6017556040516108d2906154a7565b60405190819003812060165490913391600080516020615f5b833981519152916108fe9160009161581e565b60405180910390a3604051610912906154b8565b60405190819003812060175490913391600080516020615f5b8339815191529161093e9160009161581e565b60405180910390a360004284018184600281111561095857fe5b141561096757601e915061098f565b600184600281111561097557fe5b1415610987576301e13380915061098f565b6303c2670091505b601285905560138190556014829055016015555b6109ac84613955565b50506001600a555050565b3330146109d65760405162461bcd60e51b815260040161076c9061584f565b6109e08282613ca7565b5050565b3360008181526002602090815260408083206001600160a01b03871680855292528083208590555191929091600080516020615f9b83398151915290610a2b908690615d7e565b60405180910390a35060015b92915050565b600f546001600160a01b031681565b6005546001600160a01b03163314610a765760405162461bcd60e51b815260040161076c9061584f565b6001600160a01b0381166000908152600660205260408120805460ff19169055805b600754811015610b9a57826001600160a01b031660078281548110610ab957fe5b6000918252602090912001546001600160a01b03161415610b9257600780546000198101908110610ae657fe5b600091825260209091200154600780546001600160a01b039092169183908110610b0c57fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060088181548110610b4757fe5b90600052602060002001549150600860016008805490500381548110610b6957fe5b906000526020600020015460088281548110610b8157fe5b600091825260209091200155610b9a565b600101610a98565b506007805480610ba657fe5b600082815260209020810160001990810180546001600160a01b03191690550190556008805480610bd357fe5b600082815260208120820160001990810182905590910190915560098054839003905560405182916001600160a01b038516917f7b0884b4b6bb4e0c1385ad42168fa556c14d4d799c1bf22f081aff3efff6ea0c9190a35050565b60005490565b333014610c535760405162461bcd60e51b815260040161076c9061584f565b610c5c81613cb2565b50565b60006001600160a01b038316610c875760405162461bcd60e51b815260040161076c90615931565b336001600160a01b0385161480610cc157506001600160a01b03841660009081526002602090815260408083203384529091529020548211155b610cdd5760405162461bcd60e51b815260040161076c90615b9a565b610ce8848484613d1a565b6001600160a01b0384166000818152600260209081526040808320338085529252909120549114801590610d1e57506000198114155b15610d7c57610d2d8184613db9565b6001600160a01b03861660008181526002602090815260408083203380855292529182902084905590519092600080516020615f9b83398151915291610d739190615d7e565b60405180910390a35b60019150505b9392505050565b60066020526000908152604090205460ff1681565b601281565b6005546001600160a01b031690565b6060600880548060200260200160405190810160405280929190818152602001828054801561073857602002820191906000526020600020905b815481526020019060010190808311610dec575050505050905090565b601290565b6040516322c1aa2560e11b8152600090735E7E9023618851A308d71B50Fb51c41769f1037590634583544a90610e4b906011908690600401615d09565b60206040518083038186803b158015610e6357600080fd5b505af4158015610e77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9b9190615169565b90505b919050565b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051610ed592919061574d565b60405180910390a26002600a541415610f005760405162461bcd60e51b815260040161076c90615a4b565b6002600a556010546001600160a01b0316610f2d5760405162461bcd60e51b815260040161076c906159b0565b60115433600090815260216020526040902054732c01d185d15Ec01f0cD461452DA6F13A8d6cA68a9163dba4989a9160ff600160201b90920482169116600160275460ff166001811115610f7d57fe5b146012600101546040518563ffffffff1660e01b8152600401610fa394939291906156c4565b60006040518083038186803b158015610fbb57600080fd5b505af4158015610fcf573d6000803e3d6000fd5b505060105460405163a1925f1d60e01b815260609350732c01d185d15Ec01f0cD461452DA6F13A8d6cA68a925063a1925f1d916110209130916001600160a01b0316908a908a908a906004016157ae565b60006040518083038186803b15801561103857600080fd5b505af415801561104c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261107491908101906150d9565b90506060601060009054906101000a90046001600160a01b03166001600160a01b031663cc77828d6040518163ffffffff1660e01b815260040160006040518083038186803b1580156110c657600080fd5b505afa1580156110da573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111029190810190614fe1565b9050606081516001600160401b038111801561111d57600080fd5b50604051908082528060200260200182016040528015611147578160200160208202803683370190505b50601a54909150600090600160275460ff16600181111561116457fe5b14156112f25760245460405163108ad9bd60e21b81526001600160a01b039091169063422b66f49061119c90879089906004016155e3565b602060405180830381600087803b1580156111b657600080fd5b505af11580156111ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ee9190615225565b9150600f60009054906101000a90046001600160a01b03166001600160a01b031663703a9ec96040518163ffffffff1660e01b815260040160206040518083038186803b15801561123e57600080fd5b505afa158015611252573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112769190614cef565b6001600160a01b031663d7256c70873387896040518563ffffffff1660e01b81526004016112a7949392919061551b565b600060405180830381600087803b1580156112c157600080fd5b505af11580156112d5573d6000803e3d6000fd5b5050602454600160b01b900460ff16151591506112f29050575060005b60005b845181101561147457600085828151811061130c57fe5b60200260200101519050600087838151811061132457fe5b60200260200101519050816001600160a01b0316336001600160a01b0316826040516113509190615d7e565b60405180910390a260006113648286613847565b905061137a83336113758585613db9565b613df2565b8415611469576040516323b872dd60e01b81526000906001600160a01b038516906323b872dd906113b3903390309087906004016154dd565b602060405180830381600087803b1580156113cd57600080fd5b505af11580156113e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114059190615169565b602354909150600090611425906001600160a01b0387811691168561403b565b90508180156114315750805b61144d5760405162461bcd60e51b815260040161076c90615bfb565b8289878151811061145a57fe5b60200260200101818152505050505b5050506001016112f5565b5080156114e557602354604051631483d99d60e01b81526001600160a01b0390911690631483d99d906114b290879087908190600090600401615608565b600060405180830381600087803b1580156114cc57600080fd5b505af11580156114e0573d6000803e3d6000fd5b505050505b6114ee896118ac565b6114f8338a6109d6565b811561153f573360009081526025602052604090208054611519908b6141e2565b81553360009081526025602052604090206001015461153890846141e2565b6001909101555b6000600160275460ff16600181111561155457fe5b1480156115d65750601260050154306001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561159b57600080fd5b505afa1580156115af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d39190615225565b10155b80156115ec5750602454600160b01b900460ff16155b9050801561164c576024805460ff60b01b1916600160b01b17905561160f614207565b604051309033907f9c950e0ed06c25739b090d335d2f9a89f69ad1b4526959b521644fca3d99666090611643904290615d7e565b60405180910390a35b50506001600a555050505050505050565b6005546001600160a01b031633146116875760405162461bcd60e51b815260040161076c9061584f565b80518251146116a85760405162461bcd60e51b815260040161076c90615a01565b60005b8251811015611723578181815181106116c057fe5b60200260200101516009600082825401925050819055506001600660008584815181106116e957fe5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790556001016116ab565b508151611737906007906020850190614993565b50805161174b9060089060208401906149f8565b505050565b6023546001600160a01b031681565b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405161179192919061574d565b60405180910390a26002600a5414156117bc5760405162461bcd60e51b815260040161076c90615a4b565b6002600a556010546001600160a01b03166117e95760405162461bcd60e51b815260040161076c906159b0565b6005546001600160a01b031633146118135760405162461bcd60e51b815260040161076c9061584f565b600060275460ff16600181111561182657fe5b146118435760405162461bcd60e51b815260040161076c90615cde565b60405161184f906154a7565b60405190819003812060165490913391600080516020615f5b8339815191529161187b9190869061581e565b60405180910390a36016556001600a55565b3330146118ac5760405162461bcd60e51b815260040161076c9061584f565b610c5c81614476565b602454600160b01b900460ff1681565b732c01d185d15Ec01f0cD461452DA6F13A8d6cA68a6380681cab8360a001518460c001518561010001518660e001518761012001518860600151518960800151518a6040015151602460159054906101000a900460ff166040518a63ffffffff1660e01b815260040161194099989796959493929190615df7565b60006040518083038186803b15801561195857600080fd5b505af415801561196c573d6000803e3d6000fd5b50506024805460ff60a81b1916600160a81b17905550508051601180546020808501516040808701516060880151608089015160a08a01511515600160281b0260ff60281b19911515600160201b0260ff60201b1993151563010000000263ff00000019951515620100000262ff0000199815156101000261ff00199d151560ff19909c169b909b179c909c169990991796909616999099179290921695909517949094169190911792909216939093179091558301518051611a3392601e920190614993565b5060608201518051611a4d91601f916020909101906149f8565b5060808201518051611a6591602091908201906149f8565b506040805161016081018252600080825260208201819052918101829052606081018290526000196080820181905260a0820183905260c08581015190830181905260e0808701519084018190526101008088015190850181905261012080890151908601819052426101409687018190526012889055601388905560148890556015889055601695909555601796909655601892909255601955601a55601b92909255601c919091558201516027805460ff191660018381811115611b2757fe5b0217905550600f80546001600160a01b0319166001600160a01b0385811691909117918290556040805163b18b78dd60e01b81529051929091169163b18b78dd91600480820192602092909190829003018186803b158015611b8857600080fd5b505afa158015611b9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bc09190614cef565b602480546001600160a01b0319166001600160a01b03928316179055600f54604080516311b2515f60e31b815290519190921691638d928af8916004808301926020929190829003018186803b158015611c1957600080fd5b505afa158015611c2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c519190614cef565b602380546001600160a01b0319166001600160a01b0392909216919091179055601954601a54601854601b546040517f3d6667963e842e2b5ff1d4feab2c9b92f17c9003592e2ad229952eeb9a293fd091611cab91615d7e565b60405180910390a4505050565b333014611cd75760405162461bcd60e51b815260040161076c9061584f565b6109e082826144a3565b602454600160a81b900460ff1681565b3360009081526002602090815260408083206001600160a01b0386168452909152812054808310611d45573360009081526002602090815260408083206001600160a01b0388168452909152812055611d74565b611d4f8184613db9565b3360009081526002602090815260408083206001600160a01b03891684529091529020555b3360008181526002602090815260408083206001600160a01b038916808552925291829020549151909291600080516020615f9b83398151915291611db99190615d7e565b60405180910390a35060019392505050565b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051611dfd92919061574d565b60405180910390a26002600a541415611e285760405162461bcd60e51b815260040161076c90615a4b565b6002600a553360009081526006602052604090205460ff1680611e5557506005546001600160a01b031633145b611e715760405162461bcd60e51b815260040161076c9061582c565b6010546001600160a01b0316611e995760405162461bcd60e51b815260040161076c906159b0565b732c01d185d15Ec01f0cD461452DA6F13A8d6cA68a63eab73485600160275460ff166001811115611ec657fe5b60135460155460115460405160e087901b6001600160e01b0319168152611f039594909414936201000090910460ff16908b908b90600401615715565b60006040518083038186803b158015611f1b57600080fd5b505af4158015611f2f573d6000803e3d6000fd5b50505050611f3c836144ae565b60235460405163607e58b360e11b81526000916001600160a01b03169063c0fcb16690611f6d9030906004016154c9565b60206040518083038186803b158015611f8557600080fd5b505afa158015611f99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fbd9190615169565b905080156120285760235460405163edb12adf60e01b81526001600160a01b039091169063edb12adf90611ff59030906004016154c9565b600060405180830381600087803b15801561200f57600080fd5b505af1158015612023573d6000803e3d6000fd5b505050505b601054604051630bcded8960e21b81526001600160a01b0390911690632f37b624906120589087906004016154c9565b60206040518083038186803b15801561207057600080fd5b505afa158015612084573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120a89190615169565b6120ec576010546000906120cb906001600160a01b03878116911660001961403b565b9050806120ea5760405162461bcd60e51b815260040161076c90615bfb565b505b6010546040516350884c9160e01b8152732c01d185d15Ec01f0cD461452DA6F13A8d6cA68a916350884c919161213a9130916001600160a01b03909116908a908a908a908a90600401615774565b60006040518083038186803b15801561215257600080fd5b505af4158015612166573d6000803e3d6000fd5b50506001600a5550505050505050565b6001600160a01b031660009081526001602052604090205490565b601254601354601454601554601654601754601854601954601a54601b54601c548b565b6026602052600090815260409020805460019091015482565b60275460ff1681565b735E7E9023618851A308d71B50Fb51c41769f1037590565b60225481565b601154600090600160201b900460ff161561222c57506001600160a01b03811660009081526021602052604090205460ff16610e9e565b506001600160a01b0381161515610e9e565b6005546001600160a01b031633146122685760405162461bcd60e51b815260040161076c9061584f565b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405161229a92919061574d565b60405180910390a26002600a5414156122c55760405162461bcd60e51b815260040161076c90615a4b565b6002600a556122d381613955565b506001600a55565b6025602052600090815260409020805460019091015482565b6005546001600160a01b0316331461231e5760405162461bcd60e51b815260040161076c9061584f565b6001600160a01b0381166123445760405162461bcd60e51b815260040161076c90615931565b6005546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b0319166001600160a01b0392909216919091179055565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156107385780601f1061070d57610100808354040283529160200191610738565b60115460ff80821691610100810482169162010000820481169163010000008104821691600160201b8204811691600160281b90041686565b6005546001600160a01b031633146124645760405162461bcd60e51b815260040161076c9061584f565b6001600160a01b03821660009081526006602052604090205460ff161561249d5760405162461bcd60e51b815260040161076c906158d2565b6001600160a01b038216600081815260066020526040808220805460ff19166001908117909155600780548083019091557fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880180546001600160a01b0319168517905560088054918201815583527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee3018490556009805485019055518392917fbd5dcf0b25226117c4a68a0129ffdd4b0541ef5e482ad7de9a96ccb6d6a8ebde91a35050565b732c01d185d15Ec01f0cD461452DA6F13A8d6cA68a90565b6060600780548060200260200160405190810160405280929190818152602001828054801561073857602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116125b5575050505050905090565b6040518060400160405280601081526020016f11195cde5b8814db585c9d08141bdbdb60821b81525081565b6005546001600160a01b031633146126325760405162461bcd60e51b815260040161076c9061584f565b601154600160281b900460ff1680156126555750602454600160a01b900460ff16155b6126715760405162461bcd60e51b815260040161076c9061587b565b80518251146126925760405162461bcd60e51b815260040161076c90615bca565b60005b81518110156127a357600f5483516000916001600160a01b031690638f49f44d908690859081106126c257fe5b60200260200101518585815181106126d657fe5b60200260200101516040518363ffffffff1660e01b81526004016126fb929190615d87565b60206040518083038186803b15801561271357600080fd5b505afa158015612727573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061274b9190615169565b90508061276a5760405162461bcd60e51b815260040161076c9061595b565b61279a84838151811061277957fe5b602002602001015184848151811061278d57fe5b6020026020010151614581565b50600101612695565b50506024805460ff60a01b1916600160a01b17905550565b6024546001600160a01b031681565b60006001600160a01b0383166127f25760405162461bcd60e51b815260040161076c90615931565b6127fd338484613d1a565b50600192915050565b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405161283892919061574d565b60405180910390a26002600a5414156128635760405162461bcd60e51b815260040161076c90615a4b565b6002600a556010546001600160a01b03166128905760405162461bcd60e51b815260040161076c906159b0565b732c01d185d15Ec01f0cD461452DA6F13A8d6cA68a633468facb600160275460ff1660018111156128bd57fe5b60245460155460135433600090815260256020526040908190208054600190910154915160e089901b6001600160e01b0319168152612914979690961495600160b01b90950460ff16949091908c906004016156e3565b604080518083038186803b15801561292b57600080fd5b505af415801561293f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612963919061531c565b33600090815260256020526040808220600181019390935592909155601054915163151c70f960e21b81529091606091732c01d185d15Ec01f0cD461452DA6F13A8d6cA68a91635471c3e4916129cf9130916001600160a01b03909116908a908a908a906004016157ae565b60006040518083038186803b1580156129e757600080fd5b505af41580156129fb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612a2391908101906152e2565b91509150612a313386611cd7565b612a3a82610c53565b6010546040805163cc77828d60e01b815290516060926001600160a01b03169163cc77828d916004808301926000929190829003018186803b158015612a7f57600080fd5b505afa158015612a93573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612abb9190810190614fe1565b9050606081516001600160401b0381118015612ad657600080fd5b50604051908082528060200260200182016040528015612b00578160200160208202803683370190505b509050600080600160275460ff166001811115612b1957fe5b148015612b2857506015544210155b15612bb45760245460405163108ad9bd60e21b81526001600160a01b039091169063422b66f490612b5f90879089906004016155e3565b602060405180830381600087803b158015612b7957600080fd5b505af1158015612b8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bb19190615225565b91505b601954600160275460ff166001811115612bca57fe5b1415612bfe57602454600090600160b01b900460ff16158015612bef57506013544210155b90508015612bfc57600091505b505b8215612cd957336000908152602660209081526040808320805460019182015460259094529382902080549101549151633796ed7f60e21b81528e94732c01d185d15Ec01f0cD461452DA6F13A8d6cA68a9463de5bb5fc94612c6b94929391929188908c90600401615dcf565b60606040518083038186803b158015612c8357600080fd5b505af4158015612c97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cbb91906153ac565b33600090815260266020526040902060018101929092559190559250505b606085516001600160401b0381118015612cf257600080fd5b50604051908082528060200260200182016040528015612d1c578160200160208202803683370190505b50905060005b8651811015612ed2576000878281518110612d3957fe5b602002602001015190506000806000732c01d185d15Ec01f0cD461452DA6F13A8d6cA68a63c0dcb71f8d8781518110612d6e57fe5b6020026020010151898b6012600901546040518563ffffffff1660e01b8152600401612d9d9493929190615db4565b60606040518083038186803b158015612db557600080fd5b505af4158015612dc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ded91906153ac565b92509250925080868681518110612e0057fe5b602002602001018181525050836001600160a01b0316336001600160a01b031683604051612e2e9190615d7e565b60405180910390a2612e41843384614688565b86151580612e5b5750600088118015612e5b5750601b5415155b15612ec257612e6b843085614688565b602354600090612e88906001600160a01b0387811691168661403b565b905080612ea75760405162461bcd60e51b815260040161076c90615ab3565b838b8781518110612eb457fe5b602002602001018181525050505b505060019092019150612d229050565b5081151580612eed5750600083118015612eed5750601b5415155b15612f5c57602354604051631483d99d60e01b81526001600160a01b0390911690631483d99d90612f2990899089908690600190600401615608565b600060405180830381600087803b158015612f4357600080fd5b505af1158015612f57573d6000803e3d6000fd5b505050505b50506001600a55505050505050505050565b6060336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051612fa292919061574d565b60405180910390a26002600a541415612fcd5760405162461bcd60e51b815260040161076c90615a4b565b6002600a556010546001600160a01b0316612ffa5760405162461bcd60e51b815260040161076c906159b0565b600f546040516338f0d24560e01b81526001600160a01b03909116906338f0d2459061302c9030903390600401615501565b60206040518083038186803b15801561304457600080fd5b505afa158015613058573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061307c9190615169565b6130985760405162461bcd60e51b815260040161076c906158a2565b601054604051635b0e93fb60e11b81526001600160a01b039091169063b61d27f6906130ce90889088908890889060040161557d565b600060405180830381600087803b1580156130e857600080fd5b505af11580156130fc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526131249190810190615185565b6001600a5595945050505050565b6010546001600160a01b031681565b6008818154811061314e57fe5b600091825260209091200154905081565b6005546001600160a01b031633146131895760405162461bcd60e51b815260040161076c9061584f565b6002600a5414156131ac5760405162461bcd60e51b815260040161076c90615a4b565b6002600a556040513390600080356001600160e01b031916916131d19190369061574d565b60405180910390a2601154604051630d3aa47160e41b8152732c01d185d15Ec01f0cD461452DA6F13A8d6cA68a9163d3aa47109161322191600160201b900460ff16906001908690600401615673565b60006040518083038186803b15801561323957600080fd5b505af415801561324d573d6000803e3d6000fd5b505050506001600160a01b03166000908152602160205260409020805460ff19166001908117909155600a55565b60095481565b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516132b392919061574d565b60405180910390a26002600a5414156132de5760405162461bcd60e51b815260040161076c90615a4b565b6002600a55600f546040805163911fb03560e01b8152905133926001600160a01b03169163911fb035916004808301926020929190829003018186803b15801561332757600080fd5b505afa15801561333b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061335f9190614cef565b6001600160a01b0316146133855760405162461bcd60e51b815260040161076c9061598e565b6010546001600160a01b03166133ad5760405162461bcd60e51b815260040161076c906159b0565b60006133be426012600a0154613db9565b90506022548110156133e25760405162461bcd60e51b815260040161076c90615a70565b600060225482816133ef57fe5b0490506060601060009054906101000a90046001600160a01b03166001600160a01b031663cc77828d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561344257600080fd5b505afa158015613456573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261347e9190810190614fe1565b9050606081516001600160401b038111801561349957600080fd5b506040519080825280602002602001820160405280156134c3578160200160208202803683370190505b50905060005b82518110156135db5760008382815181106134e057fe5b602090810291909101015160105460405163f8b2cb4f60e01b81529192506000916001600160a01b039091169063f8b2cb4f906135219085906004016154c9565b60206040518083038186803b15801561353957600080fd5b505afa15801561354d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135719190615225565b9050600061359082600c89601260060154028161358a57fe5b04613847565b905061359d833083614688565b6023546135b7906001600160a01b0385811691168361403b565b50808585815181106135c557fe5b60209081029190910101525050506001016134c9565b50602354604051630bac7b8160e01b81526001600160a01b0390911690630bac7b819061360e90859085906004016155e3565b600060405180830381600087803b15801561362857600080fd5b505af115801561363c573d6000803e3d6000fd5b5050602254601c80549690910290950190945550506001600a55505050565b3360009081526002602090815260408083206001600160a01b038616845290915281205461368990836141e2565b3360008181526002602090815260408083206001600160a01b03891680855292529182902084905590519092600080516020615f9b83398151915291610a2b9190615d7e565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b6005546001600160a01b031633146137245760405162461bcd60e51b815260040161076c9061584f565b6002600a5414156137475760405162461bcd60e51b815260040161076c90615a4b565b6002600a556040513390600080356001600160e01b0319169161376c9190369061574d565b60405180910390a26011546001600160a01b03821660009081526021602052604090819020549051630d3aa47160e41b8152732c01d185d15Ec01f0cD461452DA6F13A8d6cA68a9263d3aa4710926137d992600160201b90920460ff908116929116908690600401615673565b60006040518083038186803b1580156137f157600080fd5b505af4158015613805573d6000803e3d6000fd5b505050506001600160a01b03166000908152602160205260409020805460ff191690556001600a55565b7317C211F63833B7e336FFE94F62187E43004Fb16c90565b60008261385657506000610a37565b8282028284828161386357fe5b04146138815760405162461bcd60e51b815260040161076c90615ae4565b6706f05b59d3b200008101818110156138ac5760405162461bcd60e51b815260040161076c90615ae4565b6000670de0b6b3a7640000825b049695505050505050565b6000816138e35760405162461bcd60e51b815260040161076c90615b45565b826138f057506000610a37565b670de0b6b3a76400008381029084828161390657fe5b04146139245760405162461bcd60e51b815260040161076c90615a21565b6002830481018181101561394a5760405162461bcd60e51b815260040161076c90615a21565b60008482816138b957fe5b6010546001600160a01b03161561397e5760405162461bcd60e51b815260040161076c906159d9565b613987816118ac565b61399133826109d6565b600f60009054906101000a90046001600160a01b03166001600160a01b03166391cefde46040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156139e157600080fd5b505af11580156139f5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a199190614cef565b601080546001600160a01b0319166001600160a01b03928316179081905560405163d03f2a0f60e01b8152732c01d185d15Ec01f0cD461452DA6F13A8d6cA68a9263d03f2a0f92613a71929116908590600401615564565b60006040518083038186803b158015613a8957600080fd5b505af4158015613a9d573d6000803e3d6000fd5b5050505060005b601e54811015613c6b576000601e8281548110613abd57fe5b6000918252602082200154601f80546001600160a01b0390921693509084908110613ae457fe5b90600052602060002001549050600060208481548110613b0057fe5b90600052602060002001549050613b16836144ae565b6040516323b872dd60e01b81526000906001600160a01b038516906323b872dd90613b49903390309088906004016154dd565b602060405180830381600087803b158015613b6357600080fd5b505af1158015613b77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b9b9190615169565b905080613bba5760405162461bcd60e51b815260040161076c90615bfb565b601054613bd6906001600160a01b03868116911660001961403b565b905080613bf55760405162461bcd60e51b815260040161076c90615bfb565b601054604051631c9c3ca760e31b81526001600160a01b039091169063e4e1e53890613c29908790879087906004016155af565b600060405180830381600087803b158015613c4357600080fd5b505af1158015613c57573d6000803e3d6000fd5b505060019096019550613aa4945050505050565b505b601e5415610c5c57601e805480613c8057fe5b600082815260209020810160001990810180546001600160a01b0319169055019055613c6d565b6109e0308383613d1a565b30600090815260016020526040902054613ccc9082613db9565b3060009081526001602052604081209190915554613cea9082613db9565b60009081556040513090600080516020615f7b83398151915290613d0f908590615d7e565b60405180910390a350565b6001600160a01b038316600090815260016020526040902054613d3d9082613db9565b6001600160a01b038085166000908152600160205260408082209390935590841681522054613d6c90826141e2565b6001600160a01b038084166000818152600160205260409081902093909355915190851690600080516020615f7b83398151915290613dac908590615d7e565b60405180910390a3505050565b6000806000613dc885856148c9565b915091508015613dea5760405162461bcd60e51b815260040161076c90615c89565b509392505050565b6010546001600160a01b0316613e1a5760405162461bcd60e51b815260040161076c906159b0565b60105460405163f8b2cb4f60e01b81526000916001600160a01b03169063f8b2cb4f90613e4b9087906004016154c9565b60206040518083038186803b158015613e6357600080fd5b505afa158015613e77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e9b9190615225565b601054604051634a46c67360e11b81529192506000916001600160a01b039091169063948d8ce690613ed19088906004016154c9565b60206040518083038186803b158015613ee957600080fd5b505afa158015613efd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f219190615225565b90506000856001600160a01b03166323b872dd8630876040518463ffffffff1660e01b8152600401613f55939291906154dd565b602060405180830381600087803b158015613f6f57600080fd5b505af1158015613f83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fa79190615169565b905080613fc65760405162461bcd60e51b815260040161076c90615bfb565b6010546001600160a01b0316633fdddaa287613fe286886141e2565b856040518463ffffffff1660e01b8152600401614001939291906155af565b600060405180830381600087803b15801561401b57600080fd5b505af115801561402f573d6000803e3d6000fd5b50505050505050505050565b600080846001600160a01b031663dd62ed3e30866040518363ffffffff1660e01b815260040161406c929190615501565b60206040518083038186803b15801561408457600080fd5b505afa158015614098573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140bc9190615225565b9050828114156140d0576001915050610d82565b80156141595760405163095ea7b360e01b81526001600160a01b0386169063095ea7b390614105908790600090600401615564565b602060405180830381600087803b15801561411f57600080fd5b505af1158015614133573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141579190615169565b505b60405163095ea7b360e01b81526001600160a01b0386169063095ea7b3906141879087908790600401615564565b602060405180830381600087803b1580156141a157600080fd5b505af11580156141b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141d99190615169565b95945050505050565b600082820183811015610d825760405162461bcd60e51b815260040161076c90615cb4565b601a5415614474576010546040805163cc77828d60e01b815290516060926001600160a01b03169163cc77828d916004808301926000929190829003018186803b15801561425457600080fd5b505afa158015614268573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526142909190810190614fe1565b9050606081516001600160401b03811180156142ab57600080fd5b506040519080825280602002602001820160405280156142d5578160200160208202803683370190505b50905060005b82518110156144075760008382815181106142f257fe5b602090810291909101015160105460405163f8b2cb4f60e01b81529192506000916001600160a01b039091169063f8b2cb4f906143339085906004016154c9565b60206040518083038186803b15801561434b57600080fd5b505afa15801561435f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143839190615225565b9050600061439682601260080154613847565b90506143a3833083614688565b808585815181106143b057fe5b60209081029190910101526023546000906143d8906001600160a01b0386811691168461403b565b9050806143f75760405162461bcd60e51b815260040161076c90615bfb565b5050600190920191506142db9050565b50602354604051631483d99d60e01b81526001600160a01b0390911690631483d99d9061443f90859085908190600090600401615608565b600060405180830381600087803b15801561445957600080fd5b505af115801561446d573d6000803e3d6000fd5b5050505050505b565b61447f816148ee565b6016546000541115610c5c5760405162461bcd60e51b815260040161076c90615b6b565b6109e0823083613d1a565b600f5460405163db7ca46b60e01b81526001600160a01b039091169063db7ca46b906144de9084906004016154c9565b60206040518083038186803b1580156144f657600080fd5b505afa15801561450a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061452e9190615169565b61454a5760405162461bcd60e51b815260040161076c90615b0e565b602454600160a01b900460ff1615610c5c576145658161494c565b610c5c5760405162461bcd60e51b815260040161076c906158fc565b6001600160a01b0381166145a75760405162461bcd60e51b815260040161076c90615c24565b6145b08161494c565b156145cd5760405162461bcd60e51b815260040161076c90615c57565b6000828152600e602090815260408083206001600160a01b038516845282528083208054600160ff199182168117909255600d909352922080549091169091179055600b5460ff1661462757600b805460ff191660011790555b600c8054600101905561463861496a565b336001600160a01b031682306001600160a01b03167f5ab6a0d7af8e86f78c34acea4f8aff1be027227ce1bc29e03f57f39b788f4b048460405161467c91906154c9565b60405180910390a45050565b6010546001600160a01b03166146b05760405162461bcd60e51b815260040161076c906159b0565b60105460405163f8b2cb4f60e01b81526000916001600160a01b03169063f8b2cb4f906146e19087906004016154c9565b60206040518083038186803b1580156146f957600080fd5b505afa15801561470d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147319190615225565b601054604051634a46c67360e11b81529192506000916001600160a01b039091169063948d8ce6906147679088906004016154c9565b60206040518083038186803b15801561477f57600080fd5b505afa158015614793573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147b79190615225565b6010549091506001600160a01b0316633fdddaa2866147d68587613db9565b846040518463ffffffff1660e01b81526004016147f5939291906155af565b600060405180830381600087803b15801561480f57600080fd5b505af1158015614823573d6000803e3d6000fd5b505060405163a9059cbb60e01b8152600092506001600160a01b038816915063a9059cbb906148589088908890600401615564565b602060405180830381600087803b15801561487257600080fd5b505af1158015614886573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906148aa9190615169565b90508061446d5760405162461bcd60e51b815260040161076c90615bfb565b6000808383116148df57505080820360006148e7565b505081810360015b9250929050565b3060009081526001602052604090205461490890826141e2565b306000908152600160205260408120919091555461492690826141e2565b6000908155604051309190600080516020615f7b83398151915290613d0f908590615d7e565b6001600160a01b03166000908152600d602052604090205460ff1690565b600c541561498757600b805460ff19166001908117909155610c5c565b600b805460ff19169055565b8280548282559060005260206000209081019282156149e8579160200282015b828111156149e857825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906149b3565b506149f4929150614a3f565b5090565b828054828255906000526020600020908101928215614a33579160200282015b82811115614a33578251825591602001919060010190614a18565b506149f4929150614a5e565b5b808211156149f45780546001600160a01b0319168155600101614a40565b5b808211156149f45760008155600101614a5f565b600082601f830112614a83578081fd5b8135614a96614a9182615eba565b615e94565b818152915060208083019084810181840286018201871015614ab757600080fd5b60005b84811015614adf578135614acd81615f37565b84529282019290820190600101614aba565b505050505092915050565b60008083601f840112614afb578182fd5b5081356001600160401b03811115614b11578182fd5b60208301915083602080830285010111156148e757600080fd5b600082601f830112614b3b578081fd5b8135614b49614a9182615eba565b818152915060208083019084810181840286018201871015614b6a57600080fd5b60005b84811015614adf57813584529282019290820190600101614b6d565b600082601f830112614b99578081fd5b8151614ba7614a9182615eba565b818152915060208083019084810181840286018201871015614bc857600080fd5b60005b84811015614adf57815184529282019290820190600101614bcb565b803560028110610a3757600080fd5b600082601f830112614c06578081fd5b8135614c14614a9182615ed9565b9150808252836020828501011115614c2b57600080fd5b8060208401602084013760009082016020015292915050565b600060c08284031215614c55578081fd5b614c5f60c0615e94565b90508135614c6c81615f4c565b81526020820135614c7c81615f4c565b60208201526040820135614c8f81615f4c565b60408201526060820135614ca281615f4c565b60608201526080820135614cb581615f4c565b608082015260a0820135614cc881615f4c565b60a082015292915050565b600060208284031215614ce4578081fd5b8135610d8281615f37565b600060208284031215614d00578081fd5b8151610d8281615f37565b60008060408385031215614d1d578081fd5b8235614d2881615f37565b91506020830135614d3881615f37565b809150509250929050565b600080600060608486031215614d57578081fd5b8335614d6281615f37565b92506020840135614d7281615f37565b929592945050506040919091013590565b60008060008060808587031215614d98578182fd5b8435614da381615f37565b93506020850135614db381615f37565b93969395505050506040820135916060013590565b6000806000610100808587031215614dde578182fd5b8435614de981615f37565b935060208501356001600160401b0380821115614e04578384fd5b818701915061016080838a031215614e1a578485fd5b614e2381615e94565b9050823582811115614e33578586fd5b614e3f8a828601614bf6565b825250602083013582811115614e53578586fd5b614e5f8a828601614bf6565b602083015250604083013582811115614e76578586fd5b614e828a828601614a73565b604083015250606083013582811115614e99578586fd5b614ea58a828601614b2b565b606083015250608083013582811115614ebc578586fd5b614ec88a828601614b2b565b60808301525060a083013560a082015260c083013560c082015260e083013560e08201528383013584820152610120935083830135848201526101409350614f1289858501614be7565b8482015280955050505050614f2a8560408601614c44565b90509250925092565b60008060408385031215614f45578182fd5b8235614f5081615f37565b946020939093013593505050565b60008060008060608587031215614f73578182fd5b8435614f7e81615f37565b93506020850135925060408501356001600160401b0380821115614fa0578384fd5b818701915087601f830112614fb3578384fd5b813581811115614fc1578485fd5b886020828501011115614fd2578485fd5b95989497505060200194505050565b60006020808385031215614ff3578182fd5b82516001600160401b03811115615008578283fd5b8301601f81018513615018578283fd5b8051615026614a9182615eba565b8181528381019083850185840285018601891015615042578687fd5b8694505b8385101561506d57805161505981615f37565b835260019490940193918501918501615046565b50979650505050505050565b6000806040838503121561508b578182fd5b82356001600160401b03808211156150a1578384fd5b6150ad86838701614a73565b935060208501359150808211156150c2578283fd5b506150cf85828601614b2b565b9150509250929050565b6000602082840312156150ea578081fd5b81516001600160401b038111156150ff578182fd5b61510b84828501614b89565b949350505050565b60008060408385031215615125578182fd5b82356001600160401b038082111561513b578384fd5b61514786838701614b2b565b9350602085013591508082111561515c578283fd5b506150cf85828601614a73565b60006020828403121561517a578081fd5b8151610d8281615f4c565b600060208284031215615196578081fd5b81516001600160401b038111156151ab578182fd5b8201601f810184136151bb578182fd5b80516151c9614a9182615ed9565b8181528560208385010111156151dd578384fd5b6141d9826020830160208601615f07565b6000602082840312156151ff578081fd5b813560068110610d82578182fd5b60006020828403121561521e578081fd5b5035919050565b600060208284031215615236578081fd5b5051919050565b600080600060408486031215615251578081fd5b8335925060208401356001600160401b0381111561526d578182fd5b61527986828701614aea565b9497909650939450505050565b6000806000806060858703121561529b578182fd5b8435935060208501356001600160401b038111156152b7578283fd5b6152c387828801614aea565b90945092505060408501356152d781615f37565b939692955090935050565b600080604083850312156152f4578182fd5b8251915060208301516001600160401b03811115615310578182fd5b6150cf85828601614b89565b6000806040838503121561532e578182fd5b505080516020909101519092909150565b60008060008084860360a0811215615355578283fd5b8535945060208601359350604086013560038110615371578384fd5b92506040605f1982011215615384578182fd5b5061538f6040615e94565b606086013581526080909501356020860152509194909350909190565b6000806000606084860312156153c0578081fd5b8351925060208401519150604084015190509250925092565b6000815180845260208085019450808401835b838110156154115781516001600160a01b0316875295820195908201906001016153ec565b509495945050505050565b6000815180845260208085019450808401835b838110156154115781518752958201959082019060010161542f565b15159052565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008151808452615493816020860160208601615f07565b601f01601f19169290920160200192915050565b642aa82822a960d91b815260050190565b64232627a7a960d91b815260050190565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03858116825284166020820152608060408201819052600090615547908301856153d9565b8281036060840152615559818561541c565b979650505050505050565b6001600160a01b03929092168252602082015260400190565b600060018060a01b0386168252846020830152606060408301526155a5606083018486615451565b9695505050505050565b6001600160a01b039390931683526020830191909152604082015260600190565b600060208252610d8260208301846153d9565b6000604082526155f660408301856153d9565b82810360208401526141d9818561541c565b60006080825261561b60808301876153d9565b828103602084015261562d818761541c565b90508281036040840152615641818661541c565b915050821515606083015295945050505050565b600060208252610d82602083018461541c565b901515815260200190565b921515835290151560208301526001600160a01b0316604082015260600190565b9515158652931515602086015291151560408501521515606084015215156080830152151560a082015260c00190565b9315158452911515602084015215156040830152606082015260800190565b9615158752941515602087015260408601939093526060850191909152608084015260a083015260c082015260e00190565b951515865260208601949094526040850192909252151560608401526001600160a01b0390811660808401521660a082015260c00190565b60006020825261510b602083018486615451565b600060208252610d82602083018461547b565b6001600160a01b0396871681529486166020860152928516604085015293166060830152608082019290925260a081019190915260c00190565b6001600160a01b0386811682528516602082015260408101849052608060608201819052810182905260006001600160fb1b038311156157ec578081fd5b60208302808560a08501379190910160a00190815295945050505050565b602081016002831061581857fe5b91905290565b918252602082015260400190565b60208082526009908201526837b7363ca0b236b4b760b91b604082015260600190565b60208082526012908201527122a9292fa727aa2fa1a7a72a2927a62622a960711b604082015260600190565b6020808252600d908201526c4552525f4e4f5f52494748545360981b604082015260600190565b60208082526016908201527526a7a22aa6229024a9902727aa102922a3a4a9aa22a960511b604082015260600190565b60208082526010908201526f20b2323932b9b99034b99027bbb732b960811b604082015260600190565b6020808252601b908201527a11549497d393d517d5d212551157d513d2d15397d25397d413d3d3602a1b604082015260600190565b60208082526010908201526f4552525f5a45524f5f4144445245535360801b604082015260600190565b602080825260199082015278544f4b454e5f4d5553545f494e5f57484954455f4c4953545360381b604082015260600190565b60208082526008908201526727bbb730b13632a760c11b604082015260600190565b6020808252600f908201526e11549497d393d517d0d49150551151608a1b604082015260600190565b6020808252600e908201526d11549497d254d7d0d4915055115160921b604082015260600190565b60208082526006908201526506f776e6572560d41b604082015260600190565b60208082526010908201526f11549497d1125597d25395115493905360821b604082015260600190565b6020808252600b908201526a4552525f5245454e54525960a81b604082015260600190565b60208082526023908201527f54686520636f6c6c656374696f6e206379636c65206973206e6f7420726561636040820152621a195960ea1b606082015260800190565b6020808252601790820152764552525f45524332305f415050524f56455f46414c534560481b604082015260600190565b60208082526010908201526f4552525f4d554c5f4f564552464c4f5760801b604082015260600190565b6020808252601e908201527f4552525f4e4f545f57484954455f544f4b454e5f494e5f464143544f52590000604082015260600190565b6020808252600c908201526b4552525f4449565f5a45524f60a01b604082015260600190565b60208082526015908201527411549497d0d05417d31253525517d4915050d21151605a1b604082015260600190565b60208082526016908201527522a9292fa821aa27a5a2a72fa120a22fa1a0a62622a960511b604082015260600190565b60208082526017908201527608aa4a4bea69ea4a8bea89e968a9cbe9a92a69a82a8869604b1b604082015260600190565b6020808252600f908201526e4552525f45524332305f46414c534560881b604082015260600190565b6020808252601990820152784552525f494e56414c49445f544f4b454e5f4144445245535360381b604082015260600190565b6020808252601890820152774552525f4841535f4245454e5f41444445445f574849544560401b604082015260600190565b6020808252601190820152704552525f5355425f554e444552464c4f5760781b604082015260600190565b60208082526010908201526f4552525f4144445f4f564552464c4f5760801b604082015260600190565b60208082526011908201527022a9292fa6aaa9aa2fa7a822a72fa2aa2360791b604082015260600190565b600060e082019050835460ff80821615158452808260081c1615156020850152808260101c1615156040850152808260181c1615156060850152615d5560808501828460201c1661544b565b615d6760a08501828460281c1661544b565b5050615d7283615efc565b60c08301529392505050565b90815260200190565b9182526001600160a01b0316602082015260400190565b9283526020830191909152604082015260600190565b93845260208401929092526040830152606082015260800190565b958652602086019490945260408501929092526060840152608083015260a082015260c00190565b988952602089019790975260408801959095526060870193909352608086019190915260a085015260c084015260e083015215156101008201526101200190565b9a8b5260208b019990995260408a01979097526060890195909552608088019390935260a087019190915260c086015260e08501526101008401526101208301526101408201526101600190565b60ff91909116815260200190565b6040518181016001600160401b0381118282101715615eb257600080fd5b604052919050565b60006001600160401b03821115615ecf578081fd5b5060209081020190565b60006001600160401b03821115615eee578081fd5b50601f01601f191660200190565b8060068110610e9e57fe5b60005b83811015615f22578181015183820152602001615f0a565b83811115615f31576000848401525b50505050565b6001600160a01b0381168114610c5c57600080fd5b8015158114610c5c57600080fdfe345c44e0d6869c4baccff8ecb8279bca00e6436947fce2da5beffcc9e5cabefbddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925a2646970667358221220bdbc044d2e885e839b294db59ea23440ac79ba919319358a8b6b4119c1fd004a64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102a35760003560e01c80637228c87b1161016e5780637228c87b146104a757806372ba9acd146104c657806373a9855c146104e757806374983a0d146104fc5780637dc2cd9814610504578063806c6f871461050c5780638259e6a01461051f57806391a806c91461053257806392eefe9b1461054557806395d89b4114610558578063980e8db614610560578063992f6ba51461057a5780639d829c2b1461058d578063a0e67e2b14610595578063a3f4df7e146105aa578063a6c245c4146105b2578063a89ae4ba146105c5578063a9059cbb146105cd578063b02f0b73146105e0578063b61d27f6146105f3578063b64ef17b14610606578063c5318d0f1461060e578063c83a1c2d14610621578063d29986c114610634578063d2fed42e1461063c578063d73dd62314610644578063dd62ed3e14610657578063e2762d4b1461066a578063f3b085721461067d576102a3565b8063025e7c27146102a857806306fdde03146102d15780630892b93d146102e6578063095dcccc146102fb578063095ea7b31461030e5780630a1659401461032e578063173825d91461033657806318160ddd14610349578063220eb7601461035e57806323b872dd1461037157806327304dfd146103845780632e0f2625146103975780633018205f146103ac578063309a042c146103b4578063313ce567146103c957806337c6f4d9146103d15780633befcde8146103e45780633ef14479146103f7578063430bf08a1461040a57806347786d37146104125780634ba57882146104255780635468d6d71461043857806355b190551461044057806355c32a231461045357806356fb3bd614610466578063661884631461046e5780636e49db1c1461048157806370a0823114610494575b600080fd5b6102bb6102b636600461520d565b610685565b6040516102c891906154c9565b60405180910390f35b6102d96106ac565b6040516102c89190615761565b6102f96102f436600461533f565b610742565b005b6102f9610309366004614f33565b6109b7565b61032161031c366004614f33565b6109e4565b6040516102c89190615668565b6102bb610a3d565b6102f9610344366004614cd3565b610a4c565b610351610c2e565b6040516102c89190615d7e565b6102f961036c36600461520d565b610c34565b61032161037f366004614d43565b610c5f565b610321610392366004614cd3565b610d89565b61039f610d9e565b6040516102c89190615e86565b6102bb610da3565b6103bc610db2565b6040516102c89190615655565b61039f610e09565b6103216103df3660046151ee565b610e0e565b6102f96103f2366004615286565b610ea3565b6102f9610405366004615079565b61165d565b6102bb611750565b6102f961042036600461520d565b61175f565b6102f961043336600461520d565b61188d565b6103216118b5565b6102f961044e366004614dc8565b6118c5565b6102f9610461366004614f33565b611cb8565b610321611ce1565b61032161047c366004614f33565b611cf1565b6102f961048f366004614d83565b611dcb565b6103516104a2366004614cd3565b612176565b6104af612191565b6040516102c89b9a99989796959493929190615e38565b6104d96104d4366004614cd3565b6121b5565b6040516102c892919061581e565b6104ef6121ce565b6040516102c8919061580a565b6102bb6121d7565b6103516121ef565b61032161051a366004614cd3565b6121f5565b6102f961052d36600461520d565b61223e565b6104d9610540366004614cd3565b6122db565b6102f9610553366004614cd3565b6122f4565b6102d96123a0565b610568612401565b6040516102c896959493929190615694565b6102f9610588366004614f33565b61243a565b6102bb612563565b61059d61257b565b6040516102c891906155d0565b6102d96125dc565b6102f96105c0366004615113565b612608565b6102bb6127bb565b6103216105db366004614f33565b6127ca565b6102f96105ee36600461523d565b612806565b6102d9610601366004614f5e565b612f6e565b6102bb613132565b61035161061c36600461520d565b613141565b6102f961062f366004614cd3565b61315f565b61035161327b565b6102f9613281565b610321610652366004614f33565b61365b565b610351610665366004614d0b565b6136cf565b6102f9610678366004614cd3565b6136fa565b6102bb61382f565b6007818154811061069257fe5b6000918252602090912001546001600160a01b0316905081565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156107385780601f1061070d57610100808354040283529160200191610738565b820191906000526020600020905b81548152906001019060200180831161071b57829003601f168201915b5050505050905090565b6005546001600160a01b031633146107755760405162461bcd60e51b815260040161076c9061584f565b60405180910390fd5b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516107a792919061574d565b60405180910390a26002600a5414156107d25760405162461bcd60e51b815260040161076c90615a4b565b6002600a55600160275460ff1660018111156107ea57fe5b14156109a357601654604051633e9fc0bd60e01b815273__$c61de259b17579437cb458fbe4ba8c0f49$__91633e9fc0bd9161082c9187918990600401615d9e565b60006040518083038186803b15801561084457600080fd5b505af4158015610858573d6000803e3d6000fd5b50505050610895601f60008154811061086d57fe5b906000526020600020015461088f83602001518761384790919063ffffffff16565b906138c4565b601655601f80546108c391906000906108aa57fe5b600091825260209091200154825161088f908790613847565b6017556040516108d2906154a7565b60405190819003812060165490913391600080516020615f5b833981519152916108fe9160009161581e565b60405180910390a3604051610912906154b8565b60405190819003812060175490913391600080516020615f5b8339815191529161093e9160009161581e565b60405180910390a360004284018184600281111561095857fe5b141561096757601e915061098f565b600184600281111561097557fe5b1415610987576301e13380915061098f565b6303c2670091505b601285905560138190556014829055016015555b6109ac84613955565b50506001600a555050565b3330146109d65760405162461bcd60e51b815260040161076c9061584f565b6109e08282613ca7565b5050565b3360008181526002602090815260408083206001600160a01b03871680855292528083208590555191929091600080516020615f9b83398151915290610a2b908690615d7e565b60405180910390a35060015b92915050565b600f546001600160a01b031681565b6005546001600160a01b03163314610a765760405162461bcd60e51b815260040161076c9061584f565b6001600160a01b0381166000908152600660205260408120805460ff19169055805b600754811015610b9a57826001600160a01b031660078281548110610ab957fe5b6000918252602090912001546001600160a01b03161415610b9257600780546000198101908110610ae657fe5b600091825260209091200154600780546001600160a01b039092169183908110610b0c57fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060088181548110610b4757fe5b90600052602060002001549150600860016008805490500381548110610b6957fe5b906000526020600020015460088281548110610b8157fe5b600091825260209091200155610b9a565b600101610a98565b506007805480610ba657fe5b600082815260209020810160001990810180546001600160a01b03191690550190556008805480610bd357fe5b600082815260208120820160001990810182905590910190915560098054839003905560405182916001600160a01b038516917f7b0884b4b6bb4e0c1385ad42168fa556c14d4d799c1bf22f081aff3efff6ea0c9190a35050565b60005490565b333014610c535760405162461bcd60e51b815260040161076c9061584f565b610c5c81613cb2565b50565b60006001600160a01b038316610c875760405162461bcd60e51b815260040161076c90615931565b336001600160a01b0385161480610cc157506001600160a01b03841660009081526002602090815260408083203384529091529020548211155b610cdd5760405162461bcd60e51b815260040161076c90615b9a565b610ce8848484613d1a565b6001600160a01b0384166000818152600260209081526040808320338085529252909120549114801590610d1e57506000198114155b15610d7c57610d2d8184613db9565b6001600160a01b03861660008181526002602090815260408083203380855292529182902084905590519092600080516020615f9b83398151915291610d739190615d7e565b60405180910390a35b60019150505b9392505050565b60066020526000908152604090205460ff1681565b601281565b6005546001600160a01b031690565b6060600880548060200260200160405190810160405280929190818152602001828054801561073857602002820191906000526020600020905b815481526020019060010190808311610dec575050505050905090565b601290565b6040516322c1aa2560e11b815260009073__$3a9c388c21df3b52adbbb2b73829b93ce6$__90634583544a90610e4b906011908690600401615d09565b60206040518083038186803b158015610e6357600080fd5b505af4158015610e77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9b9190615169565b90505b919050565b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051610ed592919061574d565b60405180910390a26002600a541415610f005760405162461bcd60e51b815260040161076c90615a4b565b6002600a556010546001600160a01b0316610f2d5760405162461bcd60e51b815260040161076c906159b0565b6011543360009081526021602052604090205473__$c61de259b17579437cb458fbe4ba8c0f49$__9163dba4989a9160ff600160201b90920482169116600160275460ff166001811115610f7d57fe5b146012600101546040518563ffffffff1660e01b8152600401610fa394939291906156c4565b60006040518083038186803b158015610fbb57600080fd5b505af4158015610fcf573d6000803e3d6000fd5b505060105460405163a1925f1d60e01b81526060935073__$c61de259b17579437cb458fbe4ba8c0f49$__925063a1925f1d916110209130916001600160a01b0316908a908a908a906004016157ae565b60006040518083038186803b15801561103857600080fd5b505af415801561104c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261107491908101906150d9565b90506060601060009054906101000a90046001600160a01b03166001600160a01b031663cc77828d6040518163ffffffff1660e01b815260040160006040518083038186803b1580156110c657600080fd5b505afa1580156110da573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111029190810190614fe1565b9050606081516001600160401b038111801561111d57600080fd5b50604051908082528060200260200182016040528015611147578160200160208202803683370190505b50601a54909150600090600160275460ff16600181111561116457fe5b14156112f25760245460405163108ad9bd60e21b81526001600160a01b039091169063422b66f49061119c90879089906004016155e3565b602060405180830381600087803b1580156111b657600080fd5b505af11580156111ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ee9190615225565b9150600f60009054906101000a90046001600160a01b03166001600160a01b031663703a9ec96040518163ffffffff1660e01b815260040160206040518083038186803b15801561123e57600080fd5b505afa158015611252573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112769190614cef565b6001600160a01b031663d7256c70873387896040518563ffffffff1660e01b81526004016112a7949392919061551b565b600060405180830381600087803b1580156112c157600080fd5b505af11580156112d5573d6000803e3d6000fd5b5050602454600160b01b900460ff16151591506112f29050575060005b60005b845181101561147457600085828151811061130c57fe5b60200260200101519050600087838151811061132457fe5b60200260200101519050816001600160a01b0316336001600160a01b0316826040516113509190615d7e565b60405180910390a260006113648286613847565b905061137a83336113758585613db9565b613df2565b8415611469576040516323b872dd60e01b81526000906001600160a01b038516906323b872dd906113b3903390309087906004016154dd565b602060405180830381600087803b1580156113cd57600080fd5b505af11580156113e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114059190615169565b602354909150600090611425906001600160a01b0387811691168561403b565b90508180156114315750805b61144d5760405162461bcd60e51b815260040161076c90615bfb565b8289878151811061145a57fe5b60200260200101818152505050505b5050506001016112f5565b5080156114e557602354604051631483d99d60e01b81526001600160a01b0390911690631483d99d906114b290879087908190600090600401615608565b600060405180830381600087803b1580156114cc57600080fd5b505af11580156114e0573d6000803e3d6000fd5b505050505b6114ee896118ac565b6114f8338a6109d6565b811561153f573360009081526025602052604090208054611519908b6141e2565b81553360009081526025602052604090206001015461153890846141e2565b6001909101555b6000600160275460ff16600181111561155457fe5b1480156115d65750601260050154306001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561159b57600080fd5b505afa1580156115af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d39190615225565b10155b80156115ec5750602454600160b01b900460ff16155b9050801561164c576024805460ff60b01b1916600160b01b17905561160f614207565b604051309033907f9c950e0ed06c25739b090d335d2f9a89f69ad1b4526959b521644fca3d99666090611643904290615d7e565b60405180910390a35b50506001600a555050505050505050565b6005546001600160a01b031633146116875760405162461bcd60e51b815260040161076c9061584f565b80518251146116a85760405162461bcd60e51b815260040161076c90615a01565b60005b8251811015611723578181815181106116c057fe5b60200260200101516009600082825401925050819055506001600660008584815181106116e957fe5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790556001016116ab565b508151611737906007906020850190614993565b50805161174b9060089060208401906149f8565b505050565b6023546001600160a01b031681565b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405161179192919061574d565b60405180910390a26002600a5414156117bc5760405162461bcd60e51b815260040161076c90615a4b565b6002600a556010546001600160a01b03166117e95760405162461bcd60e51b815260040161076c906159b0565b6005546001600160a01b031633146118135760405162461bcd60e51b815260040161076c9061584f565b600060275460ff16600181111561182657fe5b146118435760405162461bcd60e51b815260040161076c90615cde565b60405161184f906154a7565b60405190819003812060165490913391600080516020615f5b8339815191529161187b9190869061581e565b60405180910390a36016556001600a55565b3330146118ac5760405162461bcd60e51b815260040161076c9061584f565b610c5c81614476565b602454600160b01b900460ff1681565b73__$c61de259b17579437cb458fbe4ba8c0f49$__6380681cab8360a001518460c001518561010001518660e001518761012001518860600151518960800151518a6040015151602460159054906101000a900460ff166040518a63ffffffff1660e01b815260040161194099989796959493929190615df7565b60006040518083038186803b15801561195857600080fd5b505af415801561196c573d6000803e3d6000fd5b50506024805460ff60a81b1916600160a81b17905550508051601180546020808501516040808701516060880151608089015160a08a01511515600160281b0260ff60281b19911515600160201b0260ff60201b1993151563010000000263ff00000019951515620100000262ff0000199815156101000261ff00199d151560ff19909c169b909b179c909c169990991796909616999099179290921695909517949094169190911792909216939093179091558301518051611a3392601e920190614993565b5060608201518051611a4d91601f916020909101906149f8565b5060808201518051611a6591602091908201906149f8565b506040805161016081018252600080825260208201819052918101829052606081018290526000196080820181905260a0820183905260c08581015190830181905260e0808701519084018190526101008088015190850181905261012080890151908601819052426101409687018190526012889055601388905560148890556015889055601695909555601796909655601892909255601955601a55601b92909255601c919091558201516027805460ff191660018381811115611b2757fe5b0217905550600f80546001600160a01b0319166001600160a01b0385811691909117918290556040805163b18b78dd60e01b81529051929091169163b18b78dd91600480820192602092909190829003018186803b158015611b8857600080fd5b505afa158015611b9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bc09190614cef565b602480546001600160a01b0319166001600160a01b03928316179055600f54604080516311b2515f60e31b815290519190921691638d928af8916004808301926020929190829003018186803b158015611c1957600080fd5b505afa158015611c2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c519190614cef565b602380546001600160a01b0319166001600160a01b0392909216919091179055601954601a54601854601b546040517f3d6667963e842e2b5ff1d4feab2c9b92f17c9003592e2ad229952eeb9a293fd091611cab91615d7e565b60405180910390a4505050565b333014611cd75760405162461bcd60e51b815260040161076c9061584f565b6109e082826144a3565b602454600160a81b900460ff1681565b3360009081526002602090815260408083206001600160a01b0386168452909152812054808310611d45573360009081526002602090815260408083206001600160a01b0388168452909152812055611d74565b611d4f8184613db9565b3360009081526002602090815260408083206001600160a01b03891684529091529020555b3360008181526002602090815260408083206001600160a01b038916808552925291829020549151909291600080516020615f9b83398151915291611db99190615d7e565b60405180910390a35060019392505050565b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051611dfd92919061574d565b60405180910390a26002600a541415611e285760405162461bcd60e51b815260040161076c90615a4b565b6002600a553360009081526006602052604090205460ff1680611e5557506005546001600160a01b031633145b611e715760405162461bcd60e51b815260040161076c9061582c565b6010546001600160a01b0316611e995760405162461bcd60e51b815260040161076c906159b0565b73__$c61de259b17579437cb458fbe4ba8c0f49$__63eab73485600160275460ff166001811115611ec657fe5b60135460155460115460405160e087901b6001600160e01b0319168152611f039594909414936201000090910460ff16908b908b90600401615715565b60006040518083038186803b158015611f1b57600080fd5b505af4158015611f2f573d6000803e3d6000fd5b50505050611f3c836144ae565b60235460405163607e58b360e11b81526000916001600160a01b03169063c0fcb16690611f6d9030906004016154c9565b60206040518083038186803b158015611f8557600080fd5b505afa158015611f99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fbd9190615169565b905080156120285760235460405163edb12adf60e01b81526001600160a01b039091169063edb12adf90611ff59030906004016154c9565b600060405180830381600087803b15801561200f57600080fd5b505af1158015612023573d6000803e3d6000fd5b505050505b601054604051630bcded8960e21b81526001600160a01b0390911690632f37b624906120589087906004016154c9565b60206040518083038186803b15801561207057600080fd5b505afa158015612084573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120a89190615169565b6120ec576010546000906120cb906001600160a01b03878116911660001961403b565b9050806120ea5760405162461bcd60e51b815260040161076c90615bfb565b505b6010546040516350884c9160e01b815273__$c61de259b17579437cb458fbe4ba8c0f49$__916350884c919161213a9130916001600160a01b03909116908a908a908a908a90600401615774565b60006040518083038186803b15801561215257600080fd5b505af4158015612166573d6000803e3d6000fd5b50506001600a5550505050505050565b6001600160a01b031660009081526001602052604090205490565b601254601354601454601554601654601754601854601954601a54601b54601c548b565b6026602052600090815260409020805460019091015482565b60275460ff1681565b73__$3a9c388c21df3b52adbbb2b73829b93ce6$__90565b60225481565b601154600090600160201b900460ff161561222c57506001600160a01b03811660009081526021602052604090205460ff16610e9e565b506001600160a01b0381161515610e9e565b6005546001600160a01b031633146122685760405162461bcd60e51b815260040161076c9061584f565b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405161229a92919061574d565b60405180910390a26002600a5414156122c55760405162461bcd60e51b815260040161076c90615a4b565b6002600a556122d381613955565b506001600a55565b6025602052600090815260409020805460019091015482565b6005546001600160a01b0316331461231e5760405162461bcd60e51b815260040161076c9061584f565b6001600160a01b0381166123445760405162461bcd60e51b815260040161076c90615931565b6005546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b0319166001600160a01b0392909216919091179055565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156107385780601f1061070d57610100808354040283529160200191610738565b60115460ff80821691610100810482169162010000820481169163010000008104821691600160201b8204811691600160281b90041686565b6005546001600160a01b031633146124645760405162461bcd60e51b815260040161076c9061584f565b6001600160a01b03821660009081526006602052604090205460ff161561249d5760405162461bcd60e51b815260040161076c906158d2565b6001600160a01b038216600081815260066020526040808220805460ff19166001908117909155600780548083019091557fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880180546001600160a01b0319168517905560088054918201815583527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee3018490556009805485019055518392917fbd5dcf0b25226117c4a68a0129ffdd4b0541ef5e482ad7de9a96ccb6d6a8ebde91a35050565b73__$c61de259b17579437cb458fbe4ba8c0f49$__90565b6060600780548060200260200160405190810160405280929190818152602001828054801561073857602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116125b5575050505050905090565b6040518060400160405280601081526020016f11195cde5b8814db585c9d08141bdbdb60821b81525081565b6005546001600160a01b031633146126325760405162461bcd60e51b815260040161076c9061584f565b601154600160281b900460ff1680156126555750602454600160a01b900460ff16155b6126715760405162461bcd60e51b815260040161076c9061587b565b80518251146126925760405162461bcd60e51b815260040161076c90615bca565b60005b81518110156127a357600f5483516000916001600160a01b031690638f49f44d908690859081106126c257fe5b60200260200101518585815181106126d657fe5b60200260200101516040518363ffffffff1660e01b81526004016126fb929190615d87565b60206040518083038186803b15801561271357600080fd5b505afa158015612727573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061274b9190615169565b90508061276a5760405162461bcd60e51b815260040161076c9061595b565b61279a84838151811061277957fe5b602002602001015184848151811061278d57fe5b6020026020010151614581565b50600101612695565b50506024805460ff60a01b1916600160a01b17905550565b6024546001600160a01b031681565b60006001600160a01b0383166127f25760405162461bcd60e51b815260040161076c90615931565b6127fd338484613d1a565b50600192915050565b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405161283892919061574d565b60405180910390a26002600a5414156128635760405162461bcd60e51b815260040161076c90615a4b565b6002600a556010546001600160a01b03166128905760405162461bcd60e51b815260040161076c906159b0565b73__$c61de259b17579437cb458fbe4ba8c0f49$__633468facb600160275460ff1660018111156128bd57fe5b60245460155460135433600090815260256020526040908190208054600190910154915160e089901b6001600160e01b0319168152612914979690961495600160b01b90950460ff16949091908c906004016156e3565b604080518083038186803b15801561292b57600080fd5b505af415801561293f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612963919061531c565b33600090815260256020526040808220600181019390935592909155601054915163151c70f960e21b8152909160609173__$c61de259b17579437cb458fbe4ba8c0f49$__91635471c3e4916129cf9130916001600160a01b03909116908a908a908a906004016157ae565b60006040518083038186803b1580156129e757600080fd5b505af41580156129fb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612a2391908101906152e2565b91509150612a313386611cd7565b612a3a82610c53565b6010546040805163cc77828d60e01b815290516060926001600160a01b03169163cc77828d916004808301926000929190829003018186803b158015612a7f57600080fd5b505afa158015612a93573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612abb9190810190614fe1565b9050606081516001600160401b0381118015612ad657600080fd5b50604051908082528060200260200182016040528015612b00578160200160208202803683370190505b509050600080600160275460ff166001811115612b1957fe5b148015612b2857506015544210155b15612bb45760245460405163108ad9bd60e21b81526001600160a01b039091169063422b66f490612b5f90879089906004016155e3565b602060405180830381600087803b158015612b7957600080fd5b505af1158015612b8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bb19190615225565b91505b601954600160275460ff166001811115612bca57fe5b1415612bfe57602454600090600160b01b900460ff16158015612bef57506013544210155b90508015612bfc57600091505b505b8215612cd957336000908152602660209081526040808320805460019182015460259094529382902080549101549151633796ed7f60e21b81528e9473__$c61de259b17579437cb458fbe4ba8c0f49$__9463de5bb5fc94612c6b94929391929188908c90600401615dcf565b60606040518083038186803b158015612c8357600080fd5b505af4158015612c97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cbb91906153ac565b33600090815260266020526040902060018101929092559190559250505b606085516001600160401b0381118015612cf257600080fd5b50604051908082528060200260200182016040528015612d1c578160200160208202803683370190505b50905060005b8651811015612ed2576000878281518110612d3957fe5b60200260200101519050600080600073__$c61de259b17579437cb458fbe4ba8c0f49$__63c0dcb71f8d8781518110612d6e57fe5b6020026020010151898b6012600901546040518563ffffffff1660e01b8152600401612d9d9493929190615db4565b60606040518083038186803b158015612db557600080fd5b505af4158015612dc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ded91906153ac565b92509250925080868681518110612e0057fe5b602002602001018181525050836001600160a01b0316336001600160a01b031683604051612e2e9190615d7e565b60405180910390a2612e41843384614688565b86151580612e5b5750600088118015612e5b5750601b5415155b15612ec257612e6b843085614688565b602354600090612e88906001600160a01b0387811691168661403b565b905080612ea75760405162461bcd60e51b815260040161076c90615ab3565b838b8781518110612eb457fe5b602002602001018181525050505b505060019092019150612d229050565b5081151580612eed5750600083118015612eed5750601b5415155b15612f5c57602354604051631483d99d60e01b81526001600160a01b0390911690631483d99d90612f2990899089908690600190600401615608565b600060405180830381600087803b158015612f4357600080fd5b505af1158015612f57573d6000803e3d6000fd5b505050505b50506001600a55505050505050505050565b6060336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051612fa292919061574d565b60405180910390a26002600a541415612fcd5760405162461bcd60e51b815260040161076c90615a4b565b6002600a556010546001600160a01b0316612ffa5760405162461bcd60e51b815260040161076c906159b0565b600f546040516338f0d24560e01b81526001600160a01b03909116906338f0d2459061302c9030903390600401615501565b60206040518083038186803b15801561304457600080fd5b505afa158015613058573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061307c9190615169565b6130985760405162461bcd60e51b815260040161076c906158a2565b601054604051635b0e93fb60e11b81526001600160a01b039091169063b61d27f6906130ce90889088908890889060040161557d565b600060405180830381600087803b1580156130e857600080fd5b505af11580156130fc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526131249190810190615185565b6001600a5595945050505050565b6010546001600160a01b031681565b6008818154811061314e57fe5b600091825260209091200154905081565b6005546001600160a01b031633146131895760405162461bcd60e51b815260040161076c9061584f565b6002600a5414156131ac5760405162461bcd60e51b815260040161076c90615a4b565b6002600a556040513390600080356001600160e01b031916916131d19190369061574d565b60405180910390a2601154604051630d3aa47160e41b815273__$c61de259b17579437cb458fbe4ba8c0f49$__9163d3aa47109161322191600160201b900460ff16906001908690600401615673565b60006040518083038186803b15801561323957600080fd5b505af415801561324d573d6000803e3d6000fd5b505050506001600160a01b03166000908152602160205260409020805460ff19166001908117909155600a55565b60095481565b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516132b392919061574d565b60405180910390a26002600a5414156132de5760405162461bcd60e51b815260040161076c90615a4b565b6002600a55600f546040805163911fb03560e01b8152905133926001600160a01b03169163911fb035916004808301926020929190829003018186803b15801561332757600080fd5b505afa15801561333b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061335f9190614cef565b6001600160a01b0316146133855760405162461bcd60e51b815260040161076c9061598e565b6010546001600160a01b03166133ad5760405162461bcd60e51b815260040161076c906159b0565b60006133be426012600a0154613db9565b90506022548110156133e25760405162461bcd60e51b815260040161076c90615a70565b600060225482816133ef57fe5b0490506060601060009054906101000a90046001600160a01b03166001600160a01b031663cc77828d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561344257600080fd5b505afa158015613456573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261347e9190810190614fe1565b9050606081516001600160401b038111801561349957600080fd5b506040519080825280602002602001820160405280156134c3578160200160208202803683370190505b50905060005b82518110156135db5760008382815181106134e057fe5b602090810291909101015160105460405163f8b2cb4f60e01b81529192506000916001600160a01b039091169063f8b2cb4f906135219085906004016154c9565b60206040518083038186803b15801561353957600080fd5b505afa15801561354d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135719190615225565b9050600061359082600c89601260060154028161358a57fe5b04613847565b905061359d833083614688565b6023546135b7906001600160a01b0385811691168361403b565b50808585815181106135c557fe5b60209081029190910101525050506001016134c9565b50602354604051630bac7b8160e01b81526001600160a01b0390911690630bac7b819061360e90859085906004016155e3565b600060405180830381600087803b15801561362857600080fd5b505af115801561363c573d6000803e3d6000fd5b5050602254601c80549690910290950190945550506001600a55505050565b3360009081526002602090815260408083206001600160a01b038616845290915281205461368990836141e2565b3360008181526002602090815260408083206001600160a01b03891680855292529182902084905590519092600080516020615f9b83398151915291610a2b9190615d7e565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b6005546001600160a01b031633146137245760405162461bcd60e51b815260040161076c9061584f565b6002600a5414156137475760405162461bcd60e51b815260040161076c90615a4b565b6002600a556040513390600080356001600160e01b0319169161376c9190369061574d565b60405180910390a26011546001600160a01b03821660009081526021602052604090819020549051630d3aa47160e41b815273__$c61de259b17579437cb458fbe4ba8c0f49$__9263d3aa4710926137d992600160201b90920460ff908116929116908690600401615673565b60006040518083038186803b1580156137f157600080fd5b505af4158015613805573d6000803e3d6000fd5b505050506001600160a01b03166000908152602160205260409020805460ff191690556001600a55565b73__$24afbdeda01e131946d055322cce080c01$__90565b60008261385657506000610a37565b8282028284828161386357fe5b04146138815760405162461bcd60e51b815260040161076c90615ae4565b6706f05b59d3b200008101818110156138ac5760405162461bcd60e51b815260040161076c90615ae4565b6000670de0b6b3a7640000825b049695505050505050565b6000816138e35760405162461bcd60e51b815260040161076c90615b45565b826138f057506000610a37565b670de0b6b3a76400008381029084828161390657fe5b04146139245760405162461bcd60e51b815260040161076c90615a21565b6002830481018181101561394a5760405162461bcd60e51b815260040161076c90615a21565b60008482816138b957fe5b6010546001600160a01b03161561397e5760405162461bcd60e51b815260040161076c906159d9565b613987816118ac565b61399133826109d6565b600f60009054906101000a90046001600160a01b03166001600160a01b03166391cefde46040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156139e157600080fd5b505af11580156139f5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a199190614cef565b601080546001600160a01b0319166001600160a01b03928316179081905560405163d03f2a0f60e01b815273__$c61de259b17579437cb458fbe4ba8c0f49$",
  "libraries": {
    "DesynSafeMath": "0x17C211F63833B7e336FFE94F62187E43004Fb16c",
    "RightsManager": "0x5E7E9023618851A308d71B50Fb51c41769f10375",
    "SmartPoolManager": "0x2c01d185d15Ec01f0cD461452DA6F13A8d6cA68a"
  },
  "devdoc": {
    "author": "Desyn Labs",
    "details": "Rights are defined as follows (index values into the array) Note that functions called on bPool and bFactory may look like internal calls,   but since they are contracts accessed through an interface, they are really external. To make this explicit, we could write \"IBPool(address(bPool)).function()\" everywhere,   instead of \"bPool.function()\".",
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "params": {
          "owner": "- owner of the tokens",
          "spender": "- entity allowed to spend the tokens"
        },
        "returns": {
          "_0": "uint - remaining amount spender is allowed to transfer"
        }
      },
      "approve(address,uint256)": {
        "details": "emits an Approval event",
        "params": {
          "amount": "- number of tokens being approved",
          "spender": "- entity the owner (sender) is approving to spend his tokens"
        },
        "returns": {
          "_0": "bool - result of the approval (will always be true if it doesn't revert)"
        }
      },
      "balanceOf(address)": {
        "params": {
          "account": "- address we're checking the balance of"
        },
        "returns": {
          "_0": "uint - token balance in the account"
        }
      },
      "canProvideLiquidity(address)": {
        "details": "If the whitelist feature is not enabled, anyone can provide liquidity (assuming finalized)",
        "returns": {
          "_0": "boolean value indicating whether the address can join a pool"
        }
      },
      "createPool(uint256)": {
        "details": "Delegates to internal function",
        "params": {
          "initialSupply": "starting token balance"
        }
      },
      "createPool(uint256,uint256,uint8,(uint256,uint256))": {
        "details": "Delegates to internal function",
        "params": {
          "closurePeriod": "the etf closure period",
          "initialSupply": "starting token balance"
        }
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseApproval(address,uint256)": {
        "details": "emits an Approval eventIf you try to decrease it below the current limit, it's just set to zero (not an error)",
        "params": {
          "amount": "- number of tokens being approved",
          "spender": "- entity the owner (sender) is approving to spend his tokens"
        },
        "returns": {
          "_0": "bool - result of the approval (will always be true if it doesn't revert)"
        }
      },
      "exitPool(uint256,uint256[])": {
        "details": "Emits a LogExit event for each token      bPool is a contract interface; function calls on it are external",
        "params": {
          "minAmountsOut": "- minimum amount of asset tokens to receive",
          "poolAmountIn": "- amount of pool tokens to redeem"
        }
      },
      "getController()": {
        "details": "external for gas optimization",
        "returns": {
          "_0": "address - of the owner (AKA controller)"
        }
      },
      "getDesynSafeMathVersion()": {
        "details": "Convenience function to get the address of the DesynSafeMath library (so clients can check version)",
        "returns": {
          "_0": "address of the DesynSafeMath library"
        }
      },
      "getRightsManagerVersion()": {
        "details": "Convenience function to get the address of the RightsManager library (so clients can check version)",
        "returns": {
          "_0": "address of the RightsManager library"
        }
      },
      "getSmartPoolManagerVersion()": {
        "details": "Convenience function to get the address of the SmartPoolManager library (so clients can check version)",
        "returns": {
          "_0": "address of the SmartPoolManager library"
        }
      },
      "hasPermission(uint8)": {
        "details": "value of the enum is just the 0-based index in the enumeration      For instance canPauseSwapping is 0; canChangeWeights is 2",
        "returns": {
          "_0": "token boolean true if we have the given permission"
        }
      },
      "increaseApproval(address,uint256)": {
        "details": "emits an Approval event",
        "params": {
          "amount": "- number of tokens being approved",
          "spender": "- entity the owner (sender) is approving to spend his tokens"
        },
        "returns": {
          "_0": "bool - result of the approval (will always be true if it doesn't revert)"
        }
      },
      "init(address,(string,string,address[],uint256[],uint256[],uint256,uint256,uint256,uint256,uint256,uint8),(bool,bool,bool,bool,bool,bool))": {
        "details": "_initialTokens and _swapFee are only used for temporary storage between construction      and create pool, and should not be used thereafter! _initialTokens is destroyed in      createPool to prevent this, and _swapFee is kept in sync (defensively), but      should never be used except in this constructor and createPool()",
        "params": {
          "factoryAddress": "- the BPoolFactory used to create the underlying pool",
          "poolParams": "- struct containing pool parameters",
          "rightsStruct": "- Set of permissions we are assigning to this smart pool"
        }
      },
      "joinPool(uint256,uint256[],address)": {
        "details": "Emits a LogJoin event (for each token)      bPool is a contract interface; function calls on it are external",
        "params": {
          "maxAmountsIn": "- Max amount of asset tokens to spend",
          "poolAmountOut": "- number of pool tokens to receive"
        }
      },
      "name()": {
        "details": "Returns the name of the token.      We allow the user to set this name (as well as the symbol).      Alternatives are 1) A fixed string (original design)                       2) A fixed string plus the user-defined symbol                          return string(abi.encodePacked(NAME, \"-\", _symbol));"
      },
      "removeOwner(address)": {
        "details": "Allows to remove an owner. Transaction has to be sent by wallet.",
        "params": {
          "owner": "Address of owner."
        }
      },
      "removeWhitelistedLiquidityProvider(address)": {
        "params": {
          "provider": "- address of the liquidity provider"
        }
      },
      "setAddAdminList(address,uint256)": {
        "details": "external for gas optimization",
        "params": {
          "newOwner": "- address of new owner"
        }
      },
      "setCap(uint256)": {
        "details": "_bspCap defaults in the constructor to unlimited      Can set to 0 (or anywhere below the current supply), to halt new investment      Prevent setting it before creating a pool, since createPool sets to intialSupply      (it does this to avoid an unlimited cap window between construction and createPool)      Therefore setting it before then has no effect, so should not be allowed",
        "params": {
          "newCap": "- new value of the cap"
        }
      },
      "setController(address)": {
        "details": "external for gas optimization",
        "params": {
          "newOwner": "- address of new owner"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "declared external for gas optimization",
        "returns": {
          "_0": "uint - total number of tokens in existence"
        }
      },
      "transfer(address,uint256)": {
        "details": "_move emits a Transfer event if successful",
        "params": {
          "amount": "- number of tokens being transferred",
          "recipient": "- entity receiving the tokens"
        },
        "returns": {
          "_0": "bool - result of the transfer (will always be true if it doesn't revert)"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "_move emits a Transfer event if successful; may also emit an Approval event",
        "params": {
          "amount": "- number of tokens being transferred",
          "recipient": "- recipient of the tokens",
          "sender": "- entity sending the tokens (must be caller or allowed to spend on behalf of caller)"
        },
        "returns": {
          "_0": "bool - result of the transfer (will always be true if it doesn't revert)"
        }
      },
      "whitelistLiquidityProvider(address)": {
        "params": {
          "provider": "- address of the liquidity provider"
        }
      }
    },
    "title": "Smart Pool with customizable features",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allowance(address,address)": {
        "notice": "Getter for allowance: amount spender will be allowed to spend on behalf of owner"
      },
      "approve(address,uint256)": {
        "notice": "Approve owner (sender) to spend a certain amount"
      },
      "balanceOf(address)": {
        "notice": "Getter for current account balance"
      },
      "canProvideLiquidity(address)": {
        "notice": "Check if an address is a liquidity provider"
      },
      "createPool(uint256)": {
        "notice": "Create a new Smart Pool"
      },
      "createPool(uint256,uint256,uint8,(uint256,uint256))": {
        "notice": "Create a new Smart Pool"
      },
      "decreaseApproval(address,uint256)": {
        "notice": "Decrease the amount the spender is allowed to spend on behalf of the owner (sender)"
      },
      "exitPool(uint256,uint256[])": {
        "notice": "Exit a pool - redeem pool tokens for underlying assets"
      },
      "getController()": {
        "notice": "Returns the address of the current owner"
      },
      "getDesynSafeMathVersion()": {
        "notice": "Getter for the DesynSafeMath contract"
      },
      "getRightsManagerVersion()": {
        "notice": "Getter for the RightsManager contract"
      },
      "getSmartPoolManagerVersion()": {
        "notice": "Getter for the SmartPoolManager contract"
      },
      "hasPermission(uint8)": {
        "notice": "Getter for specific permissions"
      },
      "increaseApproval(address,uint256)": {
        "notice": "Increase the amount the spender is allowed to spend on behalf of the owner (sender)"
      },
      "init(address,(string,string,address[],uint256[],uint256[],uint256,uint256,uint256,uint256,uint256,uint8),(bool,bool,bool,bool,bool,bool))": {
        "notice": "Construct a new Configurable Rights Pool (wrapper around BPool)"
      },
      "joinPool(uint256,uint256[],address)": {
        "notice": "Join a pool"
      },
      "removeWhitelistedLiquidityProvider(address)": {
        "notice": "Remove from the whitelist of liquidity providers (if enabled)"
      },
      "setAddAdminList(address,uint256)": {
        "notice": "Transfers ownership of the contract to a new account (`newOwner`).         Can only be called by the current owner"
      },
      "setCap(uint256)": {
        "notice": "Set the cap (max # of pool tokens)"
      },
      "setController(address)": {
        "notice": "Transfers ownership of the contract to a new account (`newOwner`).         Can only be called by the current owner"
      },
      "totalSupply()": {
        "notice": "Getter for the total supply"
      },
      "transfer(address,uint256)": {
        "notice": "Transfer the given amount from sender (caller) to recipient"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer the given amount from sender to recipient"
      },
      "whitelistLiquidityProvider(address)": {
        "notice": "Add to the whitelist of liquidity providers (if enabled)"
      }
    },
    "notice": "PCToken is the \"Desyn Smart Pool\" token (transferred upon finalization)",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5892,
        "contract": "contracts/base/ConfigurableRightsPool.sol:ConfigurableRightsPool",
        "label": "varTotalSupply",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 5896,
        "contract": "contracts/base/ConfigurableRightsPool.sol:ConfigurableRightsPool",
        "label": "_balance",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5902,
        "contract": "contracts/base/ConfigurableRightsPool.sol:ConfigurableRightsPool",
        "label": "_allowance",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 5904,
        "contract": "contracts/base/ConfigurableRightsPool.sol:ConfigurableRightsPool",
        "label": "_symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 5906,
        "contract": "contracts/base/ConfigurableRightsPool.sol:ConfigurableRightsPool",
        "label": "_name",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 17506,
        "contract": "contracts/base/ConfigurableRightsPool.sol:ConfigurableRightsPool",
        "label": "_owner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 17510,
        "contract": "contracts/base/ConfigurableRightsPool.sol:ConfigurableRightsPool",
        "label": "adminList",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 17513,
        "contract": "contracts/base/ConfigurableRightsPool.sol:ConfigurableRightsPool",
        "label": "owners",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 17516,
        "contract": "contracts/base/ConfigurableRightsPool.sol:ConfigurableRightsPool",
        "label": "ownerPercentage",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 17518,
        "contract": "contracts/base/ConfigurableRightsPool.sol:ConfigurableRightsPool",
        "label": "allOwnerPercentage",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 17832,
        "contract": "contracts/base/ConfigurableRightsPool.sol:ConfigurableRightsPool",
        "label": "_status",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 6460,
        "contract": "contracts/base/ConfigurableRightsPool.sol:ConfigurableRightsPool",
        "label": "_hasInit",
        "offset": 0,
        "slot": "11",
        "type": "t_bool"
      },
      {
        "astId": 6462,
        "contract": "contracts/base/ConfigurableRightsPool.sol:ConfigurableRightsPool",
        "label": "_whiteTokenCount",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 6466,
        "contract": "contracts/base/ConfigurableRightsPool.sol:ConfigurableRightsPool",
        "label": "_isTokenWhitelisted",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 6472,
        "contract": "contracts/base/ConfigurableRightsPool.sol:ConfigurableRightsPool",
        "label": "_tokenWhitelistedInfo",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 198,
        "contract": "contracts/base/ConfigurableRightsPool.sol:ConfigurableRightsPool",
        "label": "bFactory",
        "offset": 0,
        "slot": "15",
        "type": "t_contract(IBFactory)14918"
      },
      {
        "astId": 200,
        "contract": "contracts/base/ConfigurableRightsPool.sol:ConfigurableRightsPool",
        "label": "bPool",
        "offset": 0,
        "slot": "16",
        "type": "t_contract(IBPool)14835"
      },
      {
        "astId": 202,
        "contract": "contracts/base/ConfigurableRightsPool.sol:ConfigurableRightsPool",
        "label": "rights",
        "offset": 0,
        "slot": "17",
        "type": "t_struct(Rights)15852_storage"
      },
      {
        "astId": 204,
        "contract": "contracts/base/ConfigurableRightsPool.sol:ConfigurableRightsPool",
        "label": "etfStatus",
        "offset": 0,
        "slot": "18",
        "type": "t_struct(Status)16517_storage"
      },
      {
        "astId": 206,
        "contract": "contracts/base/ConfigurableRightsPool.sol:ConfigurableRightsPool",
        "label": "_initialSwapFee",
        "offset": 0,
        "slot": "29",
        "type": "t_uint256"
      },
      {
        "astId": 209,
        "contract": "contracts/base/ConfigurableRightsPool.sol:ConfigurableRightsPool",
        "label": "_initialTokens",
        "offset": 0,
        "slot": "30",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 212,
        "contract": "contracts/base/ConfigurableRightsPool.sol:ConfigurableRightsPool",
        "label": "_initialBalances",
        "offset": 0,
        "slot": "31",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 215,
        "contract": "contracts/base/ConfigurableRightsPool.sol:ConfigurableRightsPool",
        "label": "_initialWeights",
        "offset": 0,
        "slot": "32",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 219,
        "contract": "contracts/base/ConfigurableRightsPool.sol:ConfigurableRightsPool",
        "label": "_liquidityProviderWhitelist",
        "offset": 0,
        "slot": "33",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 228,
        "contract": "contracts/base/ConfigurableRightsPool.sol:ConfigurableRightsPool",
        "label": "claimPeriod",
        "offset": 0,
        "slot": "34",
        "type": "t_uint256"
      },
      {
        "astId": 230,
        "contract": "contracts/base/ConfigurableRightsPool.sol:ConfigurableRightsPool",
        "label": "vaultAddress",
        "offset": 0,
        "slot": "35",
        "type": "t_address"
      },
      {
        "astId": 232,
        "contract": "contracts/base/ConfigurableRightsPool.sol:ConfigurableRightsPool",
        "label": "oracleAddress",
        "offset": 0,
        "slot": "36",
        "type": "t_address"
      },
      {
        "astId": 234,
        "contract": "contracts/base/ConfigurableRightsPool.sol:ConfigurableRightsPool",
        "label": "hasSetWhiteTokens",
        "offset": 20,
        "slot": "36",
        "type": "t_bool"
      },
      {
        "astId": 236,
        "contract": "contracts/base/ConfigurableRightsPool.sol:ConfigurableRightsPool",
        "label": "initBool",
        "offset": 21,
        "slot": "36",
        "type": "t_bool"
      },
      {
        "astId": 238,
        "contract": "contracts/base/ConfigurableRightsPool.sol:ConfigurableRightsPool",
        "label": "isCompletedCollect",
        "offset": 22,
        "slot": "36",
        "type": "t_bool"
      },
      {
        "astId": 242,
        "contract": "contracts/base/ConfigurableRightsPool.sol:ConfigurableRightsPool",
        "label": "beginFund",
        "offset": 0,
        "slot": "37",
        "type": "t_mapping(t_address,t_struct(Fund)16553_storage)"
      },
      {
        "astId": 246,
        "contract": "contracts/base/ConfigurableRightsPool.sol:ConfigurableRightsPool",
        "label": "endFund",
        "offset": 0,
        "slot": "38",
        "type": "t_mapping(t_address,t_struct(Fund)16553_storage)"
      },
      {
        "astId": 248,
        "contract": "contracts/base/ConfigurableRightsPool.sol:ConfigurableRightsPool",
        "label": "etype",
        "offset": 0,
        "slot": "39",
        "type": "t_enum(Etypes)16490"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBFactory)14918": {
        "encoding": "inplace",
        "label": "contract IBFactory",
        "numberOfBytes": "20"
      },
      "t_contract(IBPool)14835": {
        "encoding": "inplace",
        "label": "contract IBPool",
        "numberOfBytes": "20"
      },
      "t_enum(Etypes)16490": {
        "encoding": "inplace",
        "label": "enum SmartPoolManager.Etypes",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Fund)16553_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SmartPoolManager.Fund)",
        "numberOfBytes": "32",
        "value": "t_struct(Fund)16553_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Fund)16553_storage": {
        "encoding": "inplace",
        "label": "struct SmartPoolManager.Fund",
        "members": [
          {
            "astId": 16550,
            "contract": "contracts/base/ConfigurableRightsPool.sol:ConfigurableRightsPool",
            "label": "etfAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 16552,
            "contract": "contracts/base/ConfigurableRightsPool.sol:ConfigurableRightsPool",
            "label": "fundAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Rights)15852_storage": {
        "encoding": "inplace",
        "label": "struct RightsManager.Rights",
        "members": [
          {
            "astId": 15841,
            "contract": "contracts/base/ConfigurableRightsPool.sol:ConfigurableRightsPool",
            "label": "canPauseSwapping",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 15843,
            "contract": "contracts/base/ConfigurableRightsPool.sol:ConfigurableRightsPool",
            "label": "canChangeSwapFee",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 15845,
            "contract": "contracts/base/ConfigurableRightsPool.sol:ConfigurableRightsPool",
            "label": "canChangeWeights",
            "offset": 2,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 15847,
            "contract": "contracts/base/ConfigurableRightsPool.sol:ConfigurableRightsPool",
            "label": "canAddRemoveTokens",
            "offset": 3,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 15849,
            "contract": "contracts/base/ConfigurableRightsPool.sol:ConfigurableRightsPool",
            "label": "canWhitelistLPs",
            "offset": 4,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 15851,
            "contract": "contracts/base/ConfigurableRightsPool.sol:ConfigurableRightsPool",
            "label": "canTokenWhiteLists",
            "offset": 5,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Status)16517_storage": {
        "encoding": "inplace",
        "label": "struct SmartPoolManager.Status",
        "members": [
          {
            "astId": 16496,
            "contract": "contracts/base/ConfigurableRightsPool.sol:ConfigurableRightsPool",
            "label": "collectPeriod",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 16498,
            "contract": "contracts/base/ConfigurableRightsPool.sol:ConfigurableRightsPool",
            "label": "collectEndTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 16500,
            "contract": "contracts/base/ConfigurableRightsPool.sol:ConfigurableRightsPool",
            "label": "closurePeriod",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 16502,
            "contract": "contracts/base/ConfigurableRightsPool.sol:ConfigurableRightsPool",
            "label": "closureEndTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 16504,
            "contract": "contracts/base/ConfigurableRightsPool.sol:ConfigurableRightsPool",
            "label": "upperCap",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 16506,
            "contract": "contracts/base/ConfigurableRightsPool.sol:ConfigurableRightsPool",
            "label": "floorCap",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 16508,
            "contract": "contracts/base/ConfigurableRightsPool.sol:ConfigurableRightsPool",
            "label": "managerFee",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 16510,
            "contract": "contracts/base/ConfigurableRightsPool.sol:ConfigurableRightsPool",
            "label": "redeemFee",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 16512,
            "contract": "contracts/base/ConfigurableRightsPool.sol:ConfigurableRightsPool",
            "label": "issueFee",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 16514,
            "contract": "contracts/base/ConfigurableRightsPool.sol:ConfigurableRightsPool",
            "label": "perfermanceFee",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 16516,
            "contract": "contracts/base/ConfigurableRightsPool.sol:ConfigurableRightsPool",
            "label": "startClaimFeeTime",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}