{
  "address": "0xdEaB59b0a531DF393ec56e126FdC18e263463652",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AddAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "LOGVaultAdr",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RemoveAdmin",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "adminClaimToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "adminList",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allOwnerPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "black_list",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "claimKolReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "claimManagersReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "kol",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "types",
          "type": "uint256"
        }
      ],
      "name": "computeReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "types",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "poolTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokensAmount",
          "type": "uint256[]"
        }
      ],
      "name": "depositToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getAllKolReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getAllManagersReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBNB",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getController",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getKolsAdr",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getManagerClaimBool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "bools",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "maragerAdr",
          "type": "address"
        }
      ],
      "name": "getManagerReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwnerPercentage",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwners",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getPoolAllFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "kol",
          "type": "address"
        }
      ],
      "name": "getPoolKolTotalAmounts",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "kol",
          "type": "address"
        }
      ],
      "name": "getPoolKolUserInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "userAdr",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "userAmount",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct UserVault.kolUserInfo[]",
          "name": "info",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getPoolUserKolAdr",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getPoolUserList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokenList",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "maragerAdr",
          "type": "address"
        }
      ],
      "name": "getUnManagerReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_ownerPercentage",
          "type": "uint256[]"
        }
      ],
      "name": "initHandle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "init_totalAmount_list",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "isClosePool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "is_set_params",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "kol",
          "type": "address"
        }
      ],
      "name": "kolClaimTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "kol",
          "type": "address"
        }
      ],
      "name": "kolUnClaimAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "kol_claimed_list",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "kol_pool_params",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "level",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "ratio",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SmartPoolManager.levelParams",
              "name": "firstLevel",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "level",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "ratio",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SmartPoolManager.levelParams",
              "name": "secondLevel",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "level",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "ratio",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SmartPoolManager.levelParams",
              "name": "thirdLevel",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "level",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "ratio",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SmartPoolManager.levelParams",
              "name": "fourLevel",
              "type": "tuple"
            }
          ],
          "internalType": "struct SmartPoolManager.feeParams",
          "name": "managerFee",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "level",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "ratio",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SmartPoolManager.levelParams",
              "name": "firstLevel",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "level",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "ratio",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SmartPoolManager.levelParams",
              "name": "secondLevel",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "level",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "ratio",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SmartPoolManager.levelParams",
              "name": "thirdLevel",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "level",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "ratio",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SmartPoolManager.levelParams",
              "name": "fourLevel",
              "type": "tuple"
            }
          ],
          "internalType": "struct SmartPoolManager.feeParams",
          "name": "issueFee",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "level",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "ratio",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SmartPoolManager.levelParams",
              "name": "firstLevel",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "level",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "ratio",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SmartPoolManager.levelParams",
              "name": "secondLevel",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "level",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "ratio",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SmartPoolManager.levelParams",
              "name": "thirdLevel",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "level",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "ratio",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SmartPoolManager.levelParams",
              "name": "fourLevel",
              "type": "tuple"
            }
          ],
          "internalType": "struct SmartPoolManager.feeParams",
          "name": "redeemFee",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "level",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "ratio",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SmartPoolManager.levelParams",
              "name": "firstLevel",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "level",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "ratio",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SmartPoolManager.levelParams",
              "name": "secondLevel",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "level",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "ratio",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SmartPoolManager.levelParams",
              "name": "thirdLevel",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "level",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "ratio",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SmartPoolManager.levelParams",
              "name": "fourLevel",
              "type": "tuple"
            }
          ],
          "internalType": "struct SmartPoolManager.feeParams",
          "name": "perfermanceFee",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "kol_token_list",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "kol_totalAmount_list",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "kol_user_info",
      "outputs": [
        {
          "internalType": "address",
          "name": "userAdr",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "kols_list",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "manager_claimed_list",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ownerPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "owners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "poolIssueTokenAmount",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenAmount",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "poolIssueTokenList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "poolManagerTokenAmount",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenAmount",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "poolManagerTokenList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "poolPerfermanceTokenAmount",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenAmount",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "poolPerfermanceTokenList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "poolRedeemTokenAmount",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenAmount",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "poolRedeemTokenList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pool_issue_tokenAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pool_issue_tokenList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pool_manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pool_manager_isClaim",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pool_manager_tokenAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pool_manager_tokenList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pool_perfermance_tokenAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pool_perfermance_tokenList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pool_redeem_tokenAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pool_redeem_tokenList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "kol",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "poolTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokensAmount",
          "type": "uint256[]"
        }
      ],
      "name": "recordTokenInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "record_List",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "record_number",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "removeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_ownerPercentage",
          "type": "uint256"
        }
      ],
      "name": "setAddAdminList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "bools",
          "type": "bool"
        }
      ],
      "name": "setBlackList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "setController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adr",
          "type": "address"
        }
      ],
      "name": "setCrpFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "firstLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "secondLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "thirdLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "fourLevel",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SmartPoolManager.feeParams",
              "name": "managerFee",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "firstLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "secondLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "thirdLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "fourLevel",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SmartPoolManager.feeParams",
              "name": "issueFee",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "firstLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "secondLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "thirdLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "fourLevel",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SmartPoolManager.feeParams",
              "name": "redeemFee",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "firstLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "secondLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "thirdLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "fourLevel",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SmartPoolManager.feeParams",
              "name": "perfermanceFee",
              "type": "tuple"
            }
          ],
          "internalType": "struct SmartPoolManager.KolPoolParams",
          "name": "_poolParams",
          "type": "tuple"
        }
      ],
      "name": "setPoolParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adr",
          "type": "address"
        }
      ],
      "name": "setVaultAdr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "total_ratio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "user_index_list",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "user_kol_list",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xdef374625e2dab4fb457e6c8c75307af726aaf0b4add28f2043144fd56419647",
  "receipt": {
    "to": null,
    "from": "0x595b85b4A418e3B8df897D02F5BD49167D00862F",
    "contractAddress": "0xdEaB59b0a531DF393ec56e126FdC18e263463652",
    "transactionIndex": 113,
    "gasUsed": "4533913",
    "logsBloom": "0x
    "blockHash": "0x2f05830485b838bd9998e6d0726ddd4ea64ab9e64aa4863c2004968d7ee91d6d",
    "transactionHash": "0xdef374625e2dab4fb457e6c8c75307af726aaf0b4add28f2043144fd56419647",
    "logs": [],
    "blockNumber": 7882933,
    "cumulativeGasUsed": "26569659",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c4935c7bbb687e1b5444e68bf79f180c",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"LOGVaultAdr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RemoveAdmin\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"adminClaimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"adminList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allOwnerPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"black_list\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"claimKolReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"claimManagersReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"kol\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"types\",\"type\":\"uint256\"}],\"name\":\"computeReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"types\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"poolTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokensAmount\",\"type\":\"uint256[]\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getAllKolReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getAllManagersReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBNB\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getKolsAdr\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getManagerClaimBool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"bools\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maragerAdr\",\"type\":\"address\"}],\"name\":\"getManagerReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwnerPercentage\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolAllFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"kol\",\"type\":\"address\"}],\"name\":\"getPoolKolTotalAmounts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"kol\",\"type\":\"address\"}],\"name\":\"getPoolKolUserInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"userAdr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"userAmount\",\"type\":\"uint256[]\"}],\"internalType\":\"struct UserVault.kolUserInfo[]\",\"name\":\"info\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getPoolUserKolAdr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolUserList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenList\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maragerAdr\",\"type\":\"address\"}],\"name\":\"getUnManagerReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ownerPercentage\",\"type\":\"uint256[]\"}],\"name\":\"initHandle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"init_totalAmount_list\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isClosePool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"is_set_params\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"kol\",\"type\":\"address\"}],\"name\":\"kolClaimTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"kol\",\"type\":\"address\"}],\"name\":\"kolUnClaimAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"kol_claimed_list\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"kol_pool_params\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"managerFee\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"issueFee\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"redeemFee\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"perfermanceFee\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"kol_token_list\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"kol_totalAmount_list\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"kol_user_info\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"userAdr\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"kols_list\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"manager_claimed_list\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"poolIssueTokenAmount\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenAmount\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"poolIssueTokenList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"poolManagerTokenAmount\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenAmount\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"poolManagerTokenList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"poolPerfermanceTokenAmount\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenAmount\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"poolPerfermanceTokenList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"poolRedeemTokenAmount\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenAmount\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"poolRedeemTokenList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool_issue_tokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool_issue_tokenList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pool_manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pool_manager_isClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool_manager_tokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool_manager_tokenList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool_perfermance_tokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool_perfermance_tokenList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool_redeem_tokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool_redeem_tokenList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"kol\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"poolTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokensAmount\",\"type\":\"uint256[]\"}],\"name\":\"recordTokenInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"record_List\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"record_number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ownerPercentage\",\"type\":\"uint256\"}],\"name\":\"setAddAdminList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"bools\",\"type\":\"bool\"}],\"name\":\"setBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setCrpFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"managerFee\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"issueFee\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"redeemFee\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"perfermanceFee\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.KolPoolParams\",\"name\":\"_poolParams\",\"type\":\"tuple\"}],\"name\":\"setPoolParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setVaultAdr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_ratio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"user_index_list\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"user_kol_list\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Desyn Labs\",\"kind\":\"dev\",\"methods\":{\"getController()\":{\"details\":\"external for gas optimization\",\"returns\":{\"_0\":\"address - of the owner (AKA controller)\"}},\"removeOwner(address)\":{\"details\":\"Allows to remove an owner. Transaction has to be sent by wallet.\",\"params\":{\"owner\":\"Address of owner.\"}},\"setAddAdminList(address,uint256)\":{\"details\":\"external for gas optimization\",\"params\":{\"newOwner\":\"- address of new owner\"}},\"setController(address)\":{\"details\":\"external for gas optimization\",\"params\":{\"newOwner\":\"- address of new owner\"}}},\"title\":\"Vault managerFee\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getController()\":{\"notice\":\"Returns the address of the current owner\"},\"setAddAdminList(address,uint256)\":{\"notice\":\"Transfers ownership of the contract to a new account (`newOwner`).         Can only be called by the current owner\"},\"setController(address)\":{\"notice\":\"Transfers ownership of the contract to a new account (`newOwner`).         Can only be called by the current owner\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/deploy/UserVault.sol\":\"UserVault\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"contracts/deploy/UserVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\nlibrary SafeMath {\\n    function add(uint a, uint b) internal pure returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint a, uint b) internal pure returns (uint) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(\\n        uint a,\\n        uint b,\\n        string memory errorMessage\\n    ) internal pure returns (uint) {\\n        require(b <= a, errorMessage);\\n        uint c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint a, uint b) internal pure returns (uint) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint a, uint b) internal pure returns (uint) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(\\n        uint a,\\n        uint b,\\n        string memory errorMessage\\n    ) internal pure returns (uint) {\\n        require(b > 0, errorMessage);\\n        uint c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    function mod(uint a, uint b) internal pure returns (uint) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    function mod(\\n        uint a,\\n        uint b,\\n        string memory errorMessage\\n    ) internal pure returns (uint) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\nlibrary Address {\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            codehash := extcodehash(account)\\n        }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    function sendValue(address payable recipient, uint amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint weiValue,\\n        string memory errorMessage\\n    ) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            if (returndata.length > 0) {\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\npragma solidity 0.6.12;\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../utils/DesynOwnable.sol\\\";\\nimport \\\"../libraries/SmartPoolManager.sol\\\";\\n// Contracts\\npragma experimental ABIEncoderV2;\\n\\ninterface ICRPPool {\\n    function getController() external view returns (address);\\n   enum Etypes {\\n        OPENED,\\n        CLOSED\\n    }\\n\\n    function etype() external view returns (Etypes);\\n    function isCompletedCollect() external view returns (bool);\\n}\\n\\ninterface IToken {\\n    function decimals() external view returns (uint);\\n}\\n\\ninterface IDesynOwnable {\\n    function adminList(address adr) external view returns (bool);\\n\\n    function getController() external view returns (address);\\n\\n    function getOwners() external view returns (address[] memory);\\n\\n    function getOwnerPercentage() external view returns (uint[] memory);\\n\\n    function allOwnerPercentage() external view returns (uint);\\n}\\n\\ninterface IDSProxy {\\n    function owner() external view returns (address);\\n}\\n\\ninterface ICRPFactory {\\n    function isCrp(address addr) external view returns (bool);\\n}\\n\\n/**\\n * @author Desyn Labs\\n * @title Vault managerFee\\n */\\ncontract UserVault is DesynOwnable {\\n    using SafeMath for uint;\\n    using Address for address;\\n\\n    struct claimTokenInfo {\\n        address token;\\n        uint decimals;\\n        uint amount;\\n    }\\n\\n    modifier onlyVault() {\\n        require(vaultAddress == msg.sender, \\\"ERR_NOT_CONTROLLER\\\");\\n        _;\\n    }\\n\\n    event LOGVaultAdr(address indexed manager, address indexed caller);\\n    struct claimRecordInfo {\\n        uint time;\\n        claimTokenInfo[] tokens;\\n    }\\n    ICRPFactory crpFactory;\\n    //pool=>manager\\n    mapping(address => address) public pool_manager;\\n    //managerFee list\\n    mapping(address => address[]) public pool_manager_tokenList;\\n    mapping(address => uint[]) public pool_manager_tokenAmount;\\n    //issueFee list\\n    mapping(address => address[]) public pool_issue_tokenList;\\n    mapping(address => uint[]) public pool_issue_tokenAmount;\\n    //redeemFee list\\n    mapping(address => address[]) public pool_redeem_tokenList;\\n    mapping(address => uint[]) public pool_redeem_tokenAmount;\\n    //perfermanceFee list\\n    mapping(address => address[]) public pool_perfermance_tokenList;\\n    mapping(address => uint[]) public pool_perfermance_tokenAmount;\\n    //pool isClaim\\n    mapping(address => bool) public pool_manager_isClaim;\\n    mapping(address => bool) public black_list;\\n    //history record\\n    mapping(address => uint) public record_number;\\n    mapping(address => mapping(uint => claimRecordInfo)) public record_List;\\n    // kol list\\n    struct kolUserInfo {\\n        address userAdr;\\n        uint[] userAmount;\\n    }\\n    //pool => tokenList\\n    mapping(address => address[]) public kol_token_list;\\n    //pool => kol[]\\n    mapping(address => address[]) public kols_list;\\n    //pool => initTotalAmount[]\\n    mapping(address => uint) public init_totalAmount_list;\\n    //pool => manager => uint\\n    mapping(address => mapping(address => uint)) public manager_claimed_list;\\n    //pool => kol =>uint\\n    mapping(address => mapping(address => uint)) public kol_claimed_list;\\n    //pool => kol => totalAmount[]\\n    mapping(address => mapping(address => uint[])) public kol_totalAmount_list;\\n    //pool => user => index\\n    mapping(address => mapping(address => uint)) public user_index_list;\\n    // pool => user => kol\\n    mapping(address => mapping(address => address)) public user_kol_list;\\n    // pool => kol => kolUserInfo[]\\n    mapping(address => mapping(address => kolUserInfo[])) public kol_user_info;\\n    //kol pool params\\n    mapping(address => bool) public is_set_params;\\n    mapping(address => SmartPoolManager.KolPoolParams) public kol_pool_params;\\n    // struct\\n    uint public total_ratio = 100;\\n    //Vault address\\n    address public vaultAddress;\\n\\n    constructor() public {}\\n\\n    receive() external payable {}\\n\\n    function depositToken(\\n        address pool,\\n        uint types,\\n        address[] calldata poolTokens,\\n        uint[] calldata tokensAmount\\n    ) public onlyVault {\\n        require(poolTokens.length == tokensAmount.length, \\\"Token list length is not eequalqu\\\");\\n        if (pool_manager[pool] == address(0)) {\\n            address manager_address = ICRPPool(pool).getController();\\n            pool_manager[pool] = manager_address;\\n        }\\n        (address[] memory _pool_tokenList, uint[] memory _pool_tokenAmount) = createTokenParams(pool, types);\\n        (address[] memory new_pool_tokenList, uint[] memory new_pool_tokenAmount) = communaldepositToken(poolTokens, tokensAmount, pool, _pool_tokenList, _pool_tokenAmount);\\n        setResult(pool, types, new_pool_tokenList, new_pool_tokenAmount);\\n        pool_manager_isClaim[pool] = true;\\n    }\\n\\n    function claimKolReward(address pool) public {\\n        try IVault(vaultAddress).managerClaim(pool) {} catch {}\\n          if(isClosePool(pool)){\\n        require(crpFactory.isCrp(pool), \\\"invalid address\\\");\\n        require(ICRPPool(pool).isCompletedCollect(), \\\"Not CompletedCollect\\\");\\n        uint totalAmount = kolUnClaimAmount(pool, msg.sender);\\n        require(totalAmount > 0, \\\"Not Reward\\\");\\n        kol_claimed_list[pool][msg.sender] += totalAmount;\\n        if (address(msg.sender).isContract()) {\\n            IERC20(kol_token_list[pool][0]).transfer(IDSProxy(msg.sender).owner(), totalAmount);\\n        } else {\\n            IERC20(kol_token_list[pool][0]).transfer(msg.sender, totalAmount);\\n        }\\n          }\\n    }\\n\\n    function claimManagersReward(address pool) public {\\n        try IVault(vaultAddress).managerClaim(pool) {} catch {}\\n        if(isClosePool(pool)){\\n             require(crpFactory.isCrp(pool), \\\"invalid address\\\");\\n        require(ICRPPool(pool).isCompletedCollect(), \\\"Not CompletedCollect\\\");\\n        require(IDesynOwnable(pool).adminList(msg.sender) || IDesynOwnable(pool).getController() == msg.sender, \\\"Not Owner\\\");\\n        uint totalAmount = getUnManagerReward(pool, msg.sender);\\n        require(totalAmount > 0, \\\"Not Reward\\\");\\n        manager_claimed_list[pool][msg.sender] += totalAmount;\\n        if (address(msg.sender).isContract()) {\\n            IERC20(kol_token_list[pool][0]).transfer(IDSProxy(msg.sender).owner(), totalAmount);\\n        } else {\\n            IERC20(kol_token_list[pool][0]).transfer(msg.sender, totalAmount);\\n        }\\n        }  \\n    }\\n\\n        function isClosePool(address pool) public view returns (bool) {\\n        return ICRPPool(pool).etype() == ICRPPool.Etypes.CLOSED;\\n    }\\n\\n    function getUnManagerReward(address pool, address maragerAdr) public view returns (uint) {\\n        return getManagerReward(pool, maragerAdr).sub(manager_claimed_list[pool][maragerAdr]);\\n    }\\n\\n    function getManagerReward(address pool, address maragerAdr) public view returns (uint) {\\n        uint totalAmount = getAllManagersReward(pool);\\n        address[] memory managerAddressList = IDesynOwnable(pool).getOwners();\\n        uint[] memory ownerPercentage = IDesynOwnable(pool).getOwnerPercentage();\\n        uint allOwnerPercentage = IDesynOwnable(pool).allOwnerPercentage();\\n        for (uint k = 0; k < managerAddressList.length; k++) {\\n            if (maragerAdr == managerAddressList[k]) {\\n                return totalAmount.mul(ownerPercentage[k]).div(allOwnerPercentage);\\n            }\\n        }\\n    }\\n\\n    function getAllManagersReward(address pool) public view returns (uint) {\\n        return getPoolAllFee(pool).sub(getAllKolReward(pool));\\n    }\\n\\n    function getPoolAllFee(address pool) public view returns (uint totalAmount) {\\n        totalAmount += pool_manager_tokenAmount[pool].length > 0 ? pool_manager_tokenAmount[pool][0] : 0;\\n        totalAmount += pool_issue_tokenAmount[pool].length > 0 ? pool_issue_tokenAmount[pool][0] : 0;\\n        totalAmount += pool_redeem_tokenAmount[pool].length > 0 ? pool_redeem_tokenAmount[pool][0] : 0;\\n        totalAmount += pool_perfermance_tokenAmount[pool].length > 0 ? pool_perfermance_tokenAmount[pool][0] : 0;\\n    }\\n\\n    function getAllKolReward(address pool) public view returns (uint totalAmount) {\\n        address[] memory list = kols_list[pool];\\n        uint len = list.length;\\n        for (uint i = 0; i < len; i++) {\\n            totalAmount += kolClaimTotal(pool, list[i]);\\n        }\\n    }\\n\\n    function kolUnClaimAmount(address pool, address kol) public view returns (uint) {\\n        uint totalClaim = kolClaimTotal(pool, kol);\\n        uint totalClaimed = kol_claimed_list[pool][kol];\\n        return totalClaim.sub(totalClaimed);\\n    }\\n\\n    function kolClaimTotal(address pool, address kol) public view returns (uint) {\\n        uint totalFee;\\n        if (kol_totalAmount_list[pool][kol].length == 0) return totalFee;\\n        totalFee = totalFee.add(computeReward(pool, kol, 0));\\n        totalFee = totalFee.add(computeReward(pool, kol, 1));\\n        totalFee = totalFee.add(computeReward(pool, kol, 2));\\n        totalFee = totalFee.add(computeReward(pool, kol, 3));\\n        totalFee = totalFee.mul(kol_totalAmount_list[pool][kol][0]).div(init_totalAmount_list[pool]);\\n        return totalFee;\\n    }\\n\\n    function computeReward(\\n        address pool,\\n        address kol,\\n        uint types\\n    ) public view returns (uint) {\\n        uint kolTotalAmount = kol_totalAmount_list[pool][kol].length > 0 ? kol_totalAmount_list[pool][kol][0] : 0;\\n        SmartPoolManager.KolPoolParams memory params = kol_pool_params[pool];\\n        uint totalFee;\\n        if (types == 0) {\\n            if (pool_manager_tokenAmount[pool].length > 0) {\\n                totalFee = pool_manager_tokenAmount[pool][0].mul(levelJudge(kolTotalAmount, params.managerFee)).div(total_ratio);\\n            }\\n        } else if (types == 1) {\\n            if (pool_issue_tokenAmount[pool].length > 0) {\\n                totalFee = pool_issue_tokenAmount[pool][0].mul(levelJudge(kolTotalAmount, params.issueFee)).div(total_ratio);\\n            }\\n        } else if (types == 2) {\\n            if (pool_redeem_tokenAmount[pool].length > 0) {\\n                totalFee = pool_redeem_tokenAmount[pool][0].mul(levelJudge(kolTotalAmount, params.redeemFee)).div(total_ratio);\\n            }\\n        } else if (types == 3) {\\n            if (pool_perfermance_tokenAmount[pool].length > 0) {\\n                totalFee = pool_perfermance_tokenAmount[pool][0].mul(levelJudge(kolTotalAmount, params.perfermanceFee)).div(total_ratio);\\n            }\\n        }\\n        return totalFee;\\n    }\\n\\n    function levelJudge(uint amount, SmartPoolManager.feeParams memory _feeParams) internal view returns (uint) {\\n        for (uint i = 0; i < 4; i++) {\\n            if (i == 0) {\\n                if (_feeParams.firstLevel.level <= amount && amount < _feeParams.secondLevel.level) {\\n                    return _feeParams.firstLevel.ratio;\\n                }\\n            }\\n            if (i == 1) {\\n                if (_feeParams.secondLevel.level <= amount && amount < _feeParams.thirdLevel.level) {\\n                    return _feeParams.secondLevel.ratio;\\n                }\\n            }\\n            if (i == 2) {\\n                if (_feeParams.thirdLevel.level <= amount && amount < _feeParams.fourLevel.level) {\\n                    return _feeParams.thirdLevel.ratio;\\n                }\\n            }\\n            if (i == 3) {\\n                if (_feeParams.fourLevel.level <= amount) {\\n                    return _feeParams.fourLevel.ratio;\\n                }\\n            }\\n        }\\n    }\\n\\n    function setResult(\\n        address pool,\\n        uint types,\\n        address[] memory new_pool_tokenList,\\n        uint[] memory new_pool_tokenAmount\\n    ) internal {\\n        if (types == 0) {\\n            pool_manager_tokenList[pool] = new_pool_tokenList;\\n            pool_manager_tokenAmount[pool] = new_pool_tokenAmount;\\n        } else if (types == 1) {\\n            pool_issue_tokenList[pool] = new_pool_tokenList;\\n            pool_issue_tokenAmount[pool] = new_pool_tokenAmount;\\n        } else if (types == 2) {\\n            pool_redeem_tokenList[pool] = new_pool_tokenList;\\n            pool_redeem_tokenAmount[pool] = new_pool_tokenAmount;\\n        } else if (types == 3) {\\n            pool_perfermance_tokenList[pool] = new_pool_tokenList;\\n            pool_perfermance_tokenAmount[pool] = new_pool_tokenAmount;\\n        }\\n    }\\n\\n    function createTokenParams(address pool, uint types) internal view returns (address[] memory _pool_tokenList, uint[] memory _pool_tokenAmount) {\\n        if (types == 0) {\\n            _pool_tokenList = pool_manager_tokenList[pool];\\n            _pool_tokenAmount = pool_manager_tokenAmount[pool];\\n        } else if (types == 1) {\\n            _pool_tokenList = pool_issue_tokenList[pool];\\n            _pool_tokenAmount = pool_issue_tokenAmount[pool];\\n        } else if (types == 2) {\\n            _pool_tokenList = pool_redeem_tokenList[pool];\\n            _pool_tokenAmount = pool_redeem_tokenAmount[pool];\\n        } else if (types == 3) {\\n            _pool_tokenList = pool_perfermance_tokenList[pool];\\n            _pool_tokenAmount = pool_perfermance_tokenAmount[pool];\\n        }\\n    }\\n\\n    function communaldepositToken(\\n        address[] calldata poolTokens,\\n        uint[] calldata tokensAmount,\\n        address poolAdr,\\n        address[] memory _pool_tokenList,\\n        uint[] memory _pool_tokenAmount\\n    ) internal returns (address[] memory new_pool_tokenList, uint[] memory new_pool_tokenAmount) {\\n        //old\\n        //new\\n        new_pool_tokenList = new address[](poolTokens.length);\\n        new_pool_tokenAmount = new uint[](poolTokens.length);\\n        if ((_pool_tokenList.length == _pool_tokenAmount.length && _pool_tokenList.length == 0) || !pool_manager_isClaim[poolAdr]) {\\n            for (uint i = 0; i < poolTokens.length; i++) {\\n                // uint tokenBalance = tokensAmount[i];\\n                new_pool_tokenList[i] = poolTokens[i];\\n                new_pool_tokenAmount[i] = tokensAmount[i];\\n            }\\n        } else {\\n            for (uint k = 0; k < poolTokens.length; k++) {\\n                if (_pool_tokenList[k] == poolTokens[k]) {\\n                    uint tokenBalance = tokensAmount[k];\\n                    new_pool_tokenList[k] = poolTokens[k];\\n                    new_pool_tokenAmount[k] = _pool_tokenAmount[k].add(tokenBalance);\\n                }\\n            }\\n        }\\n        return (new_pool_tokenList, new_pool_tokenAmount);\\n    }\\n\\n    function recordTokenInfo(\\n        address kol,\\n        address user,\\n        address[] calldata poolTokens,\\n        uint[] calldata tokensAmount\\n    ) public {\\n        require(poolTokens.length == tokensAmount.length, \\\"Token list length is not eequalqu\\\");\\n        require(crpFactory.isCrp(msg.sender), \\\"invalid address\\\");\\n        if (kol_token_list[msg.sender].length == 0) {\\n            kol_token_list[msg.sender] = poolTokens;\\n        }\\n        address newKol = user_kol_list[msg.sender][user];\\n        if (user_kol_list[msg.sender][user] == address(0)) {\\n            user_kol_list[msg.sender][user] = kol;\\n            kols_list[msg.sender].push(kol);\\n            newKol = kol;\\n        }\\n        require(newKol != address(0), \\\"kol address is zore\\\");\\n        //total amount record\\n        init_totalAmount_list[msg.sender] = init_totalAmount_list[msg.sender].add(tokensAmount[0]);\\n        uint[] memory totalAmounts = new uint[](poolTokens.length);\\n        for (uint i = 0; i < poolTokens.length; i++) {\\n            if (kol_totalAmount_list[msg.sender][newKol].length == 0) {\\n                totalAmounts[i] = tokensAmount[i];\\n            } else {\\n                totalAmounts[i] = tokensAmount[i].add(kol_totalAmount_list[msg.sender][newKol][i]);\\n            }\\n        }\\n        kol_totalAmount_list[msg.sender][newKol] = totalAmounts;\\n        //kol user info record\\n        kolUserInfo[] storage userInfoArray = kol_user_info[msg.sender][newKol];\\n        uint index = user_index_list[msg.sender][user];\\n        if (index == 0) {\\n            kolUserInfo memory userInfo;\\n            userInfo.userAdr = user;\\n            userInfo.userAmount = tokensAmount;\\n            userInfoArray.push(userInfo);\\n            user_index_list[msg.sender][user] = userInfoArray.length;\\n        } else {\\n            kolUserInfo storage userInfo = kol_user_info[msg.sender][newKol][index - 1];\\n            for (uint a = 0; a < userInfo.userAmount.length; a++) {\\n                userInfo.userAmount[a] = userInfo.userAmount[a].add(tokensAmount[a]);\\n            }\\n        }\\n    }\\n\\n    function setPoolParams(address pool, SmartPoolManager.KolPoolParams memory _poolParams) public {\\n        require(crpFactory.isCrp(pool), \\\"invalid address\\\");\\n        require(!is_set_params[pool], \\\"Params is seted\\\");\\n        is_set_params[pool] = true;\\n        kol_pool_params[pool] = _poolParams;\\n    }\\n\\n    function getKolsAdr(address pool) public view returns (address[] memory) {\\n        return kols_list[pool];\\n    }\\n\\n    function getPoolUserList(address pool) public view returns (address[] memory tokenList) {\\n        return kol_token_list[pool];\\n    }\\n\\n    function getPoolUserKolAdr(address pool, address user) public view returns (address tokenAddress) {\\n        return user_kol_list[pool][user];\\n    }\\n\\n    function getPoolKolUserInfo(address pool, address kol) public view returns (kolUserInfo[] memory info) {\\n        return kol_user_info[pool][kol];\\n    }\\n\\n    function getPoolKolTotalAmounts(address pool, address kol) public view returns (uint[] memory) {\\n        return kol_totalAmount_list[pool][kol];\\n    }\\n\\n    function poolManagerTokenList(address pool) public view returns (address[] memory tokens) {\\n        return pool_manager_tokenList[pool];\\n    }\\n\\n    function poolManagerTokenAmount(address pool) public view returns (uint[] memory tokenAmount) {\\n        return pool_manager_tokenAmount[pool];\\n    }\\n\\n    function poolIssueTokenList(address pool) public view returns (address[] memory tokens) {\\n        return pool_issue_tokenList[pool];\\n    }\\n\\n    function poolRedeemTokenList(address pool) public view returns (address[] memory tokens) {\\n        return pool_redeem_tokenList[pool];\\n    }\\n\\n    function poolIssueTokenAmount(address pool) public view returns (uint[] memory tokenAmount) {\\n        return pool_issue_tokenAmount[pool];\\n    }\\n\\n    function poolRedeemTokenAmount(address pool) public view returns (uint[] memory tokenAmount) {\\n        return pool_redeem_tokenAmount[pool];\\n    }\\n\\n    function poolPerfermanceTokenList(address pool) public view returns (address[] memory tokens) {\\n        return pool_perfermance_tokenList[pool];\\n    }\\n\\n    function poolPerfermanceTokenAmount(address pool) public view returns (uint[] memory tokenAmount) {\\n        return pool_perfermance_tokenAmount[pool];\\n    }\\n\\n    function getManagerClaimBool(address pool) public view returns (bool bools) {\\n        bools = pool_manager_isClaim[pool];\\n    }\\n\\n    function setBlackList(address pool, bool bools) public onlyOwner {\\n        black_list[pool] = bools;\\n    }\\n\\n    function setCrpFactory(address adr) public onlyOwner {\\n        crpFactory = ICRPFactory(adr);\\n    }\\n\\n    function adminClaimToken(\\n        address token,\\n        address user,\\n        uint amount\\n    ) public onlyOwner {\\n        IERC20(token).transfer(user, amount);\\n    }\\n\\n    function getBNB() public payable onlyOwner {\\n        msg.sender.transfer(address(this).balance);\\n    }\\n\\n    function setVaultAdr(address adr) public onlyOwner {\\n        require(adr != address(0), \\\"Address is Zero\\\");\\n        vaultAddress = adr;\\n        emit LOGVaultAdr(adr, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0xa8d2c58782e5eb33266fad583802ae47d2fd7bbc8bed12a8b2db6b5648104032\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IBFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\nimport \\\"../libraries/SmartPoolManager.sol\\\";\\n\\ninterface IBPool {\\n    function rebind(\\n        address token,\\n        uint balance,\\n        uint denorm\\n    ) external;\\n\\n    function rebindSmart(\\n        address tokenA,\\n        address tokenB,\\n        uint deltaWeight,\\n        uint deltaBalance,\\n        bool isSoldout,\\n        uint minAmountOut\\n    ) external;\\n\\n    function execute(\\n        address _target,\\n        uint _value,\\n        bytes calldata _data\\n    ) external returns (bytes memory _returnValue);\\n\\n    function bind(\\n        address token,\\n        uint balance,\\n        uint denorm\\n    ) external;\\n\\n    function unbind(address token) external;\\n\\n    function unbindPure(address token) external;\\n\\n    function isBound(address token) external view returns (bool);\\n\\n    function getBalance(address token) external view returns (uint);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function getSwapFee() external view returns (uint);\\n\\n    function isPublicSwap() external view returns (bool);\\n\\n    function getDenormalizedWeight(address token) external view returns (uint);\\n\\n    function getTotalDenormalizedWeight() external view returns (uint);\\n\\n    function EXIT_FEE() external view returns (uint);\\n\\n    function getCurrentTokens() external view returns (address[] memory tokens);\\n\\n    function setController(address owner) external;\\n}\\n\\ninterface IBFactory {\\n    function newLiquidityPool() external returns (IBPool);\\n\\n    function setBLabs(address b) external;\\n\\n    function collect(IBPool pool) external;\\n\\n    function isBPool(address b) external view returns (bool);\\n\\n    function getBLabs() external view returns (address);\\n\\n    function getSwapRouter() external view returns (address);\\n\\n    function getVault() external view returns (address);\\n\\n    function getUserVault() external view returns (address);\\n\\n    function getVaultAddress() external view returns (address);\\n\\n    function getOracleAddress() external view returns (address);\\n\\n    function getManagerOwner() external view returns (address);\\n\\n    function isTokenWhitelistedForVerify(uint sort, address token) external view returns (bool);\\n\\n    function isTokenWhitelistedForVerify(address token) external view returns (bool);\\n\\n    function getModuleStatus(address etf, address module) external view returns (bool);\\n}\\n\\ninterface IVault {\\n    function depositManagerToken(address[] calldata poolTokens, uint[] calldata tokensAmount) external;\\n\\n    function depositIssueRedeemPToken(\\n        address[] calldata poolTokens,\\n        uint[] calldata tokensAmount,\\n        uint[] calldata tokensAmountP,\\n        bool isPerfermance\\n    ) external;\\n\\n    function managerClaim(address pool) external;\\n\\n    function getManagerClaimBool(address pool) external view returns (bool);\\n}\\n\\ninterface IUserVault {\\n    function recordTokenInfo(\\n        address kol,\\n        address user,\\n        address[] calldata poolTokens,\\n        uint[] calldata tokensAmount\\n    ) external;\\n}\\n\\ninterface Oracles {\\n    function getPrice(address tokenAddress) external returns (uint price);\\n\\n    function getAllPrice(address[] calldata poolTokens, uint[] calldata tokensAmount) external returns (uint);\\n}\\n\",\"keccak256\":\"0x13c400ca7a5f59c8730f553fcf189c14af0c0d65a79012793cbde56ce221a419\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IConfigurableRightsPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Interface declarations\\n\\n// Introduce to avoid circularity (otherwise, the CRP and SmartPoolManager include each other)\\n// Removing circularity allows flattener tools to work, which enables Etherscan verification\\ninterface IConfigurableRightsPool {\\n    function mintPoolShareFromLib(uint amount) external;\\n\\n    function pushPoolShareFromLib(address to, uint amount) external;\\n\\n    function pullPoolShareFromLib(address from, uint amount) external;\\n\\n    function burnPoolShareFromLib(uint amount) external;\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function getController() external view returns (address);\\n}\\n\",\"keccak256\":\"0x54defbc333ab8f90c4fe352c694c360cc38fd707606199caf05fc165a64da788\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Interface declarations\\n\\n/* solhint-disable func-order */\\n\\ninterface IERC20 {\\n    // Emitted when the allowance of a spender for an owner is set by a call to approve.\\n    // Value is the new allowance\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n\\n    // Emitted when value tokens are moved from one account (from) to another (to).\\n    // Note that value may be zero\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    // Returns the amount of tokens in existence\\n    function totalSupply() external view returns (uint);\\n\\n    // Returns the amount of tokens owned by account\\n    function balanceOf(address account) external view returns (uint);\\n\\n    // Returns the decimals of tokens\\n    function decimals() external view returns (uint8);\\n\\n    function symbol() external view returns (string memory);\\n\\n    // Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner\\n    // through transferFrom. This is zero by default\\n    // This value changes when approve or transferFrom are called\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    // Sets amount as the allowance of spender over the caller\\u2019s tokens\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits an Approval event.\\n    function approve(address spender, uint amount) external returns (bool);\\n\\n    // Moves amount tokens from the caller\\u2019s account to recipient\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits a Transfer event.\\n    function transfer(address recipient, uint amount) external returns (bool);\\n\\n    // Moves amount tokens from sender to recipient using the allowance mechanism\\n    // Amount is then deducted from the caller\\u2019s allowance\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits a Transfer event\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xfe22b6d6029b400b9cce7f9b39c546f99cd6922b2fd926e480e2b4d476ab26f8\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/DesynConstants.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n/**\\n * @author Desyn Labs\\n * @title Put all the constants in one place\\n */\\n\\nlibrary DesynConstants {\\n    // State variables (must be constant in a library)\\n\\n    // B \\\"ONE\\\" - all math is in the \\\"realm\\\" of 10 ** 18;\\n    // where numeric 1 = 10 ** 18\\n    uint public constant BONE = 10**18;\\n    uint public constant MIN_WEIGHT = BONE;\\n    uint public constant MAX_WEIGHT = BONE * 50;\\n    uint public constant MAX_TOTAL_WEIGHT = BONE * 50;\\n    uint public constant MIN_BALANCE = BONE / 10**6;\\n    uint public constant MAX_BALANCE = BONE * 10**12;\\n    uint public constant MIN_POOL_SUPPLY = BONE * 100;\\n    uint public constant MAX_POOL_SUPPLY = BONE * 10**9;\\n    uint public constant MIN_FEE = BONE / 10**6;\\n    uint public constant MAX_FEE = BONE / 10;\\n    //Fee Set\\n    uint public constant MANAGER_MIN_FEE = 0;\\n    uint public constant MANAGER_MAX_FEE = BONE / 10;\\n    uint public constant ISSUE_MIN_FEE = 0;\\n    uint public constant ISSUE_MAX_FEE = BONE / 10;\\n    uint public constant REDEEM_MIN_FEE = 0;\\n    uint public constant REDEEM_MAX_FEE = BONE / 10;\\n    uint public constant PERFERMANCE_MIN_FEE = 0;\\n    uint public constant PERFERMANCE_MAX_FEE = BONE / 2;\\n    // EXIT_FEE must always be zero, or ConfigurableRightsPool._pushUnderlying will fail\\n    uint public constant EXIT_FEE = 0;\\n    uint public constant MAX_IN_RATIO = BONE / 2;\\n    uint public constant MAX_OUT_RATIO = (BONE / 3) + 1 wei;\\n    // Must match BConst.MIN_BOUND_TOKENS and BConst.MAX_BOUND_TOKENS\\n    uint public constant MIN_ASSET_LIMIT = 1;\\n    uint public constant MAX_ASSET_LIMIT = 16;\\n    uint public constant MAX_UINT = uint(-1);\\n    uint public constant MAX_COLLECT_PERIOD = 60 days;\\n}\\n\",\"keccak256\":\"0x7980d0f32316714804b3fa02faa0f450ce206920e5538a27921b5de4e85de737\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/DesynSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Imports\\n\\nimport \\\"./DesynConstants.sol\\\";\\n\\n/**\\n * @author Desyn Labs\\n * @title SafeMath - wrap Solidity operators to prevent underflow/overflow\\n * @dev badd and bsub are basically identical to OpenZeppelin SafeMath; mul/div have extra checks\\n */\\nlibrary DesynSafeMath {\\n    /**\\n     * @notice Safe addition\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev if we are adding b to a, the resulting sum must be greater than a\\n     * @return - sum of operands; throws if overflow\\n     */\\n    function badd(uint a, uint b) internal pure returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, \\\"ERR_ADD_OVERFLOW\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned subtraction\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Do a signed subtraction, and check that it produces a positive value\\n     *      (i.e., a - b is valid if b <= a)\\n     * @return - a - b; throws if underflow\\n     */\\n    function bsub(uint a, uint b) internal pure returns (uint) {\\n        (uint c, bool negativeResult) = bsubSign(a, b);\\n        require(!negativeResult, \\\"ERR_SUB_UNDERFLOW\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Safe signed subtraction\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Do a signed subtraction\\n     * @return - difference between a and b, and a flag indicating a negative result\\n     *           (i.e., a - b if a is greater than or equal to b; otherwise b - a)\\n     */\\n    function bsubSign(uint a, uint b) internal pure returns (uint, bool) {\\n        if (b <= a) {\\n            return (a - b, false);\\n        } else {\\n            return (b - a, true);\\n        }\\n    }\\n\\n    /**\\n     * @notice Safe multiplication\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Multiply safely (and efficiently), rounding down\\n     * @return - product of operands; throws if overflow or rounding error\\n     */\\n    function bmul(uint a, uint b) internal pure returns (uint) {\\n        // Gas optimization (see github.com/OpenZeppelin/openzeppelin-contracts/pull/522)\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // Standard overflow check: a/a*b=b\\n        uint c0 = a * b;\\n        require(c0 / a == b, \\\"ERR_MUL_OVERFLOW\\\");\\n\\n        // Round to 0 if x*y < BONE/2?\\n        uint c1 = c0 + (DesynConstants.BONE / 2);\\n        require(c1 >= c0, \\\"ERR_MUL_OVERFLOW\\\");\\n        uint c2 = c1 / DesynConstants.BONE;\\n        return c2;\\n    }\\n\\n    /**\\n     * @notice Safe division\\n     * @param dividend - first operand\\n     * @param divisor - second operand\\n     * @dev Divide safely (and efficiently), rounding down\\n     * @return - quotient; throws if overflow or rounding error\\n     */\\n    function bdiv(uint dividend, uint divisor) internal pure returns (uint) {\\n        require(divisor != 0, \\\"ERR_DIV_ZERO\\\");\\n\\n        // Gas optimization\\n        if (dividend == 0) {\\n            return 0;\\n        }\\n\\n        uint c0 = dividend * DesynConstants.BONE;\\n        require(c0 / dividend == DesynConstants.BONE, \\\"ERR_DIV_INTERNAL\\\"); // bmul overflow\\n\\n        uint c1 = c0 + (divisor / 2);\\n        require(c1 >= c0, \\\"ERR_DIV_INTERNAL\\\"); //  badd require\\n\\n        uint c2 = c1 / divisor;\\n        return c2;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer modulo\\n     * @dev Returns the remainder of dividing two unsigned integers.\\n     *      Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * @param dividend - first operand\\n     * @param divisor - second operand -- cannot be zero\\n     * @return - quotient; throws if overflow or rounding error\\n     */\\n    function bmod(uint dividend, uint divisor) internal pure returns (uint) {\\n        require(divisor != 0, \\\"ERR_MODULO_BY_ZERO\\\");\\n\\n        return dividend % divisor;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer max\\n     * @dev Returns the greater of the two input values\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the maximum of a and b\\n     */\\n    function bmax(uint a, uint b) internal pure returns (uint) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer min\\n     * @dev returns b, if b < a; otherwise returns a\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the lesser of the two input values\\n     */\\n    function bmin(uint a, uint b) internal pure returns (uint) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer average\\n     * @dev Guard against (a+b) overflow by dividing each operand separately\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the average of the two values\\n     */\\n    function baverage(uint a, uint b) internal pure returns (uint) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\\n    }\\n\\n    /**\\n     * @notice Babylonian square root implementation\\n     * @dev (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n     * @param y - operand\\n     * @return z - the square root result\\n     */\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9baf30b98a5f3a8c13ac9c4d5d4b176eabfd936aba8f5172c95b7c568fba68f3\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/SafeApprove.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Imports\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n// Libraries\\n\\n/**\\n * @author PieDAO (ported to Desyn Labs)\\n * @title SafeApprove - set approval for tokens that require 0 prior approval\\n * @dev Perhaps to address the known ERC20 race condition issue\\n *      See https://github.com/crytic/not-so-smart-contracts/tree/master/race_condition\\n *      Some tokens - notably KNC - only allow approvals to be increased from 0\\n */\\nlibrary SafeApprove {\\n    /**\\n     * @notice handle approvals of tokens that require approving from a base of 0\\n     * @param token - the token we're approving\\n     * @param spender - entity the owner (sender) is approving to spend his tokens\\n     * @param amount - number of tokens being approved\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint amount\\n    ) internal returns (bool) {\\n        uint currentAllowance = token.allowance(address(this), spender);\\n\\n        // Do nothing if allowance is already set to this value\\n        if (currentAllowance == amount) {\\n            return true;\\n        }\\n\\n        // If approval is not zero reset it to zero first\\n        if (currentAllowance != 0) {\\n            token.approve(spender, 0);\\n        }\\n\\n        // do the actual approval\\n        return token.approve(spender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xa51ebf770f2676085b89b1636688cc086289cfe27f614dfd0c15142535c26752\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/SmartPoolManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Needed to pass in structs\\npragma experimental ABIEncoderV2;\\n\\n// Imports\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IConfigurableRightsPool.sol\\\";\\nimport \\\"../interfaces/IBFactory.sol\\\"; // unused\\nimport \\\"./DesynSafeMath.sol\\\"; // unused\\nimport \\\"./SafeApprove.sol\\\";\\n\\n/**\\n * @author Desyn Labs\\n * @title Factor out the weight updates\\n */\\nlibrary SmartPoolManager {\\n    //kol pool params\\n    struct levelParams {\\n        uint level;\\n        uint ratio;\\n    }\\n\\n    struct feeParams {\\n        levelParams firstLevel;\\n        levelParams secondLevel;\\n        levelParams thirdLevel;\\n        levelParams fourLevel;\\n    }\\n    struct KolPoolParams {\\n        feeParams managerFee;\\n        feeParams issueFee;\\n        feeParams redeemFee;\\n        feeParams perfermanceFee;\\n    }\\n\\n    // Type declarations\\n    enum Etypes {\\n        OPENED,\\n        CLOSED\\n    }\\n\\n    enum Period {\\n        HALF,\\n        ONE,\\n        TWO\\n    }\\n\\n    // updateWeight and pokeWeights are unavoidably long\\n    /* solhint-disable function-max-lines */\\n    struct Status {\\n        uint collectPeriod;\\n        uint collectEndTime;\\n        uint closurePeriod;\\n        uint closureEndTime;\\n        uint upperCap;\\n        uint floorCap;\\n        uint managerFee;\\n        uint redeemFee;\\n        uint issueFee;\\n        uint perfermanceFee;\\n        uint startClaimFeeTime;\\n    }\\n\\n    struct PoolParams {\\n        // Desyn Pool Token (representing shares of the pool)\\n        string poolTokenSymbol;\\n        string poolTokenName;\\n        // Tokens inside the Pool\\n        address[] constituentTokens;\\n        uint[] tokenBalances;\\n        uint[] tokenWeights;\\n        uint swapFee;\\n        uint managerFee;\\n        uint redeemFee;\\n        uint issueFee;\\n        uint perfermanceFee;\\n        Etypes etype;\\n    }\\n\\n    struct PoolTokenRange {\\n        uint bspFloor;\\n        uint bspCap;\\n    }\\n\\n    struct Fund {\\n        uint etfAmount;\\n        uint fundAmount;\\n    }\\n\\n    function initRequire(\\n        uint swapFee,\\n        uint managerFee,\\n        uint issueFee,\\n        uint redeemFee,\\n        uint perfermanceFee,\\n        uint tokenBalancesLength,\\n        uint tokenWeightsLength,\\n        uint constituentTokensLength,\\n        bool initBool\\n    ) external pure {\\n        // We don't have a pool yet; check now or it will fail later (in order of likelihood to fail)\\n        // (and be unrecoverable if they don't have permission set to change it)\\n        // Most likely to fail, so check first\\n        require(!initBool, \\\"Init fail\\\");\\n        require(swapFee >= DesynConstants.MIN_FEE, \\\"ERR_INVALID_SWAP_FEE\\\");\\n        require(swapFee <= DesynConstants.MAX_FEE, \\\"ERR_INVALID_SWAP_FEE\\\");\\n        require(managerFee >= DesynConstants.MANAGER_MIN_FEE, \\\"ERR_INVALID_MANAGER_FEE\\\");\\n        require(managerFee <= DesynConstants.MANAGER_MAX_FEE, \\\"ERR_INVALID_MANAGER_FEE\\\");\\n        require(issueFee >= DesynConstants.ISSUE_MIN_FEE, \\\"ERR_INVALID_ISSUE_MIN_FEE\\\");\\n        require(issueFee <= DesynConstants.ISSUE_MAX_FEE, \\\"ERR_INVALID_ISSUE_MAX_FEE\\\");\\n        require(redeemFee >= DesynConstants.REDEEM_MIN_FEE, \\\"ERR_INVALID_REDEEM_MIN_FEE\\\");\\n        require(redeemFee <= DesynConstants.REDEEM_MAX_FEE, \\\"ERR_INVALID_REDEEM_MAX_FEE\\\");\\n        require(perfermanceFee >= DesynConstants.PERFERMANCE_MIN_FEE, \\\"ERR_INVALID_PERFERMANCE_MIN_FEE\\\");\\n        require(perfermanceFee <= DesynConstants.PERFERMANCE_MAX_FEE, \\\"ERR_INVALID_PERFERMANCE_MAX_FEE\\\");\\n\\n        // Arrays must be parallel\\n        require(tokenBalancesLength == constituentTokensLength, \\\"ERR_START_BALANCES_MISMATCH\\\");\\n        require(tokenWeightsLength == constituentTokensLength, \\\"ERR_START_WEIGHTS_MISMATCH\\\");\\n        // Cannot have too many or too few - technically redundant, since BPool.bind() would fail later\\n        // But if we don't check now, we could have a useless contract with no way to create a pool\\n\\n        require(constituentTokensLength >= DesynConstants.MIN_ASSET_LIMIT, \\\"ERR_TOO_FEW_TOKENS\\\");\\n        require(constituentTokensLength <= DesynConstants.MAX_ASSET_LIMIT, \\\"ERR_TOO_MANY_TOKENS\\\");\\n        // There are further possible checks (e.g., if they use the same token twice), but\\n        // we can let bind() catch things like that (i.e., not things that might reasonably work)\\n    }\\n\\n    /**\\n     * @notice Update the weight of an existing token\\n     * @dev Refactored to library to make CRPFactory deployable\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param tokenA - token to sell\\n     * @param tokenB - token to buy\\n     */\\n    function rebalance(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address tokenA,\\n        address tokenB,\\n        uint deltaWeight,\\n        uint minAmountOut\\n    ) external {\\n        uint currentWeightA = bPool.getDenormalizedWeight(tokenA);\\n        uint currentBalanceA = bPool.getBalance(tokenA);\\n        // uint currentWeightB = bPool.getDenormalizedWeight(tokenB);\\n\\n        require(deltaWeight <= currentWeightA, \\\"ERR_DELTA_WEIGHT_TOO_BIG\\\");\\n\\n        // deltaBalance = currentBalance * (deltaWeight / currentWeight)\\n        uint deltaBalanceA = DesynSafeMath.bmul(currentBalanceA, DesynSafeMath.bdiv(deltaWeight, currentWeightA));\\n\\n        // uint currentBalanceB = bPool.getBalance(tokenB);\\n\\n        // uint deltaWeight = DesynSafeMath.bsub(newWeight, currentWeightA);\\n\\n        // uint newWeightB = DesynSafeMath.bsub(currentWeightB, deltaWeight);\\n        // require(newWeightB >= 0, \\\"ERR_INCORRECT_WEIGHT_B\\\");\\n        bool soldout;\\n        if (deltaWeight == currentWeightA) {\\n            // reduct token A\\n            bPool.unbindPure(tokenA);\\n            soldout = true;\\n        }\\n\\n        // Now with the tokens this contract can bind them to the pool it controls\\n        bPool.rebindSmart(tokenA, tokenB, deltaWeight, deltaBalanceA, soldout, minAmountOut);\\n    }\\n\\n    /**\\n     * @notice Non ERC20-conforming tokens are problematic; don't allow them in pools\\n     * @dev Will revert if invalid\\n     * @param token - The prospective token to verify\\n     */\\n    function verifyTokenCompliance(address token) external {\\n        verifyTokenComplianceInternal(token);\\n    }\\n\\n    /**\\n     * @notice Non ERC20-conforming tokens are problematic; don't allow them in pools\\n     * @dev Will revert if invalid - overloaded to save space in the main contract\\n     * @param tokens - The prospective tokens to verify\\n     */\\n    function verifyTokenCompliance(address[] calldata tokens) external {\\n        for (uint i = 0; i < tokens.length; i++) {\\n            verifyTokenComplianceInternal(tokens[i]);\\n        }\\n    }\\n\\n    function createPoolInternalHandle(IBPool bPool, uint initialSupply) external view {\\n        require(initialSupply >= DesynConstants.MIN_POOL_SUPPLY, \\\"ERR_INIT_SUPPLY_MIN\\\");\\n        require(initialSupply <= DesynConstants.MAX_POOL_SUPPLY, \\\"ERR_INIT_SUPPLY_MAX\\\");\\n        require(bPool.EXIT_FEE() == 0, \\\"ERR_NONZERO_EXIT_FEE\\\");\\n        // EXIT_FEE must always be zero, or ConfigurableRightsPool._pushUnderlying will fail\\n        require(DesynConstants.EXIT_FEE == 0, \\\"ERR_NONZERO_EXIT_FEE\\\");\\n    }\\n\\n    function createPoolHandle(\\n        uint collectPeriod,\\n        uint upperCap,\\n        uint initialSupply\\n    ) external pure {\\n        require(collectPeriod <= DesynConstants.MAX_COLLECT_PERIOD, \\\"ERR_EXCEEDS_FUND_RAISING_PERIOD\\\");\\n        require(upperCap >= initialSupply, \\\"ERR_CAP_BIGGER_THAN_INITSUPPLY\\\");\\n        // collectEndTime = block.timestamp + collectPeriod;\\n        // if (boolA) {\\n        //     period = 1 seconds; // for test only\\n        // } else if (boolB) {\\n        //     period = 365 days;\\n        // } else {\\n        //     period = 730 days;\\n        // }\\n        // closureEndTime = period + collectEndTime;\\n    }\\n\\n    function exitPoolHandle(\\n        uint _endEtfAmount,\\n        uint _endFundAmount,\\n        uint _beginEtfAmount,\\n        uint _beginFundAmount,\\n        uint poolAmountIn,\\n        uint totalEnd\\n    )\\n        external\\n        pure\\n        returns (\\n            uint endEtfAmount,\\n            uint endFundAmount,\\n            uint profitRate\\n        )\\n    {\\n        endEtfAmount = DesynSafeMath.badd(_endEtfAmount, poolAmountIn);\\n        endFundAmount = DesynSafeMath.badd(_endFundAmount, totalEnd);\\n        uint amount1 = DesynSafeMath.bdiv(endFundAmount, endEtfAmount);\\n        uint amount2 = DesynSafeMath.bdiv(_beginFundAmount, _beginEtfAmount);\\n        if (amount1 > amount2) {\\n            profitRate = DesynSafeMath.bdiv(\\n                DesynSafeMath.bmul(DesynSafeMath.bsub(DesynSafeMath.bdiv(endFundAmount, endEtfAmount), DesynSafeMath.bdiv(_beginFundAmount, _beginEtfAmount)), poolAmountIn),\\n                totalEnd\\n            );\\n        }\\n    }\\n\\n    function exitPoolHandleA(\\n        uint _tokenAmountOut,\\n        uint redeemFee,\\n        uint profitRate,\\n        uint perfermanceFee\\n    )\\n        external\\n        pure\\n        returns (\\n            uint tokenAmountOutNew,\\n            uint amount,\\n            uint tokensAmountRedeem\\n        )\\n    {\\n        uint tokenAmountOut = _tokenAmountOut;\\n        tokenAmountOutNew = DesynSafeMath.bmul(tokenAmountOut, redeemFee);\\n        tokensAmountRedeem = tokenAmountOutNew;\\n        tokenAmountOutNew = DesynSafeMath.badd(DesynSafeMath.bmul(DesynSafeMath.bmul(tokenAmountOut, profitRate), perfermanceFee), tokenAmountOutNew);\\n        amount = DesynSafeMath.bsub(tokenAmountOut, tokenAmountOutNew);\\n    }\\n\\n    function exitPoolHandleB(\\n        bool bools,\\n        bool isCompletedCollect,\\n        uint closureEndTime,\\n        uint collectEndTime,\\n        uint _etfAmount,\\n        uint _fundAmount,\\n        uint poolAmountIn\\n    ) external view returns (uint etfAmount, uint fundAmount) {\\n        if (bools) {\\n            bool isCloseEtfCollectEndWithFailure = isCompletedCollect == false && block.timestamp >= collectEndTime;\\n            bool isCloseEtfClosureEnd = block.timestamp >= closureEndTime;\\n            require(isCloseEtfCollectEndWithFailure || isCloseEtfClosureEnd, \\\"ERR_CLOSURE_TIME_NOT_ARRIVED!\\\");\\n        }\\n        fundAmount = _fundAmount;\\n        etfAmount = _etfAmount;\\n        if (bools && block.timestamp <= collectEndTime) {\\n            fundAmount = DesynSafeMath.bmul(DesynSafeMath.bdiv(DesynSafeMath.bsub(_etfAmount, poolAmountIn), _etfAmount), _fundAmount);\\n            etfAmount = DesynSafeMath.bsub(_etfAmount, poolAmountIn);\\n        }\\n    }\\n\\n    function joinPoolHandle(\\n        bool canWhitelistLPs,\\n        bool isList,\\n        bool bools,\\n        uint collectEndTime\\n    ) external view {\\n        require(!canWhitelistLPs || isList, \\\"ERR_NOT_ON_WHITELIST\\\");\\n\\n        if (bools) {\\n            require(block.timestamp <= collectEndTime, \\\"ERR_COLLECT_PERIOD_FINISHED!\\\");\\n        }\\n    }\\n\\n    function rebalanceHandle(\\n        bool bools,\\n        uint collectEndTime,\\n        uint closureEndTime,\\n        bool canChangeWeights,\\n        address tokenA,\\n        address tokenB\\n    ) external view {\\n        if (bools) {\\n            require(block.timestamp > collectEndTime && block.timestamp < closureEndTime, \\\"ERR_NOT_REBALANCE_PERIOD\\\");\\n        }\\n\\n        require(canChangeWeights, \\\"ERR_NOT_CONFIGURABLE_WEIGHTS\\\");\\n        require(tokenA != tokenB, \\\"ERR_TOKENS_SAME\\\");\\n    }\\n\\n    /**\\n     * @notice Join a pool\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param poolAmountOut - number of pool tokens to receive\\n     * @param maxAmountsIn - Max amount of asset tokens to spend\\n     * @return actualAmountsIn - calculated values of the tokens to pull in\\n     */\\n    function joinPool(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        uint poolAmountOut,\\n        uint[] calldata maxAmountsIn\\n    ) external view returns (uint[] memory actualAmountsIn) {\\n        address[] memory tokens = bPool.getCurrentTokens();\\n\\n        require(maxAmountsIn.length == tokens.length, \\\"ERR_AMOUNTS_MISMATCH\\\");\\n\\n        uint poolTotal = self.totalSupply();\\n        // Subtract  1 to ensure any rounding errors favor the pool\\n        uint ratio = DesynSafeMath.bdiv(poolAmountOut, DesynSafeMath.bsub(poolTotal, 1));\\n\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        // We know the length of the array; initialize it, and fill it below\\n        // Cannot do \\\"push\\\" in memory\\n        actualAmountsIn = new uint[](tokens.length);\\n\\n        // This loop contains external calls\\n        // External calls are to math libraries or the underlying pool, so low risk\\n        for (uint i = 0; i < tokens.length; i++) {\\n            address t = tokens[i];\\n            uint bal = bPool.getBalance(t);\\n            // Add 1 to ensure any rounding errors favor the pool\\n            uint tokenAmountIn = DesynSafeMath.bmul(ratio, DesynSafeMath.badd(bal, 1));\\n\\n            require(tokenAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountIn <= maxAmountsIn[i], \\\"ERR_LIMIT_IN\\\");\\n\\n            actualAmountsIn[i] = tokenAmountIn;\\n        }\\n    }\\n\\n    /**\\n     * @notice Exit a pool - redeem pool tokens for underlying assets\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param poolAmountIn - amount of pool tokens to redeem\\n     * @param minAmountsOut - minimum amount of asset tokens to receive\\n     * @return pAiAfterExitFee - final amount in (after accounting for exit fee)\\n     * @return actualAmountsOut - calculated amounts of each token to pull\\n     */\\n    function exitPool(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        uint poolAmountIn,\\n        uint[] calldata minAmountsOut\\n    ) external view returns (uint pAiAfterExitFee, uint[] memory actualAmountsOut) {\\n        address[] memory tokens = bPool.getCurrentTokens();\\n\\n        require(minAmountsOut.length == tokens.length, \\\"ERR_AMOUNTS_MISMATCH\\\");\\n\\n        uint poolTotal = self.totalSupply();\\n\\n        // Calculate exit fee and the final amount in\\n        pAiAfterExitFee = DesynSafeMath.bsub(poolAmountIn, 0);\\n\\n        uint ratio = DesynSafeMath.bdiv(pAiAfterExitFee, DesynSafeMath.badd(poolTotal, 1));\\n\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        actualAmountsOut = new uint[](tokens.length);\\n\\n        // This loop contains external calls\\n        // External calls are to math libraries or the underlying pool, so low risk\\n        for (uint i = 0; i < tokens.length; i++) {\\n            address t = tokens[i];\\n            uint bal = bPool.getBalance(t);\\n            // Subtract 1 to ensure any rounding errors favor the pool\\n            uint tokenAmountOut = DesynSafeMath.bmul(ratio, DesynSafeMath.bsub(bal, 1));\\n\\n            require(tokenAmountOut != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountOut >= minAmountsOut[i], \\\"ERR_LIMIT_OUT\\\");\\n\\n            actualAmountsOut[i] = tokenAmountOut;\\n        }\\n    }\\n\\n    // Internal functions\\n    // Check for zero transfer, and make sure it returns true to returnValue\\n    function verifyTokenComplianceInternal(address token) internal {\\n        bool returnValue = IERC20(token).transfer(msg.sender, 0);\\n        require(returnValue, \\\"ERR_NONCONFORMING_TOKEN\\\");\\n    }\\n\\n    function WhitelistHandle(\\n        bool bool1,\\n        bool bool2,\\n        address adr\\n    ) external pure {\\n        require(bool1, \\\"ERR_CANNOT_WHITELIST_LPS\\\");\\n        require(bool2, \\\"ERR_LP_NOT_WHITELISTED\\\");\\n        require(adr != address(0), \\\"ERR_INVALID_ADDRESS\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x661001d283d11be82aca3a46a41378006d086545f28fc7582b8fd26122f82c14\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/DesynOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract DesynOwnable {\\n    // State variables\\n\\n    address private _owner;\\n    mapping(address => bool) public adminList;\\n    address[] public owners;\\n    uint[] public ownerPercentage;\\n    uint public allOwnerPercentage;\\n    // Event declarations\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    event AddAdmin(address indexed newAdmin, uint indexed amount);\\n    event RemoveAdmin(address indexed oldAdmin, uint indexed amount);\\n\\n    // Modifiers\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"ERR_NOT_CONTROLLER\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(adminList[msg.sender] || msg.sender == _owner, \\\"onlyAdmin\\\");\\n        _;\\n    }\\n\\n    // Function declarations\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() internal {\\n        _owner = msg.sender;\\n    }\\n\\n    function initHandle(address[] memory _owners, uint[] memory _ownerPercentage) external onlyOwner {\\n        require(_owners.length == _ownerPercentage.length, \\\"ownerP\\\");\\n        for (uint i = 0; i < _owners.length; i++) {\\n            allOwnerPercentage += _ownerPercentage[i];\\n            adminList[_owners[i]] = true;\\n        }\\n        owners = _owners;\\n        ownerPercentage = _ownerPercentage;\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n     *         Can only be called by the current owner\\n     * @dev external for gas optimization\\n     * @param newOwner - address of new owner\\n     */\\n    function setController(address newOwner) external onlyOwner {\\n        require(newOwner != address(0), \\\"ERR_ZERO_ADDRESS\\\");\\n\\n        emit OwnershipTransferred(_owner, newOwner);\\n\\n        _owner = newOwner;\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n     *         Can only be called by the current owner\\n     * @dev external for gas optimization\\n     * @param newOwner - address of new owner\\n     */\\n    function setAddAdminList(address newOwner, uint _ownerPercentage) external onlyOwner {\\n        require(!adminList[newOwner], \\\"Address is Owner\\\");\\n\\n        adminList[newOwner] = true;\\n        owners.push(newOwner);\\n        ownerPercentage.push(_ownerPercentage);\\n        allOwnerPercentage += _ownerPercentage;\\n        emit AddAdmin(newOwner, _ownerPercentage);\\n    }\\n\\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\\n    /// @param owner Address of owner.\\n    function removeOwner(address owner) external onlyOwner {\\n        adminList[owner] = false;\\n        uint amount = 0;\\n        for (uint i = 0; i < owners.length; i++) {\\n            if (owners[i] == owner) {\\n                owners[i] = owners[owners.length - 1];\\n                amount = ownerPercentage[i];\\n                ownerPercentage[i] = ownerPercentage[ownerPercentage.length - 1];\\n                break;\\n            }\\n        }\\n        owners.pop();\\n        ownerPercentage.pop();\\n        allOwnerPercentage -= amount;\\n        emit RemoveAdmin(owner, amount);\\n    }\\n\\n    // @dev Returns list of owners.\\n    // @return List of owner addresses.\\n    function getOwners() public view returns (address[] memory) {\\n        return owners;\\n    }\\n\\n    // @dev Returns list of owners.\\n    // @return List of owner addresses.\\n    function getOwnerPercentage() public view returns (uint[] memory) {\\n        return ownerPercentage;\\n    }\\n\\n    /**\\n     * @notice Returns the address of the current owner\\n     * @dev external for gas optimization\\n     * @return address - of the owner (AKA controller)\\n     */\\n    function getController() external view returns (address) {\\n        return _owner;\\n    }\\n}\\n\",\"keccak256\":\"0xd7f4d3132bf1b6abb6d07d9caf29a083ddb5d4319b59b573bf6008f4aef289af\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60806040526064601e5534801561001557600080fd5b50600080546001600160a01b0319163317905561503e806100376000396000f3fe6080604052600436106103495760003560e01c80638da901ba116101b3578063c5318d0f116100f3578063c5318d0f146109e2578063c90361dd14610a02578063cf4fe63514610a22578063d29986c114610a4f578063d6b485a514610a64578063d7256c7014610a84578063d832839014610aa4578063de7f302214610ac4578063e0bea5ac14610ae4578063e65065d914610b04578063e9c6931914610b24578063ebef44d914610b44578063ec7a4b5214610b64578063ed6aa3af14610b84578063ed76f94914610ba4578063edbfb5f514610bc4578063edd104a014610be4578063f36ed92814610c0457610350565b80638da901ba146107cd5780638f799e12146107ed5780639155dae71461080d57806392a0bb631461082d57806392eefe9b1461084d578063992f6ba51461086d578063a0e67e2b1461088d578063a5168ee2146108a2578063a97f9f33146108c2578063a9884df4146108e2578063bbb6e80814610902578063bc15c84014610922578063bd0011c214610942578063bdac429814610962578063c0fcb16614610982578063c1e57622146109a2578063c3e4d04f146109c257610350565b8063334a5d9611610289578063334a5d96146105a05780633eedcfa0146105c05780633ef14479146105e057806341c65e8314610600578063430bf08a146106205780634660c5a51461063557806346bead89146106555780634b414ab5146106755780634bbe2fca146106955780634da38416146106b5578063528b5853146106d5578063549d9f60146106f557806358d2dbf01461072557806368092bd9146107455780636936674d1461076557806378a619de1461078557806378c32a4b1461078d57806379f66374146107ad57610350565b8063025e7c271461035557806303a68ecb1461038b5780630b83e629146103b85780630e99089c146103e557806311e1532a146104055780631374aaf014610425578063154726b21461043a5780631556523a1461045a578063173825d9146104875780631a46506e146104a95780631eae039c146104c957806327304dfd146104e95780632b5230a9146105095780632c0bdbcf146105295780632c7c1bb5146105565780633018205f14610576578063309a042c1461058b57610350565b3661035057005b600080fd5b34801561036157600080fd5b50610375610370366004614acd565b610c24565b6040516103829190614b85565b60405180910390f35b34801561039757600080fd5b506103ab6103a6366004614747565b610c4b565b6040516103829190614f97565b3480156103c457600080fd5b506103d86103d336600461467e565b610c86565b6040516103829190614c79565b3480156103f157600080fd5b506103ab610400366004614646565b610d00565b34801561041157600080fd5b506103ab610420366004614646565b610e5b565b34801561043157600080fd5b506103ab610e78565b34801561044657600080fd5b506103ab61045536600461467e565b610e7e565b34801561046657600080fd5b5061047a610475366004614646565b610ec7565b6040516103829190614c8c565b34801561049357600080fd5b506104a76104a2366004614646565b610edc565b005b3480156104b557600080fd5b506103d86104c4366004614646565b6110c7565b3480156104d557600080fd5b506104a76104e4366004614747565b611133565b3480156104f557600080fd5b5061047a610504366004614646565b6111e3565b34801561051557600080fd5b506103d8610524366004614646565b6111f8565b34801561053557600080fd5b50610549610544366004614646565b611262565b6040516103829190614bb2565b34801561056257600080fd5b506103ab61057136600461467e565b6112d7565b34801561058257600080fd5b506103756112f4565b34801561059757600080fd5b506103d8611303565b3480156105ac57600080fd5b506103ab6105bb366004614845565b61135b565b3480156105cc57600080fd5b506103ab6105db36600461467e565b611389565b3480156105ec57600080fd5b506104a76105fb36600461494d565b6113a6565b34801561060c57600080fd5b5061054961061b366004614646565b611498565b34801561062c57600080fd5b5061037561150c565b34801561064157600080fd5b506104a76106503660046147b4565b61151b565b34801561066157600080fd5b506103ab61067036600461467e565b61175e565b34801561068157600080fd5b50610375610690366004614845565b61195b565b3480156106a157600080fd5b506103ab6106b0366004614845565b611990565b3480156106c157600080fd5b506105496106d0366004614646565b6119ad565b3480156106e157600080fd5b506103ab6106f0366004614646565b611a21565b34801561070157600080fd5b50610715610710366004614646565b611a33565b6040516103829493929190614f5e565b34801561073157600080fd5b5061037561074036600461467e565b611c1b565b34801561075157600080fd5b506104a7610760366004614787565b611c45565b34801561077157600080fd5b506104a7610780366004614646565b611c9a565b6104a761207e565b34801561079957600080fd5b506103756107a8366004614845565b6120d4565b3480156107b957600080fd5b506103756107c836600461467e565b6120ed565b3480156107d957600080fd5b5061047a6107e8366004614646565b612113565b3480156107f957600080fd5b506103ab61080836600461467e565b61219a565b34801561081957600080fd5b506104a7610828366004614870565b6121b7565b34801561083957600080fd5b5061047a610848366004614646565b612324565b34801561085957600080fd5b506104a7610868366004614646565b612339565b34801561087957600080fd5b506104a7610888366004614845565b6123e4565b34801561089957600080fd5b5061054961250d565b3480156108ae57600080fd5b506103d86108bd366004614646565b61256e565b3480156108ce57600080fd5b506103d86108dd366004614646565b6125d8565b3480156108ee57600080fd5b506103ab6108fd366004614845565b612642565b34801561090e57600080fd5b5061037561091d366004614747565b61265b565b34801561092e57600080fd5b5061037561093d366004614845565b6126a2565b34801561094e57600080fd5b5061047a61095d366004614646565b6126bb565b34801561096e57600080fd5b506103ab61097d366004614845565b6126d0565b34801561098e57600080fd5b5061047a61099d366004614646565b6126e9565b3480156109ae57600080fd5b506104a76109bd366004614646565b612707565b3480156109ce57600080fd5b506103756109dd366004614646565b612753565b3480156109ee57600080fd5b506103ab6109fd366004614acd565b61276e565b348015610a0e57600080fd5b50610549610a1d366004614646565b61278c565b348015610a2e57600080fd5b50610a42610a3d36600461467e565b612800565b6040516103829190614bff565b348015610a5b57600080fd5b506103ab6128e5565b348015610a7057600080fd5b506104a7610a7f366004614646565b6128eb565b348015610a9057600080fd5b506104a7610a9f3660046146b6565b612988565b348015610ab057600080fd5b50610375610abf366004614845565b612eb2565b348015610ad057600080fd5b50610549610adf366004614646565b612ecb565b348015610af057600080fd5b50610375610aff366004614845565b612f3f565b348015610b1057600080fd5b506103ab610b1f36600461467e565b612f58565b348015610b3057600080fd5b506103ab610b3f366004614747565b61303b565b348015610b5057600080fd5b50610549610b5f366004614646565b613477565b348015610b7057600080fd5b506103ab610b7f36600461467e565b6134eb565b348015610b9057600080fd5b506104a7610b9f366004614646565b613528565b348015610bb057600080fd5b506103ab610bbf366004614845565b613840565b348015610bd057600080fd5b506103ab610bdf366004614646565b613859565b348015610bf057600080fd5b50610375610bff366004614845565b61386b565b348015610c1057600080fd5b506103ab610c1f366004614646565b613884565b60028181548110610c3157fe5b6000918252602090912001546001600160a01b0316905081565b60186020528260005260406000206020528160005260406000208181548110610c7057fe5b9060005260206000200160009250925050505481565b6001600160a01b038083166000908152601860209081526040808320938516835292815290829020805483518184028101840190945280845260609392830182828015610cf257602002820191906000526020600020905b815481526020019060010190808311610cde575b505050505090505b92915050565b6001600160a01b038116600090815260086020526040812054610d24576000610d53565b6001600160a01b03821660009081526008602052604081208054909190610d4757fe5b90600052602060002001545b6001600160a01b0383166000908152600a6020526040902054910190610d7a576000610da9565b6001600160a01b0382166000908152600a602052604081208054909190610d9d57fe5b90600052602060002001545b6001600160a01b0383166000908152600c6020526040902054910190610dd0576000610dff565b6001600160a01b0382166000908152600c602052604081208054909190610df357fe5b90600052602060002001545b6001600160a01b0383166000908152600e6020526040902054910190610e26576000610e55565b6001600160a01b0382166000908152600e602052604081208054909190610e4957fe5b90600052602060002001545b01919050565b6000610cfa610e6983613884565b610e7284610d00565b90613933565b601e5481565b600080610e8b8484612f58565b6001600160a01b03808616600090815260176020908152604080832093881683529290522054909150610ebe8282613933565b95945050505050565b601c6020526000908152604090205460ff1681565b6000546001600160a01b03163314610f0f5760405162461bcd60e51b8152600401610f0690614cea565b60405180910390fd5b6001600160a01b0381166000908152600160205260408120805460ff19169055805b60025481101561103357826001600160a01b031660028281548110610f5257fe5b6000918252602090912001546001600160a01b0316141561102b57600280546000198101908110610f7f57fe5b600091825260209091200154600280546001600160a01b039092169183908110610fa557fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060038181548110610fe057fe5b9060005260206000200154915060036001600380549050038154811061100257fe5b90600052602060002001546003828154811061101a57fe5b600091825260209091200155611033565b600101610f31565b50600280548061103f57fe5b600082815260209020810160001990810180546001600160a01b0319169055019055600380548061106c57fe5b600082815260208120820160001990810182905590910190915560048054839003905560405182916001600160a01b038516917f7b0884b4b6bb4e0c1385ad42168fa556c14d4d799c1bf22f081aff3efff6ea0c9190a35050565b6001600160a01b0381166000908152600e602090815260409182902080548351818402810184019094528084526060939283018282801561112757602002820191906000526020600020905b815481526020019060010190808311611113575b50505050509050919050565b6000546001600160a01b0316331461115d5760405162461bcd60e51b8152600401610f0690614cea565b60405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb9061118b9085908590600401614b99565b602060405180830381600087803b1580156111a557600080fd5b505af11580156111b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111dd9190614a92565b50505050565b60016020526000908152604090205460ff1681565b6001600160a01b0381166000908152600c602090815260409182902080548351818402810184019094528084526060939283018282801561112757602002820191906000526020600020908154815260200190600101908083116111135750505050509050919050565b6001600160a01b0381166000908152600b602090815260409182902080548351818402810184019094528084526060939283018282801561112757602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116112ae5750505050509050919050565b601960209081526000928352604080842090915290825290205481565b6000546001600160a01b031690565b6060600380548060200260200160405190810160405280929190818152602001828054801561135157602002820191906000526020600020905b81548152602001906001019080831161133d575b5050505050905090565b6008602052816000526040600020818154811061137457fe5b90600052602060002001600091509150505481565b601760209081526000928352604080842090915290825290205481565b6000546001600160a01b031633146113d05760405162461bcd60e51b8152600401610f0690614cea565b80518251146113f15760405162461bcd60e51b8152600401610f0690614deb565b60005b825181101561146b5781818151811061140957fe5b6020026020010151600460008282540192505081905550600180600085848151811061143157fe5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790556001016113f4565b50815161147f906002906020850190614331565b508051611493906003906020840190614396565b505050565b6001600160a01b0381166000908152600d6020908152604091829020805483518184028101840190945280845260609392830182828015611127576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116112ae5750505050509050919050565b601f546001600160a01b031681565b600554604051636e0cf42160e11b81526001600160a01b039091169063dc19e8429061154b908590600401614b85565b60206040518083038186803b15801561156357600080fd5b505afa158015611577573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159b9190614a92565b6115b75760405162461bcd60e51b8152600401610f0690614e0b565b6001600160a01b0382166000908152601c602052604090205460ff16156115f05760405162461bcd60e51b8152600401610f0690614e75565b6001600160a01b039091166000908152601c60208181526040808420805460ff19166001908117909155601d808452948290208651805180518355850151928201929092558184015180516002830155840151600382015581830151805160048301558401516005820155606091820151805160068301558401516007820155868401518051805160088401558501516009830155808501518051600a840155850151600b830155808401518051600c840155850151600d8301558201518051600e830155840151600f8201558683015180518051601084015585015160118301558085015180516012840155850151601383015580840151805160148401558501516015830155820151805160168301558401516017820155958101518051805160188901558401516019880155808401518051601a890155840151601b8801559182015180519487019490945592820151938501939093559101518051601e8401550151601f90910155565b60008061176a84610e5b565b90506060846001600160a01b031663a0e67e2b6040518163ffffffff1660e01b815260040160006040518083038186803b1580156117a757600080fd5b505afa1580156117bb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526117e391908101906148b5565b90506060856001600160a01b031663309a042c6040518163ffffffff1660e01b815260040160006040518083038186803b15801561182057600080fd5b505afa158015611834573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261185c9190810190614a0f565b90506000866001600160a01b031663d29986c16040518163ffffffff1660e01b815260040160206040518083038186803b15801561189957600080fd5b505afa1580156118ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d19190614ae5565b905060005b8351811015611950578381815181106118eb57fe5b60200260200101516001600160a01b0316876001600160a01b031614156119485761193c8261193685848151811061191f57fe5b60200260200101518861397590919063ffffffff16565b906139af565b95505050505050610cfa565b6001016118d6565b505050505092915050565b600b602052816000526040600020818154811061197457fe5b6000918252602090912001546001600160a01b03169150829050565b601260209081526000928352604080842090915290825290205481565b6001600160a01b038116600090815260136020908152604091829020805483518184028101840190945280845260609392830182828015611127576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116112ae5750505050509050919050565b60156020526000908152604090205481565b601d60208181526000928352604092839020835160c0808201865282546080808401918252600185015460a080860191909152918452875180890189526002860154815260038601548188015284870152875180890189526004860154815260058601548188015284890152875180890189526006860154815260078601548188015260608086019190915288518085018a52600887015481840190815260098801548286015281528951808b018b52600a8801548152600b880154818a0152818901528951808b018b52600c8801548152600d880154818a0152818b01528951808b018b52600e8801548152600f880154818a01528183015289518086018b52601088015481850190815260118901548287015281528a51808c018c52601289015481526013890154818b0152818a01528a51808c018c52601489015481526015890154818b0152818c01528a51808c018c52601689015481526017890154818b0152818401528a519586018b5260188801549386019384526019880154948601949094529184528851808a018a52601a8701548152601b87015481890152848801528851808a018a52601c87015481529786015488880152838901979097528751808901909852601e8501548852601f9094015494870194909452938401949094529184565b6001600160a01b039182166000908152601a60209081526040808320938516835292905220541690565b6000546001600160a01b03163314611c6f5760405162461bcd60e51b8152600401610f0690614cea565b6001600160a01b03919091166000908152601060205260409020805460ff1916911515919091179055565b601f5460405163edb12adf60e01b81526001600160a01b039091169063edb12adf90611cca908490600401614b85565b600060405180830381600087803b158015611ce457600080fd5b505af1925050508015611cf5575060015b50611cff81612113565b1561207b57600554604051636e0cf42160e11b81526001600160a01b039091169063dc19e84290611d34908490600401614b85565b60206040518083038186803b158015611d4c57600080fd5b505afa158015611d60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d849190614a92565b611da05760405162461bcd60e51b8152600401610f0690614e0b565b806001600160a01b0316635468d6d76040518163ffffffff1660e01b815260040160206040518083038186803b158015611dd957600080fd5b505afa158015611ded573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e119190614a92565b611e2d5760405162461bcd60e51b8152600401610f0690614f03565b6000611e398233610e7e565b905060008111611e5b5760405162461bcd60e51b8152600401610f0690614edf565b6001600160a01b0382166000908152601760209081526040808320338085529252909120805483019055611e8e906139ee565b15611fc9576001600160a01b03821660009081526013602052604081208054909190611eb657fe5b9060005260206000200160009054906101000a90046001600160a01b03166001600160a01b031663a9059cbb336001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611f1b57600080fd5b505afa158015611f2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f539190614662565b836040518363ffffffff1660e01b8152600401611f71929190614b99565b602060405180830381600087803b158015611f8b57600080fd5b505af1158015611f9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fc39190614a92565b50612079565b6001600160a01b03821660009081526013602052604081208054909190611fec57fe5b60009182526020909120015460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb906120279033908590600401614b99565b602060405180830381600087803b15801561204157600080fd5b505af1158015612055573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114939190614a92565b505b50565b6000546001600160a01b031633146120a85760405162461bcd60e51b8152600401610f0690614cea565b60405133904780156108fc02916000818181858888f1935050505015801561207b573d6000803e3d6000fd5b6007602052816000526040600020818154811061197457fe5b601a6020908152600092835260408084209091529082529020546001600160a01b031681565b60006001826001600160a01b03166373a9855c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561215057600080fd5b505afa158015612164573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121889190614aae565b600181111561219357fe5b1492915050565b601660209081526000928352604080842090915290825290205481565b601f546001600160a01b031633146121e15760405162461bcd60e51b8152600401610f0690614cea565b8281146122005760405162461bcd60e51b8152600401610f0690614e34565b6001600160a01b03868116600090815260066020526040902054166122c2576000866001600160a01b0316633018205f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561225a57600080fd5b505afa15801561226e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122929190614662565b6001600160a01b0380891660009081526006602052604090208054919092166001600160a01b0319909116179055505b6060806122cf8888613a27565b915091506060806122e5888888888e8989613df1565b915091506122f58a8a8484614055565b5050506001600160a01b039096166000908152600f60205260409020805460ff19166001179055505050505050565b600f6020526000908152604090205460ff1681565b6000546001600160a01b031633146123635760405162461bcd60e51b8152600401610f0690614cea565b6001600160a01b0381166123895760405162461bcd60e51b8152600401610f0690614d9e565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461240e5760405162461bcd60e51b8152600401610f0690614cea565b6001600160a01b03821660009081526001602052604090205460ff16156124475760405162461bcd60e51b8152600401610f0690614d74565b6001600160a01b0382166000818152600160208190526040808320805460ff191683179055600280548084019091557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319168517905560038054928301815583527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b9091018490556004805485019055518392917fbd5dcf0b25226117c4a68a0129ffdd4b0541ef5e482ad7de9a96ccb6d6a8ebde91a35050565b6060600280548060200260200160405190810160405280929190818152602001828054801561135157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612547575050505050905090565b6001600160a01b0381166000908152600a602090815260409182902080548351818402810184019094528084526060939283018282801561112757602002820191906000526020600020908154815260200190600101908083116111135750505050509050919050565b6001600160a01b03811660009081526008602090815260409182902080548351818402810184019094528084526060939283018282801561112757602002820191906000526020600020908154815260200190600101908083116111135750505050509050919050565b600a602052816000526040600020818154811061137457fe5b601b602052826000526040600020602052816000526040600020818154811061268057fe5b60009182526020909120600290910201546001600160a01b0316925083915050565b6009602052816000526040600020818154811061197457fe5b60106020526000908152604090205460ff1681565b600e602052816000526040600020818154811061137457fe5b6001600160a01b03166000908152600f602052604090205460ff1690565b6000546001600160a01b031633146127315760405162461bcd60e51b8152600401610f0690614cea565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6006602052600090815260409020546001600160a01b031681565b6003818154811061277b57fe5b600091825260209091200154905081565b6001600160a01b038116600090815260146020908152604091829020805483518184028101840190945280845260609392830182828015611127576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116112ae5750505050509050919050565b6001600160a01b038083166000908152601b602090815260408083209385168352928152828220805484518184028101840190955280855260609493919290919084015b828210156128d95760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156128c157602002820191906000526020600020905b8154815260200190600101908083116128ad575b50505050508152505081526020019060010190612844565b50505050905092915050565b60045481565b6000546001600160a01b031633146129155760405162461bcd60e51b8152600401610f0690614cea565b6001600160a01b03811661293b5760405162461bcd60e51b8152600401610f0690614d4b565b601f80546001600160a01b0319166001600160a01b0383169081179091556040513391907ff5e71cc69e4610808e8e7c9099d63353897264c5dfc4da1a0320395866de497190600090a350565b8281146129a75760405162461bcd60e51b8152600401610f0690614e34565b600554604051636e0cf42160e11b81526001600160a01b039091169063dc19e842906129d7903390600401614b85565b60206040518083038186803b1580156129ef57600080fd5b505afa158015612a03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a279190614a92565b612a435760405162461bcd60e51b8152600401610f0690614e0b565b33600090815260136020526040902054612a7357336000908152601360205260409020612a719085856143dd565b505b336000908152601a602090815260408083206001600160a01b0389811685529252909120541680612aff5750336000818152601a602090815260408083206001600160a01b038a8116855290835281842080546001600160a01b0319908116928d1692831790915594845260148352908320805460018101825590845291909220018054909216179055855b6001600160a01b038116612b255760405162461bcd60e51b8152600401610f0690614f31565b612b5483836000818110612b3557fe5b33600090815260156020908152604090912054939102013590506141ce565b336000908152601560205260409020556060846001600160401b0381118015612b7c57600080fd5b50604051908082528060200260200182016040528015612ba6578160200160208202803683370190505b50905060005b85811015612c8d573360009081526018602090815260408083206001600160a01b0387168452909152902054612c0c57848482818110612be857fe5b90506020020135828281518110612bfb57fe5b602002602001018181525050612c85565b3360009081526018602090815260408083206001600160a01b038716845290915290208054612c6c919083908110612c4057fe5b9060005260206000200154868684818110612c5757fe5b905060200201356141ce90919063ffffffff16565b828281518110612c7857fe5b6020026020010181815250505b600101612bac565b503360009081526018602090815260408083206001600160a01b038616845282529091208251612cbf92840190614396565b50336000818152601b602090815260408083206001600160a01b03878116855290835281842094845260198352818420908c16845290915290205480612df057612d07614430565b6001600160a01b038a1681526040805160208089028281018201909352888252909189918991829185019084908082843760009201829052506020868101958652885460018082018b558a845292829020885160029092020180546001600160a01b0319166001600160a01b039092169190911781559551805188979650612d96955092860193500190614396565b505050828054905060196000336001600160a01b03166001600160a01b0316815260200190815260200160002060008c6001600160a01b03166001600160a01b031681526020019081526020016000208190555050612ea6565b336000908152601b602090815260408083206001600160a01b0388168452909152812080546000198401908110612e2357fe5b9060005260206000209060020201905060005b6001820154811015612ea357612e80888883818110612e5157fe5b90506020020135836001018381548110612e6757fe5b90600052602060002001546141ce90919063ffffffff16565b826001018281548110612e8f57fe5b600091825260209091200155600101612e36565b50505b50505050505050505050565b600d602052816000526040600020818154811061197457fe5b6001600160a01b038116600090815260096020908152604091829020805483518184028101840190945280845260609392830182828015611127576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116112ae5750505050509050919050565b6013602052816000526040600020818154811061197457fe5b6001600160a01b0380831660009081526018602090815260408083209385168352929052908120548190612f8d579050610cfa565b612fa3612f9c8585600061303b565b82906141ce565b9050612fb4612f9c8585600161303b565b9050612fc5612f9c8585600261303b565b9050612fd6612f9c8585600361303b565b6001600160a01b03808616600090815260156020908152604080832054601883528184209489168452939091528120805493945061303393611936929061301957fe5b90600052602060002001548461397590919063ffffffff16565b949350505050565b6001600160a01b03808416600090815260186020908152604080832093861683529290529081205481906130705760006130ae565b6001600160a01b038086166000908152601860209081526040808320938816835292905290812080549091906130a257fe5b90600052602060002001545b90506130b8614448565b506001600160a01b0385166000908152601d602081815260408084208151610140810183528154610100820190815260018301546101208301526080808301918252845180860186526002850154815260038501548188015260a080850191909152855180870187526004860154815260058601548189015260c08086019190915286518088018852600687015481526007870154818a015260e0860152928452855180840187526008860154818401908152600987015482840152815286518088018852600a8701548152600b870154818a01528189015286518088018852600c8701548152600d870154818a01528188015286518088018852600e8701548152600f870154818a015260608281019190915285890191909152865180850188526010870154818501908152601188015482850152815287518089018952601288015481526013880154818b0152818a015287518089018952601488015481526015880154818b01528189015287518089018952601688015481526017880154818b0152818301528588015286519384018752601886015492840192835260198601549184019190915290825284518086018652601a8501548152601b850154818801528287015284518086018652601c85015481529684015487870152818501969096528351808501909452601e8301548452601f909201549383019390935280840191909152918101919091529084613347576001600160a01b038716600090815260086020526040902054156133425761333f601e546119366133038686600001516141f3565b6001600160a01b038b166000908152600860205260408120805490919061332657fe5b906000526020600020015461397590919063ffffffff16565b90505b61346d565b84600114156133a8576001600160a01b0387166000908152600a6020526040902054156133425761333f601e546119366133858686602001516141f3565b6001600160a01b038b166000908152600a60205260408120805490919061332657fe5b8460021415613409576001600160a01b0387166000908152600c6020526040902054156133425761333f601e546119366133e68686604001516141f3565b6001600160a01b038b166000908152600c60205260408120805490919061332657fe5b846003141561346d576001600160a01b0387166000908152600e60205260409020541561346d5761346a601e546119366134478686606001516141f3565b6001600160a01b038b166000908152600e60205260408120805490919061332657fe5b90505b9695505050505050565b6001600160a01b038116600090815260076020908152604091829020805483518184028101840190945280845260609392830182828015611127576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116112ae5750505050509050919050565b6001600160a01b03808316600090815260166020908152604080832093851683529290529081205461352190610e72858561175e565b9392505050565b601f5460405163edb12adf60e01b81526001600160a01b039091169063edb12adf90613558908490600401614b85565b600060405180830381600087803b15801561357257600080fd5b505af1925050508015613583575060015b5061358d81612113565b1561207b57600554604051636e0cf42160e11b81526001600160a01b039091169063dc19e842906135c2908490600401614b85565b60206040518083038186803b1580156135da57600080fd5b505afa1580156135ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136129190614a92565b61362e5760405162461bcd60e51b8152600401610f0690614e0b565b806001600160a01b0316635468d6d76040518163ffffffff1660e01b815260040160206040518083038186803b15801561366757600080fd5b505afa15801561367b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061369f9190614a92565b6136bb5760405162461bcd60e51b8152600401610f0690614f03565b6040516327304dfd60e01b81526001600160a01b038216906327304dfd906136e7903390600401614b85565b60206040518083038186803b1580156136ff57600080fd5b505afa158015613713573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137379190614a92565b806137c35750336001600160a01b0316816001600160a01b0316633018205f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561378057600080fd5b505afa158015613794573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137b89190614662565b6001600160a01b0316145b6137df5760405162461bcd60e51b8152600401610f0690614dc8565b60006137eb82336134eb565b90506000811161380d5760405162461bcd60e51b8152600401610f0690614edf565b6001600160a01b0382166000908152601660209081526040808320338085529252909120805483019055611e8e906139ee565b600c602052816000526040600020818154811061137457fe5b60116020526000908152604090205481565b6014602052816000526040600020818154811061197457fe5b6001600160a01b038116600090815260146020908152604080832080548251818502810185019093528083526060938301828280156138ec57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116138ce575b505083519394506000925050505b8181101561392b5761391f8584838151811061391257fe5b6020026020010151612f58565b909301926001016138fa565b505050919050565b600061352183836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506142ce565b60008261398457506000610cfa565b8282028284828161399157fe5b04146135215760405162461bcd60e51b8152600401610f0690614e9e565b600061352183836040518060400160405280601a815260200179536166654d6174683a206469766973696f6e206279207a65726f60301b8152506142fa565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590613033575050151592915050565b60608082613b19576001600160a01b03841660009081526007602090815260409182902080548351818402810184019094528084529091830182828015613a9757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613a79575b5050505050915060086000856001600160a01b03166001600160a01b03168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015613b0d57602002820191906000526020600020905b815481526020019060010190808311613af9575b50505050509050613dea565b8260011415613c0a576001600160a01b03841660009081526009602090815260409182902080548351818402810184019094528084529091830182828015613b8a57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613b6c575b50505050509150600a6000856001600160a01b03166001600160a01b03168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015613b0d5760200282019190600052602060002090815481526020019060010190808311613af95750505050509050613dea565b8260021415613cfb576001600160a01b0384166000908152600b602090815260409182902080548351818402810184019094528084529091830182828015613c7b57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613c5d575b50505050509150600c6000856001600160a01b03166001600160a01b03168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015613b0d5760200282019190600052602060002090815481526020019060010190808311613af95750505050509050613dea565b8260031415613dea576001600160a01b0384166000908152600d602090815260409182902080548351818402810184019094528084529091830182828015613d6c57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613d4e575b50505050509150600e6000856001600160a01b03166001600160a01b03168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015613de257602002820191906000526020600020905b815481526020019060010190808311613dce575b505050505090505b9250929050565b606080876001600160401b0381118015613e0a57600080fd5b50604051908082528060200260200182016040528015613e34578160200160208202803683370190505b509150876001600160401b0381118015613e4d57600080fd5b50604051908082528060200260200182016040528015613e77578160200160208202803683370190505b50905082518451148015613e8a57508351155b80613eae57506001600160a01b0385166000908152600f602052604090205460ff16155b15613f435760005b88811015613f3d57898982818110613eca57fe5b9050602002016020810190613edf9190614646565b838281518110613eeb57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050878782818110613f1757fe5b90506020020135828281518110613f2a57fe5b6020908102919091010152600101613eb6565b50614049565b60005b8881101561404757898982818110613f5a57fe5b9050602002016020810190613f6f9190614646565b6001600160a01b0316858281518110613f8457fe5b60200260200101516001600160a01b0316141561403f576000888883818110613fa957fe5b9050602002013590508a8a83818110613fbe57fe5b9050602002016020810190613fd39190614646565b848381518110613fdf57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506140258186848151811061400f57fe5b60200260200101516141ce90919063ffffffff16565b83838151811061403157fe5b602002602001018181525050505b600101613f46565b505b97509795505050505050565b826140b3576001600160a01b0384166000908152600760209081526040909120835161408392850190614331565b506001600160a01b038416600090815260086020908152604090912082516140ad92840190614396565b506111dd565b826001141561410f576001600160a01b038416600090815260096020908152604090912083516140e592850190614331565b506001600160a01b0384166000908152600a6020908152604090912082516140ad92840190614396565b826002141561416b576001600160a01b0384166000908152600b60209081526040909120835161414192850190614331565b506001600160a01b0384166000908152600c6020908152604090912082516140ad92840190614396565b82600314156111dd576001600160a01b0384166000908152600d60209081526040909120835161419d92850190614331565b506001600160a01b0384166000908152600e6020908152604090912082516141c792840190614396565b5050505050565b6000828201838110156135215760405162461bcd60e51b8152600401610f0690614d16565b6000805b60048110156142c7578061422d57825151841080159061421b575060208301515184105b1561422d575050805160200151610cfa565b806001141561426357602083015151841080159061424f575060408301515184105b156142635750506020808201510151610cfa565b806002141561429a576040830151518410801590614285575060608301515184105b1561429a575050604081015160200151610cfa565b80600314156142bf5760608301515184106142bf575050606081015160200151610cfa565b6001016141f7565b5092915050565b600081848411156142f25760405162461bcd60e51b8152600401610f069190614c97565b505050900390565b6000818361431b5760405162461bcd60e51b8152600401610f069190614c97565b50600083858161432757fe5b0495945050505050565b828054828255906000526020600020908101928215614386579160200282015b8281111561438657825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190614351565b50614392929150614487565b5090565b8280548282559060005260206000209081019282156143d1579160200282015b828111156143d15782518255916020019190600101906143b6565b506143929291506144a6565b828054828255906000526020600020908101928215614386579160200282015b828111156143865781546001600160a01b0319166001600160a01b038435161782556020909201916001909101906143fd565b60408051808201909152600081526060602082015290565b604051806080016040528061445b6144bb565b81526020016144686144bb565b81526020016144756144bb565b81526020016144826144bb565b905290565b5b808211156143925780546001600160a01b0319168155600101614488565b5b8082111561439257600081556001016144a7565b60405180608001604052806144ce6144f1565b81526020016144db6144f1565b81526020016144e86144f1565b81526020016144825b604051806040016040528060008152602001600081525090565b60008083601f84011261451c578182fd5b5081356001600160401b03811115614532578182fd5b6020830191508360208083028501011115613dea57600080fd5b600082601f83011261455c578081fd5b813561456f61456a82614fc6565b614fa0565b81815291506020808301908481018184028601820187101561459057600080fd5b60005b8481101561195057813584529282019290820190600101614593565b600061010082840312156145c1578081fd5b6145cb6080614fa0565b90506145d78383614615565b81526145e68360408401614615565b60208201526145f88360808401614615565b604082015261460a8360c08401614615565b606082015292915050565b600060408284031215614626578081fd5b6146306040614fa0565b9050813581526020820135602082015292915050565b600060208284031215614657578081fd5b813561352181614fe5565b600060208284031215614673578081fd5b815161352181614fe5565b60008060408385031215614690578081fd5b823561469b81614fe5565b915060208301356146ab81614fe5565b809150509250929050565b600080600080600080608087890312156146ce578182fd5b86356146d981614fe5565b955060208701356146e981614fe5565b945060408701356001600160401b0380821115614704578384fd5b6147108a838b0161450b565b90965094506060890135915080821115614728578384fd5b5061473589828a0161450b565b979a9699509497509295939492505050565b60008060006060848603121561475b578283fd5b833561476681614fe5565b9250602084013561477681614fe5565b929592945050506040919091013590565b60008060408385031215614799578081fd5b82356147a481614fe5565b915060208301356146ab81614ffa565b6000808284036104208112156147c8578283fd5b83356147d381614fe5565b9250610400601f19820112156147e7578182fd5b506147f26080614fa0565b6147ff85602086016145af565b815261480f8561012086016145af565b60208201526148228561022086016145af565b60408201526148358561032086016145af565b6060820152809150509250929050565b60008060408385031215614857578182fd5b823561486281614fe5565b946020939093013593505050565b60008060008060008060808789031215614888578384fd5b863561489381614fe5565b95506020870135945060408701356001600160401b0380821115614704578586fd5b600060208083850312156148c7578182fd5b82516001600160401b038111156148dc578283fd5b8301601f810185136148ec578283fd5b80516148fa61456a82614fc6565b8181528381019083850185840285018601891015614916578687fd5b8694505b8385101561494157805161492d81614fe5565b83526001949094019391850191850161491a565b50979650505050505050565b6000806040838503121561495f578182fd5b82356001600160401b0380821115614975578384fd5b818501915085601f830112614988578384fd5b813561499661456a82614fc6565b80828252602080830192508086018a8283870289010111156149b6578889fd5b8896505b848710156149e15780356149cd81614fe5565b8452600196909601959281019281016149ba565b5090965087013593505050808211156149f8578283fd5b50614a058582860161454c565b9150509250929050565b60006020808385031215614a21578182fd5b82516001600160401b03811115614a36578283fd5b8301601f81018513614a46578283fd5b8051614a5461456a82614fc6565b8181528381019083850185840285018601891015614a70578687fd5b8694505b83851015614941578051835260019490940193918501918501614a74565b600060208284031215614aa3578081fd5b815161352181614ffa565b600060208284031215614abf578081fd5b815160028110613521578182fd5b600060208284031215614ade578081fd5b5035919050565b600060208284031215614af6578081fd5b5051919050565b6000815180845260208085019450808401835b83811015614b2c57815187529582019590820190600101614b10565b509495945050505050565b614b42828251614b76565b6020810151614b546040840182614b76565b506040810151614b676080840182614b76565b50606081015161149360c08401825b80518252602090810151910152565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b81811015614bf35783516001600160a01b031683529284019291840191600101614bce565b50909695505050505050565b60208082528251828201819052600091906040908185019080840286018301878501865b83811015614c6b57888303603f19018552815180516001600160a01b03168452870151878401879052614c5887850182614afd565b9588019593505090860190600101614c23565b509098975050505050505050565b6000602082526135216020830184614afd565b901515815260200190565b6000602080835283518082850152825b81811015614cc357858101830151858201604001528201614ca7565b81811115614cd45783604083870101525b50601f01601f1916929092016040019392505050565b60208082526012908201527122a9292fa727aa2fa1a7a72a2927a62622a960711b604082015260600190565b6020808252601b908201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604082015260600190565b6020808252600f908201526e41646472657373206973205a65726f60881b604082015260600190565b60208082526010908201526f20b2323932b9b99034b99027bbb732b960811b604082015260600190565b60208082526010908201526f4552525f5a45524f5f4144445245535360801b604082015260600190565b6020808252600990820152682737ba1027bbb732b960b91b604082015260600190565b60208082526006908201526506f776e6572560d41b604082015260600190565b6020808252600f908201526e696e76616c6964206164647265737360881b604082015260600190565b60208082526021908201527f546f6b656e206c697374206c656e677468206973206e6f742065657175616c716040820152607560f81b606082015260800190565b6020808252600f908201526e14185c985b5cc81a5cc81cd95d1959608a1b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252600a9082015269139bdd0814995dd85c9960b21b604082015260600190565b602080825260149082015273139bdd0810dbdb5c1b195d195910dbdb1b1958dd60621b604082015260600190565b6020808252601390820152726b6f6c2061646472657373206973207a6f726560681b604082015260600190565b6104008101614f6d8287614b37565b614f7b610100830186614b37565b614f89610200830185614b37565b610ebe610300830184614b37565b90815260200190565b6040518181016001600160401b0381118282101715614fbe57600080fd5b604052919050565b60006001600160401b03821115614fdb578081fd5b5060209081020190565b6001600160a01b038116811461207b57600080fd5b801515811461207b57600080fdfea2646970667358221220d24f1392524235af1d31ab5dc18f126572f2ba3333567a005238d03c376e979364736f6c634300060c0033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Desyn Labs",
    "kind": "dev",
    "methods": {
      "getController()": {
        "details": "external for gas optimization",
        "returns": {
          "_0": "address - of the owner (AKA controller)"
        }
      },
      "removeOwner(address)": {
        "details": "Allows to remove an owner. Transaction has to be sent by wallet.",
        "params": {
          "owner": "Address of owner."
        }
      },
      "setAddAdminList(address,uint256)": {
        "details": "external for gas optimization",
        "params": {
          "newOwner": "- address of new owner"
        }
      },
      "setController(address)": {
        "details": "external for gas optimization",
        "params": {
          "newOwner": "- address of new owner"
        }
      }
    },
    "title": "Vault managerFee",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getController()": {
        "notice": "Returns the address of the current owner"
      },
      "setAddAdminList(address,uint256)": {
        "notice": "Transfers ownership of the contract to a new account (`newOwner`).         Can only be called by the current owner"
      },
      "setController(address)": {
        "notice": "Transfers ownership of the contract to a new account (`newOwner`).         Can only be called by the current owner"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 17506,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 17510,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "adminList",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 17513,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "owners",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 17516,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "ownerPercentage",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 17518,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "allOwnerPercentage",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 9814,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "crpFactory",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ICRPFactory)9772"
      },
      {
        "astId": 9818,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "pool_manager",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 9823,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "pool_manager_tokenList",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 9828,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "pool_manager_tokenAmount",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 9833,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "pool_issue_tokenList",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 9838,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "pool_issue_tokenAmount",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 9843,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "pool_redeem_tokenList",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 9848,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "pool_redeem_tokenAmount",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 9853,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "pool_perfermance_tokenList",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 9858,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "pool_perfermance_tokenAmount",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 9862,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "pool_manager_isClaim",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 9866,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "black_list",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 9870,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "record_number",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9876,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "record_List",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(claimRecordInfo)9812_storage))"
      },
      {
        "astId": 9887,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "kol_token_list",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 9892,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "kols_list",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 9896,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "init_totalAmount_list",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9902,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "manager_claimed_list",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 9908,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "kol_claimed_list",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 9915,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "kol_totalAmount_list",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_address,t_mapping(t_address,t_array(t_uint256)dyn_storage))"
      },
      {
        "astId": 9921,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "user_index_list",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 9927,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "user_kol_list",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 9934,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "kol_user_info",
        "offset": 0,
        "slot": "27",
        "type": "t_mapping(t_address,t_mapping(t_address,t_array(t_struct(kolUserInfo)9882_storage)dyn_storage))"
      },
      {
        "astId": 9938,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "is_set_params",
        "offset": 0,
        "slot": "28",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 9942,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "kol_pool_params",
        "offset": 0,
        "slot": "29",
        "type": "t_mapping(t_address,t_struct(KolPoolParams)16487_storage)"
      },
      {
        "astId": 9945,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "total_ratio",
        "offset": 0,
        "slot": "30",
        "type": "t_uint256"
      },
      {
        "astId": 9947,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "vaultAddress",
        "offset": 0,
        "slot": "31",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(claimTokenInfo)9788_storage)dyn_storage": {
        "base": "t_struct(claimTokenInfo)9788_storage",
        "encoding": "dynamic_array",
        "label": "struct UserVault.claimTokenInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(kolUserInfo)9882_storage)dyn_storage": {
        "base": "t_struct(kolUserInfo)9882_storage",
        "encoding": "dynamic_array",
        "label": "struct UserVault.kolUserInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ICRPFactory)9772": {
        "encoding": "inplace",
        "label": "contract ICRPFactory",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_struct(kolUserInfo)9882_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct UserVault.kolUserInfo[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(kolUserInfo)9882_storage)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_array(t_struct(kolUserInfo)9882_storage)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct UserVault.kolUserInfo[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_struct(kolUserInfo)9882_storage)dyn_storage)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_array(t_uint256)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(claimRecordInfo)9812_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct UserVault.claimRecordInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(claimRecordInfo)9812_storage)"
      },
      "t_mapping(t_address,t_struct(KolPoolParams)16487_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SmartPoolManager.KolPoolParams)",
        "numberOfBytes": "32",
        "value": "t_struct(KolPoolParams)16487_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(claimRecordInfo)9812_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct UserVault.claimRecordInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(claimRecordInfo)9812_storage"
      },
      "t_struct(KolPoolParams)16487_storage": {
        "encoding": "inplace",
        "label": "struct SmartPoolManager.KolPoolParams",
        "members": [
          {
            "astId": 16480,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "managerFee",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(feeParams)16478_storage"
          },
          {
            "astId": 16482,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "issueFee",
            "offset": 0,
            "slot": "8",
            "type": "t_struct(feeParams)16478_storage"
          },
          {
            "astId": 16484,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "redeemFee",
            "offset": 0,
            "slot": "16",
            "type": "t_struct(feeParams)16478_storage"
          },
          {
            "astId": 16486,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "perfermanceFee",
            "offset": 0,
            "slot": "24",
            "type": "t_struct(feeParams)16478_storage"
          }
        ],
        "numberOfBytes": "1024"
      },
      "t_struct(claimRecordInfo)9812_storage": {
        "encoding": "inplace",
        "label": "struct UserVault.claimRecordInfo",
        "members": [
          {
            "astId": 9808,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "time",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9811,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "tokens",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_struct(claimTokenInfo)9788_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(claimTokenInfo)9788_storage": {
        "encoding": "inplace",
        "label": "struct UserVault.claimTokenInfo",
        "members": [
          {
            "astId": 9783,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 9785,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "decimals",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9787,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(feeParams)16478_storage": {
        "encoding": "inplace",
        "label": "struct SmartPoolManager.feeParams",
        "members": [
          {
            "astId": 16471,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "firstLevel",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(levelParams)16469_storage"
          },
          {
            "astId": 16473,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "secondLevel",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(levelParams)16469_storage"
          },
          {
            "astId": 16475,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "thirdLevel",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(levelParams)16469_storage"
          },
          {
            "astId": 16477,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "fourLevel",
            "offset": 0,
            "slot": "6",
            "type": "t_struct(levelParams)16469_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(kolUserInfo)9882_storage": {
        "encoding": "inplace",
        "label": "struct UserVault.kolUserInfo",
        "members": [
          {
            "astId": 9878,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "userAdr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 9881,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "userAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(levelParams)16469_storage": {
        "encoding": "inplace",
        "label": "struct SmartPoolManager.levelParams",
        "members": [
          {
            "astId": 16466,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "level",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 16468,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "ratio",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}