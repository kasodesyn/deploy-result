{
  "address": "0x115e8755C6C3ddF7468E88efD689F2F40B470f6C",
  "abi": [
    {
      "anonymous": true,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes4",
          "name": "sig",
          "type": "bytes4"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "LOG_CALL",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "ManagerClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "ManagersClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "RATIO_ISSUE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RATIO_MANAGER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RATIO_PERFERMANCE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RATIO_REDEEM",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RATIO_TOTAL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "adminClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "poolTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokensAmount",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokensAmountIR",
          "type": "uint256[]"
        },
        {
          "internalType": "bool",
          "name": "isPerfermance",
          "type": "bool"
        }
      ],
      "name": "depositIssueRedeemPToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokensIn",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amountsIn",
          "type": "uint256[]"
        }
      ],
      "name": "depositManagerToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBNB",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getManagerClaimBool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getManagerFeeTypes",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "tokenList",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "managerAmount",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "issueAmount",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "redeemAmount",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "perfermanceAmount",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct Vault.FeeTypesTokens",
          "name": "result",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getUnManagerReward",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokensList",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "managerClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolsStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "couldManagerClaim",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isBlackList",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "bools",
          "type": "bool"
        }
      ],
      "name": "setBlackList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adr",
          "type": "address"
        }
      ],
      "name": "setCrpFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setIssueRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setManagerRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setPerfermanceRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setRedeemRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adr",
          "type": "address"
        }
      ],
      "name": "setUserVaultAdr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "userVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x5baad5812ba421cd45b3204705a6c0e4be412b1115e26a6294c6943049ae3775",
  "receipt": {
    "to": null,
    "from": "0x595b85b4A418e3B8df897D02F5BD49167D00862F",
    "contractAddress": "0x115e8755C6C3ddF7468E88efD689F2F40B470f6C",
    "transactionIndex": 0,
    "gasUsed": "3739392",
    "logsBloom": "0x
    "blockHash": "0xf4685eec2e39a77cc06ed14e2e88e676369f28869b4f5264b50645a0fffcc6c6",
    "transactionHash": "0x5baad5812ba421cd45b3204705a6c0e4be412b1115e26a6294c6943049ae3775",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 8167774,
        "transactionHash": "0x5baad5812ba421cd45b3204705a6c0e4be412b1115e26a6294c6943049ae3775",
        "address": "0x115e8755C6C3ddF7468E88efD689F2F40B470f6C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000595b85b4a418e3b8df897d02f5bd49167d00862f"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xf4685eec2e39a77cc06ed14e2e88e676369f28869b4f5264b50645a0fffcc6c6"
      }
    ],
    "blockNumber": 8167774,
    "cumulativeGasUsed": "3739392",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "5d54d21ba156fcd13fa09c358c75c0de",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"LOG_CALL\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ManagerClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ManagersClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RATIO_ISSUE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RATIO_MANAGER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RATIO_PERFERMANCE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RATIO_REDEEM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RATIO_TOTAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"adminClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"poolTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokensAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokensAmountIR\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"isPerfermance\",\"type\":\"bool\"}],\"name\":\"depositIssueRedeemPToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokensIn\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsIn\",\"type\":\"uint256[]\"}],\"name\":\"depositManagerToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBNB\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getManagerClaimBool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getManagerFeeTypes\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"tokenList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"managerAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"issueAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"redeemAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"perfermanceAmount\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Vault.FeeTypesTokens\",\"name\":\"result\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getUnManagerReward\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokensList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"managerClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolsStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"couldManagerClaim\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isBlackList\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"bools\",\"type\":\"bool\"}],\"name\":\"setBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setCrpFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setIssueRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setManagerRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setPerfermanceRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setRedeemRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setUserVaultAdr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Desyn Labs\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Vault managerFee\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/deploy/Vault.sol\":\"Vault\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"contracts/base/Logs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\ncontract Logs {\\n    event LOG_CALL(bytes4 indexed sig, address indexed caller, bytes data) anonymous;\\n\\n    modifier _logs_() {\\n        emit LOG_CALL(msg.sig, msg.sender, msg.data);\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x942b3c172dd3f0910c3589d703b4f224c94c76a13cc84d7add6318206cff512e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/deploy/Vault.sol\":{\"content\":\"pragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../openzeppelin/Ownable.sol\\\";\\nimport \\\"../interfaces/IDSProxy.sol\\\";\\nimport \\\"../libraries/SafeMath.sol\\\";\\nimport \\\"../libraries/Address.sol\\\";\\nimport \\\"../libraries/SafeERC20.sol\\\";\\nimport \\\"../base/Logs.sol\\\";\\n\\ninterface ICRPPool {\\n    function getController() external view returns (address);\\n\\n    enum Etypes {\\n        OPENED,\\n        CLOSED\\n    }\\n\\n    function etype() external view returns (Etypes);\\n}\\n\\ninterface IDesynOwnable {\\n    function adminList(address adr) external view returns (bool);\\n    function getController() external view returns (address);\\n    function getOwners() external view returns (address[] memory);\\n    function getOwnerPercentage() external view returns (uint[] memory);\\n    function allOwnerPercentage() external view returns (uint);\\n}\\n\\ninterface IUserVault {\\n    function depositToken(\\n        address pool,\\n        uint types,\\n        address[] calldata poolTokens,\\n        uint[] calldata tokensAmount\\n    ) external;\\n}\\n\\ninterface ICRPFactory {\\n    function isCrp(address addr) external view returns (bool);\\n}\\n\\n/**\\n * @author Desyn Labs\\n * @title Vault managerFee\\n */\\ncontract Vault is Ownable, Logs {\\n    using SafeMath for uint;\\n    using Address for address;\\n    using SafeERC20 for IERC20;\\n\\n    ICRPFactory crpFactory;\\n    address public userVault;\\n\\n    event ManagersClaim(address indexed caller,address indexed pool, address token, uint amount, uint time);\\n    event ManagerClaim(address indexed caller,address indexed manager, address token, uint amount, uint time);\\n\\n    // pool of tokens\\n    struct PoolTokens {\\n        address[] tokenList;\\n        mapping(address => uint) tokenIndex; \\n        address[] issueTokens;\\n        address[] redeemTokens;\\n        address[] perfermanceTokens;\\n        uint[] managerAmount;\\n        uint[] issueAmount;\\n        uint[] redeemAmount;\\n        uint[] perfermanceAmount;\\n    }\\n\\n    struct PoolStatus {\\n        bool couldManagerClaim;\\n        bool isBlackList;\\n    }\\n\\n    // pool tokens\\n    mapping(address => PoolTokens) poolsTokens;\\n    mapping(address => PoolStatus) public poolsStatus;\\n\\n    //pool=>manager\\n    mapping(address => address) public poolManager;\\n\\n    struct FeeTypesTokens {\\n        address[] tokenList;\\n        uint[] managerAmount;\\n        uint[] issueAmount;\\n        uint[] redeemAmount;\\n        uint[] perfermanceAmount;\\n    }\\n\\n    // default ratio config\\n    uint public RATIO_TOTAL = 1000;\\n    uint public RATIO_MANAGER = 800;\\n    uint public RATIO_ISSUE = 800;\\n    uint public RATIO_REDEEM = 800;\\n    uint public RATIO_PERFERMANCE = 800;\\n\\n    receive() external payable {}\\n\\n    function depositManagerToken(address[] calldata tokensIn, uint[] calldata amountsIn) external {\\n        address pool = msg.sender;\\n        require(crpFactory.isCrp(pool), \\\"ERR_INVALID_POOL_ADDRESS\\\");\\n        require(tokensIn.length == amountsIn.length, \\\"ERR_TOKEN_LENGTH_NOT_MATCH\\\");\\n        _checkInitPoolController(pool);\\n\\n        PoolTokens storage tokens = poolsTokens[pool];\\n        _communaldepositToken(tokensIn, amountsIn, tokens.tokenList,tokens.managerAmount);\\n\\n        poolsStatus[pool].couldManagerClaim = true;\\n        \\n        if (_isClosePool(pool)) this.managerClaim(pool);\\n    }\\n\\n    function depositIssueRedeemPToken(\\n        address[] calldata poolTokens,\\n        uint[] calldata tokensAmount,\\n        uint[] calldata tokensAmountIR,\\n        bool isPerfermance\\n    ) external {\\n        address pool = msg.sender;\\n        require(crpFactory.isCrp(pool), \\\"ERR_INVALID_POOL_ADDRESS\\\");\\n        require(poolTokens.length == tokensAmount.length, \\\"ERR_TOKEN_LENGTH_NOT_MATCH\\\");\\n        _checkInitPoolController(pool);\\n\\n        PoolTokens storage tokens = poolsTokens[pool];\\n        isPerfermance\\n                ? _communaldepositTokenNew(poolTokens, tokensAmount, tokensAmountIR, pool)\\n                : _communaldepositToken(poolTokens, tokensAmount, tokens.issueTokens, tokens.issueAmount);\\n\\n        poolsStatus[pool].couldManagerClaim = true;\\n\\n        if (_isClosePool(pool)) this.managerClaim(pool);   \\n    }\\n\\n    // function pooltokens(address pool) external view returns(PoolTokens memory){\\n    //     return poolsTokens[pool];\\n    // }\\n\\n    function getManagerClaimBool(address pool) external view returns (bool) {\\n        return poolsStatus[pool].couldManagerClaim;\\n    }\\n\\n    function setBlackList(address pool, bool bools) external onlyOwner _logs_ {\\n        poolsStatus[pool].isBlackList = bools;\\n    }\\n\\n    function setUserVaultAdr(address adr) external onlyOwner _logs_ {\\n        require(adr != address(0), \\\"ERR_INVALID_USERVAULT_ADDRESS\\\");\\n        userVault = adr;\\n    }\\n\\n    function setCrpFactory(address adr) external onlyOwner _logs_ {\\n        crpFactory = ICRPFactory(adr);\\n    }\\n\\n    function adminClaim(\\n        address token,\\n        address user,\\n        uint amount\\n    ) external onlyOwner {\\n        IERC20(token).safeTransfer(user, amount);\\n    }\\n\\n    function getBNB() external payable onlyOwner {\\n        msg.sender.transfer(address(this).balance);\\n    }\\n\\n    function setManagerRatio(uint amount) external onlyOwner _logs_ {\\n        require(amount <= RATIO_TOTAL, \\\"Maximum limit exceeded\\\");\\n        RATIO_MANAGER = amount;\\n    }\\n\\n    function setIssueRatio(uint amount) external onlyOwner _logs_ {\\n        require(amount <= RATIO_TOTAL, \\\"Maximum limit exceeded\\\");\\n        RATIO_ISSUE = amount;\\n    }\\n\\n    function setRedeemRatio(uint amount) external onlyOwner _logs_ {\\n        require(amount <= RATIO_TOTAL, \\\"Maximum limit exceeded\\\");\\n        RATIO_REDEEM = amount;\\n    }\\n\\n    function setPerfermanceRatio(uint amount) external onlyOwner _logs_{\\n        RATIO_PERFERMANCE = amount;\\n    }\\n\\n    function managerClaim(address pool) external {\\n        require(crpFactory.isCrp(pool), \\\"ERR_INVALID_POOL_ADDRESS\\\");\\n        address manager_address = ICRPPool(pool).getController();\\n\\n        PoolTokens memory tokens = poolsTokens[pool];\\n        PoolStatus storage status = poolsStatus[pool];\\n\\n        address[] memory poolManageTokens = tokens.tokenList.length != 0\\n                ? tokens.tokenList\\n                : (tokens.issueTokens.length != 0 ? tokens.issueTokens : (tokens.redeemTokens.length != 0 ? tokens.redeemTokens : tokens.perfermanceTokens));\\n        uint len = poolManageTokens.length;\\n        require(!status.isBlackList, \\\"ERR_POOL_IS_BLACKLIST\\\");\\n        if (poolManager[pool] != manager_address) {\\n            poolManager[pool] = manager_address;\\n        }\\n        require(len > 0, \\\"ERR_NOT_MANGER_FEE\\\");\\n        require(status.couldManagerClaim, \\\"ERR_MANAGER_COULD_NOT_CLAIM\\\");\\n        status.couldManagerClaim = false;\\n\\n        uint[] memory managerTokenAmount = new uint[](len);\\n        uint[] memory issueTokenAmount = new uint[](len);\\n        uint[] memory redeemTokenAmount = new uint[](len);\\n        uint[] memory perfermanceTokenAmount = new uint[](len);\\n\\n        for (uint i; i < len; i++) {\\n            uint balance;\\n            (balance, managerTokenAmount[i], issueTokenAmount[i], redeemTokenAmount[i], perfermanceTokenAmount[i]) = _computeBalance(i, pool);\\n            address t = poolManageTokens[i];\\n            _transferHandle(pool, manager_address, t, balance);\\n        }\\n        \\n        if (_isClosePool(pool)) _recordUserVault(pool, poolManageTokens, managerTokenAmount, issueTokenAmount, redeemTokenAmount, perfermanceTokenAmount);\\n\\n        _clearPool(pool);        \\n    }\\n\\n    function getManagerFeeTypes(address pool) external view returns(FeeTypesTokens memory result){     \\n        PoolTokens memory tokens = poolsTokens[pool];\\n        address[] memory poolManageTokens = tokens.tokenList.length != 0\\n                ? tokens.tokenList\\n                : (tokens.issueTokens.length != 0 ? tokens.issueTokens : (tokens.redeemTokens.length != 0 ? tokens.redeemTokens : tokens.perfermanceTokens));\\n        uint len = poolManageTokens.length;\\n\\n        result.tokenList = tokens.tokenList;\\n        result.managerAmount = new uint[](len);\\n        result.issueAmount = new uint[](len);\\n        result.redeemAmount = new uint[](len);\\n        result.perfermanceAmount = new uint[](len);\\n\\n        for(uint i; i< len; i++){\\n            (,result.managerAmount[i],result.issueAmount[i],result.redeemAmount[i],result.perfermanceAmount[i]) = _computeBalance(i,pool);\\n        }\\n    }\\n\\n    function getUnManagerReward(address pool) external view returns (address[] memory tokensList, uint[] memory amounts) {\\n        PoolTokens memory tokens = poolsTokens[pool];\\n        address[] memory poolManageTokens = tokens.tokenList.length != 0\\n            ? tokens.tokenList\\n            : (tokens.issueTokens.length != 0 ? tokens.issueTokens : (tokens.redeemTokens.length != 0 ? tokens.redeemTokens : tokens.perfermanceTokens));\\n        uint len = poolManageTokens.length;\\n\\n        tokensList = new address[](len);\\n        amounts = new uint[](len);\\n\\n        for (uint i; i < len; i++) {\\n            tokensList[i] = poolManageTokens[i];\\n            (amounts[i],,,,) = _computeBalance(i,pool);\\n        }\\n    }\\n\\n    function _communaldepositToken(\\n        address[] memory tokensIn,\\n        uint[] memory amountsIn,\\n        address[] storage curTokenList,\\n        uint[] storage curTokensAmount\\n    ) internal {\\n        uint len = tokensIn.length;\\n        for (uint k; k < len; k++) {\\n            address t = tokensIn[k];\\n            uint b = amountsIn[k];\\n            IERC20(t).safeTransferFrom(msg.sender, address(this), b);\\n            (bool isExit, uint index) = _arrIncludeAddr(curTokenList,t);\\n            if (isExit) {\\n                curTokensAmount[index] = curTokensAmount[k].add(b);\\n            } else {      \\n                curTokenList.push(t);\\n                curTokensAmount.push(b);\\n            }\\n        }\\n    }\\n\\n    function _arrIncludeAddr(address[] memory tokens, address target) internal pure returns(bool isInclude, uint index){\\n        for(uint i; i<tokens.length; i++){\\n            if(tokens[i] == target){ \\n                isInclude = true;\\n                index = i;\\n            }\\n        }\\n    }\\n\\n    function _communaldepositTokenNew(\\n        address[] calldata poolTokens,\\n        uint[] calldata tokensAmount,\\n        uint[] calldata tokensAmountIR,\\n        address poolAdr\\n    ) internal {\\n        uint len = poolTokens.length;\\n        PoolTokens storage tokens = poolsTokens[poolAdr];\\n\\n        for (uint i; i < len; i++) {\\n            address t = poolTokens[i];\\n            uint b = tokensAmount[i];\\n            uint bIR = tokensAmountIR[i];\\n            IERC20(t).safeTransferFrom(msg.sender, address(this), b);\\n\\n            (bool isExitOnRedeem,uint index) = _arrIncludeAddr(tokens.redeemTokens,t);\\n            if(isExitOnRedeem){\\n                tokens.redeemAmount[index] = tokens.perfermanceAmount[i].add(bIR);\\n            } else {\\n                tokens.redeemTokens.push(t);\\n                tokens.redeemAmount.push(bIR);\\n            }\\n\\n            (bool isExitOnPerfermance, uint index2) = _arrIncludeAddr(tokens.perfermanceTokens, t);\\n            if(isExitOnPerfermance){\\n                tokens.perfermanceAmount[index2] = tokens.perfermanceAmount[i].add(b.sub(bIR));\\n            } else{\\n                tokens.perfermanceTokens.push(t);\\n                tokens.perfermanceAmount.push(b.sub(bIR));\\n            }\\n        }\\n    }\\n\\n    function _isClosePool(address pool) internal view returns (bool) {\\n        return ICRPPool(pool).etype() == ICRPPool.Etypes.CLOSED;\\n    }\\n\\n    function _computeBalance(uint i, address pool)\\n        internal\\n        view\\n        returns (\\n            uint balance,\\n            uint bManagerAmount,\\n            uint bIssueAmount,\\n            uint bRedeemAmount,\\n            uint bPerfermanceAmount\\n        )\\n    {\\n        PoolTokens memory tokens = poolsTokens[pool];\\n\\n        if (tokens.managerAmount.length != 0) {\\n            bManagerAmount = tokens.managerAmount[i].mul(RATIO_MANAGER).div(RATIO_TOTAL);\\n            balance = balance.add(bManagerAmount);\\n        }\\n        if (tokens.issueAmount.length != 0) {\\n            bIssueAmount = tokens.issueAmount[i].mul(RATIO_ISSUE).div(RATIO_TOTAL);\\n            balance = balance.add(bIssueAmount);\\n        }\\n        if (tokens.redeemAmount.length != 0) {\\n            bRedeemAmount = tokens.redeemAmount[i].mul(RATIO_REDEEM).div(RATIO_TOTAL);\\n            balance = balance.add(bRedeemAmount);\\n        }\\n        if (tokens.perfermanceAmount.length != 0) {\\n            bPerfermanceAmount = tokens.perfermanceAmount[i].mul(RATIO_PERFERMANCE).div(RATIO_TOTAL);\\n            balance = balance.add(bPerfermanceAmount);\\n        }\\n    }\\n\\n    function _clearPool(address pool) internal {\\n        delete poolsTokens[pool];\\n    }\\n\\n    function _recordUserVault(\\n        address pool,\\n        address[] memory tokenList,\\n        uint[] memory managerTokenAmount,\\n        uint[] memory issueTokenAmount,\\n        uint[] memory redeemTokenAmount,\\n        uint[] memory perfermanceTokenAmount\\n    ) internal {\\n        PoolTokens memory tokens = poolsTokens[pool];\\n\\n        if (tokens.managerAmount.length != 0) \\n            IUserVault(userVault).depositToken(pool, 0, tokenList, managerTokenAmount);\\n        \\n        if (tokens.issueAmount.length != 0) \\n            IUserVault(userVault).depositToken(pool, 1, tokenList, issueTokenAmount);\\n        \\n        if (tokens.redeemAmount.length != 0) \\n            IUserVault(userVault).depositToken(pool, 2, tokenList, redeemTokenAmount);\\n        \\n        if (tokens.perfermanceAmount.length != 0) \\n            IUserVault(userVault).depositToken(pool, 3, tokenList, perfermanceTokenAmount);\\n        \\n    }\\n\\n    function _checkInitPoolController(address pool) internal {\\n        if (poolManager[pool] == address(0)) \\n            poolManager[pool] = ICRPPool(pool).getController();\\n    }\\n\\n    function _transferHandle(\\n        address pool,\\n        address manager_address,\\n        address t,\\n        uint balance\\n    ) internal {\\n        bool isCloseETF = _isClosePool(pool);\\n        bool isOpenETF = !isCloseETF;\\n        bool isContractManager = manager_address.isContract();\\n\\n        if(isCloseETF){\\n            IERC20(t).safeTransfer(userVault, balance);\\n        }\\n\\n        if(isOpenETF && isContractManager){\\n            address[] memory managerAddressList = IDesynOwnable(pool).getOwners();\\n            uint[] memory ownerPercentage = IDesynOwnable(pool).getOwnerPercentage();\\n            uint allOwnerPercentage = IDesynOwnable(pool).allOwnerPercentage();\\n\\n            for (uint k; k < managerAddressList.length; k++) {\\n                address reciver = address(managerAddressList[k]).isContract()? IDSProxy(managerAddressList[k]).owner(): managerAddressList[k];\\n                uint b = balance.mul(ownerPercentage[k]).div(allOwnerPercentage);\\n                IERC20(t).safeTransfer(reciver, b);\\n                emit ManagerClaim(msg.sender,reciver,t,b,block.timestamp);\\n            }\\n            emit ManagersClaim(msg.sender, pool, t, balance, block.timestamp);\\n        }\\n\\n        if(isOpenETF && !isContractManager){\\n            IERC20(t).safeTransfer(manager_address, balance);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b634e30ff8c62049a7baafe639659b9b75af3dcfe682cff5e30b947e91245e8\"},\"contracts/interfaces/IDSProxy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\ninterface IDSProxy {\\n    function owner() external view returns(address);\\n}\",\"keccak256\":\"0xe330359819e40d60365ba92005c9b8b1eccdf18ae583352a0cff0a2a4cf7ff14\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Interface declarations\\n\\n/* solhint-disable func-order */\\n\\ninterface IERC20 {\\n    // Emitted when the allowance of a spender for an owner is set by a call to approve.\\n    // Value is the new allowance\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n\\n    // Emitted when value tokens are moved from one account (from) to another (to).\\n    // Note that value may be zero\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    // Returns the amount of tokens in existence\\n    function totalSupply() external view returns (uint);\\n\\n    // Returns the amount of tokens owned by account\\n    function balanceOf(address account) external view returns (uint);\\n\\n    // Returns the decimals of tokens\\n    function decimals() external view returns (uint8);\\n\\n    function symbol() external view returns (string memory);\\n\\n    // Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner\\n    // through transferFrom. This is zero by default\\n    // This value changes when approve or transferFrom are called\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    // Sets amount as the allowance of spender over the caller\\u2019s tokens\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits an Approval event.\\n    function approve(address spender, uint amount) external returns (bool);\\n\\n    // Moves amount tokens from the caller\\u2019s account to recipient\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits a Transfer event.\\n    function transfer(address recipient, uint amount) external returns (bool);\\n\\n    // Moves amount tokens from sender to recipient using the allowance mechanism\\n    // Amount is then deducted from the caller\\u2019s allowance\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits a Transfer event\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xfe22b6d6029b400b9cce7f9b39c546f99cd6922b2fd926e480e2b4d476ab26f8\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            codehash := extcodehash(account)\\n        }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint weiValue,\\n        string memory errorMessage\\n    ) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2f31de87a6037a6a1ab4cefb32f22352df92b082dde0c182801bf421bacc303c\",\"license\":\"agpl-3.0\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\nimport {SafeMath} from \\\"./SafeMath.sol\\\";\\nimport {Address} from \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint value\\n    ) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint value\\n    ) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint value\\n    ) internal {\\n        require((value == 0) || (token.allowance(address(this), spender) == 0), \\\"SafeERC20: approve from non-zero to non-zero allowance\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdb66e9e24513d153d62e792a46c723eeff7ad7c93215a56aa3a27f1143d95ae9\",\"license\":\"MIT\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint a, uint b) internal pure returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint a, uint b) internal pure returns (uint) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint a,\\n        uint b,\\n        string memory errorMessage\\n    ) internal pure returns (uint) {\\n        require(b <= a, errorMessage);\\n        uint c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint a, uint b) internal pure returns (uint) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint a, uint b) internal pure returns (uint) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint a,\\n        uint b,\\n        string memory errorMessage\\n    ) internal pure returns (uint) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint a, uint b) internal pure returns (uint) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint a,\\n        uint b,\\n        string memory errorMessage\\n    ) internal pure returns (uint) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x7ce3fd7d17047f684821e1a20b4f5989630f6755a377b12c087dfde359f710d6\",\"license\":\"agpl-3.0\"},\"contracts/openzeppelin/Ownable.sol\":{\"content\":\"pragma solidity >=0.6.0 <0.8.0;\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\",\"keccak256\":\"0x8e1e573ff7c1a90087b58f618ae87f33f04616ec7f959f73db4a3b73ff1ee939\"}},\"version\":1}",
  "bytecode": "0x60806040526103e8600655610320600755610320600855610320600955610320600a553480156200002f57600080fd5b5060006200003c6200008c565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35062000090565b3390565b61403580620000a06000396000f3fe6080604052600436106101355760003560e01c80630922f29d146101415780630a014864146101635780630b6b3b2a1461018e5780630bac7b81146101ae5780631483d99d146101ce5780631f70e80b146101ee578063265f30da1461020357806336e4c87f14610218578063483e1948146102465780634934d18f14610266578063598797ad1461029357806368092bd9146102c05780636fd4ba9c146102e0578063715018a61461030e57806371bb41a91461032357806378a619de1461034357806389a612e51461034b5780638da5cb5b1461036b5780639daafec714610380578063a5d2bf6314610395578063b8baccb8146103aa578063c0fcb166146103ca578063c1cad458146103f7578063c1e576221461040c578063edb12adf1461042c578063f2fde38b1461044c5761013c565b3661013c57005b600080fd5b34801561014d57600080fd5b5061016161015c36600461368f565b61046c565b005b34801561016f57600080fd5b50610178610536565b6040516101859190613f62565b60405180910390f35b34801561019a57600080fd5b506101616101a93660046139ab565b61053c565b3480156101ba57600080fd5b506101616101c936600461373f565b6105ba565b3480156101da57600080fd5b506101616101e93660046137a7565b610798565b3480156101fa57600080fd5b50610178610994565b34801561020f57600080fd5b5061017861099a565b34801561022457600080fd5b5061023861023336600461368f565b6109a0565b604051610185929190613b58565b34801561025257600080fd5b506101616102613660046139ab565b6109be565b34801561027257600080fd5b5061028661028136600461368f565b610a5e565b6040516101859190613a69565b34801561029f57600080fd5b506102b36102ae36600461368f565b610a79565b6040516101859190613ed0565b3480156102cc57600080fd5b506101616102db366004613707565b610f8e565b3480156102ec57600080fd5b506103006102fb36600461368f565b611038565b604051610185929190613b1f565b34801561031a57600080fd5b5061016161149f565b34801561032f57600080fd5b5061016161033e3660046139ab565b611528565b6101616115c8565b34801561035757600080fd5b506101616103663660046139ab565b611636565b34801561037757600080fd5b506102866116d6565b34801561038c57600080fd5b506102866116e5565b3480156103a157600080fd5b506101786116f4565b3480156103b657600080fd5b506101616103c53660046136c7565b6116fa565b3480156103d657600080fd5b506103ea6103e536600461368f565b611752565b6040516101859190613b4d565b34801561040357600080fd5b50610178611770565b34801561041857600080fd5b5061016161042736600461368f565b611776565b34801561043857600080fd5b5061016161044736600461368f565b611811565b34801561045857600080fd5b5061016161046736600461368f565b611f36565b610474611ff6565b6001600160a01b03166104856116d6565b6001600160a01b0316146104b45760405162461bcd60e51b81526004016104ab90613db6565b60405180910390fd5b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516104e6929190613b6a565b60405180910390a26001600160a01b0381166105145760405162461bcd60e51b81526004016104ab90613c42565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b60085481565b610544611ff6565b6001600160a01b03166105556116d6565b6001600160a01b03161461057b5760405162461bcd60e51b81526004016104ab90613db6565b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516105ad929190613b6a565b60405180910390a2600a55565b600154604051636e0cf42160e11b815233916001600160a01b03169063dc19e842906105ea908490600401613a69565b60206040518083038186803b15801561060257600080fd5b505afa158015610616573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063a9190613970565b6106565760405162461bcd60e51b81526004016104ab90613d43565b8382146106755760405162461bcd60e51b81526004016104ab90613cae565b61067e81611ffa565b6001600160a01b038116600090815260036020908152604091829020825187830281810184019094528781529092610709928991899182919085019084908082843760009201919091525050604080516020808a02828101820190935289825290935089925088918291850190849080828437600092019190915250869250506005820190506120b8565b6001600160a01b0382166000908152600460205260409020805460ff1916600117905561073582612215565b156107905760405163edb12adf60e01b8152309063edb12adf9061075d908590600401613a69565b600060405180830381600087803b15801561077757600080fd5b505af115801561078b573d6000803e3d6000fd5b505050505b505050505050565b600154604051636e0cf42160e11b815233916001600160a01b03169063dc19e842906107c8908490600401613a69565b60206040518083038186803b1580156107e057600080fd5b505afa1580156107f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108189190613970565b6108345760405162461bcd60e51b81526004016104ab90613d43565b8685146108535760405162461bcd60e51b81526004016104ab90613cae565b61085c81611ffa565b6001600160a01b0381166000908152600360205260409020826108f3576108ee89898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808d0282810182019093528c82529093508c92508b9182918501908490808284376000920191909152505060028601915050600685016120b8565b610902565b6109028989898989898861229c565b6001600160a01b0382166000908152600460205260409020805460ff1916600117905561092e82612215565b156109895760405163edb12adf60e01b8152309063edb12adf90610956908590600401613a69565b600060405180830381600087803b15801561097057600080fd5b505af1158015610984573d6000803e3d6000fd5b505050505b505050505050505050565b60065481565b600a5481565b60046020526000908152604090205460ff8082169161010090041682565b6109c6611ff6565b6001600160a01b03166109d76116d6565b6001600160a01b0316146109fd5760405162461bcd60e51b81526004016104ab90613db6565b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051610a2f929190613b6a565b60405180910390a2600654811115610a595760405162461bcd60e51b81526004016104ab90613c12565b600955565b6005602052600090815260409020546001600160a01b031681565b610a816135a1565b610a896135d0565b6001600160a01b038316600090815260036020908152604091829020825181546101209381028201840190945261010081018481529093919284928491840182828015610aff57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610ae1575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015610b6157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610b43575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015610bc357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610ba5575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015610c2557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610c07575b5050505050815260200160058201805480602002602001604051908101604052809291908181526020018280548015610c7d57602002820191906000526020600020905b815481526020019060010190808311610c69575b5050505050815260200160068201805480602002602001604051908101604052809291908181526020018280548015610cd557602002820191906000526020600020905b815481526020019060010190808311610cc1575b5050505050815260200160078201805480602002602001604051908101604052809291908181526020018280548015610d2d57602002820191906000526020600020905b815481526020019060010190808311610d19575b5050505050815260200160088201805480602002602001604051908101604052809291908181526020018280548015610d8557602002820191906000526020600020905b815481526020019060010190808311610d71575b5050505050815250509050606081600001515160001415610dd457602082015151610dc957604082015151610dbe578160600151610dc4565b81604001515b610dcf565b81602001515b610dd7565b81515b805183518552909150806001600160401b0381118015610df657600080fd5b50604051908082528060200260200182016040528015610e20578160200160208202803683370190505b506020850152806001600160401b0381118015610e3c57600080fd5b50604051908082528060200260200182016040528015610e66578160200160208202803683370190505b506040850152806001600160401b0381118015610e8257600080fd5b50604051908082528060200260200182016040528015610eac578160200160208202803683370190505b506060850152806001600160401b0381118015610ec857600080fd5b50604051908082528060200260200182016040528015610ef2578160200160208202803683370190505b50608085015260005b81811015610f8557610f0d818761252e565b909192935088602001518581518110610f2257fe5b6020026020010189604001518681518110610f3957fe5b602002602001018a606001518781518110610f5057fe5b602002602001018b608001518881518110610f6757fe5b60209081029190910101939093529290915291905252600101610efb565b50505050919050565b610f96611ff6565b6001600160a01b0316610fa76116d6565b6001600160a01b031614610fcd5760405162461bcd60e51b81526004016104ab90613db6565b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051610fff929190613b6a565b60405180910390a26001600160a01b03909116600090815260046020526040902080549115156101000261ff0019909216919091179055565b6060806110436135d0565b6001600160a01b0384166000908152600360209081526040918290208251815461012093810282018401909452610100810184815290939192849284918401828280156110b957602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161109b575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561111b57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116110fd575b505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561117d57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161115f575b50505050508152602001600482018054806020026020016040519081016040528092919081815260200182805480156111df57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116111c1575b505050505081526020016005820180548060200260200160405190810160405280929190818152602001828054801561123757602002820191906000526020600020905b815481526020019060010190808311611223575b505050505081526020016006820180548060200260200160405190810160405280929190818152602001828054801561128f57602002820191906000526020600020905b81548152602001906001019080831161127b575b50505050508152602001600782018054806020026020016040519081016040528092919081815260200182805480156112e757602002820191906000526020600020905b8154815260200190600101908083116112d3575b505050505081526020016008820180548060200260200160405190810160405280929190818152602001828054801561133f57602002820191906000526020600020905b81548152602001906001019080831161132b575b505050505081525050905060608160000151516000141561138e576020820151516113835760408201515161137857816060015161137e565b81604001515b611389565b81602001515b611391565b81515b8051909150806001600160401b03811180156113ac57600080fd5b506040519080825280602002602001820160405280156113d6578160200160208202803683370190505b509450806001600160401b03811180156113ef57600080fd5b50604051908082528060200260200182016040528015611419578160200160208202803683370190505b50935060005b818110156114965782818151811061143357fe5b602002602001015186828151811061144757fe5b60200260200101906001600160a01b031690816001600160a01b031681525050611471818861252e565b50508751889250849150811061148357fe5b602090810291909101015260010161141f565b50505050915091565b6114a7611ff6565b6001600160a01b03166114b86116d6565b6001600160a01b0316146114de5760405162461bcd60e51b81526004016104ab90613db6565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b611530611ff6565b6001600160a01b03166115416116d6565b6001600160a01b0316146115675760405162461bcd60e51b81526004016104ab90613db6565b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051611599929190613b6a565b60405180910390a26006548111156115c35760405162461bcd60e51b81526004016104ab90613c12565b600855565b6115d0611ff6565b6001600160a01b03166115e16116d6565b6001600160a01b0316146116075760405162461bcd60e51b81526004016104ab90613db6565b60405133904780156108fc02916000818181858888f19350505050158015611633573d6000803e3d6000fd5b50565b61163e611ff6565b6001600160a01b031661164f6116d6565b6001600160a01b0316146116755760405162461bcd60e51b81526004016104ab90613db6565b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516116a7929190613b6a565b60405180910390a26006548111156116d15760405162461bcd60e51b81526004016104ab90613c12565b600755565b6000546001600160a01b031690565b6002546001600160a01b031681565b60095481565b611702611ff6565b6001600160a01b03166117136116d6565b6001600160a01b0316146117395760405162461bcd60e51b81526004016104ab90613db6565b61174d6001600160a01b0384168383612946565b505050565b6001600160a01b031660009081526004602052604090205460ff1690565b60075481565b61177e611ff6565b6001600160a01b031661178f6116d6565b6001600160a01b0316146117b55760405162461bcd60e51b81526004016104ab90613db6565b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516117e7929190613b6a565b60405180910390a2600180546001600160a01b0319166001600160a01b0392909216919091179055565b600154604051636e0cf42160e11b81526001600160a01b039091169063dc19e84290611841908490600401613a69565b60206040518083038186803b15801561185957600080fd5b505afa15801561186d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118919190613970565b6118ad5760405162461bcd60e51b81526004016104ab90613d43565b6000816001600160a01b0316633018205f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156118e857600080fd5b505afa1580156118fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061192091906136ab565b905061192a6135d0565b6001600160a01b0383166000908152600360209081526040918290208251815461012093810282018401909452610100810184815290939192849284918401828280156119a057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611982575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015611a0257602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116119e4575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015611a6457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611a46575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015611ac657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611aa8575b5050505050815260200160058201805480602002602001604051908101604052809291908181526020018280548015611b1e57602002820191906000526020600020905b815481526020019060010190808311611b0a575b5050505050815260200160068201805480602002602001604051908101604052809291908181526020018280548015611b7657602002820191906000526020600020905b815481526020019060010190808311611b62575b5050505050815260200160078201805480602002602001604051908101604052809291908181526020018280548015611bce57602002820191906000526020600020905b815481526020019060010190808311611bba575b5050505050815260200160088201805480602002602001604051908101604052809291908181526020018280548015611c2657602002820191906000526020600020905b815481526020019060010190808311611c12575b505050919092525050506001600160a01b038416600090815260046020526040902081515191925090606090611c8a57602083015151611c7f57604083015151611c74578260600151611c7a565b82604001515b611c85565b82602001515b611c8d565b82515b8051835491925090610100900460ff1615611cba5760405162461bcd60e51b81526004016104ab90613e20565b6001600160a01b03868116600090815260056020526040902054811690861614611d0d576001600160a01b03868116600090815260056020526040902080546001600160a01b0319169187169190911790555b60008111611d2d5760405162461bcd60e51b81526004016104ab90613d17565b825460ff16611d4e5760405162461bcd60e51b81526004016104ab90613deb565b825460ff191683556060816001600160401b0381118015611d6e57600080fd5b50604051908082528060200260200182016040528015611d98578160200160208202803683370190505b5090506060826001600160401b0381118015611db357600080fd5b50604051908082528060200260200182016040528015611ddd578160200160208202803683370190505b5090506060836001600160401b0381118015611df857600080fd5b50604051908082528060200260200182016040528015611e22578160200160208202803683370190505b5090506060846001600160401b0381118015611e3d57600080fd5b50604051908082528060200260200182016040528015611e67578160200160208202803683370190505b50905060005b85811015611f10576000611e81828d61252e565b8a8781518110611e8d57fe5b602002602001018a8881518110611ea057fe5b602002602001018a8981518110611eb357fe5b602002602001018a8a81518110611ec657fe5b602090810291909101019390935292909152919052528851909150600090899084908110611ef057fe5b60200260200101519050611f068d8d838561299c565b5050600101611e6d565b50611f1a8a612215565b15611f2d57611f2d8a8786868686612d49565b61078b8a613234565b611f3e611ff6565b6001600160a01b0316611f4f6116d6565b6001600160a01b031614611f755760405162461bcd60e51b81526004016104ab90613db6565b6001600160a01b038116611f9b5760405162461bcd60e51b81526004016104ab90613bcc565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b6001600160a01b038181166000908152600560205260409020541661163357806001600160a01b0316633018205f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561205257600080fd5b505afa158015612066573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061208a91906136ab565b6001600160a01b03918216600090815260056020526040902080546001600160a01b03191691909216179055565b835160005b818110156107905760008682815181106120d357fe5b6020026020010151905060008683815181106120eb57fe5b6020908102919091010151905061210d6001600160a01b0383163330846132b9565b6000806121738880548060200260200160405190810160405280929190818152602001828054801561216857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161214a575b5050505050856132e0565b9150915081156121c3576121a68388878154811061218d57fe5b906000526020600020015461333490919063ffffffff16565b8782815481106121b257fe5b600091825260209091200155612205565b875460018082018a5560008a8152602080822090930180546001600160a01b0319166001600160a01b03891617905589549182018a5589815291909120018390555b5050600190920191506120bd9050565b60006001826001600160a01b03166373a9855c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561225257600080fd5b505afa158015612266573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061228a919061398c565b600181111561229557fe5b1492915050565b6001600160a01b038116600090815260036020526040812087915b8281101561078b5760008a8a838181106122cd57fe5b90506020020160208101906122e2919061368f565b905060008989848181106122f257fe5b905060200201359050600088888581811061230957fe5b6020029190910135915061232a90506001600160a01b0384163330856132b9565b6000806123938760030180548060200260200160405190810160405280929190818152602001828054801561238857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161236a575b5050505050866132e0565b9150915081156123d0576123b08388600801888154811061218d57fe5b8760070182815481106123bf57fe5b600091825260209091200155612417565b600387018054600180820183556000928352602080842090920180546001600160a01b0319166001600160a01b038a1617905560078a018054918201815583529120018390555b6000806124808960040180548060200260200160405190810160405280929190818152602001828054801561247557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612457575b5050505050886132e0565b9150915081156124c6576124a66124978787613362565b8a6008018a8154811061218d57fe5b8960080182815481106124b557fe5b60009182526020909120015561251b565b600489018054600181018255600091825260209091200180546001600160a01b0319166001600160a01b038916179055600889016125048787613362565b815460018101835560009283526020909220909101555b5050600190950194506122b79350505050565b600080600080600061253e6135d0565b6001600160a01b0387166000908152600360209081526040918290208251815461012093810282018401909452610100810184815290939192849284918401828280156125b457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612596575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561261657602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116125f8575b505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561267857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161265a575b50505050508152602001600482018054806020026020016040519081016040528092919081815260200182805480156126da57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116126bc575b505050505081526020016005820180548060200260200160405190810160405280929190818152602001828054801561273257602002820191906000526020600020905b81548152602001906001019080831161271e575b505050505081526020016006820180548060200260200160405190810160405280929190818152602001828054801561278a57602002820191906000526020600020905b815481526020019060010190808311612776575b50505050508152602001600782018054806020026020016040519081016040528092919081815260200182805480156127e257602002820191906000526020600020905b8154815260200190600101908083116127ce575b505050505081526020016008820180548060200260200160405190810160405280929190818152602001828054801561283a57602002820191906000526020600020905b815481526020019060010190808311612826575b50505050508152505090508060800151516000146128995761288a60065461288460075484608001518c8151811061286e57fe5b60200260200101516133a490919063ffffffff16565b906133de565b94506128968686613334565b95505b60a081015151156128cf576128c06006546128846008548460a001518c8151811061286e57fe5b93506128cc8685613334565b95505b60c08101515115612905576128f66006546128846009548460c001518c8151811061286e57fe5b92506129028684613334565b95505b60e0810151511561293b5761292c600654612884600a548460e001518c8151811061286e57fe5b91506129388683613334565b95505b509295509295909350565b61174d8363a9059cbb60e01b8484604051602401612965929190613ae5565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261341d565b60006129a785612215565b9050801560006129bf6001600160a01b038716613502565b905082156129e1576002546129e1906001600160a01b03878116911686612946565b8180156129eb5750805b15612d1c576060876001600160a01b031663a0e67e2b6040518163ffffffff1660e01b815260040160006040518083038186803b158015612a2b57600080fd5b505afa158015612a3f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612a679190810190613850565b90506060886001600160a01b031663309a042c6040518163ffffffff1660e01b815260040160006040518083038186803b158015612aa457600080fd5b505afa158015612ab8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612ae091908101906138ed565b90506000896001600160a01b031663d29986c16040518163ffffffff1660e01b815260040160206040518083038186803b158015612b1d57600080fd5b505afa158015612b31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b5591906139c3565b905060005b8351811015612cc8576000612b8a858381518110612b7457fe5b60200260200101516001600160a01b0316613502565b612ba757848281518110612b9a57fe5b6020026020010151612c2b565b848281518110612bb357fe5b60200260200101516001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015612bf357600080fd5b505afa158015612c07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c2b91906136ab565b90506000612c5984612884878681518110612c4257fe5b60200260200101518d6133a490919063ffffffff16565b9050612c6f6001600160a01b038c168383612946565b816001600160a01b0316336001600160a01b03167f749a9ef4b9bff1f02a1a1d45429a3949e524fd93e3948001eab8dca05f1fcd6d8d8442604051612cb693929190613afe565b60405180910390a35050600101612b5a565b50896001600160a01b0316336001600160a01b03167f1bf0129823b56213a46996bc874ce50b318995cae2bbdcd2000933d36012547d8a8a42604051612d1093929190613afe565b60405180910390a35050505b818015612d27575080155b15612d4057612d406001600160a01b0386168786612946565b50505050505050565b612d516135d0565b6001600160a01b038716600090815260036020908152604091829020825181546101209381028201840190945261010081018481529093919284928491840182828015612dc757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612da9575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015612e2957602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612e0b575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015612e8b57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612e6d575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015612eed57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612ecf575b5050505050815260200160058201805480602002602001604051908101604052809291908181526020018280548015612f4557602002820191906000526020600020905b815481526020019060010190808311612f31575b5050505050815260200160068201805480602002602001604051908101604052809291908181526020018280548015612f9d57602002820191906000526020600020905b815481526020019060010190808311612f89575b5050505050815260200160078201805480602002602001604051908101604052809291908181526020018280548015612ff557602002820191906000526020600020905b815481526020019060010190808311612fe1575b505050505081526020016008820180548060200260200160405190810160405280929190818152602001828054801561304d57602002820191906000526020600020905b815481526020019060010190808311613039575b50505050508152505090508060800151516000146130cf57600254604051639155dae760e01b81526001600160a01b0390911690639155dae79061309c908a906000908b908b90600401613aa1565b600060405180830381600087803b1580156130b657600080fd5b505af11580156130ca573d6000803e3d6000fd5b505050505b60a0810151511561314457600254604051639155dae760e01b81526001600160a01b0390911690639155dae790613111908a906001908b908a90600401613aa1565b600060405180830381600087803b15801561312b57600080fd5b505af115801561313f573d6000803e3d6000fd5b505050505b60c081015151156131b75760028054604051639155dae760e01b81526001600160a01b0390911691639155dae791613184918b918b908990600401613aa1565b600060405180830381600087803b15801561319e57600080fd5b505af11580156131b2573d6000803e3d6000fd5b505050505b60e08101515115612d4057600254604051639155dae760e01b81526001600160a01b0390911690639155dae7906131f9908a906003908b908890600401613aa1565b600060405180830381600087803b15801561321357600080fd5b505af1158015613227573d6000803e3d6000fd5b5050505050505050505050565b6001600160a01b0381166000908152600360205260408120906132578282613615565b613265600283016000613615565b613273600383016000613615565b613281600483016000613615565b61328f600583016000613615565b61329d600683016000613615565b6132ab600783016000613615565b61174d600883016000613615565b6132da846323b872dd60e01b85858560405160240161296593929190613a7d565b50505050565b60008060005b845181101561332c57836001600160a01b031685828151811061330557fe5b60200260200101516001600160a01b0316141561332457600192508091505b6001016132e6565b509250929050565b6000828201838110156133595760405162461bcd60e51b81526004016104ab90613c79565b90505b92915050565b600061335983836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061353e565b6000826133b35750600061335c565b828202828482816133c057fe5b04146133595760405162461bcd60e51b81526004016104ab90613d75565b600061335983836040518060400160405280601a815260200179536166654d6174683a206469766973696f6e206279207a65726f60301b81525061356a565b61342f826001600160a01b0316613502565b61344b5760405162461bcd60e51b81526004016104ab90613e99565b60006060836001600160a01b0316836040516134679190613a4d565b6000604051808303816000865af19150503d80600081146134a4576040519150601f19603f3d011682016040523d82523d6000602084013e6134a9565b606091505b5091509150816134cb5760405162461bcd60e51b81526004016104ab90613ce2565b8051156132da57808060200190518101906134e69190613970565b6132da5760405162461bcd60e51b81526004016104ab90613e4f565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081811480159061353657508115155b949350505050565b600081848411156135625760405162461bcd60e51b81526004016104ab9190613b99565b505050900390565b6000818361358b5760405162461bcd60e51b81526004016104ab9190613b99565b50600083858161359757fe5b0495945050505050565b6040518060a0016040528060608152602001606081526020016060815260200160608152602001606081525090565b60405180610100016040528060608152602001606081526020016060815260200160608152602001606081526020016060815260200160608152602001606081525090565b508054600082559060005260206000209081019061163391905b80821115613643576000815560010161362f565b5090565b60008083601f840112613658578182fd5b5081356001600160401b0381111561366e578182fd5b602083019150836020808302850101111561368857600080fd5b9250929050565b6000602082840312156136a0578081fd5b813561335981613fdc565b6000602082840312156136bc578081fd5b815161335981613fdc565b6000806000606084860312156136db578182fd5b83356136e681613fdc565b925060208401356136f681613fdc565b929592945050506040919091013590565b60008060408385031215613719578182fd5b823561372481613fdc565b9150602083013561373481613ff1565b809150509250929050565b60008060008060408587031215613754578081fd5b84356001600160401b038082111561376a578283fd5b61377688838901613647565b9096509450602087013591508082111561378e578283fd5b5061379b87828801613647565b95989497509550505050565b60008060008060008060006080888a0312156137c1578283fd5b87356001600160401b03808211156137d7578485fd5b6137e38b838c01613647565b909950975060208a01359150808211156137fb578485fd5b6138078b838c01613647565b909750955060408a013591508082111561381f578485fd5b5061382c8a828b01613647565b909450925050606088013561384081613ff1565b8091505092959891949750929550565b60006020808385031215613862578182fd5b82516001600160401b03811115613877578283fd5b8301601f81018513613887578283fd5b805161389a61389582613f91565b613f6b565b81815283810190838501858402850186018910156138b6578687fd5b8694505b838510156138e15780516138cd81613fdc565b8352600194909401939185019185016138ba565b50979650505050505050565b600060208083850312156138ff578182fd5b82516001600160401b03811115613914578283fd5b8301601f81018513613924578283fd5b805161393261389582613f91565b818152838101908385018584028501860189101561394e578687fd5b8694505b838510156138e1578051835260019490940193918501918501613952565b600060208284031215613981578081fd5b815161335981613ff1565b60006020828403121561399d578081fd5b815160028110613359578182fd5b6000602082840312156139bc578081fd5b5035919050565b6000602082840312156139d4578081fd5b5051919050565b6000815180845260208085019450808401835b83811015613a135781516001600160a01b0316875295820195908201906001016139ee565b509495945050505050565b6000815180845260208085019450808401835b83811015613a1357815187529582019590820190600101613a31565b60008251613a5f818460208701613fb0565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060018060a01b038616825284602083015260806040830152613ac860808301856139db565b8281036060840152613ada8185613a1e565b979650505050505050565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b600060408252613b3260408301856139db565b8281036020840152613b448185613a1e565b95945050505050565b901515815260200190565b91151582521515602082015260400190565b60006020825282602083015282846040840137818301604090810191909152601f909201601f19160101919050565b6000602082528251806020840152613bb8816040850160208701613fb0565b601f01601f19169190910160400192915050565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526016908201527513585e1a5b5d5b481b1a5b5a5d08195e18d95959195960521b604082015260600190565b6020808252601d908201527f4552525f494e56414c49445f555345525641554c545f41444452455353000000604082015260600190565b6020808252601b908201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604082015260600190565b6020808252601a908201527908aa4a4bea89e968a9cbe988a9c8ea890be9c9ea8be9a82a886960331b604082015260600190565b6020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b6020808252601290820152714552525f4e4f545f4d414e4745525f46454560701b604082015260600190565b6020808252601890820152774552525f494e56414c49445f504f4f4c5f4144445245535360401b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601b908201527a4552525f4d414e414745525f434f554c445f4e4f545f434c41494d60281b604082015260600190565b60208082526015908201527411549497d413d3d317d254d7d0931050d2d31254d5605a1b604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b6020808252601f908201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604082015260600190565b600060208252825160a06020840152613eec60c08401826139db565b90506020840151601f1980858403016040860152613f0a8383613a1e565b92506040860151915080858403016060860152613f278383613a1e565b92506060860151915080858403016080860152613f448383613a1e565b925060808601519150808584030160a086015250613b448282613a1e565b90815260200190565b6040518181016001600160401b0381118282101715613f8957600080fd5b604052919050565b60006001600160401b03821115613fa6578081fd5b5060209081020190565b60005b83811015613fcb578181015183820152602001613fb3565b838111156132da5750506000910152565b6001600160a01b038116811461163357600080fd5b801515811461163357600080fdfea26469706673582212206f0dffc2712830673b68526b1a1d61164e518e5b943df3cad5a7b737678cdda564736f6c634300060c0033",
  "deployedBytecode": "0x6080604052600436106101355760003560e01c80630922f29d146101415780630a014864146101635780630b6b3b2a1461018e5780630bac7b81146101ae5780631483d99d146101ce5780631f70e80b146101ee578063265f30da1461020357806336e4c87f14610218578063483e1948146102465780634934d18f14610266578063598797ad1461029357806368092bd9146102c05780636fd4ba9c146102e0578063715018a61461030e57806371bb41a91461032357806378a619de1461034357806389a612e51461034b5780638da5cb5b1461036b5780639daafec714610380578063a5d2bf6314610395578063b8baccb8146103aa578063c0fcb166146103ca578063c1cad458146103f7578063c1e576221461040c578063edb12adf1461042c578063f2fde38b1461044c5761013c565b3661013c57005b600080fd5b34801561014d57600080fd5b5061016161015c36600461368f565b61046c565b005b34801561016f57600080fd5b50610178610536565b6040516101859190613f62565b60405180910390f35b34801561019a57600080fd5b506101616101a93660046139ab565b61053c565b3480156101ba57600080fd5b506101616101c936600461373f565b6105ba565b3480156101da57600080fd5b506101616101e93660046137a7565b610798565b3480156101fa57600080fd5b50610178610994565b34801561020f57600080fd5b5061017861099a565b34801561022457600080fd5b5061023861023336600461368f565b6109a0565b604051610185929190613b58565b34801561025257600080fd5b506101616102613660046139ab565b6109be565b34801561027257600080fd5b5061028661028136600461368f565b610a5e565b6040516101859190613a69565b34801561029f57600080fd5b506102b36102ae36600461368f565b610a79565b6040516101859190613ed0565b3480156102cc57600080fd5b506101616102db366004613707565b610f8e565b3480156102ec57600080fd5b506103006102fb36600461368f565b611038565b604051610185929190613b1f565b34801561031a57600080fd5b5061016161149f565b34801561032f57600080fd5b5061016161033e3660046139ab565b611528565b6101616115c8565b34801561035757600080fd5b506101616103663660046139ab565b611636565b34801561037757600080fd5b506102866116d6565b34801561038c57600080fd5b506102866116e5565b3480156103a157600080fd5b506101786116f4565b3480156103b657600080fd5b506101616103c53660046136c7565b6116fa565b3480156103d657600080fd5b506103ea6103e536600461368f565b611752565b6040516101859190613b4d565b34801561040357600080fd5b50610178611770565b34801561041857600080fd5b5061016161042736600461368f565b611776565b34801561043857600080fd5b5061016161044736600461368f565b611811565b34801561045857600080fd5b5061016161046736600461368f565b611f36565b610474611ff6565b6001600160a01b03166104856116d6565b6001600160a01b0316146104b45760405162461bcd60e51b81526004016104ab90613db6565b60405180910390fd5b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516104e6929190613b6a565b60405180910390a26001600160a01b0381166105145760405162461bcd60e51b81526004016104ab90613c42565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b60085481565b610544611ff6565b6001600160a01b03166105556116d6565b6001600160a01b03161461057b5760405162461bcd60e51b81526004016104ab90613db6565b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516105ad929190613b6a565b60405180910390a2600a55565b600154604051636e0cf42160e11b815233916001600160a01b03169063dc19e842906105ea908490600401613a69565b60206040518083038186803b15801561060257600080fd5b505afa158015610616573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063a9190613970565b6106565760405162461bcd60e51b81526004016104ab90613d43565b8382146106755760405162461bcd60e51b81526004016104ab90613cae565b61067e81611ffa565b6001600160a01b038116600090815260036020908152604091829020825187830281810184019094528781529092610709928991899182919085019084908082843760009201919091525050604080516020808a02828101820190935289825290935089925088918291850190849080828437600092019190915250869250506005820190506120b8565b6001600160a01b0382166000908152600460205260409020805460ff1916600117905561073582612215565b156107905760405163edb12adf60e01b8152309063edb12adf9061075d908590600401613a69565b600060405180830381600087803b15801561077757600080fd5b505af115801561078b573d6000803e3d6000fd5b505050505b505050505050565b600154604051636e0cf42160e11b815233916001600160a01b03169063dc19e842906107c8908490600401613a69565b60206040518083038186803b1580156107e057600080fd5b505afa1580156107f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108189190613970565b6108345760405162461bcd60e51b81526004016104ab90613d43565b8685146108535760405162461bcd60e51b81526004016104ab90613cae565b61085c81611ffa565b6001600160a01b0381166000908152600360205260409020826108f3576108ee89898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808d0282810182019093528c82529093508c92508b9182918501908490808284376000920191909152505060028601915050600685016120b8565b610902565b6109028989898989898861229c565b6001600160a01b0382166000908152600460205260409020805460ff1916600117905561092e82612215565b156109895760405163edb12adf60e01b8152309063edb12adf90610956908590600401613a69565b600060405180830381600087803b15801561097057600080fd5b505af1158015610984573d6000803e3d6000fd5b505050505b505050505050505050565b60065481565b600a5481565b60046020526000908152604090205460ff8082169161010090041682565b6109c6611ff6565b6001600160a01b03166109d76116d6565b6001600160a01b0316146109fd5760405162461bcd60e51b81526004016104ab90613db6565b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051610a2f929190613b6a565b60405180910390a2600654811115610a595760405162461bcd60e51b81526004016104ab90613c12565b600955565b6005602052600090815260409020546001600160a01b031681565b610a816135a1565b610a896135d0565b6001600160a01b038316600090815260036020908152604091829020825181546101209381028201840190945261010081018481529093919284928491840182828015610aff57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610ae1575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015610b6157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610b43575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015610bc357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610ba5575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015610c2557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610c07575b5050505050815260200160058201805480602002602001604051908101604052809291908181526020018280548015610c7d57602002820191906000526020600020905b815481526020019060010190808311610c69575b5050505050815260200160068201805480602002602001604051908101604052809291908181526020018280548015610cd557602002820191906000526020600020905b815481526020019060010190808311610cc1575b5050505050815260200160078201805480602002602001604051908101604052809291908181526020018280548015610d2d57602002820191906000526020600020905b815481526020019060010190808311610d19575b5050505050815260200160088201805480602002602001604051908101604052809291908181526020018280548015610d8557602002820191906000526020600020905b815481526020019060010190808311610d71575b5050505050815250509050606081600001515160001415610dd457602082015151610dc957604082015151610dbe578160600151610dc4565b81604001515b610dcf565b81602001515b610dd7565b81515b805183518552909150806001600160401b0381118015610df657600080fd5b50604051908082528060200260200182016040528015610e20578160200160208202803683370190505b506020850152806001600160401b0381118015610e3c57600080fd5b50604051908082528060200260200182016040528015610e66578160200160208202803683370190505b506040850152806001600160401b0381118015610e8257600080fd5b50604051908082528060200260200182016040528015610eac578160200160208202803683370190505b506060850152806001600160401b0381118015610ec857600080fd5b50604051908082528060200260200182016040528015610ef2578160200160208202803683370190505b50608085015260005b81811015610f8557610f0d818761252e565b909192935088602001518581518110610f2257fe5b6020026020010189604001518681518110610f3957fe5b602002602001018a606001518781518110610f5057fe5b602002602001018b608001518881518110610f6757fe5b60209081029190910101939093529290915291905252600101610efb565b50505050919050565b610f96611ff6565b6001600160a01b0316610fa76116d6565b6001600160a01b031614610fcd5760405162461bcd60e51b81526004016104ab90613db6565b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051610fff929190613b6a565b60405180910390a26001600160a01b03909116600090815260046020526040902080549115156101000261ff0019909216919091179055565b6060806110436135d0565b6001600160a01b0384166000908152600360209081526040918290208251815461012093810282018401909452610100810184815290939192849284918401828280156110b957602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161109b575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561111b57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116110fd575b505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561117d57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161115f575b50505050508152602001600482018054806020026020016040519081016040528092919081815260200182805480156111df57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116111c1575b505050505081526020016005820180548060200260200160405190810160405280929190818152602001828054801561123757602002820191906000526020600020905b815481526020019060010190808311611223575b505050505081526020016006820180548060200260200160405190810160405280929190818152602001828054801561128f57602002820191906000526020600020905b81548152602001906001019080831161127b575b50505050508152602001600782018054806020026020016040519081016040528092919081815260200182805480156112e757602002820191906000526020600020905b8154815260200190600101908083116112d3575b505050505081526020016008820180548060200260200160405190810160405280929190818152602001828054801561133f57602002820191906000526020600020905b81548152602001906001019080831161132b575b505050505081525050905060608160000151516000141561138e576020820151516113835760408201515161137857816060015161137e565b81604001515b611389565b81602001515b611391565b81515b8051909150806001600160401b03811180156113ac57600080fd5b506040519080825280602002602001820160405280156113d6578160200160208202803683370190505b509450806001600160401b03811180156113ef57600080fd5b50604051908082528060200260200182016040528015611419578160200160208202803683370190505b50935060005b818110156114965782818151811061143357fe5b602002602001015186828151811061144757fe5b60200260200101906001600160a01b031690816001600160a01b031681525050611471818861252e565b50508751889250849150811061148357fe5b602090810291909101015260010161141f565b50505050915091565b6114a7611ff6565b6001600160a01b03166114b86116d6565b6001600160a01b0316146114de5760405162461bcd60e51b81526004016104ab90613db6565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b611530611ff6565b6001600160a01b03166115416116d6565b6001600160a01b0316146115675760405162461bcd60e51b81526004016104ab90613db6565b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051611599929190613b6a565b60405180910390a26006548111156115c35760405162461bcd60e51b81526004016104ab90613c12565b600855565b6115d0611ff6565b6001600160a01b03166115e16116d6565b6001600160a01b0316146116075760405162461bcd60e51b81526004016104ab90613db6565b60405133904780156108fc02916000818181858888f19350505050158015611633573d6000803e3d6000fd5b50565b61163e611ff6565b6001600160a01b031661164f6116d6565b6001600160a01b0316146116755760405162461bcd60e51b81526004016104ab90613db6565b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516116a7929190613b6a565b60405180910390a26006548111156116d15760405162461bcd60e51b81526004016104ab90613c12565b600755565b6000546001600160a01b031690565b6002546001600160a01b031681565b60095481565b611702611ff6565b6001600160a01b03166117136116d6565b6001600160a01b0316146117395760405162461bcd60e51b81526004016104ab90613db6565b61174d6001600160a01b0384168383612946565b505050565b6001600160a01b031660009081526004602052604090205460ff1690565b60075481565b61177e611ff6565b6001600160a01b031661178f6116d6565b6001600160a01b0316146117b55760405162461bcd60e51b81526004016104ab90613db6565b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516117e7929190613b6a565b60405180910390a2600180546001600160a01b0319166001600160a01b0392909216919091179055565b600154604051636e0cf42160e11b81526001600160a01b039091169063dc19e84290611841908490600401613a69565b60206040518083038186803b15801561185957600080fd5b505afa15801561186d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118919190613970565b6118ad5760405162461bcd60e51b81526004016104ab90613d43565b6000816001600160a01b0316633018205f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156118e857600080fd5b505afa1580156118fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061192091906136ab565b905061192a6135d0565b6001600160a01b0383166000908152600360209081526040918290208251815461012093810282018401909452610100810184815290939192849284918401828280156119a057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611982575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015611a0257602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116119e4575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015611a6457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611a46575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015611ac657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611aa8575b5050505050815260200160058201805480602002602001604051908101604052809291908181526020018280548015611b1e57602002820191906000526020600020905b815481526020019060010190808311611b0a575b5050505050815260200160068201805480602002602001604051908101604052809291908181526020018280548015611b7657602002820191906000526020600020905b815481526020019060010190808311611b62575b5050505050815260200160078201805480602002602001604051908101604052809291908181526020018280548015611bce57602002820191906000526020600020905b815481526020019060010190808311611bba575b5050505050815260200160088201805480602002602001604051908101604052809291908181526020018280548015611c2657602002820191906000526020600020905b815481526020019060010190808311611c12575b505050919092525050506001600160a01b038416600090815260046020526040902081515191925090606090611c8a57602083015151611c7f57604083015151611c74578260600151611c7a565b82604001515b611c85565b82602001515b611c8d565b82515b8051835491925090610100900460ff1615611cba5760405162461bcd60e51b81526004016104ab90613e20565b6001600160a01b03868116600090815260056020526040902054811690861614611d0d576001600160a01b03868116600090815260056020526040902080546001600160a01b0319169187169190911790555b60008111611d2d5760405162461bcd60e51b81526004016104ab90613d17565b825460ff16611d4e5760405162461bcd60e51b81526004016104ab90613deb565b825460ff191683556060816001600160401b0381118015611d6e57600080fd5b50604051908082528060200260200182016040528015611d98578160200160208202803683370190505b5090506060826001600160401b0381118015611db357600080fd5b50604051908082528060200260200182016040528015611ddd578160200160208202803683370190505b5090506060836001600160401b0381118015611df857600080fd5b50604051908082528060200260200182016040528015611e22578160200160208202803683370190505b5090506060846001600160401b0381118015611e3d57600080fd5b50604051908082528060200260200182016040528015611e67578160200160208202803683370190505b50905060005b85811015611f10576000611e81828d61252e565b8a8781518110611e8d57fe5b602002602001018a8881518110611ea057fe5b602002602001018a8981518110611eb357fe5b602002602001018a8a81518110611ec657fe5b602090810291909101019390935292909152919052528851909150600090899084908110611ef057fe5b60200260200101519050611f068d8d838561299c565b5050600101611e6d565b50611f1a8a612215565b15611f2d57611f2d8a8786868686612d49565b61078b8a613234565b611f3e611ff6565b6001600160a01b0316611f4f6116d6565b6001600160a01b031614611f755760405162461bcd60e51b81526004016104ab90613db6565b6001600160a01b038116611f9b5760405162461bcd60e51b81526004016104ab90613bcc565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b6001600160a01b038181166000908152600560205260409020541661163357806001600160a01b0316633018205f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561205257600080fd5b505afa158015612066573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061208a91906136ab565b6001600160a01b03918216600090815260056020526040902080546001600160a01b03191691909216179055565b835160005b818110156107905760008682815181106120d357fe5b6020026020010151905060008683815181106120eb57fe5b6020908102919091010151905061210d6001600160a01b0383163330846132b9565b6000806121738880548060200260200160405190810160405280929190818152602001828054801561216857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161214a575b5050505050856132e0565b9150915081156121c3576121a68388878154811061218d57fe5b906000526020600020015461333490919063ffffffff16565b8782815481106121b257fe5b600091825260209091200155612205565b875460018082018a5560008a8152602080822090930180546001600160a01b0319166001600160a01b03891617905589549182018a5589815291909120018390555b5050600190920191506120bd9050565b60006001826001600160a01b03166373a9855c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561225257600080fd5b505afa158015612266573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061228a919061398c565b600181111561229557fe5b1492915050565b6001600160a01b038116600090815260036020526040812087915b8281101561078b5760008a8a838181106122cd57fe5b90506020020160208101906122e2919061368f565b905060008989848181106122f257fe5b905060200201359050600088888581811061230957fe5b6020029190910135915061232a90506001600160a01b0384163330856132b9565b6000806123938760030180548060200260200160405190810160405280929190818152602001828054801561238857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161236a575b5050505050866132e0565b9150915081156123d0576123b08388600801888154811061218d57fe5b8760070182815481106123bf57fe5b600091825260209091200155612417565b600387018054600180820183556000928352602080842090920180546001600160a01b0319166001600160a01b038a1617905560078a018054918201815583529120018390555b6000806124808960040180548060200260200160405190810160405280929190818152602001828054801561247557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612457575b5050505050886132e0565b9150915081156124c6576124a66124978787613362565b8a6008018a8154811061218d57fe5b8960080182815481106124b557fe5b60009182526020909120015561251b565b600489018054600181018255600091825260209091200180546001600160a01b0319166001600160a01b038916179055600889016125048787613362565b815460018101835560009283526020909220909101555b5050600190950194506122b79350505050565b600080600080600061253e6135d0565b6001600160a01b0387166000908152600360209081526040918290208251815461012093810282018401909452610100810184815290939192849284918401828280156125b457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612596575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561261657602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116125f8575b505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561267857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161265a575b50505050508152602001600482018054806020026020016040519081016040528092919081815260200182805480156126da57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116126bc575b505050505081526020016005820180548060200260200160405190810160405280929190818152602001828054801561273257602002820191906000526020600020905b81548152602001906001019080831161271e575b505050505081526020016006820180548060200260200160405190810160405280929190818152602001828054801561278a57602002820191906000526020600020905b815481526020019060010190808311612776575b50505050508152602001600782018054806020026020016040519081016040528092919081815260200182805480156127e257602002820191906000526020600020905b8154815260200190600101908083116127ce575b505050505081526020016008820180548060200260200160405190810160405280929190818152602001828054801561283a57602002820191906000526020600020905b815481526020019060010190808311612826575b50505050508152505090508060800151516000146128995761288a60065461288460075484608001518c8151811061286e57fe5b60200260200101516133a490919063ffffffff16565b906133de565b94506128968686613334565b95505b60a081015151156128cf576128c06006546128846008548460a001518c8151811061286e57fe5b93506128cc8685613334565b95505b60c08101515115612905576128f66006546128846009548460c001518c8151811061286e57fe5b92506129028684613334565b95505b60e0810151511561293b5761292c600654612884600a548460e001518c8151811061286e57fe5b91506129388683613334565b95505b509295509295909350565b61174d8363a9059cbb60e01b8484604051602401612965929190613ae5565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261341d565b60006129a785612215565b9050801560006129bf6001600160a01b038716613502565b905082156129e1576002546129e1906001600160a01b03878116911686612946565b8180156129eb5750805b15612d1c576060876001600160a01b031663a0e67e2b6040518163ffffffff1660e01b815260040160006040518083038186803b158015612a2b57600080fd5b505afa158015612a3f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612a679190810190613850565b90506060886001600160a01b031663309a042c6040518163ffffffff1660e01b815260040160006040518083038186803b158015612aa457600080fd5b505afa158015612ab8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612ae091908101906138ed565b90506000896001600160a01b031663d29986c16040518163ffffffff1660e01b815260040160206040518083038186803b158015612b1d57600080fd5b505afa158015612b31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b5591906139c3565b905060005b8351811015612cc8576000612b8a858381518110612b7457fe5b60200260200101516001600160a01b0316613502565b612ba757848281518110612b9a57fe5b6020026020010151612c2b565b848281518110612bb357fe5b60200260200101516001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015612bf357600080fd5b505afa158015612c07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c2b91906136ab565b90506000612c5984612884878681518110612c4257fe5b60200260200101518d6133a490919063ffffffff16565b9050612c6f6001600160a01b038c168383612946565b816001600160a01b0316336001600160a01b03167f749a9ef4b9bff1f02a1a1d45429a3949e524fd93e3948001eab8dca05f1fcd6d8d8442604051612cb693929190613afe565b60405180910390a35050600101612b5a565b50896001600160a01b0316336001600160a01b03167f1bf0129823b56213a46996bc874ce50b318995cae2bbdcd2000933d36012547d8a8a42604051612d1093929190613afe565b60405180910390a35050505b818015612d27575080155b15612d4057612d406001600160a01b0386168786612946565b50505050505050565b612d516135d0565b6001600160a01b038716600090815260036020908152604091829020825181546101209381028201840190945261010081018481529093919284928491840182828015612dc757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612da9575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015612e2957602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612e0b575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015612e8b57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612e6d575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015612eed57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612ecf575b5050505050815260200160058201805480602002602001604051908101604052809291908181526020018280548015612f4557602002820191906000526020600020905b815481526020019060010190808311612f31575b5050505050815260200160068201805480602002602001604051908101604052809291908181526020018280548015612f9d57602002820191906000526020600020905b815481526020019060010190808311612f89575b5050505050815260200160078201805480602002602001604051908101604052809291908181526020018280548015612ff557602002820191906000526020600020905b815481526020019060010190808311612fe1575b505050505081526020016008820180548060200260200160405190810160405280929190818152602001828054801561304d57602002820191906000526020600020905b815481526020019060010190808311613039575b50505050508152505090508060800151516000146130cf57600254604051639155dae760e01b81526001600160a01b0390911690639155dae79061309c908a906000908b908b90600401613aa1565b600060405180830381600087803b1580156130b657600080fd5b505af11580156130ca573d6000803e3d6000fd5b505050505b60a0810151511561314457600254604051639155dae760e01b81526001600160a01b0390911690639155dae790613111908a906001908b908a90600401613aa1565b600060405180830381600087803b15801561312b57600080fd5b505af115801561313f573d6000803e3d6000fd5b505050505b60c081015151156131b75760028054604051639155dae760e01b81526001600160a01b0390911691639155dae791613184918b918b908990600401613aa1565b600060405180830381600087803b15801561319e57600080fd5b505af11580156131b2573d6000803e3d6000fd5b505050505b60e08101515115612d4057600254604051639155dae760e01b81526001600160a01b0390911690639155dae7906131f9908a906003908b908890600401613aa1565b600060405180830381600087803b15801561321357600080fd5b505af1158015613227573d6000803e3d6000fd5b5050505050505050505050565b6001600160a01b0381166000908152600360205260408120906132578282613615565b613265600283016000613615565b613273600383016000613615565b613281600483016000613615565b61328f600583016000613615565b61329d600683016000613615565b6132ab600783016000613615565b61174d600883016000613615565b6132da846323b872dd60e01b85858560405160240161296593929190613a7d565b50505050565b60008060005b845181101561332c57836001600160a01b031685828151811061330557fe5b60200260200101516001600160a01b0316141561332457600192508091505b6001016132e6565b509250929050565b6000828201838110156133595760405162461bcd60e51b81526004016104ab90613c79565b90505b92915050565b600061335983836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061353e565b6000826133b35750600061335c565b828202828482816133c057fe5b04146133595760405162461bcd60e51b81526004016104ab90613d75565b600061335983836040518060400160405280601a815260200179536166654d6174683a206469766973696f6e206279207a65726f60301b81525061356a565b61342f826001600160a01b0316613502565b61344b5760405162461bcd60e51b81526004016104ab90613e99565b60006060836001600160a01b0316836040516134679190613a4d565b6000604051808303816000865af19150503d80600081146134a4576040519150601f19603f3d011682016040523d82523d6000602084013e6134a9565b606091505b5091509150816134cb5760405162461bcd60e51b81526004016104ab90613ce2565b8051156132da57808060200190518101906134e69190613970565b6132da5760405162461bcd60e51b81526004016104ab90613e4f565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081811480159061353657508115155b949350505050565b600081848411156135625760405162461bcd60e51b81526004016104ab9190613b99565b505050900390565b6000818361358b5760405162461bcd60e51b81526004016104ab9190613b99565b50600083858161359757fe5b0495945050505050565b6040518060a0016040528060608152602001606081526020016060815260200160608152602001606081525090565b60405180610100016040528060608152602001606081526020016060815260200160608152602001606081526020016060815260200160608152602001606081525090565b508054600082559060005260206000209081019061163391905b80821115613643576000815560010161362f565b5090565b60008083601f840112613658578182fd5b5081356001600160401b0381111561366e578182fd5b602083019150836020808302850101111561368857600080fd5b9250929050565b6000602082840312156136a0578081fd5b813561335981613fdc565b6000602082840312156136bc578081fd5b815161335981613fdc565b6000806000606084860312156136db578182fd5b83356136e681613fdc565b925060208401356136f681613fdc565b929592945050506040919091013590565b60008060408385031215613719578182fd5b823561372481613fdc565b9150602083013561373481613ff1565b809150509250929050565b60008060008060408587031215613754578081fd5b84356001600160401b038082111561376a578283fd5b61377688838901613647565b9096509450602087013591508082111561378e578283fd5b5061379b87828801613647565b95989497509550505050565b60008060008060008060006080888a0312156137c1578283fd5b87356001600160401b03808211156137d7578485fd5b6137e38b838c01613647565b909950975060208a01359150808211156137fb578485fd5b6138078b838c01613647565b909750955060408a013591508082111561381f578485fd5b5061382c8a828b01613647565b909450925050606088013561384081613ff1565b8091505092959891949750929550565b60006020808385031215613862578182fd5b82516001600160401b03811115613877578283fd5b8301601f81018513613887578283fd5b805161389a61389582613f91565b613f6b565b81815283810190838501858402850186018910156138b6578687fd5b8694505b838510156138e15780516138cd81613fdc565b8352600194909401939185019185016138ba565b50979650505050505050565b600060208083850312156138ff578182fd5b82516001600160401b03811115613914578283fd5b8301601f81018513613924578283fd5b805161393261389582613f91565b818152838101908385018584028501860189101561394e578687fd5b8694505b838510156138e1578051835260019490940193918501918501613952565b600060208284031215613981578081fd5b815161335981613ff1565b60006020828403121561399d578081fd5b815160028110613359578182fd5b6000602082840312156139bc578081fd5b5035919050565b6000602082840312156139d4578081fd5b5051919050565b6000815180845260208085019450808401835b83811015613a135781516001600160a01b0316875295820195908201906001016139ee565b509495945050505050565b6000815180845260208085019450808401835b83811015613a1357815187529582019590820190600101613a31565b60008251613a5f818460208701613fb0565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060018060a01b038616825284602083015260806040830152613ac860808301856139db565b8281036060840152613ada8185613a1e565b979650505050505050565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b600060408252613b3260408301856139db565b8281036020840152613b448185613a1e565b95945050505050565b901515815260200190565b91151582521515602082015260400190565b60006020825282602083015282846040840137818301604090810191909152601f909201601f19160101919050565b6000602082528251806020840152613bb8816040850160208701613fb0565b601f01601f19169190910160400192915050565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526016908201527513585e1a5b5d5b481b1a5b5a5d08195e18d95959195960521b604082015260600190565b6020808252601d908201527f4552525f494e56414c49445f555345525641554c545f41444452455353000000604082015260600190565b6020808252601b908201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604082015260600190565b6020808252601a908201527908aa4a4bea89e968a9cbe988a9c8ea890be9c9ea8be9a82a886960331b604082015260600190565b6020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b6020808252601290820152714552525f4e4f545f4d414e4745525f46454560701b604082015260600190565b6020808252601890820152774552525f494e56414c49445f504f4f4c5f4144445245535360401b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601b908201527a4552525f4d414e414745525f434f554c445f4e4f545f434c41494d60281b604082015260600190565b60208082526015908201527411549497d413d3d317d254d7d0931050d2d31254d5605a1b604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b6020808252601f908201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604082015260600190565b600060208252825160a06020840152613eec60c08401826139db565b90506020840151601f1980858403016040860152613f0a8383613a1e565b92506040860151915080858403016060860152613f278383613a1e565b92506060860151915080858403016080860152613f448383613a1e565b925060808601519150808584030160a086015250613b448282613a1e565b90815260200190565b6040518181016001600160401b0381118282101715613f8957600080fd5b604052919050565b60006001600160401b03821115613fa6578081fd5b5060209081020190565b60005b83811015613fcb578181015183820152602001613fb3565b838111156132da5750506000910152565b6001600160a01b038116811461163357600080fd5b801515811461163357600080fdfea26469706673582212206f0dffc2712830673b68526b1a1d61164e518e5b943df3cad5a7b737678cdda564736f6c634300060c0033",
  "libraries": {},
  "devdoc": {
    "author": "Desyn Labs",
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Vault managerFee",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 18082,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 12651,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "crpFactory",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ICRPFactory)12635"
      },
      {
        "astId": 12653,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "userVault",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 12715,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "poolsTokens",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(PoolTokens)12706_storage)"
      },
      {
        "astId": 12719,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "poolsStatus",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(PoolStatus)12711_storage)"
      },
      {
        "astId": 12723,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "poolManager",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 12742,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "RATIO_TOTAL",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 12745,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "RATIO_MANAGER",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 12748,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "RATIO_ISSUE",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 12751,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "RATIO_REDEEM",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 12754,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "RATIO_PERFERMANCE",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ICRPFactory)12635": {
        "encoding": "inplace",
        "label": "contract ICRPFactory",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_struct(PoolStatus)12711_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Vault.PoolStatus)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolStatus)12711_storage"
      },
      "t_mapping(t_address,t_struct(PoolTokens)12706_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Vault.PoolTokens)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolTokens)12706_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(PoolStatus)12711_storage": {
        "encoding": "inplace",
        "label": "struct Vault.PoolStatus",
        "members": [
          {
            "astId": 12708,
            "contract": "contracts/deploy/Vault.sol:Vault",
            "label": "couldManagerClaim",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 12710,
            "contract": "contracts/deploy/Vault.sol:Vault",
            "label": "isBlackList",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(PoolTokens)12706_storage": {
        "encoding": "inplace",
        "label": "struct Vault.PoolTokens",
        "members": [
          {
            "astId": 12680,
            "contract": "contracts/deploy/Vault.sol:Vault",
            "label": "tokenList",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 12684,
            "contract": "contracts/deploy/Vault.sol:Vault",
            "label": "tokenIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 12687,
            "contract": "contracts/deploy/Vault.sol:Vault",
            "label": "issueTokens",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 12690,
            "contract": "contracts/deploy/Vault.sol:Vault",
            "label": "redeemTokens",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 12693,
            "contract": "contracts/deploy/Vault.sol:Vault",
            "label": "perfermanceTokens",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 12696,
            "contract": "contracts/deploy/Vault.sol:Vault",
            "label": "managerAmount",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 12699,
            "contract": "contracts/deploy/Vault.sol:Vault",
            "label": "issueAmount",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 12702,
            "contract": "contracts/deploy/Vault.sol:Vault",
            "label": "redeemAmount",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 12705,
            "contract": "contracts/deploy/Vault.sol:Vault",
            "label": "perfermanceAmount",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
