{
  "address": "0x780A35D4a31dc9F5F610d6db47bA58D5b51749Df",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "kol",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "KolClaim",
      "type": "event"
    },
    {
      "anonymous": true,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes4",
          "name": "sig",
          "type": "bytes4"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "LOG_CALL",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "ManagerClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "ManagersClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "types",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "name": "TypeAmountIn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "adminClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "types",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "tokensIn",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amountsIn",
          "type": "uint256[]"
        }
      ],
      "name": "depositToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBNB",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "kol",
          "type": "address"
        }
      ],
      "name": "getKolFeeType",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "tokenList",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "managerAmount",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "issueAmount",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "redeemAmount",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "perfermanceAmount",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct UserVault.FeeTypesTokens",
          "name": "result",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "kol",
          "type": "address"
        }
      ],
      "name": "getKolHasClaimed",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct UserVault.ClaimTokens",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "kol",
          "type": "address"
        }
      ],
      "name": "getKolReward",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "kol",
          "type": "address"
        }
      ],
      "name": "getKolUserInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "userAdr",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "userAmount",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct UserVault.KolUserInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getKolsAdr",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getKolsReward",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getManageHasClaimed",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct UserVault.ClaimTokens",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getManagerFeeTypes",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "tokenList",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "managerAmount",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "issueAmount",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "redeemAmount",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "perfermanceAmount",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct UserVault.FeeTypesTokens",
          "name": "result",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getManagerReward",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getPoolFeeTypes",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "tokenList",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "managerAmount",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "issueAmount",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "redeemAmount",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "perfermanceAmount",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct UserVault.FeeTypesTokens",
          "name": "result",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getPoolReward",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokenList",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "kol",
          "type": "address"
        }
      ],
      "name": "getUnKolReward",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getUnManagerReward",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "kolClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "kolTotalAmountList",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "managerClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "kol",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "poolTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokensAmount",
          "type": "uint256[]"
        }
      ],
      "name": "recordTokenInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "bools",
          "type": "bool"
        }
      ],
      "name": "setBlackList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adr",
          "type": "address"
        }
      ],
      "name": "setCrpFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "firstLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "secondLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "thirdLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "fourLevel",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SmartPoolManager.feeParams",
              "name": "managerFee",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "firstLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "secondLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "thirdLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "fourLevel",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SmartPoolManager.feeParams",
              "name": "issueFee",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "firstLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "secondLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "thirdLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "fourLevel",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SmartPoolManager.feeParams",
              "name": "redeemFee",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "firstLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "secondLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "thirdLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "fourLevel",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SmartPoolManager.feeParams",
              "name": "perfermanceFee",
              "type": "tuple"
            }
          ],
          "internalType": "struct SmartPoolManager.KolPoolParams",
          "name": "_poolParams",
          "type": "tuple"
        }
      ],
      "name": "setPoolParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adr",
          "type": "address"
        }
      ],
      "name": "setVaultAdr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userKolList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x670676b678e5b5bc1f505200362681560db859978ef30b2160b11145cfedf1c8",
  "receipt": {
    "to": null,
    "from": "0x595b85b4A418e3B8df897D02F5BD49167D00862F",
    "contractAddress": "0x780A35D4a31dc9F5F610d6db47bA58D5b51749Df",
    "transactionIndex": 0,
    "gasUsed": "5046833",
    "logsBloom": "0x
    "blockHash": "0x86206a67d711619cabb8da7cbf5ce63e43565ac97628ea7ddcdd3225298427ed",
    "transactionHash": "0x670676b678e5b5bc1f505200362681560db859978ef30b2160b11145cfedf1c8",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 8167776,
        "transactionHash": "0x670676b678e5b5bc1f505200362681560db859978ef30b2160b11145cfedf1c8",
        "address": "0x780A35D4a31dc9F5F610d6db47bA58D5b51749Df",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000595b85b4a418e3b8df897d02f5bd49167d00862f"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x86206a67d711619cabb8da7cbf5ce63e43565ac97628ea7ddcdd3225298427ed"
      }
    ],
    "blockNumber": 8167776,
    "cumulativeGasUsed": "5046833",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "5d54d21ba156fcd13fa09c358c75c0de",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"kol\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"KolClaim\",\"type\":\"event\"},{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"LOG_CALL\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ManagerClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ManagersClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"types\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"TypeAmountIn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"adminClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"types\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"tokensIn\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsIn\",\"type\":\"uint256[]\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBNB\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"kol\",\"type\":\"address\"}],\"name\":\"getKolFeeType\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"tokenList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"managerAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"issueAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"redeemAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"perfermanceAmount\",\"type\":\"uint256[]\"}],\"internalType\":\"struct UserVault.FeeTypesTokens\",\"name\":\"result\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"kol\",\"type\":\"address\"}],\"name\":\"getKolHasClaimed\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct UserVault.ClaimTokens\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"kol\",\"type\":\"address\"}],\"name\":\"getKolReward\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"kol\",\"type\":\"address\"}],\"name\":\"getKolUserInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"userAdr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"userAmount\",\"type\":\"uint256[]\"}],\"internalType\":\"struct UserVault.KolUserInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getKolsAdr\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getKolsReward\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getManageHasClaimed\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct UserVault.ClaimTokens\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getManagerFeeTypes\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"tokenList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"managerAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"issueAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"redeemAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"perfermanceAmount\",\"type\":\"uint256[]\"}],\"internalType\":\"struct UserVault.FeeTypesTokens\",\"name\":\"result\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getManagerReward\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolFeeTypes\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"tokenList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"managerAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"issueAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"redeemAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"perfermanceAmount\",\"type\":\"uint256[]\"}],\"internalType\":\"struct UserVault.FeeTypesTokens\",\"name\":\"result\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolReward\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"kol\",\"type\":\"address\"}],\"name\":\"getUnKolReward\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getUnManagerReward\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"kolClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"kolTotalAmountList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"managerClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"kol\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"poolTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokensAmount\",\"type\":\"uint256[]\"}],\"name\":\"recordTokenInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"bools\",\"type\":\"bool\"}],\"name\":\"setBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setCrpFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"managerFee\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"issueFee\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"redeemFee\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"perfermanceFee\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.KolPoolParams\",\"name\":\"_poolParams\",\"type\":\"tuple\"}],\"name\":\"setPoolParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setVaultAdr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userKolList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Desyn Labs\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Vault managerFee\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/deploy/UserVault.sol\":\"UserVault\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"contracts/base/Logs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\ncontract Logs {\\n    event LOG_CALL(bytes4 indexed sig, address indexed caller, bytes data) anonymous;\\n\\n    modifier _logs_() {\\n        emit LOG_CALL(msg.sig, msg.sender, msg.data);\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x942b3c172dd3f0910c3589d703b4f224c94c76a13cc84d7add6318206cff512e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/deploy/UserVault.sol\":{\"content\":\"pragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IDSProxy.sol\\\";\\nimport \\\"../openzeppelin/Ownable.sol\\\";\\nimport  \\\"../libraries/SmartPoolManager.sol\\\";\\nimport \\\"../libraries/EnumerableSet.sol\\\";\\nimport \\\"../libraries/SafeMath.sol\\\";\\nimport \\\"../libraries/Address.sol\\\";\\nimport \\\"../libraries/SafeERC20.sol\\\";\\nimport \\\"../base/Logs.sol\\\";\\n\\ninterface ICRPPool {\\n    function getController() external view returns (address);\\n\\n    enum Etypes {\\n        OPENED,\\n        CLOSED\\n    }\\n\\n    function etype() external view returns (Etypes);\\n\\n    function isCompletedCollect() external view returns (bool);\\n}\\n\\ninterface ICRPFactory {\\n    function isCrp(address addr) external view returns (bool);\\n}\\n\\ninterface IDesynOwnable {\\n    function adminList(address adr) external view returns (bool);\\n    function getController() external view returns (address);\\n    function getOwners() external view returns (address[] memory);\\n    function getOwnerPercentage() external view returns (uint[] memory);\\n    function allOwnerPercentage() external view returns (uint);\\n}\\n\\n/**\\n * @author Desyn Labs\\n * @title Vault managerFee\\n */\\ncontract UserVault is Ownable, Logs {\\n    using SafeMath for uint;\\n    using Address for address;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using SafeERC20 for IERC20;\\n\\n    event ManagersClaim(address indexed caller,address indexed pool, address token, uint amount, uint time);\\n    event ManagerClaim(address indexed caller,address indexed manager, address token, uint amount, uint time);\\n    event KolClaim(address indexed caller,address indexed kol, address token, uint amount, uint time);\\n\\n    event TypeAmountIn(address indexed pool, uint types, address caller, address token, uint balance);\\n\\n    ICRPFactory crpFactory;\\n    address vaultAddress;\\n\\n    // pool of tokens\\n    struct PoolTokens {\\n        address[] tokenList;\\n        mapping(address => uint) tokenIndex; \\n        uint[] managerAmount;\\n        uint[] issueAmount;\\n        uint[] redeemAmount;\\n        uint[] perfermanceAmount;\\n    }\\n\\n    struct PoolStatus {\\n        bool couldManagerClaim;\\n        bool isBlackList;\\n        bool isSetParams;\\n        SmartPoolManager.KolPoolParams kolPoolConfig;\\n    }\\n\\n    // kol list\\n    struct KolUserInfo {\\n        address userAdr;\\n        uint[] userAmount;\\n    }\\n    // pool => kol => KolUserInfo[]\\n    mapping(address => mapping(address => KolUserInfo[])) kolUserInfo;\\n\\n    function getKolUserInfo(address pool, address kol) external view  returns (KolUserInfo[] memory) {\\n        return kolUserInfo[pool][kol];\\n    }\\n    // pool tokens\\n    mapping(address => PoolTokens) poolsTokens;\\n    mapping(address => PoolStatus) poolsStatus;\\n\\n    //pool => initTotalAmount[]\\n    mapping(address => uint) poolInviteTotal;\\n\\n    //pool => kol[]\\n    mapping(address => EnumerableSet.AddressSet) kolsList;\\n    //pool => kol =>uint\\n\\n    //pool => kol => totalAmount[]\\n    mapping(address => mapping(address => uint[])) public kolTotalAmountList;\\n\\n    //pool => user => index\\n    mapping(address => mapping(address => uint)) userIndexList;\\n    // pool => user => kol\\n    mapping(address => mapping(address => address)) public userKolList;\\n    \\n    struct ClaimTokens {\\n        address[] tokens;\\n        uint[] amounts;\\n    }\\n\\n    struct FeeTypesTokens {\\n        address[] tokenList;\\n        uint[] managerAmount;\\n        uint[] issueAmount;\\n        uint[] redeemAmount;\\n        uint[] perfermanceAmount;\\n    }\\n\\n    // pool=>kol=>tokens\\n    mapping(address => mapping(address => ClaimTokens)) kolHasClaimed;\\n    function getKolHasClaimed(address pool,address kol) external view returns(ClaimTokens memory) {\\n        return kolHasClaimed[pool][kol];\\n    }\\n    // pool=>manage=>tokens\\n    mapping (address => ClaimTokens) manageHasClaimed;\\n    function getManageHasClaimed(address pool) external view returns(ClaimTokens memory) {\\n        return manageHasClaimed[pool];\\n    }\\n\\n    uint RATIO_TOTAL = 100;\\n\\n    receive() external payable {}\\n\\n    // one type call and receiver token\\n    function depositToken(\\n        address pool,\\n        uint types,\\n        address[] calldata tokensIn,\\n        uint[] calldata amountsIn\\n    ) external onlyVault {\\n        require(tokensIn.length == amountsIn.length, \\\"ERR_TOKEN_LENGTH_NOT_MATCH\\\");\\n        // _initPoolController(pool);\\n        _updatePool(pool, types, tokensIn, amountsIn);\\n        poolsStatus[pool].couldManagerClaim = true;\\n    }\\n\\n    // total tokens in pool\\n    function getPoolReward(address pool) external view returns (address[] memory tokenList, uint[] memory balances) {\\n        PoolTokens memory tokens = poolsTokens[pool];\\n        uint len = tokens.tokenList.length;\\n\\n        balances = new uint[](len);    \\n        tokenList = tokens.tokenList;\\n\\n        for(uint i; i<len ;i++){\\n            balances[i] = tokens.managerAmount[i]\\n                            .add(tokens.issueAmount[i])\\n                            .add(tokens.redeemAmount[i])\\n                            .add(tokens.perfermanceAmount[i]);\\n        }\\n    }\\n    // one kol total reward \\n    function getKolReward(\\n        address pool,\\n        address kol\\n    ) external view returns (address[] memory, uint[] memory) {\\n        uint kolTotalAmount = kolTotalAmountList[pool][kol].length > 0 ? kolTotalAmountList[pool][kol][0] : 0;\\n        require(kolTotalAmount > 0, \\\"ERR_KOL_HAS_NO_REWARD\\\");\\n        SmartPoolManager.KolPoolParams memory params = poolsStatus[pool].kolPoolConfig;\\n\\n        PoolTokens memory tokens = poolsTokens[pool];\\n        uint[] memory balances = new uint[](tokens.tokenList.length);\\n\\n        uint allContributionByKol = poolInviteTotal[pool];\\n        uint contributionByCurKol = kolTotalAmountList[pool][kol][0];\\n\\n        for(uint i; i < tokens.tokenList.length; i++){\\n            uint mb = tokens.managerAmount[i].mul(_levelJudge(kolTotalAmount, params.managerFee)).div(RATIO_TOTAL);\\n            uint ib = tokens.issueAmount[i].mul(_levelJudge(kolTotalAmount, params.issueFee)).div(RATIO_TOTAL);\\n            uint rb = tokens.redeemAmount[i].mul(_levelJudge(kolTotalAmount, params.redeemFee)).div(RATIO_TOTAL);\\n            uint pb = tokens.perfermanceAmount[i].mul(_levelJudge(kolTotalAmount, params.perfermanceFee)).div(RATIO_TOTAL);\\n\\n            uint tokenTotal = mb.add(ib).add(rb).add(pb);\\n\\n            balances[i] = tokenTotal.mul(contributionByCurKol).div(allContributionByKol);\\n        }\\n\\n        return (tokens.tokenList,balances);\\n    }\\n\\n    function kolClaim(address pool) external {\\n        if (_isClosePool(pool)) {\\n            require(crpFactory.isCrp(pool), \\\"ERR_INVALID_POOL_ADDRESS\\\");\\n            require(ICRPPool(pool).isCompletedCollect(), \\\"ERR_NOT_COMPLETED_COLLECT\\\");\\n            (address[] memory tokens, uint[] memory amounts) = this.getKolReward(pool, msg.sender);\\n\\n            ClaimTokens storage kolClaimedInfo = kolHasClaimed[pool][msg.sender];\\n\\n            // update length\\n            kolClaimedInfo.tokens = tokens;\\n            uint amountsLen = kolClaimedInfo.amounts.length;\\n            uint tokensLen = tokens.length;\\n\\n            if(amountsLen != tokensLen){\\n                uint delta = tokensLen - amountsLen;\\n                for(uint i; i < delta; i++){\\n                    kolClaimedInfo.amounts.push(0);\\n                }\\n            }\\n            \\n            address receiver = address(msg.sender).isContract()? IDSProxy(msg.sender).owner(): msg.sender;\\n            for(uint i; i< tokens.length; i++) {\\n                uint b = amounts[i] - kolClaimedInfo.amounts[i];\\n                IERC20(tokens[i]).safeTransfer(receiver, b);\\n                kolClaimedInfo.amounts[i] = kolClaimedInfo.amounts[i].add(b);\\n                emit KolClaim(msg.sender,receiver,tokens[i],b,block.timestamp);\\n            }\\n        }\\n    }\\n\\n    // manager claim\\n    function managerClaim(address pool) external {\\n        // try  {} catch {}\\n        if (_isClosePool(pool)) {\\n            bool isManager = IDesynOwnable(pool).adminList(msg.sender) || IDesynOwnable(pool).getController() == msg.sender;\\n            bool isCollectSuccee = ICRPPool(pool).isCompletedCollect();\\n            require(isCollectSuccee, \\\"ERR_NOT_COMPLETED_COLLECT\\\");\\n            require(isManager, \\\"ERR_NOT_MANAGER\\\");\\n            (address[] memory tokens, uint[] memory amounts) = this.getUnManagerReward(pool);\\n            poolsStatus[pool].couldManagerClaim = false;\\n\\n            ClaimTokens storage manageHasClimed = manageHasClaimed[pool];\\n\\n            // update length\\n            manageHasClimed.tokens = tokens;\\n            uint amountsLen = manageHasClimed.amounts.length;\\n            uint tokensLen = tokens.length;\\n\\n            if(amountsLen != tokensLen){\\n                uint delta = tokensLen - amountsLen;\\n                for(uint i; i < delta; i++){\\n                    manageHasClimed.amounts.push(0);\\n                }\\n            }\\n            // update tokens\\n            for(uint i; i< tokens.length; i++){\\n                address t = tokens[i];\\n                _transferHandle(pool, t, amounts[i]);\\n                // _addManagerClaimRecord(pool, t, amounts[i]);\\n                manageHasClimed.amounts[i] = manageHasClimed.amounts[i].add(amounts[i]);\\n            }\\n        }\\n    }\\n\\n    function getManagerReward(address pool) external view returns (address[] memory, uint[] memory) {\\n        (address[] memory totalTokens, uint[] memory totalFee) = this.getPoolReward(pool);\\n        (, uint[] memory kolFee) = this.getKolsReward(pool);\\n\\n        uint len = totalTokens.length;\\n        uint[] memory balances = new uint[](len);\\n\\n        for(uint i; i<len; i++){\\n            balances[i] = totalFee[i] - kolFee[i];\\n        }\\n\\n        return (totalTokens, balances);\\n    }\\n    // for all manager\\n    function getUnManagerReward(address pool) external returns (address[] memory, uint[] memory) {\\n        (address[] memory totalTokens, uint[] memory totalAmounts) = this.getManagerReward(pool);\\n        ClaimTokens storage manageHasClimed = manageHasClaimed[pool];\\n\\n        // update length\\n        manageHasClimed.tokens = totalTokens;\\n        uint amountsLen = manageHasClimed.amounts.length;\\n        uint tokensLen = totalTokens.length;\\n        if(amountsLen != tokensLen){\\n            uint delta = tokensLen - amountsLen;\\n            for(uint i; i < delta; i++){\\n                manageHasClimed.amounts.push(0);\\n            }\\n        }\\n\\n        uint len = totalTokens.length;\\n        uint[] memory balances = new uint[](len);\\n        for(uint i; i < totalTokens.length; i++){\\n            balances[i] = totalAmounts[i] - manageHasClimed.amounts[i];\\n        }        \\n\\n        return (totalTokens,balances);\\n    }\\n\\n    function getPoolFeeTypes(address pool) external view returns(FeeTypesTokens memory result){      \\n        PoolTokens memory poolInfo = poolsTokens[pool];\\n        result.tokenList = poolInfo.tokenList;\\n        result.managerAmount = poolInfo.managerAmount;\\n        result.issueAmount = poolInfo.issueAmount;\\n        result.redeemAmount = poolInfo.redeemAmount;\\n        result.perfermanceAmount = poolInfo.perfermanceAmount;\\n    }\\n    \\n    function getManagerFeeTypes(address pool) external view returns(FeeTypesTokens memory result){     \\n        result = this.getPoolFeeTypes(pool);\\n        FeeTypesTokens memory allKolFee = _getKolsFeeTypes(pool); \\n\\n        uint len = result.tokenList.length;\\n        for(uint i; i< len; i++){\\n            result.managerAmount[i] = result.managerAmount[i].sub(allKolFee.managerAmount[i]);\\n            result.issueAmount[i] = result.issueAmount[i].sub(allKolFee.issueAmount[i]);\\n            result.redeemAmount[i] = result.redeemAmount[i].sub(allKolFee.redeemAmount[i]);\\n            result.perfermanceAmount[i] = result.perfermanceAmount[i].sub(allKolFee.perfermanceAmount[i]);\\n        }\\n    }\\n  \\n    function _getKolsFeeTypes(address pool) internal view returns(FeeTypesTokens memory result) {\\n        PoolTokens memory poolInfo = poolsTokens[pool];\\n        uint len = poolInfo.tokenList.length;\\n        result.tokenList = poolInfo.tokenList;\\n        \\n        EnumerableSet.AddressSet storage list = kolsList[pool];\\n        uint kolLen = list.length();\\n        // init result\\n        result.managerAmount = new uint[](len);\\n        result.issueAmount = new uint[](len);\\n        result.redeemAmount = new uint[](len);\\n        result.perfermanceAmount = new uint[](len);\\n\\n        for(uint types; types<4; types++){\\n            for(uint i; i<len; i++){ \\n                for (uint j; j < kolLen; j++) {\\n                    if(types == 0)\\n                        result.managerAmount[i] = result.managerAmount[i].add(_computeKolTotalReward(pool, list.at(j), 0, i));\\n                    if(types == 1)\\n                        result.issueAmount[i] = result.issueAmount[i].add(_computeKolTotalReward(pool, list.at(j), 1, i));\\n                    if(types == 2)\\n                        result.redeemAmount[i] = result.redeemAmount[i].add(_computeKolTotalReward(pool, list.at(j), 2, i));\\n                    if(types == 3)\\n                        result.perfermanceAmount[i] = result.perfermanceAmount[i].add(_computeKolTotalReward(pool, list.at(j), 3, i));\\n                }    \\n            }      \\n        }\\n    }\\n\\n    function getKolFeeType(address pool, address kol)external view returns(FeeTypesTokens memory result) {\\n        PoolTokens memory poolInfo = poolsTokens[pool];\\n        result.tokenList = poolInfo.tokenList;\\n        \\n        uint len = poolInfo.tokenList.length;\\n        // init result\\n        result.managerAmount = new uint[](len);\\n        result.issueAmount = new uint[](len);\\n        result.redeemAmount = new uint[](len);\\n        result.perfermanceAmount = new uint[](len);\\n        // more for to save gas\\n        for(uint i; i<len; i++){ \\n            result.managerAmount[i] = result.managerAmount[i].add(_computeKolTotalReward(pool, kol, 0, i));\\n            result.issueAmount[i] = result.issueAmount[i].add(_computeKolTotalReward(pool, kol, 1, i));\\n            result.redeemAmount[i] = result.redeemAmount[i].add(_computeKolTotalReward(pool, kol, 2, i));\\n            result.perfermanceAmount[i] = result.perfermanceAmount[i].add(_computeKolTotalReward(pool, kol, 3, i));\\n        }      \\n    }\\n\\n    function getKolsReward(address pool) external view returns (address[] memory, uint[] memory) {\\n        EnumerableSet.AddressSet storage list = kolsList[pool];\\n        uint len = list.length();\\n        address[] memory tokens = poolsTokens[pool].tokenList;\\n        uint[] memory balances = new uint[](tokens.length);\\n        for (uint i = 0; i < len; i++) {\\n            (, uint[] memory singleReward) = this.getKolReward(pool, list.at(i));\\n            for(uint k; k < singleReward.length; k++){\\n                balances[k] = balances[k] + singleReward[k];\\n            }\\n        }\\n\\n        return (tokens,balances);\\n    }\\n\\n    function getUnKolReward(address pool, address kol) external returns (address[] memory,uint[] memory) {\\n        (address[] memory totalTokens, uint[] memory totalReward) = this.getKolReward(pool, kol);\\n\\n        ClaimTokens storage singleKolHasReward = kolHasClaimed[pool][msg.sender];\\n        // update length\\n        singleKolHasReward.tokens = totalTokens;\\n        uint amountsLen = singleKolHasReward.amounts.length;\\n        uint tokensLen = totalTokens.length;\\n        if(amountsLen != tokensLen){\\n            uint delta = tokensLen - amountsLen;\\n            for(uint i; i < delta; i++){\\n                singleKolHasReward.amounts.push(0);\\n            }\\n        }\\n\\n        uint len = totalTokens.length;\\n        uint[] memory balances = new uint[](len);\\n        for(uint i; i<len; i++){\\n            balances[i] = totalReward[i] - singleKolHasReward.amounts[i];\\n        }\\n\\n        return (totalTokens, balances);\\n    }\\n\\n    function recordTokenInfo(\\n        address kol,\\n        address user,\\n        address[] calldata poolTokens,\\n        uint[] calldata tokensAmount\\n    ) external {\\n        address pool = msg.sender;\\n        uint len = poolTokens.length;\\n        require(len == tokensAmount.length, \\\"ERR_TOKEN_LENGTH_NOT_MATCH\\\");\\n        require(crpFactory.isCrp(pool), \\\"ERR_INVALID_POOL_ADDRESS\\\");\\n        address newKol = userKolList[pool][user];\\n        if (userKolList[pool][user] == address(0)) {\\n            userKolList[pool][user] = kol;\\n            if (!kolsList[pool].contains(kol)) {\\n                kolsList[pool].addValue(kol);\\n            }\\n            newKol = kol;\\n        }\\n        require(newKol != address(0), \\\"ERR_INVALID_KOL_ADDRESS\\\");\\n        //total amount record\\n        poolInviteTotal[pool] = poolInviteTotal[pool].add(tokensAmount[0]);\\n        uint[] memory totalAmounts = new uint[](len);\\n        for (uint i; i < len; i++) {\\n            if (kolTotalAmountList[pool][newKol].length == 0) {\\n                totalAmounts[i] = tokensAmount[i];\\n            } else {\\n                totalAmounts[i] = tokensAmount[i].add(kolTotalAmountList[pool][newKol][i]);\\n            }\\n        }\\n        kolTotalAmountList[pool][newKol] = totalAmounts;\\n        //kol user info record\\n        KolUserInfo[] storage userInfoArray = kolUserInfo[pool][newKol];\\n        uint index = userIndexList[pool][user];\\n        if (index == 0) {\\n            KolUserInfo memory userInfo;\\n            userInfo.userAdr = user;\\n            userInfo.userAmount = tokensAmount;\\n            userInfoArray.push(userInfo);\\n            userIndexList[pool][user] = userInfoArray.length;\\n        } else {\\n            KolUserInfo storage userInfo = kolUserInfo[pool][newKol][index - 1];\\n            for (uint a = 0; a < userInfo.userAmount.length; a++) {\\n                userInfo.userAmount[a] = userInfo.userAmount[a].add(tokensAmount[a]);\\n            }\\n        }\\n    }\\n\\n    function setPoolParams(address pool, SmartPoolManager.KolPoolParams memory _poolParams) external onlyCrpFactory {\\n        PoolStatus storage status = poolsStatus[pool];\\n        require(crpFactory.isCrp(pool), \\\"ERR_INVALID_POOL_ADDRESS\\\");\\n        require(!status.isSetParams, \\\"ERR_HAS_SETED\\\");\\n\\n        status.isSetParams = true;\\n        status.kolPoolConfig = _poolParams;\\n    }\\n\\n    function getKolsAdr(address pool) external view returns (address[] memory) {\\n        return kolsList[pool].values();\\n    }\\n\\n    function setBlackList(address pool, bool bools) external onlyOwner _logs_ {\\n        poolsStatus[pool].isBlackList = bools;\\n    }\\n\\n    function setCrpFactory(address adr) external onlyOwner _logs_ {\\n        crpFactory = ICRPFactory(adr);\\n    }\\n\\n    function adminClaim(\\n        address token,\\n        address user,\\n        uint amount\\n    ) external onlyOwner {\\n        IERC20(token).safeTransfer(user, amount);\\n    }\\n\\n    function getBNB() external payable onlyOwner {\\n        msg.sender.transfer(address(this).balance);\\n    }\\n\\n    function setVaultAdr(address adr) external onlyOwner _logs_ {\\n        vaultAddress = adr;\\n    }\\n\\n    function _updatePool(\\n        address pool,\\n        uint types,\\n        address[] memory tokenIn,\\n        uint[] memory amountIn\\n    ) internal {\\n        PoolTokens storage tokens = poolsTokens[pool];\\n\\n        for(uint i; i < tokenIn.length; i++){\\n            address t = tokenIn[i];\\n            uint b = amountIn[i];\\n            uint index = tokens.tokenIndex[t];\\n\\n            // update token and init value\\n            bool tokenHasNoInit = tokens.tokenList.length == 0 ? true : index == 0 && tokens.tokenList[0] != t;\\n            if(tokenHasNoInit){\\n                tokens.tokenList.push(t);\\n                tokens.managerAmount.push(0);\\n                tokens.issueAmount.push(0);\\n                tokens.redeemAmount.push(0);\\n                tokens.perfermanceAmount.push(0);\\n                tokens.tokenIndex[t] = tokens.tokenList.length -1;\\n                index = tokens.tokenIndex[t];\\n            }\\n\\n            // update valut\\n            if(types == 0) {\\n                tokens.managerAmount[index] = tokens.managerAmount[index].add(b);\\n                emit TypeAmountIn(pool,0,msg.sender,t,b);\\n            }\\n            if(types == 1) {\\n                tokens.issueAmount[index] = tokens.issueAmount[index].add(b);\\n                emit TypeAmountIn(pool,1,msg.sender,t,b);\\n            }\\n            if(types == 2) {\\n                tokens.redeemAmount[index] = tokens.redeemAmount[index].add(b);\\n                emit TypeAmountIn(pool,2,msg.sender,t,b);\\n            }\\n            if(types == 3) {\\n                tokens.perfermanceAmount[index] = tokens.perfermanceAmount[index].add(b);\\n                emit TypeAmountIn(pool,3,msg.sender,t,b);\\n            }\\n        }\\n    }\\n\\n    function _transferHandle(\\n        address pool,\\n        address t,\\n        uint balance\\n    ) internal {\\n        address[] memory managerAddressList = IDesynOwnable(pool).getOwners();\\n        uint[] memory ownerPercentage = IDesynOwnable(pool).getOwnerPercentage();\\n        uint allOwnerPercentage = IDesynOwnable(pool).allOwnerPercentage();\\n\\n        for (uint k = 0; k < managerAddressList.length; k++) {\\n            address reciver = address(managerAddressList[k]).isContract()? IDSProxy(managerAddressList[k]).owner(): managerAddressList[k];\\n            uint b = balance.mul(ownerPercentage[k]).div(allOwnerPercentage);\\n            IERC20(t).safeTransfer(reciver, b);\\n            emit ManagerClaim(msg.sender, reciver,t,b,block.timestamp);\\n        }\\n        emit ManagersClaim(msg.sender,pool,t,balance,block.timestamp);\\n    }\\n\\n    function _levelJudge(uint amount, SmartPoolManager.feeParams memory _feeParams) internal pure returns (uint) {\\n        if (_feeParams.firstLevel.level <= amount && amount < _feeParams.secondLevel.level) return _feeParams.firstLevel.ratio;\\n        if (_feeParams.secondLevel.level <= amount && amount < _feeParams.thirdLevel.level) return _feeParams.secondLevel.ratio;\\n        if (_feeParams.thirdLevel.level <= amount && amount < _feeParams.fourLevel.level) return _feeParams.thirdLevel.ratio;\\n        if (_feeParams.fourLevel.level <= amount) return _feeParams.fourLevel.ratio;\\n        return 0;\\n    }\\n\\n    function _isClosePool(address pool) internal view returns (bool) {\\n        return ICRPPool(pool).etype() == ICRPPool.Etypes.CLOSED;\\n    }\\n\\n    function _computeKolTotalReward(\\n        address pool,\\n        address kol,\\n        uint types,\\n        uint tokenIndex\\n    ) internal view returns (uint) {\\n        uint kolTotalAmount = kolTotalAmountList[pool][kol].length > 0 ? kolTotalAmountList[pool][kol][0] : 0;\\n        SmartPoolManager.KolPoolParams memory params = poolsStatus[pool].kolPoolConfig;\\n        uint totalFee;\\n\\n        PoolTokens memory tokens = poolsTokens[pool];\\n\\n        if(kolTotalAmount == 0) return 0;\\n\\n        uint allKolTotalAmount = poolInviteTotal[pool];\\n        \\n        if (types == 0 && tokens.managerAmount.length > 0) \\n            totalFee = tokens.managerAmount[tokenIndex].mul(_levelJudge(kolTotalAmount, params.managerFee)).mul(kolTotalAmount).div(allKolTotalAmount).div(RATIO_TOTAL);\\n        \\n        if (types == 1 && tokens.issueAmount.length > 0) \\n            totalFee = tokens.issueAmount[tokenIndex].mul(_levelJudge(kolTotalAmount, params.issueFee)).mul(kolTotalAmount).div(allKolTotalAmount).div(RATIO_TOTAL);\\n        \\n        if (types == 2 && tokens.redeemAmount.length > 0) \\n            totalFee = tokens.redeemAmount[tokenIndex].mul(_levelJudge(kolTotalAmount, params.redeemFee)).mul(kolTotalAmount).div(allKolTotalAmount).div(RATIO_TOTAL);\\n        \\n        if (types == 3 && tokens.perfermanceAmount.length > 0) \\n            totalFee = tokens.perfermanceAmount[tokenIndex].mul(_levelJudge(kolTotalAmount, params.perfermanceFee)).mul(kolTotalAmount).div(allKolTotalAmount).div(RATIO_TOTAL);\\n        \\n        return totalFee;\\n    }\\n\\n    modifier onlyCrpFactory() {\\n        require(address(crpFactory) == msg.sender, \\\"ERR_NOT_CRP_FACTORY\\\");\\n        _;\\n    }\\n\\n    modifier onlyVault() {\\n        require(vaultAddress == msg.sender, \\\"ERR_NOT_CONTROLLER\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xe03e0410831ca5e1203d9b68fc4ffe9585ccc6402a329bbf74640d16c26a70a2\"},\"contracts/interfaces/IBFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\nimport \\\"../libraries/SmartPoolManager.sol\\\";\\n\\ninterface IBPool {\\n    function rebind(\\n        address token,\\n        uint balance,\\n        uint denorm\\n    ) external;\\n\\n    function rebindSmart(\\n        address tokenA,\\n        address tokenB,\\n        uint deltaWeight,\\n        uint deltaBalance,\\n        bool isSoldout,\\n        uint minAmountOut\\n    ) external;\\n\\n    function execute(\\n        address _target,\\n        uint _value,\\n        bytes calldata _data\\n    ) external returns (bytes memory _returnValue);\\n\\n    function bind(\\n        address token,\\n        uint balance,\\n        uint denorm\\n    ) external;\\n\\n    function unbind(address token) external;\\n\\n    function unbindPure(address token) external;\\n\\n    function isBound(address token) external view returns (bool);\\n\\n    function getBalance(address token) external view returns (uint);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function getSwapFee() external view returns (uint);\\n\\n    function isPublicSwap() external view returns (bool);\\n\\n    function getDenormalizedWeight(address token) external view returns (uint);\\n\\n    function getTotalDenormalizedWeight() external view returns (uint);\\n\\n    function EXIT_FEE() external view returns (uint);\\n\\n    function getCurrentTokens() external view returns (address[] memory tokens);\\n\\n    function setController(address owner) external;\\n}\\n\\ninterface IBFactory {\\n    function newLiquidityPool() external returns (IBPool);\\n\\n    function setBLabs(address b) external;\\n\\n    function collect(IBPool pool) external;\\n\\n    function isBPool(address b) external view returns (bool);\\n\\n    function getBLabs() external view returns (address);\\n\\n    function getSwapRouter() external view returns (address);\\n\\n    function getVault() external view returns (address);\\n\\n    function getUserVault() external view returns (address);\\n\\n    function getVaultAddress() external view returns (address);\\n\\n    function getOracleAddress() external view returns (address);\\n\\n    function getManagerOwner() external view returns (address);\\n\\n    function isTokenWhitelistedForVerify(uint sort, address token) external view returns (bool);\\n\\n    function isTokenWhitelistedForVerify(address token) external view returns (bool);\\n\\n    function getModuleStatus(address etf, address module) external view returns (bool);\\n\\n    function isPaused() external view returns (bool);\\n}\\n\\ninterface IVault {\\n    function depositManagerToken(address[] calldata poolTokens, uint[] calldata tokensAmount) external;\\n\\n    function depositIssueRedeemPToken(\\n        address[] calldata poolTokens,\\n        uint[] calldata tokensAmount,\\n        uint[] calldata tokensAmountP,\\n        bool isPerfermance\\n    ) external;\\n\\n    function managerClaim(address pool) external;\\n\\n    function getManagerClaimBool(address pool) external view returns (bool);\\n}\\n\\ninterface IUserVault {\\n    function recordTokenInfo(\\n        address kol,\\n        address user,\\n        address[] calldata poolTokens,\\n        uint[] calldata tokensAmount\\n    ) external;\\n}\\n\\ninterface Oracles {\\n    function getPrice(address tokenAddress) external returns (uint price);\\n\\n    function getAllPrice(address[] calldata poolTokens, uint[] calldata tokensAmount) external returns (uint);\\n}\",\"keccak256\":\"0xc2cc32bdf691ceddab7a647a98bd481adcf9ae8393d8663a916bf032ef0dbbc6\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IConfigurableRightsPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Interface declarations\\n\\n// Introduce to avoid circularity (otherwise, the CRP and SmartPoolManager include each other)\\n// Removing circularity allows flattener tools to work, which enables Etherscan verification\\ninterface IConfigurableRightsPool {\\n    function mintPoolShareFromLib(uint amount) external;\\n\\n    function pushPoolShareFromLib(address to, uint amount) external;\\n\\n    function pullPoolShareFromLib(address from, uint amount) external;\\n\\n    function burnPoolShareFromLib(uint amount) external;\\n\\n    function balanceOf(address account) external view returns (uint);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function getController() external view returns (address);\\n\\n    function vaultAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0x1326889b57f63cc031e7c9e383b0fd3b172a9b86eb623cf0faba32c0768c4ec4\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IDSProxy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\ninterface IDSProxy {\\n    function owner() external view returns(address);\\n}\",\"keccak256\":\"0xe330359819e40d60365ba92005c9b8b1eccdf18ae583352a0cff0a2a4cf7ff14\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Interface declarations\\n\\n/* solhint-disable func-order */\\n\\ninterface IERC20 {\\n    // Emitted when the allowance of a spender for an owner is set by a call to approve.\\n    // Value is the new allowance\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n\\n    // Emitted when value tokens are moved from one account (from) to another (to).\\n    // Note that value may be zero\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    // Returns the amount of tokens in existence\\n    function totalSupply() external view returns (uint);\\n\\n    // Returns the amount of tokens owned by account\\n    function balanceOf(address account) external view returns (uint);\\n\\n    // Returns the decimals of tokens\\n    function decimals() external view returns (uint8);\\n\\n    function symbol() external view returns (string memory);\\n\\n    // Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner\\n    // through transferFrom. This is zero by default\\n    // This value changes when approve or transferFrom are called\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    // Sets amount as the allowance of spender over the caller\\u2019s tokens\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits an Approval event.\\n    function approve(address spender, uint amount) external returns (bool);\\n\\n    // Moves amount tokens from the caller\\u2019s account to recipient\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits a Transfer event.\\n    function transfer(address recipient, uint amount) external returns (bool);\\n\\n    // Moves amount tokens from sender to recipient using the allowance mechanism\\n    // Amount is then deducted from the caller\\u2019s allowance\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits a Transfer event\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xfe22b6d6029b400b9cce7f9b39c546f99cd6922b2fd926e480e2b4d476ab26f8\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            codehash := extcodehash(account)\\n        }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint weiValue,\\n        string memory errorMessage\\n    ) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2f31de87a6037a6a1ab4cefb32f22352df92b082dde0c182801bf421bacc303c\",\"license\":\"agpl-3.0\"},\"contracts/libraries/DesynConstants.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n/**\\n * @author Desyn Labs\\n * @title Put all the constants in one place\\n */\\n\\nlibrary DesynConstants {\\n    // State variables (must be constant in a library)\\n\\n    // B \\\"ONE\\\" - all math is in the \\\"realm\\\" of 10 ** 18;\\n    // where numeric 1 = 10 ** 18\\n    uint public constant BONE = 10**18;\\n    uint public constant MIN_WEIGHT = BONE;\\n    uint public constant MAX_WEIGHT = BONE * 50;\\n    uint public constant MAX_TOTAL_WEIGHT = BONE * 50;\\n    uint public constant MIN_BALANCE = 0;\\n    uint public constant MAX_BALANCE = BONE * 10**12;\\n    uint public constant MIN_POOL_SUPPLY = BONE * 100;\\n    uint public constant MAX_POOL_SUPPLY = BONE * 10**9;\\n    uint public constant MIN_FEE = BONE / 10**6;\\n    uint public constant MAX_FEE = BONE / 10;\\n    //Fee Set\\n    uint public constant MANAGER_MIN_FEE = 0;\\n    uint public constant MANAGER_MAX_FEE = BONE / 10;\\n    uint public constant ISSUE_MIN_FEE = BONE / 1000;\\n    uint public constant ISSUE_MAX_FEE = BONE / 10;\\n    uint public constant REDEEM_MIN_FEE = 0;\\n    uint public constant REDEEM_MAX_FEE = BONE / 10;\\n    uint public constant PERFERMANCE_MIN_FEE = 0;\\n    uint public constant PERFERMANCE_MAX_FEE = BONE / 2;\\n    // EXIT_FEE must always be zero, or ConfigurableRightsPool._pushUnderlying will fail\\n    uint public constant EXIT_FEE = 0;\\n    uint public constant MAX_IN_RATIO = BONE / 2;\\n    uint public constant MAX_OUT_RATIO = (BONE / 3) + 1 wei;\\n    // Must match BConst.MIN_BOUND_TOKENS and BConst.MAX_BOUND_TOKENS\\n    uint public constant MIN_ASSET_LIMIT = 1;\\n    uint public constant MAX_ASSET_LIMIT = 16;\\n    uint public constant MAX_UINT = uint(-1);\\n    uint public constant MAX_COLLECT_PERIOD = 60 days;\\n}\\n\",\"keccak256\":\"0xbc396253a5541cd3cc080ca207dfdd2d2bdf963de26e005db36bd752524c1d66\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/DesynSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Imports\\n\\nimport \\\"./DesynConstants.sol\\\";\\n\\n/**\\n * @author Desyn Labs\\n * @title SafeMath - wrap Solidity operators to prevent underflow/overflow\\n * @dev badd and bsub are basically identical to OpenZeppelin SafeMath; mul/div have extra checks\\n */\\nlibrary DesynSafeMath {\\n    /**\\n     * @notice Safe addition\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev if we are adding b to a, the resulting sum must be greater than a\\n     * @return - sum of operands; throws if overflow\\n     */\\n    function badd(uint a, uint b) internal pure returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, \\\"ERR_ADD_OVERFLOW\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned subtraction\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Do a signed subtraction, and check that it produces a positive value\\n     *      (i.e., a - b is valid if b <= a)\\n     * @return - a - b; throws if underflow\\n     */\\n    function bsub(uint a, uint b) internal pure returns (uint) {\\n        (uint c, bool negativeResult) = bsubSign(a, b);\\n        require(!negativeResult, \\\"ERR_SUB_UNDERFLOW\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Safe signed subtraction\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Do a signed subtraction\\n     * @return - difference between a and b, and a flag indicating a negative result\\n     *           (i.e., a - b if a is greater than or equal to b; otherwise b - a)\\n     */\\n    function bsubSign(uint a, uint b) internal pure returns (uint, bool) {\\n        if (b <= a) {\\n            return (a - b, false);\\n        } else {\\n            return (b - a, true);\\n        }\\n    }\\n\\n    /**\\n     * @notice Safe multiplication\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Multiply safely (and efficiently), rounding down\\n     * @return - product of operands; throws if overflow or rounding error\\n     */\\n    function bmul(uint a, uint b) internal pure returns (uint) {\\n        // Gas optimization (see github.com/OpenZeppelin/openzeppelin-contracts/pull/522)\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // Standard overflow check: a/a*b=b\\n        uint c0 = a * b;\\n        require(c0 / a == b, \\\"ERR_MUL_OVERFLOW\\\");\\n\\n        // Round to 0 if x*y < BONE/2?\\n        uint c1 = c0 + (DesynConstants.BONE / 2);\\n        require(c1 >= c0, \\\"ERR_MUL_OVERFLOW\\\");\\n        uint c2 = c1 / DesynConstants.BONE;\\n        return c2;\\n    }\\n\\n    /**\\n     * @notice Safe division\\n     * @param dividend - first operand\\n     * @param divisor - second operand\\n     * @dev Divide safely (and efficiently), rounding down\\n     * @return - quotient; throws if overflow or rounding error\\n     */\\n    function bdiv(uint dividend, uint divisor) internal pure returns (uint) {\\n        require(divisor != 0, \\\"ERR_DIV_ZERO\\\");\\n\\n        // Gas optimization\\n        if (dividend == 0) {\\n            return 0;\\n        }\\n\\n        uint c0 = dividend * DesynConstants.BONE;\\n        require(c0 / dividend == DesynConstants.BONE, \\\"ERR_DIV_INTERNAL\\\"); // bmul overflow\\n\\n        uint c1 = c0 + (divisor / 2);\\n        require(c1 >= c0, \\\"ERR_DIV_INTERNAL\\\"); //  badd require\\n\\n        uint c2 = c1 / divisor;\\n        return c2;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer modulo\\n     * @dev Returns the remainder of dividing two unsigned integers.\\n     *      Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * @param dividend - first operand\\n     * @param divisor - second operand -- cannot be zero\\n     * @return - quotient; throws if overflow or rounding error\\n     */\\n    function bmod(uint dividend, uint divisor) internal pure returns (uint) {\\n        require(divisor != 0, \\\"ERR_MODULO_BY_ZERO\\\");\\n\\n        return dividend % divisor;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer max\\n     * @dev Returns the greater of the two input values\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the maximum of a and b\\n     */\\n    function bmax(uint a, uint b) internal pure returns (uint) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer min\\n     * @dev returns b, if b < a; otherwise returns a\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the lesser of the two input values\\n     */\\n    function bmin(uint a, uint b) internal pure returns (uint) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer average\\n     * @dev Guard against (a+b) overflow by dividing each operand separately\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the average of the two values\\n     */\\n    function baverage(uint a, uint b) internal pure returns (uint) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\\n    }\\n\\n    /**\\n     * @notice Babylonian square root implementation\\n     * @dev (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n     * @param y - operand\\n     * @return z - the square root result\\n     */\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9baf30b98a5f3a8c13ac9c4d5d4b176eabfd936aba8f5172c95b7c568fba68f3\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/EnumerableSet.sol\":{\"content\":\"pragma solidity 0.6.12;\\n\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint toDeleteIndex = valueIndex - 1;\\n            uint lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function addValue(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint index) internal view returns (address) {\\n        return address(uint160(uint(_at(set._inner, index))));\\n    }\\n    \\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\",\"keccak256\":\"0x9e2694c6682ee2dc9921f8cd6b1c7f2e6ce3765654fade5cfc39f4d840afa2c9\"},\"contracts/libraries/SafeApprove.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Imports\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n// Libraries\\n\\n/**\\n * @author PieDAO (ported to Desyn Labs)\\n * @title SafeApprove - set approval for tokens that require 0 prior approval\\n * @dev Perhaps to address the known ERC20 race condition issue\\n *      See https://github.com/crytic/not-so-smart-contracts/tree/master/race_condition\\n *      Some tokens - notably KNC - only allow approvals to be increased from 0\\n */\\nlibrary SafeApprove {\\n    /**\\n     * @notice handle approvals of tokens that require approving from a base of 0\\n     * @param token - the token we're approving\\n     * @param spender - entity the owner (sender) is approving to spend his tokens\\n     * @param amount - number of tokens being approved\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint amount\\n    ) internal returns (bool) {\\n        uint currentAllowance = token.allowance(address(this), spender);\\n\\n        // Do nothing if allowance is already set to this value\\n        if (currentAllowance == amount) {\\n            return true;\\n        }\\n\\n        // If approval is not zero reset it to zero first\\n        if (currentAllowance != 0) {\\n            token.approve(spender, 0);\\n        }\\n\\n        // do the actual approval\\n        return token.approve(spender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xa51ebf770f2676085b89b1636688cc086289cfe27f614dfd0c15142535c26752\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\nimport {SafeMath} from \\\"./SafeMath.sol\\\";\\nimport {Address} from \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint value\\n    ) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint value\\n    ) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint value\\n    ) internal {\\n        require((value == 0) || (token.allowance(address(this), spender) == 0), \\\"SafeERC20: approve from non-zero to non-zero allowance\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdb66e9e24513d153d62e792a46c723eeff7ad7c93215a56aa3a27f1143d95ae9\",\"license\":\"MIT\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint a, uint b) internal pure returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint a, uint b) internal pure returns (uint) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint a,\\n        uint b,\\n        string memory errorMessage\\n    ) internal pure returns (uint) {\\n        require(b <= a, errorMessage);\\n        uint c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint a, uint b) internal pure returns (uint) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint a, uint b) internal pure returns (uint) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint a,\\n        uint b,\\n        string memory errorMessage\\n    ) internal pure returns (uint) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint a, uint b) internal pure returns (uint) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint a,\\n        uint b,\\n        string memory errorMessage\\n    ) internal pure returns (uint) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x7ce3fd7d17047f684821e1a20b4f5989630f6755a377b12c087dfde359f710d6\",\"license\":\"agpl-3.0\"},\"contracts/libraries/SmartPoolManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Needed to pass in structs\\npragma experimental ABIEncoderV2;\\n\\n// Imports\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IConfigurableRightsPool.sol\\\";\\nimport \\\"../interfaces/IBFactory.sol\\\"; // unused\\nimport \\\"./DesynSafeMath.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./SafeApprove.sol\\\";\\n\\n/**\\n * @author Desyn Labs\\n * @title Factor out the weight updates\\n */\\nlibrary SmartPoolManager {\\n    using SafeApprove for IERC20;\\n    using DesynSafeMath for uint;\\n    using SafeMath for uint;\\n\\n    //kol pool params\\n    struct levelParams {\\n        uint level;\\n        uint ratio;\\n    }\\n\\n    struct feeParams {\\n        levelParams firstLevel;\\n        levelParams secondLevel;\\n        levelParams thirdLevel;\\n        levelParams fourLevel;\\n    }\\n    struct KolPoolParams {\\n        feeParams managerFee;\\n        feeParams issueFee;\\n        feeParams redeemFee;\\n        feeParams perfermanceFee;\\n    }\\n\\n    // Type declarations\\n    enum Etypes {\\n        OPENED,\\n        CLOSED\\n    }\\n\\n    enum Period {\\n        HALF,\\n        ONE,\\n        TWO\\n    }\\n\\n    // updateWeight and pokeWeights are unavoidably long\\n    /* solhint-disable function-max-lines */\\n    struct Status {\\n        uint collectPeriod;\\n        uint collectEndTime;\\n        uint closurePeriod;\\n        uint closureEndTime;\\n        uint upperCap;\\n        uint floorCap;\\n        uint managerFee;\\n        uint redeemFee;\\n        uint issueFee;\\n        uint perfermanceFee;\\n        uint startClaimFeeTime;\\n    }\\n\\n    struct PoolParams {\\n        // Desyn Pool Token (representing shares of the pool)\\n        string poolTokenSymbol;\\n        string poolTokenName;\\n        // Tokens inside the Pool\\n        address[] constituentTokens;\\n        uint[] tokenBalances;\\n        uint[] tokenWeights;\\n        uint swapFee;\\n        uint managerFee;\\n        uint redeemFee;\\n        uint issueFee;\\n        uint perfermanceFee;\\n        Etypes etype;\\n    }\\n\\n    struct PoolTokenRange {\\n        uint bspFloor;\\n        uint bspCap;\\n    }\\n\\n    struct Fund {\\n        uint etfAmount;\\n        uint fundAmount;\\n    }\\n\\n    function initRequire(\\n        uint swapFee,\\n        uint managerFee,\\n        uint issueFee,\\n        uint redeemFee,\\n        uint perfermanceFee,\\n        uint tokenBalancesLength,\\n        uint tokenWeightsLength,\\n        uint constituentTokensLength,\\n        bool initBool\\n    ) external pure {\\n        // We don't have a pool yet; check now or it will fail later (in order of likelihood to fail)\\n        // (and be unrecoverable if they don't have permission set to change it)\\n        // Most likely to fail, so check first\\n        require(!initBool, \\\"Init fail\\\");\\n        require(swapFee >= DesynConstants.MIN_FEE, \\\"ERR_INVALID_SWAP_FEE\\\");\\n        require(swapFee <= DesynConstants.MAX_FEE, \\\"ERR_INVALID_SWAP_FEE\\\");\\n        require(managerFee >= DesynConstants.MANAGER_MIN_FEE, \\\"ERR_INVALID_MANAGER_FEE\\\");\\n        require(managerFee <= DesynConstants.MANAGER_MAX_FEE, \\\"ERR_INVALID_MANAGER_FEE\\\");\\n        require(issueFee >= DesynConstants.ISSUE_MIN_FEE, \\\"ERR_INVALID_ISSUE_MIN_FEE\\\");\\n        require(issueFee <= DesynConstants.ISSUE_MAX_FEE, \\\"ERR_INVALID_ISSUE_MAX_FEE\\\");\\n        require(redeemFee >= DesynConstants.REDEEM_MIN_FEE, \\\"ERR_INVALID_REDEEM_MIN_FEE\\\");\\n        require(redeemFee <= DesynConstants.REDEEM_MAX_FEE, \\\"ERR_INVALID_REDEEM_MAX_FEE\\\");\\n        require(perfermanceFee >= DesynConstants.PERFERMANCE_MIN_FEE, \\\"ERR_INVALID_PERFERMANCE_MIN_FEE\\\");\\n        require(perfermanceFee <= DesynConstants.PERFERMANCE_MAX_FEE, \\\"ERR_INVALID_PERFERMANCE_MAX_FEE\\\");\\n\\n        // Arrays must be parallel\\n        require(tokenBalancesLength == constituentTokensLength, \\\"ERR_START_BALANCES_MISMATCH\\\");\\n        require(tokenWeightsLength == constituentTokensLength, \\\"ERR_START_WEIGHTS_MISMATCH\\\");\\n        // Cannot have too many or too few - technically redundant, since BPool.bind() would fail later\\n        // But if we don't check now, we could have a useless contract with no way to create a pool\\n\\n        require(constituentTokensLength >= DesynConstants.MIN_ASSET_LIMIT, \\\"ERR_TOO_FEW_TOKENS\\\");\\n        require(constituentTokensLength <= DesynConstants.MAX_ASSET_LIMIT, \\\"ERR_TOO_MANY_TOKENS\\\");\\n        // There are further possible checks (e.g., if they use the same token twice), but\\n        // we can let bind() catch things like that (i.e., not things that might reasonably work)\\n    }\\n\\n    /**\\n     * @notice Update the weight of an existing token\\n     * @dev Refactored to library to make CRPFactory deployable\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param tokenA - token to sell\\n     * @param tokenB - token to buy\\n     */\\n    function rebalance(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address tokenA,\\n        address tokenB,\\n        uint deltaWeight,\\n        uint minAmountOut\\n    ) external {\\n        uint currentWeightA = bPool.getDenormalizedWeight(tokenA);\\n        uint currentBalanceA = bPool.getBalance(tokenA);\\n        // uint currentWeightB = bPool.getDenormalizedWeight(tokenB);\\n\\n        require(deltaWeight <= currentWeightA, \\\"ERR_DELTA_WEIGHT_TOO_BIG\\\");\\n\\n        // deltaBalance = currentBalance * (deltaWeight / currentWeight)\\n        uint deltaBalanceA = DesynSafeMath.bmul(currentBalanceA, DesynSafeMath.bdiv(deltaWeight, currentWeightA));\\n\\n        // uint currentBalanceB = bPool.getBalance(tokenB);\\n\\n        // uint deltaWeight = DesynSafeMath.bsub(newWeight, currentWeightA);\\n\\n        // uint newWeightB = DesynSafeMath.bsub(currentWeightB, deltaWeight);\\n        // require(newWeightB >= 0, \\\"ERR_INCORRECT_WEIGHT_B\\\");\\n        bool soldout;\\n        if (deltaWeight == currentWeightA) {\\n            // reduct token A\\n            bPool.unbindPure(tokenA);\\n            soldout = true;\\n        }\\n\\n        // Now with the tokens this contract can bind them to the pool it controls\\n        bPool.rebindSmart(tokenA, tokenB, deltaWeight, deltaBalanceA, soldout, minAmountOut);\\n    }\\n\\n    /**\\n     * @notice Non ERC20-conforming tokens are problematic; don't allow them in pools\\n     * @dev Will revert if invalid\\n     * @param token - The prospective token to verify\\n     */\\n    function verifyTokenCompliance(address token) external {\\n        verifyTokenComplianceInternal(token);\\n    }\\n\\n    /**\\n     * @notice Non ERC20-conforming tokens are problematic; don't allow them in pools\\n     * @dev Will revert if invalid - overloaded to save space in the main contract\\n     * @param tokens - The prospective tokens to verify\\n     */\\n    function verifyTokenCompliance(address[] calldata tokens) external {\\n        for (uint i = 0; i < tokens.length; i++) {\\n            verifyTokenComplianceInternal(tokens[i]);\\n        }\\n    }\\n\\n    function createPoolInternalHandle(IBPool bPool, uint initialSupply) external view {\\n        require(initialSupply >= DesynConstants.MIN_POOL_SUPPLY, \\\"ERR_INIT_SUPPLY_MIN\\\");\\n        require(initialSupply <= DesynConstants.MAX_POOL_SUPPLY, \\\"ERR_INIT_SUPPLY_MAX\\\");\\n        require(bPool.EXIT_FEE() == 0, \\\"ERR_NONZERO_EXIT_FEE\\\");\\n        // EXIT_FEE must always be zero, or ConfigurableRightsPool._pushUnderlying will fail\\n        require(DesynConstants.EXIT_FEE == 0, \\\"ERR_NONZERO_EXIT_FEE\\\");\\n    }\\n\\n    function createPoolHandle(\\n        uint collectPeriod,\\n        uint upperCap,\\n        uint initialSupply\\n    ) external pure {\\n        require(collectPeriod <= DesynConstants.MAX_COLLECT_PERIOD, \\\"ERR_EXCEEDS_FUND_RAISING_PERIOD\\\");\\n        require(upperCap >= initialSupply, \\\"ERR_CAP_BIGGER_THAN_INITSUPPLY\\\");\\n    }\\n\\n    function exitPoolHandle(\\n        uint _endEtfAmount,\\n        uint _endFundAmount,\\n        uint _beginEtfAmount,\\n        uint _beginFundAmount,\\n        uint poolAmountIn,\\n        uint totalEnd\\n    )\\n        external\\n        pure\\n        returns (\\n            uint endEtfAmount,\\n            uint endFundAmount,\\n            uint profitRate\\n        )\\n    {\\n        endEtfAmount = DesynSafeMath.badd(_endEtfAmount, poolAmountIn);\\n        endFundAmount = DesynSafeMath.badd(_endFundAmount, totalEnd);\\n        uint amount1 = DesynSafeMath.bdiv(endFundAmount, endEtfAmount);\\n        uint amount2 = DesynSafeMath.bdiv(_beginFundAmount, _beginEtfAmount);\\n        if (amount1 > amount2) {\\n            profitRate = DesynSafeMath.bdiv(\\n                DesynSafeMath.bmul(DesynSafeMath.bsub(DesynSafeMath.bdiv(endFundAmount, endEtfAmount), DesynSafeMath.bdiv(_beginFundAmount, _beginEtfAmount)), poolAmountIn),\\n                totalEnd\\n            );\\n        }\\n    }\\n\\n    function exitPoolHandleA(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address poolToken,\\n        uint _tokenAmountOut,\\n        uint redeemFee,\\n        uint profitRate,\\n        uint perfermanceFee\\n    )\\n        external\\n        returns (\\n            uint redeemAndPerformanceFeeReceived,\\n            uint finalAmountOut,\\n            uint redeemFeeReceived\\n        )\\n    {\\n        // redeem fee\\n        redeemFeeReceived = DesynSafeMath.bmul(_tokenAmountOut, redeemFee);\\n\\n        // performance fee\\n        uint performanceFeeReceived = DesynSafeMath.bmul(DesynSafeMath.bmul(_tokenAmountOut, profitRate), perfermanceFee);\\n        \\n        // redeem fee and performance fee\\n        redeemAndPerformanceFeeReceived = DesynSafeMath.badd(performanceFeeReceived, redeemFeeReceived);\\n\\n        // final amount the user got\\n        finalAmountOut = DesynSafeMath.bsub(_tokenAmountOut, redeemAndPerformanceFeeReceived);\\n\\n        _pushUnderlying(bPool, poolToken, msg.sender, finalAmountOut);\\n\\n        if (redeemFee != 0 || (profitRate > 0 && perfermanceFee != 0)) {\\n            _pushUnderlying(bPool, poolToken, address(this), redeemAndPerformanceFeeReceived);\\n            IERC20(poolToken).safeApprove(self.vaultAddress(), redeemAndPerformanceFeeReceived);\\n        }\\n    }\\n\\n    function exitPoolHandleB(\\n        IConfigurableRightsPool self,\\n        bool bools,\\n        bool isCompletedCollect,\\n        uint closureEndTime,\\n        uint collectEndTime,\\n        uint _etfAmount,\\n        uint _fundAmount,\\n        uint poolAmountIn\\n    ) external view returns (uint etfAmount, uint fundAmount, uint actualPoolAmountIn) {\\n        actualPoolAmountIn = poolAmountIn;\\n        if (bools) {\\n            bool isCloseEtfCollectEndWithFailure = isCompletedCollect == false && block.timestamp >= collectEndTime;\\n            bool isCloseEtfClosureEnd = block.timestamp >= closureEndTime;\\n            require(isCloseEtfCollectEndWithFailure || isCloseEtfClosureEnd, \\\"ERR_CLOSURE_TIME_NOT_ARRIVED!\\\");\\n\\n            actualPoolAmountIn = self.balanceOf(msg.sender);\\n        }\\n        fundAmount = _fundAmount;\\n        etfAmount = _etfAmount;\\n    }\\n\\n    function joinPoolHandle(\\n        bool canWhitelistLPs,\\n        bool isList,\\n        bool bools,\\n        uint collectEndTime\\n    ) external view {\\n        require(!canWhitelistLPs || isList, \\\"ERR_NOT_ON_WHITELIST\\\");\\n\\n        if (bools) {\\n            require(block.timestamp <= collectEndTime, \\\"ERR_COLLECT_PERIOD_FINISHED!\\\");\\n        }\\n    }\\n\\n    function rebalanceHandle(\\n        IBPool bPool,\\n        bool isCompletedCollect,\\n        bool bools,\\n        uint collectEndTime,\\n        uint closureEndTime,\\n        bool canChangeWeights,\\n        address tokenA,\\n        address tokenB\\n    ) external {\\n        require(bPool.isBound(tokenA), \\\"ERR_TOKEN_NOT_BOUND\\\");\\n        if (bools) {\\n            require(isCompletedCollect, \\\"ERROR_COLLECTION_FAILED\\\");\\n            require(block.timestamp > collectEndTime && block.timestamp < closureEndTime, \\\"ERR_NOT_REBALANCE_PERIOD\\\");\\n        }\\n\\n        if (!bPool.isBound(tokenB)) {\\n            bool returnValue = IERC20(tokenB).safeApprove(address(bPool), DesynConstants.MAX_UINT);\\n            require(returnValue, \\\"ERR_ERC20_FALSE\\\");\\n        }\\n\\n        require(canChangeWeights, \\\"ERR_NOT_CONFIGURABLE_WEIGHTS\\\");\\n        require(tokenA != tokenB, \\\"ERR_TOKENS_SAME\\\");\\n    }\\n\\n    /**\\n     * @notice Join a pool\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param poolAmountOut - number of pool tokens to receive\\n     * @param maxAmountsIn - Max amount of asset tokens to spend\\n     * @return actualAmountsIn - calculated values of the tokens to pull in\\n     */\\n    function joinPool(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        uint poolAmountOut,\\n        uint[] calldata maxAmountsIn,\\n        uint issueFee\\n    ) external view returns (uint[] memory actualAmountsIn) {\\n        address[] memory tokens = bPool.getCurrentTokens();\\n\\n        require(maxAmountsIn.length == tokens.length, \\\"ERR_AMOUNTS_MISMATCH\\\");\\n\\n        uint poolTotal = self.totalSupply();\\n        // Subtract  1 to ensure any rounding errors favor the pool\\n        uint ratio = DesynSafeMath.bdiv(poolAmountOut, DesynSafeMath.bsub(poolTotal, 1));\\n\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        // We know the length of the array; initialize it, and fill it below\\n        // Cannot do \\\"push\\\" in memory\\n        actualAmountsIn = new uint[](tokens.length);\\n\\n        // This loop contains external calls\\n        // External calls are to math libraries or the underlying pool, so low risk\\n        uint issueFeeRate = issueFee.bmul(1000);\\n        for (uint i = 0; i < tokens.length; i++) {\\n            address t = tokens[i];\\n            uint bal = bPool.getBalance(t);\\n            // Add 1 to ensure any rounding errors favor the pool\\n            uint base = bal.badd(1).bmul(poolAmountOut * uint(1000));\\n            uint tokenAmountIn = base.bdiv(poolTotal.bsub(1) * (uint(1000).bsub(issueFeeRate)));\\n\\n            require(tokenAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountIn <= maxAmountsIn[i], \\\"ERR_LIMIT_IN\\\");\\n\\n            actualAmountsIn[i] = tokenAmountIn;\\n        }\\n    }\\n\\n    /**\\n     * @notice Exit a pool - redeem pool tokens for underlying assets\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param poolAmountIn - amount of pool tokens to redeem\\n     * @param minAmountsOut - minimum amount of asset tokens to receive\\n     * @return actualAmountsOut - calculated amounts of each token to pull\\n     */\\n    function exitPool(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        uint poolAmountIn,\\n        uint[] calldata minAmountsOut\\n    ) external view returns (uint[] memory actualAmountsOut) {\\n        address[] memory tokens = bPool.getCurrentTokens();\\n\\n        require(minAmountsOut.length == tokens.length, \\\"ERR_AMOUNTS_MISMATCH\\\");\\n\\n        uint poolTotal = self.totalSupply();\\n\\n        uint ratio = DesynSafeMath.bdiv(poolAmountIn, DesynSafeMath.badd(poolTotal, 1));\\n\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        actualAmountsOut = new uint[](tokens.length);\\n\\n        // This loop contains external calls\\n        // External calls are to math libraries or the underlying pool, so low risk\\n        for (uint i = 0; i < tokens.length; i++) {\\n            address t = tokens[i];\\n            uint bal = bPool.getBalance(t);\\n            // Subtract 1 to ensure any rounding errors favor the pool\\n            uint tokenAmountOut = DesynSafeMath.bmul(ratio, DesynSafeMath.bsub(bal, 1));\\n\\n            require(tokenAmountOut != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountOut >= minAmountsOut[i], \\\"ERR_LIMIT_OUT\\\");\\n\\n            actualAmountsOut[i] = tokenAmountOut;\\n        }\\n    }\\n\\n    // Internal functions\\n    // Check for zero transfer, and make sure it returns true to returnValue\\n    function verifyTokenComplianceInternal(address token) internal {\\n        bool returnValue = IERC20(token).transfer(msg.sender, 0);\\n        require(returnValue, \\\"ERR_NONCONFORMING_TOKEN\\\");\\n    }\\n\\n    function handleTransferInTokens(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address poolToken,\\n        uint actualAmountIn,\\n        uint _actualIssueFee\\n    ) external returns (uint issueFeeReceived) {\\n        issueFeeReceived = DesynSafeMath.bmul(actualAmountIn, _actualIssueFee);\\n        uint amount = DesynSafeMath.bsub(actualAmountIn, issueFeeReceived);\\n\\n        _pullUnderlying(bPool, poolToken, msg.sender, amount);\\n\\n        if (_actualIssueFee != 0) {\\n            bool xfer = IERC20(poolToken).transferFrom(msg.sender, address(this), issueFeeReceived);\\n            require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n\\n            IERC20(poolToken).safeApprove(self.vaultAddress(), issueFeeReceived);\\n        }\\n    }\\n\\n    function handleClaim(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address[] calldata poolTokens,\\n        uint managerFee,\\n        uint timeElapsed,\\n        uint claimPeriod\\n    ) external returns (uint[] memory) {\\n        uint[] memory tokensAmount = new uint[](poolTokens.length);\\n        \\n        for (uint i = 0; i < poolTokens.length; i++) {\\n            address t = poolTokens[i];\\n            uint tokenBalance = bPool.getBalance(t);\\n            uint tokenAmountOut = tokenBalance.bmul(managerFee).mul(timeElapsed).div(claimPeriod).div(12);    \\n            _pushUnderlying(bPool, t, address(this), tokenAmountOut);\\n            IERC20(t).safeApprove(self.vaultAddress(), tokenAmountOut);\\n            tokensAmount[i] = tokenAmountOut;\\n        }\\n        \\n        return tokensAmount;\\n    }\\n\\n    function handleCollectionCompleted(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address[] calldata poolTokens,\\n        uint issueFee\\n    ) external {\\n        if (issueFee != 0) {\\n            uint[] memory tokensAmount = new uint[](poolTokens.length);\\n\\n            for (uint i = 0; i < poolTokens.length; i++) {\\n                address t = poolTokens[i];\\n                uint currentAmount = bPool.getBalance(t);\\n                uint currentAmountFee = DesynSafeMath.bmul(currentAmount, issueFee);\\n\\n                _pushUnderlying(bPool, t, address(this), currentAmountFee);\\n                tokensAmount[i] = currentAmountFee;\\n                IERC20(t).safeApprove(self.vaultAddress(), currentAmountFee);\\n            }\\n\\n            IVault(self.vaultAddress()).depositIssueRedeemPToken(poolTokens, tokensAmount, tokensAmount, false);\\n        }\\n    }\\n\\n    function WhitelistHandle(\\n        bool bool1,\\n        bool bool2,\\n        address adr\\n    ) external pure {\\n        require(bool1, \\\"ERR_CANNOT_WHITELIST_LPS\\\");\\n        require(bool2, \\\"ERR_LP_NOT_WHITELISTED\\\");\\n        require(adr != address(0), \\\"ERR_INVALID_ADDRESS\\\");\\n    }\\n\\n    function _pullUnderlying(\\n        IBPool bPool,\\n        address erc20,\\n        address from,\\n        uint amount\\n    ) internal {\\n        uint tokenBalance = bPool.getBalance(erc20);\\n        uint tokenWeight = bPool.getDenormalizedWeight(erc20);\\n\\n        bool xfer = IERC20(erc20).transferFrom(from, address(this), amount);\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n        bPool.rebind(erc20, DesynSafeMath.badd(tokenBalance, amount), tokenWeight);\\n    }\\n\\n    function _pushUnderlying(\\n        IBPool bPool,\\n        address erc20,\\n        address to,\\n        uint amount\\n    ) internal {\\n        uint tokenBalance = bPool.getBalance(erc20);\\n        uint tokenWeight = bPool.getDenormalizedWeight(erc20);\\n        bPool.rebind(erc20, DesynSafeMath.bsub(tokenBalance, amount), tokenWeight);\\n        bool xfer = IERC20(erc20).transfer(to, amount);\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x8d7b2d4ef8040cb4d0c97acc2f59cc8e65cda40609a52d43bef0759b27ccc784\",\"license\":\"GPL-3.0-or-later\"},\"contracts/openzeppelin/Ownable.sol\":{\"content\":\"pragma solidity >=0.6.0 <0.8.0;\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\",\"keccak256\":\"0x8e1e573ff7c1a90087b58f618ae87f33f04616ec7f959f73db4a3b73ff1ee939\"}},\"version\":1}",
  "bytecode": "0x60806040526064600d553480156200001657600080fd5b5060006200002362000073565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35062000077565b3390565b61597480620000876000396000f3fe60806040526004361061014b5760003560e01c80631437ac1314610157578063245cd1db1461018e5780634660c5a5146101ae5780635740845d146101d0578063598797ad146101fd57806368092bd91461021d5780636fd4ba9c1461023d578063715018a61461025d5780637234100a1461027257806378a619de146102925780638da5cb5b1461029a5780639155dae7146102bc5780639b1061b2146102dc5780639f1da16014610309578063a536ebf314610336578063aa93ae4914610356578063b8baccb814610376578063bb408f2d14610396578063bf91b4c9146103b6578063c0663cc9146103d6578063c1e57622146103f6578063c90361dd14610416578063c969229c14610443578063d6b485a514610463578063d7256c7014610483578063ebee7bcc146104a3578063edb12adf146104d0578063f2fde38b146104f057610152565b3661015257005b600080fd5b34801561016357600080fd5b50610177610172366004614de4565b610510565b60405161018592919061533e565b60405180910390f35b34801561019a57600080fd5b506101776101a9366004614e1c565b6106ef565b3480156101ba57600080fd5b506101ce6101c9366004614f52565b610d58565b005b3480156101dc57600080fd5b506101f06101eb366004614e1c565b610fa5565b60405161018591906157ef565b34801561020957600080fd5b506101f0610218366004614de4565b6113d6565b34801561022957600080fd5b506101ce610238366004614f25565b6115ba565b34801561024957600080fd5b50610177610258366004614de4565b611664565b34801561026957600080fd5b506101ce61180d565b34801561027e57600080fd5b5061017761028d366004614de4565b611896565b6101ce611a49565b3480156102a657600080fd5b506102af611ab7565b60405161018591906152c3565b3480156102c857600080fd5b506101ce6102d7366004614fe3565b611ac6565b3480156102e857600080fd5b506102fc6102f7366004614e1c565b611ba9565b604051610185919061536c565b34801561031557600080fd5b50610329610324366004614e1c565b611c8f565b60405161018591906157b6565b34801561034257600080fd5b50610177610351366004614de4565b611d7e565b34801561036257600080fd5b506101f0610371366004614de4565b612048565b34801561038257600080fd5b506101ce610391366004614ee5565b612268565b3480156103a257600080fd5b506102af6103b1366004614e1c565b6122c0565b3480156103c257600080fd5b506103296103d1366004614de4565b6122e6565b3480156103e257600080fd5b506101776103f1366004614e1c565b6123c8565b34801561040257600080fd5b506101ce610411366004614de4565b61257b565b34801561042257600080fd5b50610436610431366004614de4565b612616565b604051610185919061532b565b34801561044f57600080fd5b506101ce61045e366004614de4565b61263a565b34801561046f57600080fd5b506101ce61047e366004614de4565b612a1e565b34801561048f57600080fd5b506101ce61049e366004614e54565b612ab9565b3480156104af57600080fd5b506104c36104be366004614ee5565b612fda565b6040516101859190615881565b3480156104dc57600080fd5b506101ce6104eb366004614de4565b613015565b3480156104fc57600080fd5b506101ce61050b366004614de4565b613374565b6001600160a01b038116600090815260076020526040812060609182919061053782613434565b6001600160a01b038616600090815260046020908152604091829020805483518184028101840190945280845293945060609390918301828280156105a557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610587575b50505050509050606081516001600160401b03811180156105c557600080fd5b506040519080825280602002602001820160405280156105ef578160200160208202803683370190505b50905060005b838110156106e25760603063245cd1db8a610610898661343f565b6040518363ffffffff1660e01b815260040161062d9291906152d7565b60006040518083038186803b15801561064557600080fd5b505afa158015610659573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610681919081019061505a565b91505060005b81518110156106d85781818151811061069c57fe5b60200260200101518482815181106106b057fe5b6020026020010151018482815181106106c557fe5b6020908102919091010152600101610687565b50506001016105f5565b5090945092505050915091565b6001600160a01b0380831660009081526008602090815260408083209385168352929052908120546060918291610727576000610765565b6001600160a01b0380861660009081526008602090815260408083209388168352929052908120805490919061075957fe5b90600052602060002001545b9050600081116107905760405162461bcd60e51b815260040161078790615750565b60405180910390fd5b610798614a63565b506001600160a01b0385166000908152600560208181526040928390208351610140810185526001820154610100820190815260028301546101208301526080808301918252865180880188526003850154815260048501548187015260a0808501919091528751808901895296850154875260068501548787015260c080850197909752875180890189526007860154815260088601548188015260e0850152918352865180870188526009850154818301908152600a86015482850152815287518089018952600b8601548152600c860154818801528187015287518089018952600d8601548152600e860154818801528189015287518089018952600f86015481526010860154818801526060828101919091528487019190915287518088018952601186015481840190815260128701548286015281528851808a018a5260138701548152601487015481890152818801528851808a018a5260158701548152601687015481890152818a01528851808a018a52601787015481526018870154818901528183015284890152875196870188526019850154918701918252601a85015492870192909252855285518087018752601b8401548152601c840154818601528585015285518087018752601d8401548152601e84015481860152858701528551808701909652601f8301548652918301549285019290925282810193909352918201526109ab614aa2565b6001600160a01b0387166000908152600460209081526040918290208251815460c09381028201840190945260a081018481529093919284928491840182828015610a1f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610a01575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015610a7757602002820191906000526020600020905b815481526020019060010190808311610a63575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015610acf57602002820191906000526020600020905b815481526020019060010190808311610abb575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015610b2757602002820191906000526020600020905b815481526020019060010190808311610b13575b5050505050815260200160058201805480602002602001604051908101604052809291908181526020018280548015610b7f57602002820191906000526020600020905b815481526020019060010190808311610b6b575b505050505081525050905060608160000151516001600160401b0381118015610ba757600080fd5b50604051908082528060200260200182016040528015610bd1578160200160208202803683370190505b506001600160a01b03808a1660009081526006602090815260408083205460088352818420948d168452939091528120805493945091929091908290610c1357fe5b9060005260206000200154905060005b845151811015610d45576000610c72600d54610c6c610c468b8b60000151613452565b89602001518681518110610c5657fe5b60200260200101516134f990919063ffffffff16565b90613533565b90506000610c9d600d54610c6c610c8d8c8c60200151613452565b8a604001518781518110610c5657fe5b90506000610cc8600d54610c6c610cb88d8d60400151613452565b8b606001518881518110610c5657fe5b90506000610cf3600d54610c6c610ce38e8e60600151613452565b8c608001518981518110610c5657fe5b90506000610d0d82610d0785818989613572565b90613572565b9050610d1d88610c6c838a6134f9565b898781518110610d2957fe5b6020908102919091010152505060019093019250610c23915050565b50509151955093505050505b9250929050565b6001546001600160a01b03163314610d825760405162461bcd60e51b815260040161078790615499565b6001600160a01b03808316600090815260056020526040908190206001549151636e0cf42160e11b81529092919091169063dc19e84290610dc79086906004016152c3565b60206040518083038186803b158015610ddf57600080fd5b505afa158015610df3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1791906150ec565b610e335760405162461bcd60e51b8152600401610787906155db565b805462010000900460ff1615610e5b5760405162461bcd60e51b815260040161078790615683565b805462ff0000191662010000178155815180518051600184015560209081015160028401558082015180516003850155810151600484015560408083015180516005860155820151600685015560609283015180516007860155820151600885015581850151805180516009870155830151600a860155808301518051600b870155830151600c860155808201518051600d870155830151600e8601558301518051600f8601558201516010850155808501518051805160118701558301516012860155808301518051601387015583015160148601558082015180516015870155830151601686015583015180516017860155820151601885015593820151805180516019860155820151601a850155808201518051601b860155820151601c850155938401518051601d850155810151601e8401559201518051601f83015582015191015550565b610fad614aa2565b610fb5614aa2565b6001600160a01b0384166000908152600460209081526040918290208251815460c09381028201840190945260a08101848152909391928492849184018282801561102957602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161100b575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561108157602002820191906000526020600020905b81548152602001906001019080831161106d575b50505050508152602001600382018054806020026020016040519081016040528092919081815260200182805480156110d957602002820191906000526020600020905b8154815260200190600101908083116110c5575b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561113157602002820191906000526020600020905b81548152602001906001019080831161111d575b505050505081526020016005820180548060200260200160405190810160405280929190818152602001828054801561118957602002820191906000526020600020905b815481526020019060010190808311611175575b5050509190925250508151845250805151909150806001600160401b03811180156111b357600080fd5b506040519080825280602002602001820160405280156111dd578160200160208202803683370190505b506020840152806001600160401b03811180156111f957600080fd5b50604051908082528060200260200182016040528015611223578160200160208202803683370190505b506040840152806001600160401b038111801561123f57600080fd5b50604051908082528060200260200182016040528015611269578160200160208202803683370190505b506060840152806001600160401b038111801561128557600080fd5b506040519080825280602002602001820160405280156112af578160200160208202803683370190505b50608084015260005b818110156113cd576112f66112d08787600085613597565b856020015183815181106112e057fe5b602002602001015161357290919063ffffffff16565b8460200151828151811061130657fe5b6020026020010181815250506113326113228787600185613597565b856040015183815181106112e057fe5b8460400151828151811061134257fe5b60200260200101818152505061136e61135e8787600285613597565b856060015183815181106112e057fe5b8460600151828151811061137e57fe5b6020026020010181815250506113aa61139a8787600385613597565b856080015183815181106112e057fe5b846080015182815181106113ba57fe5b60209081029190910101526001016112b8565b50505092915050565b6113de614aa2565b60405163aa93ae4960e01b8152309063aa93ae49906114019085906004016152c3565b60006040518083038186803b15801561141957600080fd5b505afa15801561142d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114559190810190615127565b905061145f614aa2565b61146883613b7b565b82515190915060005b818110156115b2576114ba8360200151828151811061148c57fe5b6020026020010151856020015183815181106114a457fe5b602002602001015161402f90919063ffffffff16565b846020015182815181106114ca57fe5b602002602001018181525050611501836040015182815181106114e957fe5b6020026020010151856040015183815181106114a457fe5b8460400151828151811061151157fe5b6020026020010181815250506115488360600151828151811061153057fe5b6020026020010151856060015183815181106114a457fe5b8460600151828151811061155857fe5b60200260200101818152505061158f8360800151828151811061157757fe5b6020026020010151856080015183815181106114a457fe5b8460800151828151811061159f57fe5b6020908102919091010152600101611471565b505050919050565b6115c2614071565b6001600160a01b03166115d3611ab7565b6001600160a01b0316146115f95760405162461bcd60e51b81526004016107879061564e565b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405161162b9291906153e6565b60405180910390a26001600160a01b03909116600090815260056020526040902080549115156101000261ff0019909216919091179055565b606080606080306001600160a01b0316637234100a866040518263ffffffff1660e01b815260040161169691906152c3565b60006040518083038186803b1580156116ae57600080fd5b505afa1580156116c2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116ea919081019061505a565b6001600160a01b0387166000908152600c602090815260409091208351939550919350909161171e91839190860190614ad1565b506001810154835180821461175b5781810360005b8181101561175857600180860180548083018255600091825260208220015501611733565b50505b84516060816001600160401b038111801561177557600080fd5b5060405190808252806020026020018201604052801561179f578160200160208202803683370190505b50905060005b87518110156117fc578560010181815481106117bd57fe5b90600052602060002001548782815181106117d457fe5b6020026020010151038282815181106117e957fe5b60209081029190910101526001016117a5565b509597509495505050505050915091565b611815614071565b6001600160a01b0316611826611ab7565b6001600160a01b03161461184c5760405162461bcd60e51b81526004016107879061564e565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b606080606080306001600160a01b031663a536ebf3866040518263ffffffff1660e01b81526004016118c891906152c3565b60006040518083038186803b1580156118e057600080fd5b505afa1580156118f4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261191c919081019061505a565b604051631437ac1360e01b815291935091506060903090631437ac13906119479089906004016152c3565b60006040518083038186803b15801561195f57600080fd5b505afa158015611973573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261199b919081019061505a565b845190925090506060816001600160401b03811180156119ba57600080fd5b506040519080825280602002602001820160405280156119e4578160200160208202803683370190505b50905060005b82811015611a3a578381815181106119fe57fe5b6020026020010151858281518110611a1257fe5b602002602001015103828281518110611a2757fe5b60209081029190910101526001016119ea565b50939550929350505050915091565b611a51614071565b6001600160a01b0316611a62611ab7565b6001600160a01b031614611a885760405162461bcd60e51b81526004016107879061564e565b60405133904780156108fc02916000818181858888f19350505050158015611ab4573d6000803e3d6000fd5b50565b6000546001600160a01b031690565b6002546001600160a01b03163314611af05760405162461bcd60e51b81526004016107879061546d565b828114611b0f5760405162461bcd60e51b815260040161078790615541565b611b7e868686868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808a0282810182019093528982529093508992508891829185019084908082843760009201919091525061407592505050565b5050506001600160a01b039092166000908152600560205260409020805460ff191660011790555050565b6001600160a01b0380831660009081526003602090815260408083209385168352928152828220805484518184028101840190955280855260609493919290919084015b82821015611c825760008481526020908190206040805180820182526002860290920180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015611c6a57602002820191906000526020600020905b815481526020019060010190808311611c56575b50505050508152505081526020019060010190611bed565b5050505090505b92915050565b611c97614b36565b6001600160a01b038084166000908152600b602090815260408083209386168352928152908290208251815460609381028201840185529381018481529093919284928491840182828015611d1557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611cf7575b5050505050815260200160018201805480602002602001604051908101604052809291908181526020018280548015611d6d57602002820191906000526020600020905b815481526020019060010190808311611d59575b505050505081525050905092915050565b606080611d89614aa2565b6001600160a01b0384166000908152600460209081526040918290208251815460c09381028201840190945260a081018481529093919284928491840182828015611dfd57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611ddf575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015611e5557602002820191906000526020600020905b815481526020019060010190808311611e41575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015611ead57602002820191906000526020600020905b815481526020019060010190808311611e99575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015611f0557602002820191906000526020600020905b815481526020019060010190808311611ef1575b5050505050815260200160058201805480602002602001604051908101604052809291908181526020018280548015611f5d57602002820191906000526020600020905b815481526020019060010190808311611f49575b5050509190925250508151519192508190506001600160401b0381118015611f8457600080fd5b50604051908082528060200260200182016040528015611fae578160200160208202803683370190505b5082519450925060005b818110156120405761202183608001518281518110611fd357fe5b6020026020010151610d0785606001518481518110611fee57fe5b6020026020010151610d078760400151868151811061200957fe5b6020026020010151886020015187815181106112e057fe5b84828151811061202d57fe5b6020908102919091010152600101611fb8565b505050915091565b612050614aa2565b612058614aa2565b6001600160a01b0383166000908152600460209081526040918290208251815460c09381028201840190945260a0810184815290939192849284918401828280156120cc57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116120ae575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561212457602002820191906000526020600020905b815481526020019060010190808311612110575b505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561217c57602002820191906000526020600020905b815481526020019060010190808311612168575b50505050508152602001600482018054806020026020016040519081016040528092919081815260200182805480156121d457602002820191906000526020600020905b8154815260200190600101908083116121c0575b505050505081526020016005820180548060200260200160405190810160405280929190818152602001828054801561222c57602002820191906000526020600020905b815481526020019060010190808311612218575b50505091909252505081518452506020808201519084015260408082015190840152606080820151908401526080908101519083015250919050565b612270614071565b6001600160a01b0316612281611ab7565b6001600160a01b0316146122a75760405162461bcd60e51b81526004016107879061564e565b6122bb6001600160a01b03841683836143b3565b505050565b600a6020908152600092835260408084209091529082529020546001600160a01b031681565b6122ee614b36565b6001600160a01b0382166000908152600c6020908152604091829020825181546060938102820184018552938101848152909391928492849184018282801561236057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612342575b50505050508152602001600182018054806020026020016040519081016040528092919081815260200182805480156123b857602002820191906000526020600020905b8154815260200190600101908083116123a4575b5050505050815250509050919050565b606080606080306001600160a01b031663245cd1db87876040518363ffffffff1660e01b81526004016123fc9291906152d7565b60006040518083038186803b15801561241457600080fd5b505afa158015612428573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612450919081019061505a565b6001600160a01b0388166000908152600b6020908152604080832033845282529091208351939550919350909161248c91839190860190614ad1565b50600181015483518082146124c95781810360005b818110156124c6576001808601805480830182556000918252602082200155016124a1565b50505b84516060816001600160401b03811180156124e357600080fd5b5060405190808252806020026020018201604052801561250d578160200160208202803683370190505b50905060005b828110156125695785600101818154811061252a57fe5b906000526020600020015487828151811061254157fe5b60200260200101510382828151811061255657fe5b6020908102919091010152600101612513565b50959a95995094975050505050505050565b612583614071565b6001600160a01b0316612594611ab7565b6001600160a01b0316146125ba5760405162461bcd60e51b81526004016107879061564e565b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516125ec9291906153e6565b60405180910390a2600180546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0381166000908152600760205260409020606090611c8990614409565b61264381614415565b15611ab457600154604051636e0cf42160e11b81526001600160a01b039091169063dc19e842906126789084906004016152c3565b60206040518083038186803b15801561269057600080fd5b505afa1580156126a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126c891906150ec565b6126e45760405162461bcd60e51b8152600401610787906155db565b806001600160a01b0316635468d6d76040518163ffffffff1660e01b815260040160206040518083038186803b15801561271d57600080fd5b505afa158015612731573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061275591906150ec565b6127715760405162461bcd60e51b8152600401610787906156d3565b60405163245cd1db60e01b81526060908190309063245cd1db9061279b90869033906004016152d7565b60006040518083038186803b1580156127b357600080fd5b505afa1580156127c7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526127ef919081019061505a565b6001600160a01b0385166000908152600b6020908152604080832033845282529091208351939550919350909161282b91839190860190614ad1565b50600181015483518082146128685781810360005b8181101561286557600180860180548083018255600091825260208220015501612840565b50505b60006128733361449c565b61287d57336128ee565b336001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156128b657600080fd5b505afa1580156128ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128ee9190614e00565b905060005b8651811015612a1457600085600101828154811061290d57fe5b906000526020600020015487838151811061292457fe5b602002602001015103905061296083828a858151811061294057fe5b60200260200101516001600160a01b03166143b39092919063ffffffff16565b61298c8187600101848154811061297357fe5b906000526020600020015461357290919063ffffffff16565b86600101838154811061299b57fe5b9060005260206000200181905550826001600160a01b0316336001600160a01b03167fcf0b5b5e344fd092a8b2211145583746df8436ec32469680c9d800af50d7b7378a85815181106129ea57fe5b60200260200101518442604051612a039392919061530a565b60405180910390a3506001016128f3565b5050505050505050565b612a26614071565b6001600160a01b0316612a37611ab7565b6001600160a01b031614612a5d5760405162461bcd60e51b81526004016107879061564e565b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051612a8f9291906153e6565b60405180910390a2600280546001600160a01b0319166001600160a01b0392909216919091179055565b3383828114612ada5760405162461bcd60e51b815260040161078790615541565b600154604051636e0cf42160e11b81526001600160a01b039091169063dc19e84290612b0a9085906004016152c3565b60206040518083038186803b158015612b2257600080fd5b505afa158015612b36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b5a91906150ec565b612b765760405162461bcd60e51b8152600401610787906155db565b6001600160a01b038281166000908152600a602090815260408083208b851684529091529020541680612c1d576001600160a01b038381166000818152600a602090815260408083208d86168452825280832080546001600160a01b031916958f1695909517909455918152600790915220612bf2908a6144d5565b612c1a576001600160a01b0383166000908152600760205260409020612c18908a6144ea565b505b50875b6001600160a01b038116612c435760405162461bcd60e51b815260040161078790615575565b612c7b85856000818110612c5357fe5b6001600160a01b03871660009081526006602090815260409091205493910201359050613572565b6001600160a01b0384166000908152600660205260409020556060826001600160401b0381118015612cac57600080fd5b50604051908082528060200260200182016040528015612cd6578160200160208202803683370190505b50905060005b83811015612dc1576001600160a01b03808616600090815260086020908152604080832093871683529290522054612d3e57868682818110612d1a57fe5b90506020020135828281518110612d2d57fe5b602002602001018181525050612db9565b6001600160a01b0380861660009081526008602090815260408083209387168352929052208054612da0919083908110612d7457fe5b9060005260206000200154888884818110612d8b57fe5b9050602002013561357290919063ffffffff16565b828281518110612dac57fe5b6020026020010181815250505b600101612cdc565b506001600160a01b03808516600090815260086020908152604080832093861683529281529190208251612df792840190614b50565b506001600160a01b0380851660008181526003602090815260408083208786168452825280832093835260098252808320948e168352939052919091205480612f2b57612e42614b97565b6001600160a01b038c168152604080516020808b0282810182019093528a825290918b918b91829185019084908082843760009201829052506020868101958652885460018082018b558a845292829020885160029092020180546001600160a01b0319166001600160a01b039092169190911781559551805188979650612ed1955092860193500190614b50565b505050828054905060096000896001600160a01b03166001600160a01b0316815260200190815260200160002060008e6001600160a01b03166001600160a01b031681526020019081526020016000208190555050612fcc565b6001600160a01b038087166000908152600360209081526040808320938816835292905290812080546000198401908110612f6257fe5b9060005260206000209060020201905060005b6001820154811015612fc957612fa68a8a83818110612f9057fe5b9050602002013583600101838154811061297357fe5b826001018281548110612fb557fe5b600091825260209091200155600101612f75565b50505b505050505050505050505050565b60086020528260005260406000206020528160005260406000208181548110612fff57fe5b9060005260206000200160009250925050505481565b61301e81614415565b15611ab4576040516327304dfd60e01b81526000906001600160a01b038316906327304dfd906130529033906004016152c3565b60206040518083038186803b15801561306a57600080fd5b505afa15801561307e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130a291906150ec565b8061312e5750336001600160a01b0316826001600160a01b0316633018205f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156130eb57600080fd5b505afa1580156130ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131239190614e00565b6001600160a01b0316145b90506000826001600160a01b0316635468d6d76040518163ffffffff1660e01b815260040160206040518083038186803b15801561316b57600080fd5b505afa15801561317f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131a391906150ec565b9050806131c25760405162461bcd60e51b8152600401610787906156d3565b816131df5760405162461bcd60e51b8152600401610787906156aa565b604051631bf52ea760e21b815260609081903090636fd4ba9c906132079088906004016152c3565b600060405180830381600087803b15801561322157600080fd5b505af1158015613235573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261325d919081019061505a565b6001600160a01b0387166000908152600560209081526040808320805460ff19169055600c8252909120835193955091935090916132a091839190860190614ad1565b50600181015483518082146132dd5781810360005b818110156132da576001808601805480830182556000918252602082200155016132b5565b50505b60005b85518110156133695760008682815181106132f757fe5b6020026020010151905061331f8a8288858151811061331257fe5b60200260200101516144ff565b61334586838151811061332e57fe5b602002602001015186600101848154811061297357fe5b85600101838154811061335457fe5b600091825260209091200155506001016132e0565b505050505050505050565b61337c614071565b6001600160a01b031661338d611ab7565b6001600160a01b0316146133b35760405162461bcd60e51b81526004016107879061564e565b6001600160a01b0381166133d95760405162461bcd60e51b8152600401610787906154c6565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000611c898261482f565b600061344b8383614833565b9392505050565b805151600090831080159061346b575060208201515183105b1561347c5750805160200151611c89565b6020820151518310801590613495575060408201515183105b156134a857506020808201510151611c89565b60408201515183108015906134c1575060608201515183105b156134d55750604081015160200151611c89565b60608201515183106134f05750606081015160200151611c89565b50600092915050565b60008261350857506000611c89565b8282028284828161351557fe5b041461344b5760405162461bcd60e51b81526004016107879061560d565b600061344b83836040518060400160405280601a815260200179536166654d6174683a206469766973696f6e206279207a65726f60301b815250614857565b60008282018381101561344b5760405162461bcd60e51b81526004016107879061550c565b6001600160a01b03808516600090815260086020908152604080832093871683529290529081205481906135cc57600061360a565b6001600160a01b038087166000908152600860209081526040808320938916835292905290812080549091906135fe57fe5b90600052602060002001545b9050613614614a63565b506001600160a01b03861660009081526005602081815260408084208151610140810183526001820154610100820190815260028301546101208301526080808301918252845180860186526003850154815260048501548188015260a0808501919091528551808701875297850154885260068501548888015260c080850198909852855180870187526007860154815260088601548189015260e0850152918352845180880186526009850154818301908152600a86015482850152815285518087018752600b8601548152600c860154818901528188015285518087018752600d8601548152600e860154818901528187015285518087018752600f860154815260108601548189015260608281019190915284880191909152855180890187526011860154818401908152601287015482860152815286518088018852601387015481526014870154818a01528189015286518088018852601587015481526016870154818a01528188015286518088018852601787015481526018870154818a01528183015284870152855197880186526019850154918801918252601a85015492880192909252865283518085018552601b8401548152601c840154818701528686015283518085018552601d8401548152601e84015481870152868501528351808501909452601f830154845291840154938301939093528381019190915281019190915290613829614aa2565b6001600160a01b0389166000908152600460209081526040918290208251815460c09381028201840190945260a08101848152909391928492849184018282801561389d57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161387f575b50505050508152602001600282018054806020026020016040519081016040528092919081815260200182805480156138f557602002820191906000526020600020905b8154815260200190600101908083116138e1575b505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561394d57602002820191906000526020600020905b815481526020019060010190808311613939575b50505050508152602001600482018054806020026020016040519081016040528092919081815260200182805480156139a557602002820191906000526020600020905b815481526020019060010190808311613991575b50505050508152602001600582018054806020026020016040519081016040528092919081815260200182805480156139fd57602002820191906000526020600020905b8154815260200190600101908083116139e9575b50505050508152505090508360001415613a1e576000945050505050613b73565b6001600160a01b03891660009081526006602052604090205487158015613a4a57506000826020015151115b15613a8757613a84600d54610c6c83610c6c89613a7e613a6e8c8c60000151613452565b89602001518f81518110610c5657fe5b906134f9565b92505b876001148015613a9c57506000826040015151115b15613ad357613ad0600d54610c6c83610c6c89613a7e613ac08c8c60200151613452565b89604001518f81518110610c5657fe5b92505b876002148015613ae857506000826060015151115b15613b1f57613b1c600d54610c6c83610c6c89613a7e613b0c8c8c60400151613452565b89606001518f81518110610c5657fe5b92505b876003148015613b3457506000826080015151115b15613b6b57613b68600d54610c6c83610c6c89613a7e613b588c8c60600151613452565b89608001518f81518110610c5657fe5b92505b509093505050505b949350505050565b613b83614aa2565b613b8b614aa2565b6001600160a01b0383166000908152600460209081526040918290208251815460c09381028201840190945260a081018481529093919284928491840182828015613bff57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613be1575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015613c5757602002820191906000526020600020905b815481526020019060010190808311613c43575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015613caf57602002820191906000526020600020905b815481526020019060010190808311613c9b575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015613d0757602002820191906000526020600020905b815481526020019060010190808311613cf3575b5050505050815260200160058201805480602002602001604051908101604052809291908181526020018280548015613d5f57602002820191906000526020600020905b815481526020019060010190808311613d4b575b505050919092525050815180519085526001600160a01b038616600090815260076020526040812093945090929150613d9782613434565b9050826001600160401b0381118015613daf57600080fd5b50604051908082528060200260200182016040528015613dd9578160200160208202803683370190505b506020860152826001600160401b0381118015613df557600080fd5b50604051908082528060200260200182016040528015613e1f578160200160208202803683370190505b506040860152826001600160401b0381118015613e3b57600080fd5b50604051908082528060200260200182016040528015613e65578160200160208202803683370190505b506060860152826001600160401b0381118015613e8157600080fd5b50604051908082528060200260200182016040528015613eab578160200160208202803683370190505b50608086015260005b60048110156140255760005b8481101561401c5760005b838110156140135782613f1e57613f01613ef18a613ee9888561343f565b600086613597565b896020015184815181106112e057fe5b88602001518381518110613f1157fe5b6020026020010181815250505b8260011415613f6d57613f50613f408a613f38888561343f565b600186613597565b896040015184815181106112e057fe5b88604001518381518110613f6057fe5b6020026020010181815250505b8260021415613fbc57613f9f613f8f8a613f87888561343f565b600286613597565b896060015184815181106112e057fe5b88606001518381518110613faf57fe5b6020026020010181815250505b826003141561400b57613fee613fde8a613fd6888561343f565b600386613597565b896080015184815181106112e057fe5b88608001518381518110613ffe57fe5b6020026020010181815250505b600101613ecb565b50600101613ec0565b50600101613eb4565b5050505050919050565b600061344b83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061488e565b3390565b6001600160a01b0384166000908152600460205260408120905b83518110156143ab5760008482815181106140a657fe5b6020026020010151905060008483815181106140be57fe5b6020908102919091018101516001600160a01b03841660009081526001870190925260408220548654919350919015614131578115801561412c5750836001600160a01b03168660000160008154811061411457fe5b6000918252602090912001546001600160a01b031614155b614134565b60015b905080156141df578554600180820188556000888152602080822090930180546001600160a01b0319166001600160a01b03891690811790915560028a01805480850182559083528483200182905560038a01805480850182559083528483200182905560048a01805480850182559083528483200182905560058a018054808501825590835284832001829055895490825291890190925260409091206000199091019081905591505b8861424b576141f78387600201848154811061297357fe5b86600201838154811061420657fe5b9060005260206000200181905550896001600160a01b031660008051602061591f83398151915260003387876040516142429493929190615415565b60405180910390a25b88600114156142bb576142678387600301848154811061297357fe5b86600301838154811061427657fe5b9060005260206000200181905550896001600160a01b031660008051602061591f83398151915260013387876040516142b29493929190615415565b60405180910390a25b886002141561432b576142d78387600401848154811061297357fe5b8660040183815481106142e657fe5b9060005260206000200181905550896001600160a01b031660008051602061591f83398151915260023387876040516143229493929190615415565b60405180910390a25b886003141561439b576143478387600501848154811061297357fe5b86600501838154811061435657fe5b9060005260206000200181905550896001600160a01b031660008051602061591f83398151915260033387876040516143929493929190615415565b60405180910390a25b50506001909201915061408f9050565b505050505050565b6122bb8363a9059cbb60e01b84846040516024016143d29291906152f1565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526148ba565b60608061344b836149a5565b60006001826001600160a01b03166373a9855c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561445257600080fd5b505afa158015614466573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061448a9190615108565b600181111561449557fe5b1492915050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590613b73575050151592915050565b600061344b836001600160a01b038416614a01565b600061344b836001600160a01b038416614a19565b6060836001600160a01b031663a0e67e2b6040518163ffffffff1660e01b815260040160006040518083038186803b15801561453a57600080fd5b505afa15801561454e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526145769190810190615028565b90506060846001600160a01b031663309a042c6040518163ffffffff1660e01b815260040160006040518083038186803b1580156145b357600080fd5b505afa1580156145c7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526145ef91908101906150ba565b90506000856001600160a01b031663d29986c16040518163ffffffff1660e01b815260040160206040518083038186803b15801561462c57600080fd5b505afa158015614640573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614664919061521d565b905060005b83518110156147d757600061469985838151811061468357fe5b60200260200101516001600160a01b031661449c565b6146b6578482815181106146a957fe5b602002602001015161473a565b8482815181106146c257fe5b60200260200101516001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561470257600080fd5b505afa158015614716573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061473a9190614e00565b9050600061476884610c6c87868151811061475157fe5b60200260200101518a6134f990919063ffffffff16565b905061477e6001600160a01b03891683836143b3565b816001600160a01b0316336001600160a01b03167f749a9ef4b9bff1f02a1a1d45429a3949e524fd93e3948001eab8dca05f1fcd6d8a84426040516147c59392919061530a565b60405180910390a35050600101614669565b50856001600160a01b0316336001600160a01b03167f1bf0129823b56213a46996bc874ce50b318995cae2bbdcd2000933d36012547d87874260405161481f9392919061530a565b60405180910390a3505050505050565b5490565b600082600001828154811061484457fe5b9060005260206000200154905092915050565b600081836148785760405162461bcd60e51b8152600401610787919061543a565b50600083858161488457fe5b0495945050505050565b600081848411156148b25760405162461bcd60e51b8152600401610787919061543a565b505050900390565b6148cc826001600160a01b031661449c565b6148e85760405162461bcd60e51b81526004016107879061577f565b60006060836001600160a01b03168360405161490491906152a7565b6000604051808303816000865af19150503d8060008114614941576040519150601f19603f3d011682016040523d82523d6000602084013e614946565b606091505b5091509150816149685760405162461bcd60e51b8152600401610787906155a6565b80511561499f578080602001905181019061498391906150ec565b61499f5760405162461bcd60e51b815260040161078790615706565b50505050565b6060816000018054806020026020016040519081016040528092919081815260200182805480156149f557602002820191906000526020600020905b8154815260200190600101908083116149e1575b50505050509050919050565b60009081526001919091016020526040902054151590565b6000614a258383614a01565b614a5b57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611c89565b506000611c89565b6040518060800160405280614a76614baf565b8152602001614a83614baf565b8152602001614a90614baf565b8152602001614a9d614baf565b905290565b6040518060a0016040528060608152602001606081526020016060815260200160608152602001606081525090565b828054828255906000526020600020908101928215614b26579160200282015b82811115614b2657825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190614af1565b50614b32929150614be9565b5090565b604051806040016040528060608152602001606081525090565b828054828255906000526020600020908101928215614b8b579160200282015b82811115614b8b578251825591602001919060010190614b70565b50614b32929150614c08565b60408051808201909152600081526060602082015290565b6040518060800160405280614bc2614c1d565b8152602001614bcf614c1d565b8152602001614bdc614c1d565b8152602001614a9d614c1d565b5b80821115614b325780546001600160a01b0319168155600101614bea565b5b80821115614b325760008155600101614c09565b604051806040016040528060008152602001600081525090565b60008083601f840112614c48578182fd5b5081356001600160401b03811115614c5e578182fd5b6020830191508360208083028501011115610d5157600080fd5b600082601f830112614c88578081fd5b8151614c9b614c96826158b0565b61588a565b818152915060208083019084810181840286018201871015614cbc57600080fd5b60005b84811015614ce4578151614cd2816158fb565b84529282019290820190600101614cbf565b505050505092915050565b600082601f830112614cff578081fd5b8151614d0d614c96826158b0565b818152915060208083019084810181840286018201871015614d2e57600080fd5b60005b84811015614ce457815184529282019290820190600101614d31565b60006101008284031215614d5f578081fd5b614d69608061588a565b9050614d758383614db3565b8152614d848360408401614db3565b6020820152614d968360808401614db3565b6040820152614da88360c08401614db3565b606082015292915050565b600060408284031215614dc4578081fd5b614dce604061588a565b9050813581526020820135602082015292915050565b600060208284031215614df5578081fd5b813561344b816158fb565b600060208284031215614e11578081fd5b815161344b816158fb565b60008060408385031215614e2e578081fd5b8235614e39816158fb565b91506020830135614e49816158fb565b809150509250929050565b60008060008060008060808789031215614e6c578182fd5b8635614e77816158fb565b95506020870135614e87816158fb565b945060408701356001600160401b0380821115614ea2578384fd5b614eae8a838b01614c37565b90965094506060890135915080821115614ec6578384fd5b50614ed389828a01614c37565b979a9699509497509295939492505050565b600080600060608486031215614ef9578283fd5b8335614f04816158fb565b92506020840135614f14816158fb565b929592945050506040919091013590565b60008060408385031215614f37578182fd5b8235614f42816158fb565b91506020830135614e4981615910565b600080828403610420811215614f66578283fd5b8335614f71816158fb565b9250610400601f1982011215614f85578182fd5b50614f90608061588a565b614f9d8560208601614d4d565b8152614fad856101208601614d4d565b6020820152614fc0856102208601614d4d565b6040820152614fd3856103208601614d4d565b6060820152809150509250929050565b60008060008060008060808789031215614ffb578384fd5b8635615006816158fb565b95506020870135945060408701356001600160401b0380821115614ea2578586fd5b600060208284031215615039578081fd5b81516001600160401b0381111561504e578182fd5b613b7384828501614c78565b6000806040838503121561506c578182fd5b82516001600160401b0380821115615082578384fd5b61508e86838701614c78565b935060208501519150808211156150a3578283fd5b506150b085828601614cef565b9150509250929050565b6000602082840312156150cb578081fd5b81516001600160401b038111156150e0578182fd5b613b7384828501614cef565b6000602082840312156150fd578081fd5b815161344b81615910565b600060208284031215615119578081fd5b81516002811061344b578182fd5b600060208284031215615138578081fd5b81516001600160401b038082111561514e578283fd5b9083019060a08286031215615161578283fd5b61516b60a061588a565b825182811115615179578485fd5b61518587828601614c78565b825250602083015182811115615199578485fd5b6151a587828601614cef565b6020830152506040830151828111156151bc578485fd5b6151c887828601614cef565b6040830152506060830151828111156151df578485fd5b6151eb87828601614cef565b606083015250608083015182811115615202578485fd5b61520e87828601614cef565b60808301525095945050505050565b60006020828403121561522e578081fd5b5051919050565b6000815180845260208085019450808401835b8381101561526d5781516001600160a01b031687529582019590820190600101615248565b509495945050505050565b6000815180845260208085019450808401835b8381101561526d5781518752958201959082019060010161528b565b600082516152b98184602087016158cf565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b60006020825261344b6020830184615235565b6000604082526153516040830185615235565b82810360208401526153638185615278565b95945050505050565b60208082528251828201819052600091906040908185019080840286018301878501865b838110156153d857888303603f19018552815180516001600160a01b031684528701518784018790526153c587850182615278565b9588019593505090860190600101615390565b509098975050505050505050565b60006020825282602083015282846040840137818301604090810191909152601f909201601f19160101919050565b9384526001600160a01b03928316602085015291166040830152606082015260800190565b60006020825282518060208401526154598160408501602087016158cf565b601f01601f19169190910160400192915050565b60208082526012908201527122a9292fa727aa2fa1a7a72a2927a62622a960711b604082015260600190565b6020808252601390820152724552525f4e4f545f4352505f464143544f525960681b604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601b908201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604082015260600190565b6020808252601a908201527908aa4a4bea89e968a9cbe988a9c8ea890be9c9ea8be9a82a886960331b604082015260600190565b6020808252601790820152764552525f494e56414c49445f4b4f4c5f4144445245535360481b604082015260600190565b6020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b6020808252601890820152774552525f494e56414c49445f504f4f4c5f4144445245535360401b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600d908201526c11549497d21054d7d4d1551151609a1b604082015260600190565b6020808252600f908201526e22a9292fa727aa2fa6a0a720a3a2a960891b604082015260600190565b60208082526019908201527811549497d393d517d0d3d354131155115117d0d3d3131150d5603a1b604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b60208082526015908201527411549497d2d3d317d21054d7d393d7d49155d05491605a1b604082015260600190565b6020808252601f908201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604082015260600190565b6000602082528251604060208401526157d26060840182615235565b90506020840151601f198483030160408501526153638282615278565b600060208252825160a0602084015261580b60c0840182615235565b90506020840151601f19808584030160408601526158298383615278565b925060408601519150808584030160608601526158468383615278565b925060608601519150808584030160808601526158638383615278565b925060808601519150808584030160a0860152506153638282615278565b90815260200190565b6040518181016001600160401b03811182821017156158a857600080fd5b604052919050565b60006001600160401b038211156158c5578081fd5b5060209081020190565b60005b838110156158ea5781810151838201526020016158d2565b8381111561499f5750506000910152565b6001600160a01b0381168114611ab457600080fd5b8015158114611ab457600080fdfef2dc555ffff33c7179f7e35e7fc8a68179aeecb49e12799e8ac2972420613eb9a2646970667358221220d876ef6c76bb00b110fdcb78b76de97aa69bac2b148ad9e959b5408e1e11283564736f6c634300060c0033",
  "deployedBytecode": "0x60806040526004361061014b5760003560e01c80631437ac1314610157578063245cd1db1461018e5780634660c5a5146101ae5780635740845d146101d0578063598797ad146101fd57806368092bd91461021d5780636fd4ba9c1461023d578063715018a61461025d5780637234100a1461027257806378a619de146102925780638da5cb5b1461029a5780639155dae7146102bc5780639b1061b2146102dc5780639f1da16014610309578063a536ebf314610336578063aa93ae4914610356578063b8baccb814610376578063bb408f2d14610396578063bf91b4c9146103b6578063c0663cc9146103d6578063c1e57622146103f6578063c90361dd14610416578063c969229c14610443578063d6b485a514610463578063d7256c7014610483578063ebee7bcc146104a3578063edb12adf146104d0578063f2fde38b146104f057610152565b3661015257005b600080fd5b34801561016357600080fd5b50610177610172366004614de4565b610510565b60405161018592919061533e565b60405180910390f35b34801561019a57600080fd5b506101776101a9366004614e1c565b6106ef565b3480156101ba57600080fd5b506101ce6101c9366004614f52565b610d58565b005b3480156101dc57600080fd5b506101f06101eb366004614e1c565b610fa5565b60405161018591906157ef565b34801561020957600080fd5b506101f0610218366004614de4565b6113d6565b34801561022957600080fd5b506101ce610238366004614f25565b6115ba565b34801561024957600080fd5b50610177610258366004614de4565b611664565b34801561026957600080fd5b506101ce61180d565b34801561027e57600080fd5b5061017761028d366004614de4565b611896565b6101ce611a49565b3480156102a657600080fd5b506102af611ab7565b60405161018591906152c3565b3480156102c857600080fd5b506101ce6102d7366004614fe3565b611ac6565b3480156102e857600080fd5b506102fc6102f7366004614e1c565b611ba9565b604051610185919061536c565b34801561031557600080fd5b50610329610324366004614e1c565b611c8f565b60405161018591906157b6565b34801561034257600080fd5b50610177610351366004614de4565b611d7e565b34801561036257600080fd5b506101f0610371366004614de4565b612048565b34801561038257600080fd5b506101ce610391366004614ee5565b612268565b3480156103a257600080fd5b506102af6103b1366004614e1c565b6122c0565b3480156103c257600080fd5b506103296103d1366004614de4565b6122e6565b3480156103e257600080fd5b506101776103f1366004614e1c565b6123c8565b34801561040257600080fd5b506101ce610411366004614de4565b61257b565b34801561042257600080fd5b50610436610431366004614de4565b612616565b604051610185919061532b565b34801561044f57600080fd5b506101ce61045e366004614de4565b61263a565b34801561046f57600080fd5b506101ce61047e366004614de4565b612a1e565b34801561048f57600080fd5b506101ce61049e366004614e54565b612ab9565b3480156104af57600080fd5b506104c36104be366004614ee5565b612fda565b6040516101859190615881565b3480156104dc57600080fd5b506101ce6104eb366004614de4565b613015565b3480156104fc57600080fd5b506101ce61050b366004614de4565b613374565b6001600160a01b038116600090815260076020526040812060609182919061053782613434565b6001600160a01b038616600090815260046020908152604091829020805483518184028101840190945280845293945060609390918301828280156105a557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610587575b50505050509050606081516001600160401b03811180156105c557600080fd5b506040519080825280602002602001820160405280156105ef578160200160208202803683370190505b50905060005b838110156106e25760603063245cd1db8a610610898661343f565b6040518363ffffffff1660e01b815260040161062d9291906152d7565b60006040518083038186803b15801561064557600080fd5b505afa158015610659573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610681919081019061505a565b91505060005b81518110156106d85781818151811061069c57fe5b60200260200101518482815181106106b057fe5b6020026020010151018482815181106106c557fe5b6020908102919091010152600101610687565b50506001016105f5565b5090945092505050915091565b6001600160a01b0380831660009081526008602090815260408083209385168352929052908120546060918291610727576000610765565b6001600160a01b0380861660009081526008602090815260408083209388168352929052908120805490919061075957fe5b90600052602060002001545b9050600081116107905760405162461bcd60e51b815260040161078790615750565b60405180910390fd5b610798614a63565b506001600160a01b0385166000908152600560208181526040928390208351610140810185526001820154610100820190815260028301546101208301526080808301918252865180880188526003850154815260048501548187015260a0808501919091528751808901895296850154875260068501548787015260c080850197909752875180890189526007860154815260088601548188015260e0850152918352865180870188526009850154818301908152600a86015482850152815287518089018952600b8601548152600c860154818801528187015287518089018952600d8601548152600e860154818801528189015287518089018952600f86015481526010860154818801526060828101919091528487019190915287518088018952601186015481840190815260128701548286015281528851808a018a5260138701548152601487015481890152818801528851808a018a5260158701548152601687015481890152818a01528851808a018a52601787015481526018870154818901528183015284890152875196870188526019850154918701918252601a85015492870192909252855285518087018752601b8401548152601c840154818601528585015285518087018752601d8401548152601e84015481860152858701528551808701909652601f8301548652918301549285019290925282810193909352918201526109ab614aa2565b6001600160a01b0387166000908152600460209081526040918290208251815460c09381028201840190945260a081018481529093919284928491840182828015610a1f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610a01575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015610a7757602002820191906000526020600020905b815481526020019060010190808311610a63575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015610acf57602002820191906000526020600020905b815481526020019060010190808311610abb575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015610b2757602002820191906000526020600020905b815481526020019060010190808311610b13575b5050505050815260200160058201805480602002602001604051908101604052809291908181526020018280548015610b7f57602002820191906000526020600020905b815481526020019060010190808311610b6b575b505050505081525050905060608160000151516001600160401b0381118015610ba757600080fd5b50604051908082528060200260200182016040528015610bd1578160200160208202803683370190505b506001600160a01b03808a1660009081526006602090815260408083205460088352818420948d168452939091528120805493945091929091908290610c1357fe5b9060005260206000200154905060005b845151811015610d45576000610c72600d54610c6c610c468b8b60000151613452565b89602001518681518110610c5657fe5b60200260200101516134f990919063ffffffff16565b90613533565b90506000610c9d600d54610c6c610c8d8c8c60200151613452565b8a604001518781518110610c5657fe5b90506000610cc8600d54610c6c610cb88d8d60400151613452565b8b606001518881518110610c5657fe5b90506000610cf3600d54610c6c610ce38e8e60600151613452565b8c608001518981518110610c5657fe5b90506000610d0d82610d0785818989613572565b90613572565b9050610d1d88610c6c838a6134f9565b898781518110610d2957fe5b6020908102919091010152505060019093019250610c23915050565b50509151955093505050505b9250929050565b6001546001600160a01b03163314610d825760405162461bcd60e51b815260040161078790615499565b6001600160a01b03808316600090815260056020526040908190206001549151636e0cf42160e11b81529092919091169063dc19e84290610dc79086906004016152c3565b60206040518083038186803b158015610ddf57600080fd5b505afa158015610df3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1791906150ec565b610e335760405162461bcd60e51b8152600401610787906155db565b805462010000900460ff1615610e5b5760405162461bcd60e51b815260040161078790615683565b805462ff0000191662010000178155815180518051600184015560209081015160028401558082015180516003850155810151600484015560408083015180516005860155820151600685015560609283015180516007860155820151600885015581850151805180516009870155830151600a860155808301518051600b870155830151600c860155808201518051600d870155830151600e8601558301518051600f8601558201516010850155808501518051805160118701558301516012860155808301518051601387015583015160148601558082015180516015870155830151601686015583015180516017860155820151601885015593820151805180516019860155820151601a850155808201518051601b860155820151601c850155938401518051601d850155810151601e8401559201518051601f83015582015191015550565b610fad614aa2565b610fb5614aa2565b6001600160a01b0384166000908152600460209081526040918290208251815460c09381028201840190945260a08101848152909391928492849184018282801561102957602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161100b575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561108157602002820191906000526020600020905b81548152602001906001019080831161106d575b50505050508152602001600382018054806020026020016040519081016040528092919081815260200182805480156110d957602002820191906000526020600020905b8154815260200190600101908083116110c5575b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561113157602002820191906000526020600020905b81548152602001906001019080831161111d575b505050505081526020016005820180548060200260200160405190810160405280929190818152602001828054801561118957602002820191906000526020600020905b815481526020019060010190808311611175575b5050509190925250508151845250805151909150806001600160401b03811180156111b357600080fd5b506040519080825280602002602001820160405280156111dd578160200160208202803683370190505b506020840152806001600160401b03811180156111f957600080fd5b50604051908082528060200260200182016040528015611223578160200160208202803683370190505b506040840152806001600160401b038111801561123f57600080fd5b50604051908082528060200260200182016040528015611269578160200160208202803683370190505b506060840152806001600160401b038111801561128557600080fd5b506040519080825280602002602001820160405280156112af578160200160208202803683370190505b50608084015260005b818110156113cd576112f66112d08787600085613597565b856020015183815181106112e057fe5b602002602001015161357290919063ffffffff16565b8460200151828151811061130657fe5b6020026020010181815250506113326113228787600185613597565b856040015183815181106112e057fe5b8460400151828151811061134257fe5b60200260200101818152505061136e61135e8787600285613597565b856060015183815181106112e057fe5b8460600151828151811061137e57fe5b6020026020010181815250506113aa61139a8787600385613597565b856080015183815181106112e057fe5b846080015182815181106113ba57fe5b60209081029190910101526001016112b8565b50505092915050565b6113de614aa2565b60405163aa93ae4960e01b8152309063aa93ae49906114019085906004016152c3565b60006040518083038186803b15801561141957600080fd5b505afa15801561142d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114559190810190615127565b905061145f614aa2565b61146883613b7b565b82515190915060005b818110156115b2576114ba8360200151828151811061148c57fe5b6020026020010151856020015183815181106114a457fe5b602002602001015161402f90919063ffffffff16565b846020015182815181106114ca57fe5b602002602001018181525050611501836040015182815181106114e957fe5b6020026020010151856040015183815181106114a457fe5b8460400151828151811061151157fe5b6020026020010181815250506115488360600151828151811061153057fe5b6020026020010151856060015183815181106114a457fe5b8460600151828151811061155857fe5b60200260200101818152505061158f8360800151828151811061157757fe5b6020026020010151856080015183815181106114a457fe5b8460800151828151811061159f57fe5b6020908102919091010152600101611471565b505050919050565b6115c2614071565b6001600160a01b03166115d3611ab7565b6001600160a01b0316146115f95760405162461bcd60e51b81526004016107879061564e565b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405161162b9291906153e6565b60405180910390a26001600160a01b03909116600090815260056020526040902080549115156101000261ff0019909216919091179055565b606080606080306001600160a01b0316637234100a866040518263ffffffff1660e01b815260040161169691906152c3565b60006040518083038186803b1580156116ae57600080fd5b505afa1580156116c2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116ea919081019061505a565b6001600160a01b0387166000908152600c602090815260409091208351939550919350909161171e91839190860190614ad1565b506001810154835180821461175b5781810360005b8181101561175857600180860180548083018255600091825260208220015501611733565b50505b84516060816001600160401b038111801561177557600080fd5b5060405190808252806020026020018201604052801561179f578160200160208202803683370190505b50905060005b87518110156117fc578560010181815481106117bd57fe5b90600052602060002001548782815181106117d457fe5b6020026020010151038282815181106117e957fe5b60209081029190910101526001016117a5565b509597509495505050505050915091565b611815614071565b6001600160a01b0316611826611ab7565b6001600160a01b03161461184c5760405162461bcd60e51b81526004016107879061564e565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b606080606080306001600160a01b031663a536ebf3866040518263ffffffff1660e01b81526004016118c891906152c3565b60006040518083038186803b1580156118e057600080fd5b505afa1580156118f4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261191c919081019061505a565b604051631437ac1360e01b815291935091506060903090631437ac13906119479089906004016152c3565b60006040518083038186803b15801561195f57600080fd5b505afa158015611973573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261199b919081019061505a565b845190925090506060816001600160401b03811180156119ba57600080fd5b506040519080825280602002602001820160405280156119e4578160200160208202803683370190505b50905060005b82811015611a3a578381815181106119fe57fe5b6020026020010151858281518110611a1257fe5b602002602001015103828281518110611a2757fe5b60209081029190910101526001016119ea565b50939550929350505050915091565b611a51614071565b6001600160a01b0316611a62611ab7565b6001600160a01b031614611a885760405162461bcd60e51b81526004016107879061564e565b60405133904780156108fc02916000818181858888f19350505050158015611ab4573d6000803e3d6000fd5b50565b6000546001600160a01b031690565b6002546001600160a01b03163314611af05760405162461bcd60e51b81526004016107879061546d565b828114611b0f5760405162461bcd60e51b815260040161078790615541565b611b7e868686868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808a0282810182019093528982529093508992508891829185019084908082843760009201919091525061407592505050565b5050506001600160a01b039092166000908152600560205260409020805460ff191660011790555050565b6001600160a01b0380831660009081526003602090815260408083209385168352928152828220805484518184028101840190955280855260609493919290919084015b82821015611c825760008481526020908190206040805180820182526002860290920180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015611c6a57602002820191906000526020600020905b815481526020019060010190808311611c56575b50505050508152505081526020019060010190611bed565b5050505090505b92915050565b611c97614b36565b6001600160a01b038084166000908152600b602090815260408083209386168352928152908290208251815460609381028201840185529381018481529093919284928491840182828015611d1557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611cf7575b5050505050815260200160018201805480602002602001604051908101604052809291908181526020018280548015611d6d57602002820191906000526020600020905b815481526020019060010190808311611d59575b505050505081525050905092915050565b606080611d89614aa2565b6001600160a01b0384166000908152600460209081526040918290208251815460c09381028201840190945260a081018481529093919284928491840182828015611dfd57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611ddf575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015611e5557602002820191906000526020600020905b815481526020019060010190808311611e41575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015611ead57602002820191906000526020600020905b815481526020019060010190808311611e99575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015611f0557602002820191906000526020600020905b815481526020019060010190808311611ef1575b5050505050815260200160058201805480602002602001604051908101604052809291908181526020018280548015611f5d57602002820191906000526020600020905b815481526020019060010190808311611f49575b5050509190925250508151519192508190506001600160401b0381118015611f8457600080fd5b50604051908082528060200260200182016040528015611fae578160200160208202803683370190505b5082519450925060005b818110156120405761202183608001518281518110611fd357fe5b6020026020010151610d0785606001518481518110611fee57fe5b6020026020010151610d078760400151868151811061200957fe5b6020026020010151886020015187815181106112e057fe5b84828151811061202d57fe5b6020908102919091010152600101611fb8565b505050915091565b612050614aa2565b612058614aa2565b6001600160a01b0383166000908152600460209081526040918290208251815460c09381028201840190945260a0810184815290939192849284918401828280156120cc57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116120ae575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561212457602002820191906000526020600020905b815481526020019060010190808311612110575b505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561217c57602002820191906000526020600020905b815481526020019060010190808311612168575b50505050508152602001600482018054806020026020016040519081016040528092919081815260200182805480156121d457602002820191906000526020600020905b8154815260200190600101908083116121c0575b505050505081526020016005820180548060200260200160405190810160405280929190818152602001828054801561222c57602002820191906000526020600020905b815481526020019060010190808311612218575b50505091909252505081518452506020808201519084015260408082015190840152606080820151908401526080908101519083015250919050565b612270614071565b6001600160a01b0316612281611ab7565b6001600160a01b0316146122a75760405162461bcd60e51b81526004016107879061564e565b6122bb6001600160a01b03841683836143b3565b505050565b600a6020908152600092835260408084209091529082529020546001600160a01b031681565b6122ee614b36565b6001600160a01b0382166000908152600c6020908152604091829020825181546060938102820184018552938101848152909391928492849184018282801561236057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612342575b50505050508152602001600182018054806020026020016040519081016040528092919081815260200182805480156123b857602002820191906000526020600020905b8154815260200190600101908083116123a4575b5050505050815250509050919050565b606080606080306001600160a01b031663245cd1db87876040518363ffffffff1660e01b81526004016123fc9291906152d7565b60006040518083038186803b15801561241457600080fd5b505afa158015612428573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612450919081019061505a565b6001600160a01b0388166000908152600b6020908152604080832033845282529091208351939550919350909161248c91839190860190614ad1565b50600181015483518082146124c95781810360005b818110156124c6576001808601805480830182556000918252602082200155016124a1565b50505b84516060816001600160401b03811180156124e357600080fd5b5060405190808252806020026020018201604052801561250d578160200160208202803683370190505b50905060005b828110156125695785600101818154811061252a57fe5b906000526020600020015487828151811061254157fe5b60200260200101510382828151811061255657fe5b6020908102919091010152600101612513565b50959a95995094975050505050505050565b612583614071565b6001600160a01b0316612594611ab7565b6001600160a01b0316146125ba5760405162461bcd60e51b81526004016107879061564e565b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516125ec9291906153e6565b60405180910390a2600180546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0381166000908152600760205260409020606090611c8990614409565b61264381614415565b15611ab457600154604051636e0cf42160e11b81526001600160a01b039091169063dc19e842906126789084906004016152c3565b60206040518083038186803b15801561269057600080fd5b505afa1580156126a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126c891906150ec565b6126e45760405162461bcd60e51b8152600401610787906155db565b806001600160a01b0316635468d6d76040518163ffffffff1660e01b815260040160206040518083038186803b15801561271d57600080fd5b505afa158015612731573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061275591906150ec565b6127715760405162461bcd60e51b8152600401610787906156d3565b60405163245cd1db60e01b81526060908190309063245cd1db9061279b90869033906004016152d7565b60006040518083038186803b1580156127b357600080fd5b505afa1580156127c7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526127ef919081019061505a565b6001600160a01b0385166000908152600b6020908152604080832033845282529091208351939550919350909161282b91839190860190614ad1565b50600181015483518082146128685781810360005b8181101561286557600180860180548083018255600091825260208220015501612840565b50505b60006128733361449c565b61287d57336128ee565b336001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156128b657600080fd5b505afa1580156128ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128ee9190614e00565b905060005b8651811015612a1457600085600101828154811061290d57fe5b906000526020600020015487838151811061292457fe5b602002602001015103905061296083828a858151811061294057fe5b60200260200101516001600160a01b03166143b39092919063ffffffff16565b61298c8187600101848154811061297357fe5b906000526020600020015461357290919063ffffffff16565b86600101838154811061299b57fe5b9060005260206000200181905550826001600160a01b0316336001600160a01b03167fcf0b5b5e344fd092a8b2211145583746df8436ec32469680c9d800af50d7b7378a85815181106129ea57fe5b60200260200101518442604051612a039392919061530a565b60405180910390a3506001016128f3565b5050505050505050565b612a26614071565b6001600160a01b0316612a37611ab7565b6001600160a01b031614612a5d5760405162461bcd60e51b81526004016107879061564e565b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051612a8f9291906153e6565b60405180910390a2600280546001600160a01b0319166001600160a01b0392909216919091179055565b3383828114612ada5760405162461bcd60e51b815260040161078790615541565b600154604051636e0cf42160e11b81526001600160a01b039091169063dc19e84290612b0a9085906004016152c3565b60206040518083038186803b158015612b2257600080fd5b505afa158015612b36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b5a91906150ec565b612b765760405162461bcd60e51b8152600401610787906155db565b6001600160a01b038281166000908152600a602090815260408083208b851684529091529020541680612c1d576001600160a01b038381166000818152600a602090815260408083208d86168452825280832080546001600160a01b031916958f1695909517909455918152600790915220612bf2908a6144d5565b612c1a576001600160a01b0383166000908152600760205260409020612c18908a6144ea565b505b50875b6001600160a01b038116612c435760405162461bcd60e51b815260040161078790615575565b612c7b85856000818110612c5357fe5b6001600160a01b03871660009081526006602090815260409091205493910201359050613572565b6001600160a01b0384166000908152600660205260409020556060826001600160401b0381118015612cac57600080fd5b50604051908082528060200260200182016040528015612cd6578160200160208202803683370190505b50905060005b83811015612dc1576001600160a01b03808616600090815260086020908152604080832093871683529290522054612d3e57868682818110612d1a57fe5b90506020020135828281518110612d2d57fe5b602002602001018181525050612db9565b6001600160a01b0380861660009081526008602090815260408083209387168352929052208054612da0919083908110612d7457fe5b9060005260206000200154888884818110612d8b57fe5b9050602002013561357290919063ffffffff16565b828281518110612dac57fe5b6020026020010181815250505b600101612cdc565b506001600160a01b03808516600090815260086020908152604080832093861683529281529190208251612df792840190614b50565b506001600160a01b0380851660008181526003602090815260408083208786168452825280832093835260098252808320948e168352939052919091205480612f2b57612e42614b97565b6001600160a01b038c168152604080516020808b0282810182019093528a825290918b918b91829185019084908082843760009201829052506020868101958652885460018082018b558a845292829020885160029092020180546001600160a01b0319166001600160a01b039092169190911781559551805188979650612ed1955092860193500190614b50565b505050828054905060096000896001600160a01b03166001600160a01b0316815260200190815260200160002060008e6001600160a01b03166001600160a01b031681526020019081526020016000208190555050612fcc565b6001600160a01b038087166000908152600360209081526040808320938816835292905290812080546000198401908110612f6257fe5b9060005260206000209060020201905060005b6001820154811015612fc957612fa68a8a83818110612f9057fe5b9050602002013583600101838154811061297357fe5b826001018281548110612fb557fe5b600091825260209091200155600101612f75565b50505b505050505050505050505050565b60086020528260005260406000206020528160005260406000208181548110612fff57fe5b9060005260206000200160009250925050505481565b61301e81614415565b15611ab4576040516327304dfd60e01b81526000906001600160a01b038316906327304dfd906130529033906004016152c3565b60206040518083038186803b15801561306a57600080fd5b505afa15801561307e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130a291906150ec565b8061312e5750336001600160a01b0316826001600160a01b0316633018205f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156130eb57600080fd5b505afa1580156130ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131239190614e00565b6001600160a01b0316145b90506000826001600160a01b0316635468d6d76040518163ffffffff1660e01b815260040160206040518083038186803b15801561316b57600080fd5b505afa15801561317f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131a391906150ec565b9050806131c25760405162461bcd60e51b8152600401610787906156d3565b816131df5760405162461bcd60e51b8152600401610787906156aa565b604051631bf52ea760e21b815260609081903090636fd4ba9c906132079088906004016152c3565b600060405180830381600087803b15801561322157600080fd5b505af1158015613235573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261325d919081019061505a565b6001600160a01b0387166000908152600560209081526040808320805460ff19169055600c8252909120835193955091935090916132a091839190860190614ad1565b50600181015483518082146132dd5781810360005b818110156132da576001808601805480830182556000918252602082200155016132b5565b50505b60005b85518110156133695760008682815181106132f757fe5b6020026020010151905061331f8a8288858151811061331257fe5b60200260200101516144ff565b61334586838151811061332e57fe5b602002602001015186600101848154811061297357fe5b85600101838154811061335457fe5b600091825260209091200155506001016132e0565b505050505050505050565b61337c614071565b6001600160a01b031661338d611ab7565b6001600160a01b0316146133b35760405162461bcd60e51b81526004016107879061564e565b6001600160a01b0381166133d95760405162461bcd60e51b8152600401610787906154c6565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000611c898261482f565b600061344b8383614833565b9392505050565b805151600090831080159061346b575060208201515183105b1561347c5750805160200151611c89565b6020820151518310801590613495575060408201515183105b156134a857506020808201510151611c89565b60408201515183108015906134c1575060608201515183105b156134d55750604081015160200151611c89565b60608201515183106134f05750606081015160200151611c89565b50600092915050565b60008261350857506000611c89565b8282028284828161351557fe5b041461344b5760405162461bcd60e51b81526004016107879061560d565b600061344b83836040518060400160405280601a815260200179536166654d6174683a206469766973696f6e206279207a65726f60301b815250614857565b60008282018381101561344b5760405162461bcd60e51b81526004016107879061550c565b6001600160a01b03808516600090815260086020908152604080832093871683529290529081205481906135cc57600061360a565b6001600160a01b038087166000908152600860209081526040808320938916835292905290812080549091906135fe57fe5b90600052602060002001545b9050613614614a63565b506001600160a01b03861660009081526005602081815260408084208151610140810183526001820154610100820190815260028301546101208301526080808301918252845180860186526003850154815260048501548188015260a0808501919091528551808701875297850154885260068501548888015260c080850198909852855180870187526007860154815260088601548189015260e0850152918352845180880186526009850154818301908152600a86015482850152815285518087018752600b8601548152600c860154818901528188015285518087018752600d8601548152600e860154818901528187015285518087018752600f860154815260108601548189015260608281019190915284880191909152855180890187526011860154818401908152601287015482860152815286518088018852601387015481526014870154818a01528189015286518088018852601587015481526016870154818a01528188015286518088018852601787015481526018870154818a01528183015284870152855197880186526019850154918801918252601a85015492880192909252865283518085018552601b8401548152601c840154818701528686015283518085018552601d8401548152601e84015481870152868501528351808501909452601f830154845291840154938301939093528381019190915281019190915290613829614aa2565b6001600160a01b0389166000908152600460209081526040918290208251815460c09381028201840190945260a08101848152909391928492849184018282801561389d57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161387f575b50505050508152602001600282018054806020026020016040519081016040528092919081815260200182805480156138f557602002820191906000526020600020905b8154815260200190600101908083116138e1575b505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561394d57602002820191906000526020600020905b815481526020019060010190808311613939575b50505050508152602001600482018054806020026020016040519081016040528092919081815260200182805480156139a557602002820191906000526020600020905b815481526020019060010190808311613991575b50505050508152602001600582018054806020026020016040519081016040528092919081815260200182805480156139fd57602002820191906000526020600020905b8154815260200190600101908083116139e9575b50505050508152505090508360001415613a1e576000945050505050613b73565b6001600160a01b03891660009081526006602052604090205487158015613a4a57506000826020015151115b15613a8757613a84600d54610c6c83610c6c89613a7e613a6e8c8c60000151613452565b89602001518f81518110610c5657fe5b906134f9565b92505b876001148015613a9c57506000826040015151115b15613ad357613ad0600d54610c6c83610c6c89613a7e613ac08c8c60200151613452565b89604001518f81518110610c5657fe5b92505b876002148015613ae857506000826060015151115b15613b1f57613b1c600d54610c6c83610c6c89613a7e613b0c8c8c60400151613452565b89606001518f81518110610c5657fe5b92505b876003148015613b3457506000826080015151115b15613b6b57613b68600d54610c6c83610c6c89613a7e613b588c8c60600151613452565b89608001518f81518110610c5657fe5b92505b509093505050505b949350505050565b613b83614aa2565b613b8b614aa2565b6001600160a01b0383166000908152600460209081526040918290208251815460c09381028201840190945260a081018481529093919284928491840182828015613bff57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613be1575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015613c5757602002820191906000526020600020905b815481526020019060010190808311613c43575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015613caf57602002820191906000526020600020905b815481526020019060010190808311613c9b575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015613d0757602002820191906000526020600020905b815481526020019060010190808311613cf3575b5050505050815260200160058201805480602002602001604051908101604052809291908181526020018280548015613d5f57602002820191906000526020600020905b815481526020019060010190808311613d4b575b505050919092525050815180519085526001600160a01b038616600090815260076020526040812093945090929150613d9782613434565b9050826001600160401b0381118015613daf57600080fd5b50604051908082528060200260200182016040528015613dd9578160200160208202803683370190505b506020860152826001600160401b0381118015613df557600080fd5b50604051908082528060200260200182016040528015613e1f578160200160208202803683370190505b506040860152826001600160401b0381118015613e3b57600080fd5b50604051908082528060200260200182016040528015613e65578160200160208202803683370190505b506060860152826001600160401b0381118015613e8157600080fd5b50604051908082528060200260200182016040528015613eab578160200160208202803683370190505b50608086015260005b60048110156140255760005b8481101561401c5760005b838110156140135782613f1e57613f01613ef18a613ee9888561343f565b600086613597565b896020015184815181106112e057fe5b88602001518381518110613f1157fe5b6020026020010181815250505b8260011415613f6d57613f50613f408a613f38888561343f565b600186613597565b896040015184815181106112e057fe5b88604001518381518110613f6057fe5b6020026020010181815250505b8260021415613fbc57613f9f613f8f8a613f87888561343f565b600286613597565b896060015184815181106112e057fe5b88606001518381518110613faf57fe5b6020026020010181815250505b826003141561400b57613fee613fde8a613fd6888561343f565b600386613597565b896080015184815181106112e057fe5b88608001518381518110613ffe57fe5b6020026020010181815250505b600101613ecb565b50600101613ec0565b50600101613eb4565b5050505050919050565b600061344b83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061488e565b3390565b6001600160a01b0384166000908152600460205260408120905b83518110156143ab5760008482815181106140a657fe5b6020026020010151905060008483815181106140be57fe5b6020908102919091018101516001600160a01b03841660009081526001870190925260408220548654919350919015614131578115801561412c5750836001600160a01b03168660000160008154811061411457fe5b6000918252602090912001546001600160a01b031614155b614134565b60015b905080156141df578554600180820188556000888152602080822090930180546001600160a01b0319166001600160a01b03891690811790915560028a01805480850182559083528483200182905560038a01805480850182559083528483200182905560048a01805480850182559083528483200182905560058a018054808501825590835284832001829055895490825291890190925260409091206000199091019081905591505b8861424b576141f78387600201848154811061297357fe5b86600201838154811061420657fe5b9060005260206000200181905550896001600160a01b031660008051602061591f83398151915260003387876040516142429493929190615415565b60405180910390a25b88600114156142bb576142678387600301848154811061297357fe5b86600301838154811061427657fe5b9060005260206000200181905550896001600160a01b031660008051602061591f83398151915260013387876040516142b29493929190615415565b60405180910390a25b886002141561432b576142d78387600401848154811061297357fe5b8660040183815481106142e657fe5b9060005260206000200181905550896001600160a01b031660008051602061591f83398151915260023387876040516143229493929190615415565b60405180910390a25b886003141561439b576143478387600501848154811061297357fe5b86600501838154811061435657fe5b9060005260206000200181905550896001600160a01b031660008051602061591f83398151915260033387876040516143929493929190615415565b60405180910390a25b50506001909201915061408f9050565b505050505050565b6122bb8363a9059cbb60e01b84846040516024016143d29291906152f1565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526148ba565b60608061344b836149a5565b60006001826001600160a01b03166373a9855c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561445257600080fd5b505afa158015614466573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061448a9190615108565b600181111561449557fe5b1492915050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590613b73575050151592915050565b600061344b836001600160a01b038416614a01565b600061344b836001600160a01b038416614a19565b6060836001600160a01b031663a0e67e2b6040518163ffffffff1660e01b815260040160006040518083038186803b15801561453a57600080fd5b505afa15801561454e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526145769190810190615028565b90506060846001600160a01b031663309a042c6040518163ffffffff1660e01b815260040160006040518083038186803b1580156145b357600080fd5b505afa1580156145c7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526145ef91908101906150ba565b90506000856001600160a01b031663d29986c16040518163ffffffff1660e01b815260040160206040518083038186803b15801561462c57600080fd5b505afa158015614640573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614664919061521d565b905060005b83518110156147d757600061469985838151811061468357fe5b60200260200101516001600160a01b031661449c565b6146b6578482815181106146a957fe5b602002602001015161473a565b8482815181106146c257fe5b60200260200101516001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561470257600080fd5b505afa158015614716573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061473a9190614e00565b9050600061476884610c6c87868151811061475157fe5b60200260200101518a6134f990919063ffffffff16565b905061477e6001600160a01b03891683836143b3565b816001600160a01b0316336001600160a01b03167f749a9ef4b9bff1f02a1a1d45429a3949e524fd93e3948001eab8dca05f1fcd6d8a84426040516147c59392919061530a565b60405180910390a35050600101614669565b50856001600160a01b0316336001600160a01b03167f1bf0129823b56213a46996bc874ce50b318995cae2bbdcd2000933d36012547d87874260405161481f9392919061530a565b60405180910390a3505050505050565b5490565b600082600001828154811061484457fe5b9060005260206000200154905092915050565b600081836148785760405162461bcd60e51b8152600401610787919061543a565b50600083858161488457fe5b0495945050505050565b600081848411156148b25760405162461bcd60e51b8152600401610787919061543a565b505050900390565b6148cc826001600160a01b031661449c565b6148e85760405162461bcd60e51b81526004016107879061577f565b60006060836001600160a01b03168360405161490491906152a7565b6000604051808303816000865af19150503d8060008114614941576040519150601f19603f3d011682016040523d82523d6000602084013e614946565b606091505b5091509150816149685760405162461bcd60e51b8152600401610787906155a6565b80511561499f578080602001905181019061498391906150ec565b61499f5760405162461bcd60e51b815260040161078790615706565b50505050565b6060816000018054806020026020016040519081016040528092919081815260200182805480156149f557602002820191906000526020600020905b8154815260200190600101908083116149e1575b50505050509050919050565b60009081526001919091016020526040902054151590565b6000614a258383614a01565b614a5b57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611c89565b506000611c89565b6040518060800160405280614a76614baf565b8152602001614a83614baf565b8152602001614a90614baf565b8152602001614a9d614baf565b905290565b6040518060a0016040528060608152602001606081526020016060815260200160608152602001606081525090565b828054828255906000526020600020908101928215614b26579160200282015b82811115614b2657825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190614af1565b50614b32929150614be9565b5090565b604051806040016040528060608152602001606081525090565b828054828255906000526020600020908101928215614b8b579160200282015b82811115614b8b578251825591602001919060010190614b70565b50614b32929150614c08565b60408051808201909152600081526060602082015290565b6040518060800160405280614bc2614c1d565b8152602001614bcf614c1d565b8152602001614bdc614c1d565b8152602001614a9d614c1d565b5b80821115614b325780546001600160a01b0319168155600101614bea565b5b80821115614b325760008155600101614c09565b604051806040016040528060008152602001600081525090565b60008083601f840112614c48578182fd5b5081356001600160401b03811115614c5e578182fd5b6020830191508360208083028501011115610d5157600080fd5b600082601f830112614c88578081fd5b8151614c9b614c96826158b0565b61588a565b818152915060208083019084810181840286018201871015614cbc57600080fd5b60005b84811015614ce4578151614cd2816158fb565b84529282019290820190600101614cbf565b505050505092915050565b600082601f830112614cff578081fd5b8151614d0d614c96826158b0565b818152915060208083019084810181840286018201871015614d2e57600080fd5b60005b84811015614ce457815184529282019290820190600101614d31565b60006101008284031215614d5f578081fd5b614d69608061588a565b9050614d758383614db3565b8152614d848360408401614db3565b6020820152614d968360808401614db3565b6040820152614da88360c08401614db3565b606082015292915050565b600060408284031215614dc4578081fd5b614dce604061588a565b9050813581526020820135602082015292915050565b600060208284031215614df5578081fd5b813561344b816158fb565b600060208284031215614e11578081fd5b815161344b816158fb565b60008060408385031215614e2e578081fd5b8235614e39816158fb565b91506020830135614e49816158fb565b809150509250929050565b60008060008060008060808789031215614e6c578182fd5b8635614e77816158fb565b95506020870135614e87816158fb565b945060408701356001600160401b0380821115614ea2578384fd5b614eae8a838b01614c37565b90965094506060890135915080821115614ec6578384fd5b50614ed389828a01614c37565b979a9699509497509295939492505050565b600080600060608486031215614ef9578283fd5b8335614f04816158fb565b92506020840135614f14816158fb565b929592945050506040919091013590565b60008060408385031215614f37578182fd5b8235614f42816158fb565b91506020830135614e4981615910565b600080828403610420811215614f66578283fd5b8335614f71816158fb565b9250610400601f1982011215614f85578182fd5b50614f90608061588a565b614f9d8560208601614d4d565b8152614fad856101208601614d4d565b6020820152614fc0856102208601614d4d565b6040820152614fd3856103208601614d4d565b6060820152809150509250929050565b60008060008060008060808789031215614ffb578384fd5b8635615006816158fb565b95506020870135945060408701356001600160401b0380821115614ea2578586fd5b600060208284031215615039578081fd5b81516001600160401b0381111561504e578182fd5b613b7384828501614c78565b6000806040838503121561506c578182fd5b82516001600160401b0380821115615082578384fd5b61508e86838701614c78565b935060208501519150808211156150a3578283fd5b506150b085828601614cef565b9150509250929050565b6000602082840312156150cb578081fd5b81516001600160401b038111156150e0578182fd5b613b7384828501614cef565b6000602082840312156150fd578081fd5b815161344b81615910565b600060208284031215615119578081fd5b81516002811061344b578182fd5b600060208284031215615138578081fd5b81516001600160401b038082111561514e578283fd5b9083019060a08286031215615161578283fd5b61516b60a061588a565b825182811115615179578485fd5b61518587828601614c78565b825250602083015182811115615199578485fd5b6151a587828601614cef565b6020830152506040830151828111156151bc578485fd5b6151c887828601614cef565b6040830152506060830151828111156151df578485fd5b6151eb87828601614cef565b606083015250608083015182811115615202578485fd5b61520e87828601614cef565b60808301525095945050505050565b60006020828403121561522e578081fd5b5051919050565b6000815180845260208085019450808401835b8381101561526d5781516001600160a01b031687529582019590820190600101615248565b509495945050505050565b6000815180845260208085019450808401835b8381101561526d5781518752958201959082019060010161528b565b600082516152b98184602087016158cf565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b60006020825261344b6020830184615235565b6000604082526153516040830185615235565b82810360208401526153638185615278565b95945050505050565b60208082528251828201819052600091906040908185019080840286018301878501865b838110156153d857888303603f19018552815180516001600160a01b031684528701518784018790526153c587850182615278565b9588019593505090860190600101615390565b509098975050505050505050565b60006020825282602083015282846040840137818301604090810191909152601f909201601f19160101919050565b9384526001600160a01b03928316602085015291166040830152606082015260800190565b60006020825282518060208401526154598160408501602087016158cf565b601f01601f19169190910160400192915050565b60208082526012908201527122a9292fa727aa2fa1a7a72a2927a62622a960711b604082015260600190565b6020808252601390820152724552525f4e4f545f4352505f464143544f525960681b604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601b908201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604082015260600190565b6020808252601a908201527908aa4a4bea89e968a9cbe988a9c8ea890be9c9ea8be9a82a886960331b604082015260600190565b6020808252601790820152764552525f494e56414c49445f4b4f4c5f4144445245535360481b604082015260600190565b6020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b6020808252601890820152774552525f494e56414c49445f504f4f4c5f4144445245535360401b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600d908201526c11549497d21054d7d4d1551151609a1b604082015260600190565b6020808252600f908201526e22a9292fa727aa2fa6a0a720a3a2a960891b604082015260600190565b60208082526019908201527811549497d393d517d0d3d354131155115117d0d3d3131150d5603a1b604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b60208082526015908201527411549497d2d3d317d21054d7d393d7d49155d05491605a1b604082015260600190565b6020808252601f908201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604082015260600190565b6000602082528251604060208401526157d26060840182615235565b90506020840151601f198483030160408501526153638282615278565b600060208252825160a0602084015261580b60c0840182615235565b90506020840151601f19808584030160408601526158298383615278565b925060408601519150808584030160608601526158468383615278565b925060608601519150808584030160808601526158638383615278565b925060808601519150808584030160a0860152506153638282615278565b90815260200190565b6040518181016001600160401b03811182821017156158a857600080fd5b604052919050565b60006001600160401b038211156158c5578081fd5b5060209081020190565b60005b838110156158ea5781810151838201526020016158d2565b8381111561499f5750506000910152565b6001600160a01b0381168114611ab457600080fd5b8015158114611ab457600080fdfef2dc555ffff33c7179f7e35e7fc8a68179aeecb49e12799e8ac2972420613eb9a2646970667358221220d876ef6c76bb00b110fdcb78b76de97aa69bac2b148ad9e959b5408e1e11283564736f6c634300060c0033",
  "libraries": {},
  "devdoc": {
    "author": "Desyn Labs",
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Vault managerFee",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 18082,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9693,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "crpFactory",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ICRPFactory)9596"
      },
      {
        "astId": 9695,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "vaultAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 9737,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "kolUserInfo",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_array(t_struct(KolUserInfo)9730_storage)dyn_storage))"
      },
      {
        "astId": 9758,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "poolsTokens",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(PoolTokens)9715_storage)"
      },
      {
        "astId": 9762,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "poolsStatus",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(PoolStatus)9724_storage)"
      },
      {
        "astId": 9766,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "poolInviteTotal",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9770,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "kolsList",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_struct(AddressSet)15743_storage)"
      },
      {
        "astId": 9777,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "kolTotalAmountList",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_address,t_array(t_uint256)dyn_storage))"
      },
      {
        "astId": 9783,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "userIndexList",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 9789,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "userKolList",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 9818,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "kolHasClaimed",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(ClaimTokens)9796_storage))"
      },
      {
        "astId": 9838,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "manageHasClaimed",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_struct(ClaimTokens)9796_storage)"
      },
      {
        "astId": 9853,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "RATIO_TOTAL",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(KolUserInfo)9730_storage)dyn_storage": {
        "base": "t_struct(KolUserInfo)9730_storage",
        "encoding": "dynamic_array",
        "label": "struct UserVault.KolUserInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ICRPFactory)9596": {
        "encoding": "inplace",
        "label": "contract ICRPFactory",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_struct(KolUserInfo)9730_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct UserVault.KolUserInfo[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(KolUserInfo)9730_storage)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_array(t_struct(KolUserInfo)9730_storage)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct UserVault.KolUserInfo[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_struct(KolUserInfo)9730_storage)dyn_storage)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_array(t_uint256)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(ClaimTokens)9796_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct UserVault.ClaimTokens))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(ClaimTokens)9796_storage)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(AddressSet)15743_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)15743_storage"
      },
      "t_mapping(t_address,t_struct(ClaimTokens)9796_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct UserVault.ClaimTokens)",
        "numberOfBytes": "32",
        "value": "t_struct(ClaimTokens)9796_storage"
      },
      "t_mapping(t_address,t_struct(PoolStatus)9724_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct UserVault.PoolStatus)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolStatus)9724_storage"
      },
      "t_mapping(t_address,t_struct(PoolTokens)9715_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct UserVault.PoolTokens)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolTokens)9715_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)15743_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 15742,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)15556_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ClaimTokens)9796_storage": {
        "encoding": "inplace",
        "label": "struct UserVault.ClaimTokens",
        "members": [
          {
            "astId": 9792,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "tokens",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 9795,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "amounts",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(KolPoolParams)16559_storage": {
        "encoding": "inplace",
        "label": "struct SmartPoolManager.KolPoolParams",
        "members": [
          {
            "astId": 16552,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "managerFee",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(feeParams)16550_storage"
          },
          {
            "astId": 16554,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "issueFee",
            "offset": 0,
            "slot": "8",
            "type": "t_struct(feeParams)16550_storage"
          },
          {
            "astId": 16556,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "redeemFee",
            "offset": 0,
            "slot": "16",
            "type": "t_struct(feeParams)16550_storage"
          },
          {
            "astId": 16558,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "perfermanceFee",
            "offset": 0,
            "slot": "24",
            "type": "t_struct(feeParams)16550_storage"
          }
        ],
        "numberOfBytes": "1024"
      },
      "t_struct(KolUserInfo)9730_storage": {
        "encoding": "inplace",
        "label": "struct UserVault.KolUserInfo",
        "members": [
          {
            "astId": 9726,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "userAdr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 9729,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "userAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PoolStatus)9724_storage": {
        "encoding": "inplace",
        "label": "struct UserVault.PoolStatus",
        "members": [
          {
            "astId": 9717,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "couldManagerClaim",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 9719,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "isBlackList",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 9721,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "isSetParams",
            "offset": 2,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 9723,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "kolPoolConfig",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(KolPoolParams)16559_storage"
          }
        ],
        "numberOfBytes": "1056"
      },
      "t_struct(PoolTokens)9715_storage": {
        "encoding": "inplace",
        "label": "struct UserVault.PoolTokens",
        "members": [
          {
            "astId": 9698,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "tokenList",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 9702,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "tokenIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 9705,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "managerAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 9708,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "issueAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 9711,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "redeemAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 9714,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "perfermanceAmount",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Set)15556_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 15551,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 15555,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(feeParams)16550_storage": {
        "encoding": "inplace",
        "label": "struct SmartPoolManager.feeParams",
        "members": [
          {
            "astId": 16543,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "firstLevel",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(levelParams)16541_storage"
          },
          {
            "astId": 16545,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "secondLevel",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(levelParams)16541_storage"
          },
          {
            "astId": 16547,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "thirdLevel",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(levelParams)16541_storage"
          },
          {
            "astId": 16549,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "fourLevel",
            "offset": 0,
            "slot": "6",
            "type": "t_struct(levelParams)16541_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(levelParams)16541_storage": {
        "encoding": "inplace",
        "label": "struct SmartPoolManager.levelParams",
        "members": [
          {
            "astId": 16538,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "level",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 16540,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "ratio",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
