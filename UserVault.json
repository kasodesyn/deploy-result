{
  "address": "0xA27A818879e2920B3EeBcffC28B46E26212D52f6",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "kol",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "KolClaim",
      "type": "event"
    },
    {
      "anonymous": true,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes4",
          "name": "sig",
          "type": "bytes4"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "LOG_CALL",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "ManagerClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "ManagersClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "adminClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "types",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "tokensIn",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amountsIn",
          "type": "uint256[]"
        }
      ],
      "name": "depositToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBNB",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "kol",
          "type": "address"
        }
      ],
      "name": "getKolFeeType",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "tokenList",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "managerAmount",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "issueAmount",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "redeemAmount",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "perfermanceAmount",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct UserVault.FeeTypesTokens",
          "name": "result",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "kol",
          "type": "address"
        }
      ],
      "name": "getKolHasClaimed",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct UserVault.ClaimTokens",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "kol",
          "type": "address"
        }
      ],
      "name": "getKolReward",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getKolsAdr",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getKolsReward",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getManageHasClaimed",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct UserVault.ClaimTokens",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getManagerFeeTypes",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "tokenList",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "managerAmount",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "issueAmount",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "redeemAmount",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "perfermanceAmount",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct UserVault.FeeTypesTokens",
          "name": "result",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getManagerReward",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getPoolFeeTypes",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "tokenList",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "managerAmount",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "issueAmount",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "redeemAmount",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "perfermanceAmount",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct UserVault.FeeTypesTokens",
          "name": "result",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getPoolReward",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokenList",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "kol",
          "type": "address"
        }
      ],
      "name": "getUnKolReward",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getUnManagerReward",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "kolClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "kolTotalAmountList",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "kolUserInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "userAdr",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "managerClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "kol",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "poolTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokensAmount",
          "type": "uint256[]"
        }
      ],
      "name": "recordTokenInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "bools",
          "type": "bool"
        }
      ],
      "name": "setBlackList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adr",
          "type": "address"
        }
      ],
      "name": "setCrpFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "firstLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "secondLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "thirdLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "fourLevel",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SmartPoolManager.feeParams",
              "name": "managerFee",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "firstLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "secondLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "thirdLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "fourLevel",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SmartPoolManager.feeParams",
              "name": "issueFee",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "firstLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "secondLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "thirdLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "fourLevel",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SmartPoolManager.feeParams",
              "name": "redeemFee",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "firstLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "secondLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "thirdLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "fourLevel",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SmartPoolManager.feeParams",
              "name": "perfermanceFee",
              "type": "tuple"
            }
          ],
          "internalType": "struct SmartPoolManager.KolPoolParams",
          "name": "_poolParams",
          "type": "tuple"
        }
      ],
      "name": "setPoolParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adr",
          "type": "address"
        }
      ],
      "name": "setVaultAdr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userKolList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x62b19e22d11f79e275b7203cdba621422e02562ed930d409f181b2c2c44e24d2",
  "receipt": {
    "to": null,
    "from": "0x595b85b4A418e3B8df897D02F5BD49167D00862F",
    "contractAddress": "0xA27A818879e2920B3EeBcffC28B46E26212D52f6",
    "transactionIndex": 1,
    "gasUsed": "4921083",
    "logsBloom": "0x
    "blockHash": "0xcba98f63be7dedab1b58dca8a0922acf9ea051ea544972e341b73481fec2f720",
    "transactionHash": "0x62b19e22d11f79e275b7203cdba621422e02562ed930d409f181b2c2c44e24d2",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 8162029,
        "transactionHash": "0x62b19e22d11f79e275b7203cdba621422e02562ed930d409f181b2c2c44e24d2",
        "address": "0xA27A818879e2920B3EeBcffC28B46E26212D52f6",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000595b85b4a418e3b8df897d02f5bd49167d00862f"
        ],
        "data": "0x",
        "logIndex": 10,
        "blockHash": "0xcba98f63be7dedab1b58dca8a0922acf9ea051ea544972e341b73481fec2f720"
      }
    ],
    "blockNumber": 8162029,
    "cumulativeGasUsed": "5665740",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f3f40e75f34851262c6dcc334fe9a5d7",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"kol\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"KolClaim\",\"type\":\"event\"},{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"LOG_CALL\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ManagerClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ManagersClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"adminClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"types\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"tokensIn\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsIn\",\"type\":\"uint256[]\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBNB\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"kol\",\"type\":\"address\"}],\"name\":\"getKolFeeType\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"tokenList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"managerAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"issueAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"redeemAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"perfermanceAmount\",\"type\":\"uint256[]\"}],\"internalType\":\"struct UserVault.FeeTypesTokens\",\"name\":\"result\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"kol\",\"type\":\"address\"}],\"name\":\"getKolHasClaimed\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct UserVault.ClaimTokens\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"kol\",\"type\":\"address\"}],\"name\":\"getKolReward\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getKolsAdr\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getKolsReward\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getManageHasClaimed\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct UserVault.ClaimTokens\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getManagerFeeTypes\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"tokenList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"managerAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"issueAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"redeemAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"perfermanceAmount\",\"type\":\"uint256[]\"}],\"internalType\":\"struct UserVault.FeeTypesTokens\",\"name\":\"result\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getManagerReward\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolFeeTypes\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"tokenList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"managerAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"issueAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"redeemAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"perfermanceAmount\",\"type\":\"uint256[]\"}],\"internalType\":\"struct UserVault.FeeTypesTokens\",\"name\":\"result\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolReward\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"kol\",\"type\":\"address\"}],\"name\":\"getUnKolReward\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getUnManagerReward\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"kolClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"kolTotalAmountList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"kolUserInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"userAdr\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"managerClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"kol\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"poolTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokensAmount\",\"type\":\"uint256[]\"}],\"name\":\"recordTokenInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"bools\",\"type\":\"bool\"}],\"name\":\"setBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setCrpFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"managerFee\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"issueFee\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"redeemFee\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"perfermanceFee\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.KolPoolParams\",\"name\":\"_poolParams\",\"type\":\"tuple\"}],\"name\":\"setPoolParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setVaultAdr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userKolList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Desyn Labs\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Vault managerFee\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/deploy/UserVault.sol\":\"UserVault\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"contracts/base/Logs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\ncontract Logs {\\n    event LOG_CALL(bytes4 indexed sig, address indexed caller, bytes data) anonymous;\\n\\n    modifier _logs_() {\\n        emit LOG_CALL(msg.sig, msg.sender, msg.data);\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x942b3c172dd3f0910c3589d703b4f224c94c76a13cc84d7add6318206cff512e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/deploy/UserVault.sol\":{\"content\":\"pragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IDSProxy.sol\\\";\\nimport \\\"../openzeppelin/Ownable.sol\\\";\\nimport  \\\"../libraries/SmartPoolManager.sol\\\";\\nimport \\\"../libraries/EnumerableSet.sol\\\";\\nimport \\\"../libraries/SafeMath.sol\\\";\\nimport \\\"../libraries/Address.sol\\\";\\nimport \\\"../libraries/SafeERC20.sol\\\";\\nimport \\\"../base/Logs.sol\\\";\\n\\ninterface ICRPPool {\\n    function getController() external view returns (address);\\n\\n    enum Etypes {\\n        OPENED,\\n        CLOSED\\n    }\\n\\n    function etype() external view returns (Etypes);\\n\\n    function isCompletedCollect() external view returns (bool);\\n}\\n\\ninterface ICRPFactory {\\n    function isCrp(address addr) external view returns (bool);\\n}\\n\\ninterface IDesynOwnable {\\n    function adminList(address adr) external view returns (bool);\\n    function getController() external view returns (address);\\n    function getOwners() external view returns (address[] memory);\\n    function getOwnerPercentage() external view returns (uint[] memory);\\n    function allOwnerPercentage() external view returns (uint);\\n}\\n\\n/**\\n * @author Desyn Labs\\n * @title Vault managerFee\\n */\\ncontract UserVault is Ownable, Logs {\\n    using SafeMath for uint;\\n    using Address for address;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using SafeERC20 for IERC20;\\n\\n    event ManagersClaim(address indexed caller,address indexed pool, address token, uint amount, uint time);\\n    event ManagerClaim(address indexed caller,address indexed manager, address token, uint amount, uint time);\\n    event KolClaim(address indexed caller,address indexed kol, address token, uint amount, uint time);\\n\\n    ICRPFactory crpFactory;\\n    address vaultAddress;\\n\\n    // event LogVaultAdr(address indexed manager, address indexed caller);\\n\\n    // struct ClaimTokenInfo {\\n    //     address token;\\n    //     uint decimals;\\n    //     uint amount;\\n    // }\\n\\n    // struct ClaimRecordInfo {\\n    //     uint time;\\n    //     ClaimTokenInfo[] tokens;\\n    // }\\n\\n    // pool of tokens\\n    struct PoolTokens {\\n        address[] tokenList;\\n        mapping(address => uint) tokenIndex; \\n        uint[] managerAmount;\\n        uint[] issueAmount;\\n        uint[] redeemAmount;\\n        uint[] perfermanceAmount;\\n    }\\n\\n    struct PoolStatus {\\n        bool couldManagerClaim;\\n        bool isBlackList;\\n        bool isSetParams;\\n        SmartPoolManager.KolPoolParams kolPoolConfig;\\n    }\\n\\n    // kol list\\n    struct KolUserInfo {\\n        address userAdr;\\n        uint[] userAmount;\\n    }\\n\\n    //pool=>manager\\n    // mapping(address => address) public poolManager;\\n\\n    // pool tokens\\n    mapping(address => PoolTokens) poolsTokens;\\n    mapping(address => PoolStatus) poolsStatus;\\n    // function getPoolsTokens(address pool) external view returns(address[] memory) {\\n    //     return poolsTokens[pool].tokenList;\\n    // }\\n\\n    //history record\\n    // mapping(address => uint) public recordNumber;\\n    // mapping(address => mapping(uint => ClaimRecordInfo)) public recordList;\\n\\n    //pool => tokenList\\n    // mapping(address => address[]) public kolTokenList;\\n\\n    //pool => initTotalAmount[]\\n    mapping(address => uint) poolInviteTotal;\\n    //pool => manager => uint\\n    // mapping(address => mapping(address => uint)) public managerClaimedList;\\n    // mapping(address => uint) public poolManangerHasClaimed;\\n\\n    //pool => kol[]\\n    mapping(address => EnumerableSet.AddressSet) kolsList;\\n    //pool => kol =>uint\\n    // mapping(address => mapping(address => uint)) public kolClaimedList;\\n    //pool => kol => totalAmount[]\\n    mapping(address => mapping(address => uint[])) public kolTotalAmountList;\\n    // pool => kol => KolUserInfo[]\\n    mapping(address => mapping(address => KolUserInfo[])) public kolUserInfo;\\n\\n    //pool => user => index\\n    mapping(address => mapping(address => uint)) userIndexList;\\n    // pool => user => kol\\n    mapping(address => mapping(address => address)) public userKolList;\\n    \\n    struct ClaimTokens {\\n        address[] tokens;\\n        uint[] amounts;\\n    }\\n\\n    struct FeeTypesTokens {\\n        address[] tokenList;\\n        uint[] managerAmount;\\n        uint[] issueAmount;\\n        uint[] redeemAmount;\\n        uint[] perfermanceAmount;\\n    }\\n\\n    // pool=>kol=>tokens\\n    mapping(address => mapping(address => ClaimTokens)) kolHasClaimed;\\n    function getKolHasClaimed(address pool,address kol) external view returns(ClaimTokens memory) {\\n        return kolHasClaimed[pool][kol];\\n    }\\n    // pool=>manage=>tokens\\n    mapping (address => ClaimTokens) manageHasClaimed;\\n    function getManageHasClaimed(address pool) external view returns(ClaimTokens memory) {\\n        return manageHasClaimed[pool];\\n    }\\n\\n    uint RATIO_TOTAL = 100;\\n\\n    receive() external payable {}\\n\\n    // one type call and receiver token\\n    function depositToken(\\n        address pool,\\n        uint types,\\n        address[] calldata tokensIn,\\n        uint[] calldata amountsIn\\n    ) external onlyVault {\\n        require(tokensIn.length == amountsIn.length, \\\"ERR_TOKEN_LENGTH_NOT_MATCH\\\");\\n        // _initPoolController(pool);\\n        _updatePool(pool, types, tokensIn, amountsIn);\\n        poolsStatus[pool].couldManagerClaim = true;\\n    }\\n\\n    // total tokens in pool\\n    function getPoolReward(address pool) external view returns (address[] memory tokenList, uint[] memory balances) {\\n        PoolTokens memory tokens = poolsTokens[pool];\\n        uint len = tokens.tokenList.length;\\n\\n        balances = new uint[](len);    \\n        tokenList = tokens.tokenList;\\n\\n        for(uint i; i<len ;i++){\\n            balances[i] = tokens.managerAmount[i]\\n                            .add(tokens.issueAmount[i])\\n                            .add(tokens.redeemAmount[i])\\n                            .add(tokens.perfermanceAmount[i]);\\n        }\\n    }\\n    // one kol total reward \\n    function getKolReward(\\n        address pool,\\n        address kol\\n    ) external view returns (address[] memory, uint[] memory) {\\n        uint kolTotalAmount = kolTotalAmountList[pool][kol].length > 0 ? kolTotalAmountList[pool][kol][0] : 0;\\n        require(kolTotalAmount > 0, \\\"ERR_KOL_HAS_NO_REWARD\\\");\\n        SmartPoolManager.KolPoolParams memory params = poolsStatus[pool].kolPoolConfig;\\n\\n        PoolTokens memory tokens = poolsTokens[pool];\\n        uint[] memory balances = new uint[](tokens.tokenList.length);\\n\\n        uint allContributionByKol = poolInviteTotal[pool];\\n        uint contributionByCurKol = kolTotalAmountList[pool][kol][0];\\n\\n        for(uint i; i < tokens.tokenList.length; i++){\\n            uint mb = tokens.managerAmount[i].mul(_levelJudge(kolTotalAmount, params.managerFee)).div(RATIO_TOTAL);\\n            uint ib = tokens.issueAmount[i].mul(_levelJudge(kolTotalAmount, params.issueFee)).div(RATIO_TOTAL);\\n            uint rb = tokens.redeemAmount[i].mul(_levelJudge(kolTotalAmount, params.redeemFee)).div(RATIO_TOTAL);\\n            uint pb = tokens.perfermanceAmount[i].mul(_levelJudge(kolTotalAmount, params.perfermanceFee)).div(RATIO_TOTAL);\\n\\n            uint tokenTotal = mb.add(ib).add(rb).add(pb);\\n\\n            balances[i] = tokenTotal.mul(contributionByCurKol).div(allContributionByKol);\\n        }\\n\\n        return (tokens.tokenList,balances);\\n    }\\n\\n    function kolClaim(address pool) external {\\n        if (_isClosePool(pool)) {\\n            require(crpFactory.isCrp(pool), \\\"ERR_INVALID_POOL_ADDRESS\\\");\\n            require(ICRPPool(pool).isCompletedCollect(), \\\"ERR_NOT_COMPLETED_COLLECT\\\");\\n            (address[] memory tokens, uint[] memory amounts) = this.getKolReward(pool, msg.sender);\\n\\n            ClaimTokens storage kolClaimedInfo = kolHasClaimed[pool][msg.sender];\\n\\n            // update length\\n            kolClaimedInfo.tokens = tokens;\\n            uint amountsLen = kolClaimedInfo.amounts.length;\\n            uint tokensLen = tokens.length;\\n\\n            if(amountsLen != tokensLen){\\n                uint delta = tokensLen - amountsLen;\\n                for(uint i; i < delta; i++){\\n                    kolClaimedInfo.amounts.push(0);\\n                }\\n            }\\n            \\n            address receiver = address(msg.sender).isContract()? IDSProxy(msg.sender).owner(): msg.sender;\\n            for(uint i; i< tokens.length; i++) {\\n                uint b = amounts[i] - kolClaimedInfo.amounts[i];\\n                IERC20(tokens[i]).safeTransfer(receiver, b);\\n                kolClaimedInfo.amounts[i] = kolClaimedInfo.amounts[i].add(b);\\n                emit KolClaim(msg.sender,receiver,tokens[i],b,block.timestamp);\\n            }\\n        }\\n    }\\n\\n    // manager claim\\n    function managerClaim(address pool) external {\\n        // try  {} catch {}\\n        if (_isClosePool(pool)) {\\n            bool isManager = IDesynOwnable(pool).adminList(msg.sender) || IDesynOwnable(pool).getController() == msg.sender;\\n            bool isCollectSuccee = ICRPPool(pool).isCompletedCollect();\\n            require(isCollectSuccee, \\\"ERR_NOT_COMPLETED_COLLECT\\\");\\n            require(isManager, \\\"ERR_NOT_MANAGER\\\");\\n            (address[] memory tokens, uint[] memory amounts) = this.getUnManagerReward(pool);\\n            poolsStatus[pool].couldManagerClaim = false;\\n\\n            ClaimTokens storage manageHasClimed = manageHasClaimed[pool];\\n\\n            // update length\\n            manageHasClimed.tokens = tokens;\\n            uint amountsLen = manageHasClimed.amounts.length;\\n            uint tokensLen = tokens.length;\\n\\n            if(amountsLen != tokensLen){\\n                uint delta = tokensLen - amountsLen;\\n                for(uint i; i < delta; i++){\\n                    manageHasClimed.amounts.push(0);\\n                }\\n            }\\n            // update tokens\\n            for(uint i; i< tokens.length; i++){\\n                address t = tokens[i];\\n                _transferHandle(pool, t, amounts[i]);\\n                // _addManagerClaimRecord(pool, t, amounts[i]);\\n                manageHasClimed.amounts[i] = manageHasClimed.amounts[i].add(amounts[i]);\\n            }\\n        }\\n    }\\n\\n    // function managerClaimRecordList(address pool) external view returns (ClaimRecordInfo[] memory claimRecordInfos) {\\n    //     uint num = recordNumber[pool];\\n    //     ClaimRecordInfo[] memory records = new ClaimRecordInfo[](num);\\n    //     for (uint i = 1; i < num + 1; i++) {\\n    //         ClaimRecordInfo memory record;\\n    //         record = recordList[pool][i];\\n    //         records[i.sub(1)] = record;\\n    //     }\\n    //     return records;\\n    // }\\n\\n    function getManagerReward(address pool) external view returns (address[] memory, uint[] memory) {\\n        (address[] memory totalTokens, uint[] memory totalFee) = this.getPoolReward(pool);\\n        (, uint[] memory kolFee) = this.getKolsReward(pool);\\n\\n        uint len = totalTokens.length;\\n        uint[] memory balances = new uint[](len);\\n\\n        for(uint i; i<len; i++){\\n            balances[i] = totalFee[i] - kolFee[i];\\n        }\\n\\n        return (totalTokens, balances);\\n    }\\n    // for all manager\\n    function getUnManagerReward(address pool) external returns (address[] memory, uint[] memory) {\\n        (address[] memory totalTokens, uint[] memory totalAmounts) = this.getManagerReward(pool);\\n        ClaimTokens storage manageHasClimed = manageHasClaimed[pool];\\n\\n        // update length\\n        manageHasClimed.tokens = totalTokens;\\n        uint amountsLen = manageHasClimed.amounts.length;\\n        uint tokensLen = totalTokens.length;\\n        if(amountsLen != tokensLen){\\n            uint delta = tokensLen - amountsLen;\\n            for(uint i; i < delta; i++){\\n                manageHasClimed.amounts.push(0);\\n            }\\n        }\\n\\n        uint len = totalTokens.length;\\n        uint[] memory balances = new uint[](len);\\n        for(uint i; i < totalTokens.length; i++){\\n            balances[i] = totalAmounts[i] - manageHasClimed.amounts[i];\\n        }        \\n\\n        return (totalTokens,balances);\\n    }\\n\\n    function getPoolFeeTypes(address pool) external view returns(FeeTypesTokens memory result){      \\n        PoolTokens memory poolInfo = poolsTokens[pool];\\n        result.tokenList = poolInfo.tokenList;\\n        result.managerAmount = poolInfo.managerAmount;\\n        result.issueAmount = poolInfo.issueAmount;\\n        result.redeemAmount = poolInfo.redeemAmount;\\n        result.perfermanceAmount = poolInfo.perfermanceAmount;\\n    }\\n    \\n    function getManagerFeeTypes(address pool) external view returns(FeeTypesTokens memory result){     \\n        result = this.getPoolFeeTypes(pool);\\n        FeeTypesTokens memory allKolFee = _getKolsFeeTypes(pool); \\n\\n        uint len = result.tokenList.length;\\n        for(uint i; i< len; i++){\\n            result.managerAmount[i] = result.managerAmount[i].sub(allKolFee.managerAmount[i]);\\n            result.issueAmount[i] = result.issueAmount[i].sub(allKolFee.issueAmount[i]);\\n            result.redeemAmount[i] = result.redeemAmount[i].sub(allKolFee.redeemAmount[i]);\\n            result.perfermanceAmount[i] = result.perfermanceAmount[i].sub(allKolFee.perfermanceAmount[i]);\\n        }\\n    }\\n  \\n    function _getKolsFeeTypes(address pool) internal view returns(FeeTypesTokens memory result) {\\n        PoolTokens memory poolInfo = poolsTokens[pool];\\n        uint len = poolInfo.tokenList.length;\\n        result.tokenList = poolInfo.tokenList;\\n        \\n        EnumerableSet.AddressSet storage list = kolsList[pool];\\n        uint kolLen = list.length();\\n        // init result\\n        result.managerAmount = new uint[](len);\\n        result.issueAmount = new uint[](len);\\n        result.redeemAmount = new uint[](len);\\n        result.perfermanceAmount = new uint[](len);\\n\\n        for(uint types; types<4; types++){\\n            for(uint i; i<len; i++){ \\n                for (uint j; j < kolLen; j++) {\\n                    if(types == 0)\\n                        result.managerAmount[i] = result.managerAmount[i].add(_computeKolTotalReward(pool, list.at(j), 0, i));\\n                    if(types == 1)\\n                        result.issueAmount[i] = result.issueAmount[i].add(_computeKolTotalReward(pool, list.at(j), 1, i));\\n                    if(types == 2)\\n                        result.redeemAmount[i] = result.redeemAmount[i].add(_computeKolTotalReward(pool, list.at(j), 2, i));\\n                    if(types == 3)\\n                        result.perfermanceAmount[i] = result.perfermanceAmount[i].add(_computeKolTotalReward(pool, list.at(j), 3, i));\\n                }    \\n            }      \\n        }\\n    }\\n\\n    function getKolFeeType(address pool, address kol)external view returns(FeeTypesTokens memory result) {\\n        PoolTokens memory poolInfo = poolsTokens[pool];\\n        result.tokenList = poolInfo.tokenList;\\n        \\n        uint len = poolInfo.tokenList.length;\\n        // init result\\n        result.managerAmount = new uint[](len);\\n        result.issueAmount = new uint[](len);\\n        result.redeemAmount = new uint[](len);\\n        result.perfermanceAmount = new uint[](len);\\n        // more for to save gas\\n        for(uint i; i<len; i++){ \\n            result.managerAmount[i] = result.managerAmount[i].add(_computeKolTotalReward(pool, kol, 0, i));\\n            result.issueAmount[i] = result.issueAmount[i].add(_computeKolTotalReward(pool, kol, 1, i));\\n            result.redeemAmount[i] = result.redeemAmount[i].add(_computeKolTotalReward(pool, kol, 2, i));\\n            result.perfermanceAmount[i] = result.perfermanceAmount[i].add(_computeKolTotalReward(pool, kol, 3, i));\\n        }      \\n    }\\n\\n    // TODO\\n    // function managerClaimList(address pool) external view returns (ClaimTokenInfo[] memory) {\\n    //     address[] memory tokens = kolTokenList[pool];\\n    //     ClaimTokenInfo[] memory tokenList;\\n    //     for(uint i; i<tokens.length; i++){\\n    //         ClaimTokenInfo memory tTemp = _newClaimTokenInfo(pool,tokens[i]);\\n    //         tokenList[i] = tTemp; // for front-end call same as vault\\n    //     }\\n    //     return tokenList;\\n    // }\\n\\n    function getKolsReward(address pool) external view returns (address[] memory, uint[] memory) {\\n        EnumerableSet.AddressSet storage list = kolsList[pool];\\n        uint len = list.length();\\n        address[] memory tokens = poolsTokens[pool].tokenList;\\n        uint[] memory balances = new uint[](tokens.length);\\n        for (uint i = 0; i < len; i++) {\\n            (, uint[] memory singleReward) = this.getKolReward(pool, list.at(i));\\n            for(uint k; k < singleReward.length; k++){\\n                balances[k] = balances[k] + singleReward[k];\\n            }\\n        }\\n\\n        return (tokens,balances);\\n    }\\n\\n    function getUnKolReward(address pool, address kol) external returns (address[] memory,uint[] memory) {\\n        (address[] memory totalTokens, uint[] memory totalReward) = this.getKolReward(pool, kol);\\n\\n        ClaimTokens storage singleKolHasReward = kolHasClaimed[pool][msg.sender];\\n        // update length\\n        singleKolHasReward.tokens = totalTokens;\\n        uint amountsLen = singleKolHasReward.amounts.length;\\n        uint tokensLen = totalTokens.length;\\n        if(amountsLen != tokensLen){\\n            uint delta = tokensLen - amountsLen;\\n            for(uint i; i < delta; i++){\\n                singleKolHasReward.amounts.push(0);\\n            }\\n        }\\n\\n        uint len = totalTokens.length;\\n        uint[] memory balances = new uint[](len);\\n        for(uint i; i<len; i++){\\n            balances[i] = totalReward[i] - singleKolHasReward.amounts[i];\\n        }\\n\\n        return (totalTokens, balances);\\n    }\\n\\n    function recordTokenInfo(\\n        address kol,\\n        address user,\\n        address[] calldata poolTokens,\\n        uint[] calldata tokensAmount\\n    ) external {\\n        address pool = msg.sender;\\n        uint len = poolTokens.length;\\n        require(len == tokensAmount.length, \\\"ERR_TOKEN_LENGTH_NOT_MATCH\\\");\\n        require(crpFactory.isCrp(pool), \\\"ERR_INVALID_POOL_ADDRESS\\\");\\n        // if (kolTokenList[pool].length == 0) {\\n        //     kolTokenList[pool] = poolTokens;\\n        // }\\n        address newKol = userKolList[pool][user];\\n        if (userKolList[pool][user] == address(0)) {\\n            userKolList[pool][user] = kol;\\n            if (!kolsList[pool].contains(kol)) {\\n                kolsList[pool].addValue(kol);\\n            }\\n            newKol = kol;\\n        }\\n        require(newKol != address(0), \\\"ERR_INVALID_KOL_ADDRESS\\\");\\n        //total amount record\\n        poolInviteTotal[pool] = poolInviteTotal[pool].add(tokensAmount[0]);\\n        uint[] memory totalAmounts = new uint[](len);\\n        for (uint i; i < len; i++) {\\n            if (kolTotalAmountList[pool][newKol].length == 0) {\\n                totalAmounts[i] = tokensAmount[i];\\n            } else {\\n                totalAmounts[i] = tokensAmount[i].add(kolTotalAmountList[pool][newKol][i]);\\n            }\\n        }\\n        kolTotalAmountList[pool][newKol] = totalAmounts;\\n        //kol user info record\\n        KolUserInfo[] storage userInfoArray = kolUserInfo[pool][newKol];\\n        uint index = userIndexList[pool][user];\\n        if (index == 0) {\\n            KolUserInfo memory userInfo;\\n            userInfo.userAdr = user;\\n            userInfo.userAmount = tokensAmount;\\n            userInfoArray.push(userInfo);\\n            userIndexList[pool][user] = userInfoArray.length;\\n        } else {\\n            KolUserInfo storage userInfo = kolUserInfo[pool][newKol][index - 1];\\n            for (uint a = 0; a < userInfo.userAmount.length; a++) {\\n                userInfo.userAmount[a] = userInfo.userAmount[a].add(tokensAmount[a]);\\n            }\\n        }\\n    }\\n\\n    function setPoolParams(address pool, SmartPoolManager.KolPoolParams memory _poolParams) external onlyCrpFactory {\\n        PoolStatus storage status = poolsStatus[pool];\\n        require(crpFactory.isCrp(pool), \\\"ERR_INVALID_POOL_ADDRESS\\\");\\n        require(!status.isSetParams, \\\"ERR_HAS_SETED\\\");\\n\\n        status.isSetParams = true;\\n        status.kolPoolConfig = _poolParams;\\n    }\\n\\n    function getKolsAdr(address pool) external view returns (address[] memory) {\\n        return kolsList[pool].values();\\n    }\\n\\n    function setBlackList(address pool, bool bools) external onlyOwner _logs_ {\\n        poolsStatus[pool].isBlackList = bools;\\n    }\\n\\n    function setCrpFactory(address adr) external onlyOwner _logs_ {\\n        crpFactory = ICRPFactory(adr);\\n    }\\n\\n    function adminClaim(\\n        address token,\\n        address user,\\n        uint amount\\n    ) external onlyOwner {\\n        IERC20(token).safeTransfer(user, amount);\\n    }\\n\\n    function getBNB() external payable onlyOwner {\\n        msg.sender.transfer(address(this).balance);\\n    }\\n\\n    function setVaultAdr(address adr) external onlyOwner _logs_ {\\n        vaultAddress = adr;\\n        // emit LogVaultAdr(adr, msg.sender);\\n    }\\n\\n    // internal function\\n    // function _initPoolController(address pool) internal {\\n    //     if (poolManager[pool] == address(0)) {\\n    //         poolManager[pool] = ICRPPool(pool).getController();\\n    //     }\\n    // }\\n\\n    function _updatePool(\\n        address pool,\\n        uint types,\\n        address[] memory tokenIn,\\n        uint[] memory amountIn\\n    ) internal {\\n        PoolTokens storage tokens = poolsTokens[pool];\\n\\n        for(uint i; i < tokenIn.length; i++){\\n            address t = tokenIn[i];\\n            uint b = amountIn[i];\\n            uint index = tokens.tokenIndex[t];\\n\\n            // update token and init value\\n            bool tokenHasNoInit = tokens.tokenList.length == 0 ? true : index == 0 && tokens.tokenList[0] != t;\\n            if(tokenHasNoInit){\\n                tokens.tokenList.push(t);\\n                tokens.managerAmount.push(0);\\n                tokens.issueAmount.push(0);\\n                tokens.redeemAmount.push(0);\\n                tokens.perfermanceAmount.push(0);\\n                tokens.tokenIndex[t] = tokens.tokenList.length -1;\\n                index = tokens.tokenIndex[t];\\n            }\\n\\n            // update valut\\n            if(types == 0) tokens.managerAmount[index] = tokens.managerAmount[index].add(b);\\n            if(types == 1) tokens.issueAmount[index] = tokens.issueAmount[index].add(b);\\n            if(types == 2) tokens.redeemAmount[index] = tokens.redeemAmount[index].add(b);\\n            if(types == 3) tokens.perfermanceAmount[index] = tokens.perfermanceAmount[index].add(b);\\n        }\\n    }\\n\\n    function _transferHandle(\\n        address pool,\\n        address t,\\n        uint balance\\n    ) internal {\\n        address[] memory managerAddressList = IDesynOwnable(pool).getOwners();\\n        uint[] memory ownerPercentage = IDesynOwnable(pool).getOwnerPercentage();\\n        uint allOwnerPercentage = IDesynOwnable(pool).allOwnerPercentage();\\n\\n        for (uint k = 0; k < managerAddressList.length; k++) {\\n            address reciver = address(managerAddressList[k]).isContract()? IDSProxy(managerAddressList[k]).owner(): managerAddressList[k];\\n            uint b = balance.mul(ownerPercentage[k]).div(allOwnerPercentage);\\n            IERC20(t).safeTransfer(reciver, b);\\n            emit ManagerClaim(msg.sender, reciver,t,b,block.timestamp);\\n        }\\n        emit ManagersClaim(msg.sender,pool,t,balance,block.timestamp);\\n    }\\n\\n    // function _addManagerClaimRecord(address pool, address t, uint amount) internal {\\n    //     uint newIndex = recordNumber[pool].add(1);\\n\\n    //     ClaimTokenInfo memory recordToken;\\n    //     recordToken.decimals = IERC20(t).decimals();\\n    //     recordToken.token = t;\\n    //     recordToken.amount = amount;\\n        \\n    //     recordNumber[pool] = newIndex;\\n    //     recordList[pool][newIndex].time = block.timestamp;\\n    //     recordList[pool][newIndex].tokens.push(recordToken);        \\n    // }  \\n\\n    function _levelJudge(uint amount, SmartPoolManager.feeParams memory _feeParams) internal pure returns (uint) {\\n        if (_feeParams.firstLevel.level <= amount && amount < _feeParams.secondLevel.level) return _feeParams.firstLevel.ratio;\\n        if (_feeParams.secondLevel.level <= amount && amount < _feeParams.thirdLevel.level) return _feeParams.secondLevel.ratio;\\n        if (_feeParams.thirdLevel.level <= amount && amount < _feeParams.fourLevel.level) return _feeParams.thirdLevel.ratio;\\n        if (_feeParams.fourLevel.level <= amount) return _feeParams.fourLevel.ratio;\\n        return 0;\\n    }\\n\\n    function _isClosePool(address pool) internal view returns (bool) {\\n        return ICRPPool(pool).etype() == ICRPPool.Etypes.CLOSED;\\n    }\\n\\n    function _computeKolTotalReward(\\n        address pool,\\n        address kol,\\n        uint types,\\n        uint tokenIndex\\n    ) internal view returns (uint) {\\n        uint kolTotalAmount = kolTotalAmountList[pool][kol].length > 0 ? kolTotalAmountList[pool][kol][0] : 0;\\n        SmartPoolManager.KolPoolParams memory params = poolsStatus[pool].kolPoolConfig;\\n        uint totalFee;\\n\\n        PoolTokens memory tokens = poolsTokens[pool];\\n\\n        if(kolTotalAmount == 0) return 0;\\n\\n        uint allKolTotalAmount = poolInviteTotal[pool];\\n        \\n        if (types == 0 && tokens.managerAmount.length > 0) \\n            totalFee = tokens.managerAmount[tokenIndex].mul(_levelJudge(kolTotalAmount, params.managerFee)).mul(kolTotalAmount).div(allKolTotalAmount).div(RATIO_TOTAL);\\n        \\n        if (types == 1 && tokens.issueAmount.length > 0) \\n            totalFee = tokens.issueAmount[tokenIndex].mul(_levelJudge(kolTotalAmount, params.issueFee)).mul(kolTotalAmount).div(allKolTotalAmount).div(RATIO_TOTAL);\\n        \\n        if (types == 2 && tokens.redeemAmount.length > 0) \\n            totalFee = tokens.redeemAmount[tokenIndex].mul(_levelJudge(kolTotalAmount, params.redeemFee)).mul(kolTotalAmount).div(allKolTotalAmount).div(RATIO_TOTAL);\\n        \\n        if (types == 3 && tokens.perfermanceAmount.length > 0) \\n            totalFee = tokens.perfermanceAmount[tokenIndex].mul(_levelJudge(kolTotalAmount, params.perfermanceFee)).mul(kolTotalAmount).div(allKolTotalAmount).div(RATIO_TOTAL);\\n        \\n        return totalFee;\\n    }\\n\\n    modifier onlyCrpFactory() {\\n        require(address(crpFactory) == msg.sender, \\\"ERR_NOT_CRP_FACTORY\\\");\\n        _;\\n    }\\n\\n    modifier onlyVault() {\\n        require(vaultAddress == msg.sender, \\\"ERR_NOT_CONTROLLER\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xc2317a00a983fb8015dd0fae9fe367ff317da327b7d572bb01d90a58bdb5696e\"},\"contracts/interfaces/IBFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\nimport \\\"../libraries/SmartPoolManager.sol\\\";\\n\\ninterface IBPool {\\n    function rebind(\\n        address token,\\n        uint balance,\\n        uint denorm\\n    ) external;\\n\\n    function rebindSmart(\\n        address tokenA,\\n        address tokenB,\\n        uint deltaWeight,\\n        uint deltaBalance,\\n        bool isSoldout,\\n        uint minAmountOut\\n    ) external;\\n\\n    function execute(\\n        address _target,\\n        uint _value,\\n        bytes calldata _data\\n    ) external returns (bytes memory _returnValue);\\n\\n    function bind(\\n        address token,\\n        uint balance,\\n        uint denorm\\n    ) external;\\n\\n    function unbind(address token) external;\\n\\n    function unbindPure(address token) external;\\n\\n    function isBound(address token) external view returns (bool);\\n\\n    function getBalance(address token) external view returns (uint);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function getSwapFee() external view returns (uint);\\n\\n    function isPublicSwap() external view returns (bool);\\n\\n    function getDenormalizedWeight(address token) external view returns (uint);\\n\\n    function getTotalDenormalizedWeight() external view returns (uint);\\n\\n    function EXIT_FEE() external view returns (uint);\\n\\n    function getCurrentTokens() external view returns (address[] memory tokens);\\n\\n    function setController(address owner) external;\\n}\\n\\ninterface IBFactory {\\n    function newLiquidityPool() external returns (IBPool);\\n\\n    function setBLabs(address b) external;\\n\\n    function collect(IBPool pool) external;\\n\\n    function isBPool(address b) external view returns (bool);\\n\\n    function getBLabs() external view returns (address);\\n\\n    function getSwapRouter() external view returns (address);\\n\\n    function getVault() external view returns (address);\\n\\n    function getUserVault() external view returns (address);\\n\\n    function getVaultAddress() external view returns (address);\\n\\n    function getOracleAddress() external view returns (address);\\n\\n    function getManagerOwner() external view returns (address);\\n\\n    function isTokenWhitelistedForVerify(uint sort, address token) external view returns (bool);\\n\\n    function isTokenWhitelistedForVerify(address token) external view returns (bool);\\n\\n    function getModuleStatus(address etf, address module) external view returns (bool);\\n\\n    function isPaused() external view returns (bool);\\n}\\n\\ninterface IVault {\\n    function depositManagerToken(address[] calldata poolTokens, uint[] calldata tokensAmount) external;\\n\\n    function depositIssueRedeemPToken(\\n        address[] calldata poolTokens,\\n        uint[] calldata tokensAmount,\\n        uint[] calldata tokensAmountP,\\n        bool isPerfermance\\n    ) external;\\n\\n    function managerClaim(address pool) external;\\n\\n    function getManagerClaimBool(address pool) external view returns (bool);\\n}\\n\\ninterface IUserVault {\\n    function recordTokenInfo(\\n        address kol,\\n        address user,\\n        address[] calldata poolTokens,\\n        uint[] calldata tokensAmount\\n    ) external;\\n}\\n\\ninterface Oracles {\\n    function getPrice(address tokenAddress) external returns (uint price);\\n\\n    function getAllPrice(address[] calldata poolTokens, uint[] calldata tokensAmount) external returns (uint);\\n}\",\"keccak256\":\"0xc2cc32bdf691ceddab7a647a98bd481adcf9ae8393d8663a916bf032ef0dbbc6\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IConfigurableRightsPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Interface declarations\\n\\n// Introduce to avoid circularity (otherwise, the CRP and SmartPoolManager include each other)\\n// Removing circularity allows flattener tools to work, which enables Etherscan verification\\ninterface IConfigurableRightsPool {\\n    function mintPoolShareFromLib(uint amount) external;\\n\\n    function pushPoolShareFromLib(address to, uint amount) external;\\n\\n    function pullPoolShareFromLib(address from, uint amount) external;\\n\\n    function burnPoolShareFromLib(uint amount) external;\\n\\n    function balanceOf(address account) external view returns (uint);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function getController() external view returns (address);\\n\\n    function vaultAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0x1326889b57f63cc031e7c9e383b0fd3b172a9b86eb623cf0faba32c0768c4ec4\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IDSProxy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\ninterface IDSProxy {\\n    function owner() external view returns(address);\\n}\",\"keccak256\":\"0xe330359819e40d60365ba92005c9b8b1eccdf18ae583352a0cff0a2a4cf7ff14\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Interface declarations\\n\\n/* solhint-disable func-order */\\n\\ninterface IERC20 {\\n    // Emitted when the allowance of a spender for an owner is set by a call to approve.\\n    // Value is the new allowance\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n\\n    // Emitted when value tokens are moved from one account (from) to another (to).\\n    // Note that value may be zero\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    // Returns the amount of tokens in existence\\n    function totalSupply() external view returns (uint);\\n\\n    // Returns the amount of tokens owned by account\\n    function balanceOf(address account) external view returns (uint);\\n\\n    // Returns the decimals of tokens\\n    function decimals() external view returns (uint8);\\n\\n    function symbol() external view returns (string memory);\\n\\n    // Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner\\n    // through transferFrom. This is zero by default\\n    // This value changes when approve or transferFrom are called\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    // Sets amount as the allowance of spender over the caller\\u2019s tokens\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits an Approval event.\\n    function approve(address spender, uint amount) external returns (bool);\\n\\n    // Moves amount tokens from the caller\\u2019s account to recipient\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits a Transfer event.\\n    function transfer(address recipient, uint amount) external returns (bool);\\n\\n    // Moves amount tokens from sender to recipient using the allowance mechanism\\n    // Amount is then deducted from the caller\\u2019s allowance\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits a Transfer event\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xfe22b6d6029b400b9cce7f9b39c546f99cd6922b2fd926e480e2b4d476ab26f8\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            codehash := extcodehash(account)\\n        }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint weiValue,\\n        string memory errorMessage\\n    ) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2f31de87a6037a6a1ab4cefb32f22352df92b082dde0c182801bf421bacc303c\",\"license\":\"agpl-3.0\"},\"contracts/libraries/DesynConstants.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n/**\\n * @author Desyn Labs\\n * @title Put all the constants in one place\\n */\\n\\nlibrary DesynConstants {\\n    // State variables (must be constant in a library)\\n\\n    // B \\\"ONE\\\" - all math is in the \\\"realm\\\" of 10 ** 18;\\n    // where numeric 1 = 10 ** 18\\n    uint public constant BONE = 10**18;\\n    uint public constant MIN_WEIGHT = BONE;\\n    uint public constant MAX_WEIGHT = BONE * 50;\\n    uint public constant MAX_TOTAL_WEIGHT = BONE * 50;\\n    uint public constant MIN_BALANCE = 0;\\n    uint public constant MAX_BALANCE = BONE * 10**12;\\n    uint public constant MIN_POOL_SUPPLY = BONE * 100;\\n    uint public constant MAX_POOL_SUPPLY = BONE * 10**9;\\n    uint public constant MIN_FEE = BONE / 10**6;\\n    uint public constant MAX_FEE = BONE / 10;\\n    //Fee Set\\n    uint public constant MANAGER_MIN_FEE = 0;\\n    uint public constant MANAGER_MAX_FEE = BONE / 10;\\n    uint public constant ISSUE_MIN_FEE = BONE / 1000;\\n    uint public constant ISSUE_MAX_FEE = BONE / 10;\\n    uint public constant REDEEM_MIN_FEE = 0;\\n    uint public constant REDEEM_MAX_FEE = BONE / 10;\\n    uint public constant PERFERMANCE_MIN_FEE = 0;\\n    uint public constant PERFERMANCE_MAX_FEE = BONE / 2;\\n    // EXIT_FEE must always be zero, or ConfigurableRightsPool._pushUnderlying will fail\\n    uint public constant EXIT_FEE = 0;\\n    uint public constant MAX_IN_RATIO = BONE / 2;\\n    uint public constant MAX_OUT_RATIO = (BONE / 3) + 1 wei;\\n    // Must match BConst.MIN_BOUND_TOKENS and BConst.MAX_BOUND_TOKENS\\n    uint public constant MIN_ASSET_LIMIT = 1;\\n    uint public constant MAX_ASSET_LIMIT = 16;\\n    uint public constant MAX_UINT = uint(-1);\\n    uint public constant MAX_COLLECT_PERIOD = 60 days;\\n}\\n\",\"keccak256\":\"0xbc396253a5541cd3cc080ca207dfdd2d2bdf963de26e005db36bd752524c1d66\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/DesynSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Imports\\n\\nimport \\\"./DesynConstants.sol\\\";\\n\\n/**\\n * @author Desyn Labs\\n * @title SafeMath - wrap Solidity operators to prevent underflow/overflow\\n * @dev badd and bsub are basically identical to OpenZeppelin SafeMath; mul/div have extra checks\\n */\\nlibrary DesynSafeMath {\\n    /**\\n     * @notice Safe addition\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev if we are adding b to a, the resulting sum must be greater than a\\n     * @return - sum of operands; throws if overflow\\n     */\\n    function badd(uint a, uint b) internal pure returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, \\\"ERR_ADD_OVERFLOW\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned subtraction\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Do a signed subtraction, and check that it produces a positive value\\n     *      (i.e., a - b is valid if b <= a)\\n     * @return - a - b; throws if underflow\\n     */\\n    function bsub(uint a, uint b) internal pure returns (uint) {\\n        (uint c, bool negativeResult) = bsubSign(a, b);\\n        require(!negativeResult, \\\"ERR_SUB_UNDERFLOW\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Safe signed subtraction\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Do a signed subtraction\\n     * @return - difference between a and b, and a flag indicating a negative result\\n     *           (i.e., a - b if a is greater than or equal to b; otherwise b - a)\\n     */\\n    function bsubSign(uint a, uint b) internal pure returns (uint, bool) {\\n        if (b <= a) {\\n            return (a - b, false);\\n        } else {\\n            return (b - a, true);\\n        }\\n    }\\n\\n    /**\\n     * @notice Safe multiplication\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Multiply safely (and efficiently), rounding down\\n     * @return - product of operands; throws if overflow or rounding error\\n     */\\n    function bmul(uint a, uint b) internal pure returns (uint) {\\n        // Gas optimization (see github.com/OpenZeppelin/openzeppelin-contracts/pull/522)\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // Standard overflow check: a/a*b=b\\n        uint c0 = a * b;\\n        require(c0 / a == b, \\\"ERR_MUL_OVERFLOW\\\");\\n\\n        // Round to 0 if x*y < BONE/2?\\n        uint c1 = c0 + (DesynConstants.BONE / 2);\\n        require(c1 >= c0, \\\"ERR_MUL_OVERFLOW\\\");\\n        uint c2 = c1 / DesynConstants.BONE;\\n        return c2;\\n    }\\n\\n    /**\\n     * @notice Safe division\\n     * @param dividend - first operand\\n     * @param divisor - second operand\\n     * @dev Divide safely (and efficiently), rounding down\\n     * @return - quotient; throws if overflow or rounding error\\n     */\\n    function bdiv(uint dividend, uint divisor) internal pure returns (uint) {\\n        require(divisor != 0, \\\"ERR_DIV_ZERO\\\");\\n\\n        // Gas optimization\\n        if (dividend == 0) {\\n            return 0;\\n        }\\n\\n        uint c0 = dividend * DesynConstants.BONE;\\n        require(c0 / dividend == DesynConstants.BONE, \\\"ERR_DIV_INTERNAL\\\"); // bmul overflow\\n\\n        uint c1 = c0 + (divisor / 2);\\n        require(c1 >= c0, \\\"ERR_DIV_INTERNAL\\\"); //  badd require\\n\\n        uint c2 = c1 / divisor;\\n        return c2;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer modulo\\n     * @dev Returns the remainder of dividing two unsigned integers.\\n     *      Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * @param dividend - first operand\\n     * @param divisor - second operand -- cannot be zero\\n     * @return - quotient; throws if overflow or rounding error\\n     */\\n    function bmod(uint dividend, uint divisor) internal pure returns (uint) {\\n        require(divisor != 0, \\\"ERR_MODULO_BY_ZERO\\\");\\n\\n        return dividend % divisor;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer max\\n     * @dev Returns the greater of the two input values\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the maximum of a and b\\n     */\\n    function bmax(uint a, uint b) internal pure returns (uint) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer min\\n     * @dev returns b, if b < a; otherwise returns a\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the lesser of the two input values\\n     */\\n    function bmin(uint a, uint b) internal pure returns (uint) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer average\\n     * @dev Guard against (a+b) overflow by dividing each operand separately\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the average of the two values\\n     */\\n    function baverage(uint a, uint b) internal pure returns (uint) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\\n    }\\n\\n    /**\\n     * @notice Babylonian square root implementation\\n     * @dev (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n     * @param y - operand\\n     * @return z - the square root result\\n     */\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9baf30b98a5f3a8c13ac9c4d5d4b176eabfd936aba8f5172c95b7c568fba68f3\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/EnumerableSet.sol\":{\"content\":\"pragma solidity 0.6.12;\\n\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint toDeleteIndex = valueIndex - 1;\\n            uint lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function addValue(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint index) internal view returns (address) {\\n        return address(uint160(uint(_at(set._inner, index))));\\n    }\\n    \\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\",\"keccak256\":\"0x9e2694c6682ee2dc9921f8cd6b1c7f2e6ce3765654fade5cfc39f4d840afa2c9\"},\"contracts/libraries/SafeApprove.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Imports\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n// Libraries\\n\\n/**\\n * @author PieDAO (ported to Desyn Labs)\\n * @title SafeApprove - set approval for tokens that require 0 prior approval\\n * @dev Perhaps to address the known ERC20 race condition issue\\n *      See https://github.com/crytic/not-so-smart-contracts/tree/master/race_condition\\n *      Some tokens - notably KNC - only allow approvals to be increased from 0\\n */\\nlibrary SafeApprove {\\n    /**\\n     * @notice handle approvals of tokens that require approving from a base of 0\\n     * @param token - the token we're approving\\n     * @param spender - entity the owner (sender) is approving to spend his tokens\\n     * @param amount - number of tokens being approved\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint amount\\n    ) internal returns (bool) {\\n        uint currentAllowance = token.allowance(address(this), spender);\\n\\n        // Do nothing if allowance is already set to this value\\n        if (currentAllowance == amount) {\\n            return true;\\n        }\\n\\n        // If approval is not zero reset it to zero first\\n        if (currentAllowance != 0) {\\n            token.approve(spender, 0);\\n        }\\n\\n        // do the actual approval\\n        return token.approve(spender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xa51ebf770f2676085b89b1636688cc086289cfe27f614dfd0c15142535c26752\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\nimport {SafeMath} from \\\"./SafeMath.sol\\\";\\nimport {Address} from \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint value\\n    ) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint value\\n    ) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint value\\n    ) internal {\\n        require((value == 0) || (token.allowance(address(this), spender) == 0), \\\"SafeERC20: approve from non-zero to non-zero allowance\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdb66e9e24513d153d62e792a46c723eeff7ad7c93215a56aa3a27f1143d95ae9\",\"license\":\"MIT\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint a, uint b) internal pure returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint a, uint b) internal pure returns (uint) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint a,\\n        uint b,\\n        string memory errorMessage\\n    ) internal pure returns (uint) {\\n        require(b <= a, errorMessage);\\n        uint c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint a, uint b) internal pure returns (uint) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint a, uint b) internal pure returns (uint) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint a,\\n        uint b,\\n        string memory errorMessage\\n    ) internal pure returns (uint) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint a, uint b) internal pure returns (uint) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint a,\\n        uint b,\\n        string memory errorMessage\\n    ) internal pure returns (uint) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x7ce3fd7d17047f684821e1a20b4f5989630f6755a377b12c087dfde359f710d6\",\"license\":\"agpl-3.0\"},\"contracts/libraries/SmartPoolManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Needed to pass in structs\\npragma experimental ABIEncoderV2;\\n\\n// Imports\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IConfigurableRightsPool.sol\\\";\\nimport \\\"../interfaces/IBFactory.sol\\\"; // unused\\nimport \\\"./DesynSafeMath.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./SafeApprove.sol\\\";\\n\\n/**\\n * @author Desyn Labs\\n * @title Factor out the weight updates\\n */\\nlibrary SmartPoolManager {\\n    using SafeApprove for IERC20;\\n    using DesynSafeMath for uint;\\n    using SafeMath for uint;\\n\\n    //kol pool params\\n    struct levelParams {\\n        uint level;\\n        uint ratio;\\n    }\\n\\n    struct feeParams {\\n        levelParams firstLevel;\\n        levelParams secondLevel;\\n        levelParams thirdLevel;\\n        levelParams fourLevel;\\n    }\\n    struct KolPoolParams {\\n        feeParams managerFee;\\n        feeParams issueFee;\\n        feeParams redeemFee;\\n        feeParams perfermanceFee;\\n    }\\n\\n    // Type declarations\\n    enum Etypes {\\n        OPENED,\\n        CLOSED\\n    }\\n\\n    enum Period {\\n        HALF,\\n        ONE,\\n        TWO\\n    }\\n\\n    // updateWeight and pokeWeights are unavoidably long\\n    /* solhint-disable function-max-lines */\\n    struct Status {\\n        uint collectPeriod;\\n        uint collectEndTime;\\n        uint closurePeriod;\\n        uint closureEndTime;\\n        uint upperCap;\\n        uint floorCap;\\n        uint managerFee;\\n        uint redeemFee;\\n        uint issueFee;\\n        uint perfermanceFee;\\n        uint startClaimFeeTime;\\n    }\\n\\n    struct PoolParams {\\n        // Desyn Pool Token (representing shares of the pool)\\n        string poolTokenSymbol;\\n        string poolTokenName;\\n        // Tokens inside the Pool\\n        address[] constituentTokens;\\n        uint[] tokenBalances;\\n        uint[] tokenWeights;\\n        uint swapFee;\\n        uint managerFee;\\n        uint redeemFee;\\n        uint issueFee;\\n        uint perfermanceFee;\\n        Etypes etype;\\n    }\\n\\n    struct PoolTokenRange {\\n        uint bspFloor;\\n        uint bspCap;\\n    }\\n\\n    struct Fund {\\n        uint etfAmount;\\n        uint fundAmount;\\n    }\\n\\n    function initRequire(\\n        uint swapFee,\\n        uint managerFee,\\n        uint issueFee,\\n        uint redeemFee,\\n        uint perfermanceFee,\\n        uint tokenBalancesLength,\\n        uint tokenWeightsLength,\\n        uint constituentTokensLength,\\n        bool initBool\\n    ) external pure {\\n        // We don't have a pool yet; check now or it will fail later (in order of likelihood to fail)\\n        // (and be unrecoverable if they don't have permission set to change it)\\n        // Most likely to fail, so check first\\n        require(!initBool, \\\"Init fail\\\");\\n        require(swapFee >= DesynConstants.MIN_FEE, \\\"ERR_INVALID_SWAP_FEE\\\");\\n        require(swapFee <= DesynConstants.MAX_FEE, \\\"ERR_INVALID_SWAP_FEE\\\");\\n        require(managerFee >= DesynConstants.MANAGER_MIN_FEE, \\\"ERR_INVALID_MANAGER_FEE\\\");\\n        require(managerFee <= DesynConstants.MANAGER_MAX_FEE, \\\"ERR_INVALID_MANAGER_FEE\\\");\\n        require(issueFee >= DesynConstants.ISSUE_MIN_FEE, \\\"ERR_INVALID_ISSUE_MIN_FEE\\\");\\n        require(issueFee <= DesynConstants.ISSUE_MAX_FEE, \\\"ERR_INVALID_ISSUE_MAX_FEE\\\");\\n        require(redeemFee >= DesynConstants.REDEEM_MIN_FEE, \\\"ERR_INVALID_REDEEM_MIN_FEE\\\");\\n        require(redeemFee <= DesynConstants.REDEEM_MAX_FEE, \\\"ERR_INVALID_REDEEM_MAX_FEE\\\");\\n        require(perfermanceFee >= DesynConstants.PERFERMANCE_MIN_FEE, \\\"ERR_INVALID_PERFERMANCE_MIN_FEE\\\");\\n        require(perfermanceFee <= DesynConstants.PERFERMANCE_MAX_FEE, \\\"ERR_INVALID_PERFERMANCE_MAX_FEE\\\");\\n\\n        // Arrays must be parallel\\n        require(tokenBalancesLength == constituentTokensLength, \\\"ERR_START_BALANCES_MISMATCH\\\");\\n        require(tokenWeightsLength == constituentTokensLength, \\\"ERR_START_WEIGHTS_MISMATCH\\\");\\n        // Cannot have too many or too few - technically redundant, since BPool.bind() would fail later\\n        // But if we don't check now, we could have a useless contract with no way to create a pool\\n\\n        require(constituentTokensLength >= DesynConstants.MIN_ASSET_LIMIT, \\\"ERR_TOO_FEW_TOKENS\\\");\\n        require(constituentTokensLength <= DesynConstants.MAX_ASSET_LIMIT, \\\"ERR_TOO_MANY_TOKENS\\\");\\n        // There are further possible checks (e.g., if they use the same token twice), but\\n        // we can let bind() catch things like that (i.e., not things that might reasonably work)\\n    }\\n\\n    /**\\n     * @notice Update the weight of an existing token\\n     * @dev Refactored to library to make CRPFactory deployable\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param tokenA - token to sell\\n     * @param tokenB - token to buy\\n     */\\n    function rebalance(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address tokenA,\\n        address tokenB,\\n        uint deltaWeight,\\n        uint minAmountOut\\n    ) external {\\n        uint currentWeightA = bPool.getDenormalizedWeight(tokenA);\\n        uint currentBalanceA = bPool.getBalance(tokenA);\\n        // uint currentWeightB = bPool.getDenormalizedWeight(tokenB);\\n\\n        require(deltaWeight <= currentWeightA, \\\"ERR_DELTA_WEIGHT_TOO_BIG\\\");\\n\\n        // deltaBalance = currentBalance * (deltaWeight / currentWeight)\\n        uint deltaBalanceA = DesynSafeMath.bmul(currentBalanceA, DesynSafeMath.bdiv(deltaWeight, currentWeightA));\\n\\n        // uint currentBalanceB = bPool.getBalance(tokenB);\\n\\n        // uint deltaWeight = DesynSafeMath.bsub(newWeight, currentWeightA);\\n\\n        // uint newWeightB = DesynSafeMath.bsub(currentWeightB, deltaWeight);\\n        // require(newWeightB >= 0, \\\"ERR_INCORRECT_WEIGHT_B\\\");\\n        bool soldout;\\n        if (deltaWeight == currentWeightA) {\\n            // reduct token A\\n            bPool.unbindPure(tokenA);\\n            soldout = true;\\n        }\\n\\n        // Now with the tokens this contract can bind them to the pool it controls\\n        bPool.rebindSmart(tokenA, tokenB, deltaWeight, deltaBalanceA, soldout, minAmountOut);\\n    }\\n\\n    /**\\n     * @notice Non ERC20-conforming tokens are problematic; don't allow them in pools\\n     * @dev Will revert if invalid\\n     * @param token - The prospective token to verify\\n     */\\n    function verifyTokenCompliance(address token) external {\\n        verifyTokenComplianceInternal(token);\\n    }\\n\\n    /**\\n     * @notice Non ERC20-conforming tokens are problematic; don't allow them in pools\\n     * @dev Will revert if invalid - overloaded to save space in the main contract\\n     * @param tokens - The prospective tokens to verify\\n     */\\n    function verifyTokenCompliance(address[] calldata tokens) external {\\n        for (uint i = 0; i < tokens.length; i++) {\\n            verifyTokenComplianceInternal(tokens[i]);\\n        }\\n    }\\n\\n    function createPoolInternalHandle(IBPool bPool, uint initialSupply) external view {\\n        require(initialSupply >= DesynConstants.MIN_POOL_SUPPLY, \\\"ERR_INIT_SUPPLY_MIN\\\");\\n        require(initialSupply <= DesynConstants.MAX_POOL_SUPPLY, \\\"ERR_INIT_SUPPLY_MAX\\\");\\n        require(bPool.EXIT_FEE() == 0, \\\"ERR_NONZERO_EXIT_FEE\\\");\\n        // EXIT_FEE must always be zero, or ConfigurableRightsPool._pushUnderlying will fail\\n        require(DesynConstants.EXIT_FEE == 0, \\\"ERR_NONZERO_EXIT_FEE\\\");\\n    }\\n\\n    function createPoolHandle(\\n        uint collectPeriod,\\n        uint upperCap,\\n        uint initialSupply\\n    ) external pure {\\n        require(collectPeriod <= DesynConstants.MAX_COLLECT_PERIOD, \\\"ERR_EXCEEDS_FUND_RAISING_PERIOD\\\");\\n        require(upperCap >= initialSupply, \\\"ERR_CAP_BIGGER_THAN_INITSUPPLY\\\");\\n    }\\n\\n    function exitPoolHandle(\\n        uint _endEtfAmount,\\n        uint _endFundAmount,\\n        uint _beginEtfAmount,\\n        uint _beginFundAmount,\\n        uint poolAmountIn,\\n        uint totalEnd\\n    )\\n        external\\n        pure\\n        returns (\\n            uint endEtfAmount,\\n            uint endFundAmount,\\n            uint profitRate\\n        )\\n    {\\n        endEtfAmount = DesynSafeMath.badd(_endEtfAmount, poolAmountIn);\\n        endFundAmount = DesynSafeMath.badd(_endFundAmount, totalEnd);\\n        uint amount1 = DesynSafeMath.bdiv(endFundAmount, endEtfAmount);\\n        uint amount2 = DesynSafeMath.bdiv(_beginFundAmount, _beginEtfAmount);\\n        if (amount1 > amount2) {\\n            profitRate = DesynSafeMath.bdiv(\\n                DesynSafeMath.bmul(DesynSafeMath.bsub(DesynSafeMath.bdiv(endFundAmount, endEtfAmount), DesynSafeMath.bdiv(_beginFundAmount, _beginEtfAmount)), poolAmountIn),\\n                totalEnd\\n            );\\n        }\\n    }\\n\\n    function exitPoolHandleA(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address poolToken,\\n        uint _tokenAmountOut,\\n        uint redeemFee,\\n        uint profitRate,\\n        uint perfermanceFee\\n    )\\n        external\\n        returns (\\n            uint redeemAndPerformanceFeeReceived,\\n            uint finalAmountOut,\\n            uint redeemFeeReceived\\n        )\\n    {\\n        // redeem fee\\n        redeemFeeReceived = DesynSafeMath.bmul(_tokenAmountOut, redeemFee);\\n\\n        // performance fee\\n        uint performanceFeeReceived = DesynSafeMath.bmul(DesynSafeMath.bmul(_tokenAmountOut, profitRate), perfermanceFee);\\n        \\n        // redeem fee and performance fee\\n        redeemAndPerformanceFeeReceived = DesynSafeMath.badd(performanceFeeReceived, redeemFeeReceived);\\n\\n        // final amount the user got\\n        finalAmountOut = DesynSafeMath.bsub(_tokenAmountOut, redeemAndPerformanceFeeReceived);\\n\\n        _pushUnderlying(bPool, poolToken, msg.sender, finalAmountOut);\\n\\n        if (redeemFee != 0 || (profitRate > 0 && perfermanceFee != 0)) {\\n            _pushUnderlying(bPool, poolToken, address(this), redeemAndPerformanceFeeReceived);\\n            IERC20(poolToken).safeApprove(self.vaultAddress(), redeemAndPerformanceFeeReceived);\\n        }\\n    }\\n\\n    function exitPoolHandleB(\\n        IConfigurableRightsPool self,\\n        bool bools,\\n        bool isCompletedCollect,\\n        uint closureEndTime,\\n        uint collectEndTime,\\n        uint _etfAmount,\\n        uint _fundAmount,\\n        uint poolAmountIn\\n    ) external view returns (uint etfAmount, uint fundAmount, uint actualPoolAmountIn) {\\n        actualPoolAmountIn = poolAmountIn;\\n        if (bools) {\\n            bool isCloseEtfCollectEndWithFailure = isCompletedCollect == false && block.timestamp >= collectEndTime;\\n            bool isCloseEtfClosureEnd = block.timestamp >= closureEndTime;\\n            require(isCloseEtfCollectEndWithFailure || isCloseEtfClosureEnd, \\\"ERR_CLOSURE_TIME_NOT_ARRIVED!\\\");\\n\\n            actualPoolAmountIn = self.balanceOf(msg.sender);\\n        }\\n        fundAmount = _fundAmount;\\n        etfAmount = _etfAmount;\\n    }\\n\\n    function joinPoolHandle(\\n        bool canWhitelistLPs,\\n        bool isList,\\n        bool bools,\\n        uint collectEndTime\\n    ) external view {\\n        require(!canWhitelistLPs || isList, \\\"ERR_NOT_ON_WHITELIST\\\");\\n\\n        if (bools) {\\n            require(block.timestamp <= collectEndTime, \\\"ERR_COLLECT_PERIOD_FINISHED!\\\");\\n        }\\n    }\\n\\n    function rebalanceHandle(\\n        IBPool bPool,\\n        bool isCompletedCollect,\\n        bool bools,\\n        uint collectEndTime,\\n        uint closureEndTime,\\n        bool canChangeWeights,\\n        address tokenA,\\n        address tokenB\\n    ) external {\\n        require(bPool.isBound(tokenA), \\\"ERR_TOKEN_NOT_BOUND\\\");\\n        if (bools) {\\n            require(isCompletedCollect, \\\"ERROR_COLLECTION_FAILED\\\");\\n            require(block.timestamp > collectEndTime && block.timestamp < closureEndTime, \\\"ERR_NOT_REBALANCE_PERIOD\\\");\\n        }\\n\\n        if (!bPool.isBound(tokenB)) {\\n            bool returnValue = IERC20(tokenB).safeApprove(address(bPool), DesynConstants.MAX_UINT);\\n            require(returnValue, \\\"ERR_ERC20_FALSE\\\");\\n        }\\n\\n        require(canChangeWeights, \\\"ERR_NOT_CONFIGURABLE_WEIGHTS\\\");\\n        require(tokenA != tokenB, \\\"ERR_TOKENS_SAME\\\");\\n    }\\n\\n    /**\\n     * @notice Join a pool\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param poolAmountOut - number of pool tokens to receive\\n     * @param maxAmountsIn - Max amount of asset tokens to spend\\n     * @return actualAmountsIn - calculated values of the tokens to pull in\\n     */\\n    function joinPool(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        uint poolAmountOut,\\n        uint[] calldata maxAmountsIn,\\n        uint issueFee\\n    ) external view returns (uint[] memory actualAmountsIn) {\\n        address[] memory tokens = bPool.getCurrentTokens();\\n\\n        require(maxAmountsIn.length == tokens.length, \\\"ERR_AMOUNTS_MISMATCH\\\");\\n\\n        uint poolTotal = self.totalSupply();\\n        // Subtract  1 to ensure any rounding errors favor the pool\\n        uint ratio = DesynSafeMath.bdiv(poolAmountOut, DesynSafeMath.bsub(poolTotal, 1));\\n\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        // We know the length of the array; initialize it, and fill it below\\n        // Cannot do \\\"push\\\" in memory\\n        actualAmountsIn = new uint[](tokens.length);\\n\\n        // This loop contains external calls\\n        // External calls are to math libraries or the underlying pool, so low risk\\n        uint issueFeeRate = issueFee.bmul(1000);\\n        for (uint i = 0; i < tokens.length; i++) {\\n            address t = tokens[i];\\n            uint bal = bPool.getBalance(t);\\n            // Add 1 to ensure any rounding errors favor the pool\\n            uint base = bal.badd(1).bmul(poolAmountOut * uint(1000));\\n            uint tokenAmountIn = base.bdiv(poolTotal.bsub(1) * (uint(1000).bsub(issueFeeRate)));\\n\\n            require(tokenAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountIn <= maxAmountsIn[i], \\\"ERR_LIMIT_IN\\\");\\n\\n            actualAmountsIn[i] = tokenAmountIn;\\n        }\\n    }\\n\\n    /**\\n     * @notice Exit a pool - redeem pool tokens for underlying assets\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param poolAmountIn - amount of pool tokens to redeem\\n     * @param minAmountsOut - minimum amount of asset tokens to receive\\n     * @return actualAmountsOut - calculated amounts of each token to pull\\n     */\\n    function exitPool(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        uint poolAmountIn,\\n        uint[] calldata minAmountsOut\\n    ) external view returns (uint[] memory actualAmountsOut) {\\n        address[] memory tokens = bPool.getCurrentTokens();\\n\\n        require(minAmountsOut.length == tokens.length, \\\"ERR_AMOUNTS_MISMATCH\\\");\\n\\n        uint poolTotal = self.totalSupply();\\n\\n        uint ratio = DesynSafeMath.bdiv(poolAmountIn, DesynSafeMath.badd(poolTotal, 1));\\n\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        actualAmountsOut = new uint[](tokens.length);\\n\\n        // This loop contains external calls\\n        // External calls are to math libraries or the underlying pool, so low risk\\n        for (uint i = 0; i < tokens.length; i++) {\\n            address t = tokens[i];\\n            uint bal = bPool.getBalance(t);\\n            // Subtract 1 to ensure any rounding errors favor the pool\\n            uint tokenAmountOut = DesynSafeMath.bmul(ratio, DesynSafeMath.bsub(bal, 1));\\n\\n            require(tokenAmountOut != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountOut >= minAmountsOut[i], \\\"ERR_LIMIT_OUT\\\");\\n\\n            actualAmountsOut[i] = tokenAmountOut;\\n        }\\n    }\\n\\n    // Internal functions\\n    // Check for zero transfer, and make sure it returns true to returnValue\\n    function verifyTokenComplianceInternal(address token) internal {\\n        bool returnValue = IERC20(token).transfer(msg.sender, 0);\\n        require(returnValue, \\\"ERR_NONCONFORMING_TOKEN\\\");\\n    }\\n\\n    function handleTransferInTokens(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address poolToken,\\n        uint actualAmountIn,\\n        uint _actualIssueFee\\n    ) external returns (uint issueFeeReceived) {\\n        issueFeeReceived = DesynSafeMath.bmul(actualAmountIn, _actualIssueFee);\\n        uint amount = DesynSafeMath.bsub(actualAmountIn, issueFeeReceived);\\n\\n        _pullUnderlying(bPool, poolToken, msg.sender, amount);\\n\\n        if (_actualIssueFee != 0) {\\n            bool xfer = IERC20(poolToken).transferFrom(msg.sender, address(this), issueFeeReceived);\\n            require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n\\n            IERC20(poolToken).safeApprove(self.vaultAddress(), issueFeeReceived);\\n        }\\n    }\\n\\n    function handleClaim(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address[] calldata poolTokens,\\n        uint managerFee,\\n        uint timeElapsed,\\n        uint claimPeriod\\n    ) external returns (uint[] memory) {\\n        uint[] memory tokensAmount = new uint[](poolTokens.length);\\n        \\n        for (uint i = 0; i < poolTokens.length; i++) {\\n            address t = poolTokens[i];\\n            uint tokenBalance = bPool.getBalance(t);\\n            uint tokenAmountOut = tokenBalance.bmul(managerFee).mul(timeElapsed).div(claimPeriod).div(12);    \\n            _pushUnderlying(bPool, t, address(this), tokenAmountOut);\\n            IERC20(t).safeApprove(self.vaultAddress(), tokenAmountOut);\\n            tokensAmount[i] = tokenAmountOut;\\n        }\\n        \\n        return tokensAmount;\\n    }\\n\\n    function handleCollectionCompleted(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address[] calldata poolTokens,\\n        uint issueFee\\n    ) external {\\n        if (issueFee != 0) {\\n            uint[] memory tokensAmount = new uint[](poolTokens.length);\\n\\n            for (uint i = 0; i < poolTokens.length; i++) {\\n                address t = poolTokens[i];\\n                uint currentAmount = bPool.getBalance(t);\\n                uint currentAmountFee = DesynSafeMath.bmul(currentAmount, issueFee);\\n\\n                _pushUnderlying(bPool, t, address(this), currentAmountFee);\\n                tokensAmount[i] = currentAmountFee;\\n                IERC20(t).safeApprove(self.vaultAddress(), currentAmountFee);\\n            }\\n\\n            IVault(self.vaultAddress()).depositIssueRedeemPToken(poolTokens, tokensAmount, tokensAmount, false);\\n        }\\n    }\\n\\n    function WhitelistHandle(\\n        bool bool1,\\n        bool bool2,\\n        address adr\\n    ) external pure {\\n        require(bool1, \\\"ERR_CANNOT_WHITELIST_LPS\\\");\\n        require(bool2, \\\"ERR_LP_NOT_WHITELISTED\\\");\\n        require(adr != address(0), \\\"ERR_INVALID_ADDRESS\\\");\\n    }\\n\\n    function _pullUnderlying(\\n        IBPool bPool,\\n        address erc20,\\n        address from,\\n        uint amount\\n    ) internal {\\n        uint tokenBalance = bPool.getBalance(erc20);\\n        uint tokenWeight = bPool.getDenormalizedWeight(erc20);\\n\\n        bool xfer = IERC20(erc20).transferFrom(from, address(this), amount);\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n        bPool.rebind(erc20, DesynSafeMath.badd(tokenBalance, amount), tokenWeight);\\n    }\\n\\n    function _pushUnderlying(\\n        IBPool bPool,\\n        address erc20,\\n        address to,\\n        uint amount\\n    ) internal {\\n        uint tokenBalance = bPool.getBalance(erc20);\\n        uint tokenWeight = bPool.getDenormalizedWeight(erc20);\\n        bPool.rebind(erc20, DesynSafeMath.bsub(tokenBalance, amount), tokenWeight);\\n        bool xfer = IERC20(erc20).transfer(to, amount);\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x8d7b2d4ef8040cb4d0c97acc2f59cc8e65cda40609a52d43bef0759b27ccc784\",\"license\":\"GPL-3.0-or-later\"},\"contracts/openzeppelin/Ownable.sol\":{\"content\":\"pragma solidity >=0.6.0 <0.8.0;\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\",\"keccak256\":\"0x8e1e573ff7c1a90087b58f618ae87f33f04616ec7f959f73db4a3b73ff1ee939\"}},\"version\":1}",
  "bytecode": "0x60806040526064600d553480156200001657600080fd5b5060006200002362000073565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35062000077565b3390565b61572e80620000876000396000f3fe60806040526004361061014b5760003560e01c80631437ac1314610157578063245cd1db1461018e5780634660c5a5146101ae5780635740845d146101d0578063598797ad146101fd57806368092bd91461021d5780636fd4ba9c1461023d578063715018a61461025d5780637234100a1461027257806378a619de146102925780638da5cb5b1461029a5780639155dae7146102bc5780639f1da160146102dc578063a536ebf314610309578063aa93ae4914610329578063b8baccb814610349578063bb408f2d14610369578063bf91b4c914610389578063c0663cc9146103a9578063c1e57622146103c9578063c90361dd146103e9578063c969229c14610416578063cfa11d7e14610436578063d6b485a514610456578063d7256c7014610476578063ebee7bcc14610496578063edb12adf146104c3578063f2fde38b146104e357610152565b3661015257005b600080fd5b34801561016357600080fd5b50610177610172366004614c5d565b610503565b6040516101859291906151b7565b60405180910390f35b34801561019a57600080fd5b506101776101a9366004614c95565b6106e2565b3480156101ba57600080fd5b506101ce6101c9366004614dcb565b610d4e565b005b3480156101dc57600080fd5b506101f06101eb366004614c95565b610f9b565b60405161018591906155c9565b34801561020957600080fd5b506101f0610218366004614c5d565b6113cc565b34801561022957600080fd5b506101ce610238366004614d9e565b6115b0565b34801561024957600080fd5b50610177610258366004614c5d565b61165a565b34801561026957600080fd5b506101ce611803565b34801561027e57600080fd5b5061017761028d366004614c5d565b61188c565b6101ce611a3f565b3480156102a657600080fd5b506102af611aad565b604051610185919061513c565b3480156102c857600080fd5b506101ce6102d7366004614e5c565b611abc565b3480156102e857600080fd5b506102fc6102f7366004614c95565b611b9f565b6040516101859190615590565b34801561031557600080fd5b50610177610324366004614c5d565b611c8f565b34801561033557600080fd5b506101f0610344366004614c5d565b611f59565b34801561035557600080fd5b506101ce610364366004614d5e565b612179565b34801561037557600080fd5b506102af610384366004614c95565b6121d1565b34801561039557600080fd5b506102fc6103a4366004614c5d565b6121f7565b3480156103b557600080fd5b506101776103c4366004614c95565b6122d9565b3480156103d557600080fd5b506101ce6103e4366004614c5d565b61248c565b3480156103f557600080fd5b50610409610404366004614c5d565b612527565b60405161018591906151a4565b34801561042257600080fd5b506101ce610431366004614c5d565b61254b565b34801561044257600080fd5b506102af610451366004614d5e565b61292f565b34801561046257600080fd5b506101ce610471366004614c5d565b612976565b34801561048257600080fd5b506101ce610491366004614ccd565b612a11565b3480156104a257600080fd5b506104b66104b1366004614d5e565b612f32565b604051610185919061565b565b3480156104cf57600080fd5b506101ce6104de366004614c5d565b612f6d565b3480156104ef57600080fd5b506101ce6104fe366004614c5d565b6132cc565b6001600160a01b038116600090815260066020526040812060609182919061052a8261338c565b6001600160a01b0386166000908152600360209081526040918290208054835181840281018401909452808452939450606093909183018282801561059857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161057a575b50505050509050606081516001600160401b03811180156105b857600080fd5b506040519080825280602002602001820160405280156105e2578160200160208202803683370190505b50905060005b838110156106d55760603063245cd1db8a6106038986613397565b6040518363ffffffff1660e01b8152600401610620929190615150565b60006040518083038186803b15801561063857600080fd5b505afa15801561064c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106749190810190614ed3565b91505060005b81518110156106cb5781818151811061068f57fe5b60200260200101518482815181106106a357fe5b6020026020010151018482815181106106b857fe5b602090810291909101015260010161067a565b50506001016105e8565b5090945092505050915091565b6001600160a01b038083166000908152600760209081526040808320938516835292905290812054606091829161071a576000610758565b6001600160a01b0380861660009081526007602090815260408083209388168352929052908120805490919061074c57fe5b90600052602060002001545b9050600081116107835760405162461bcd60e51b815260040161077a9061552a565b60405180910390fd5b61078b6148dc565b506001600160a01b03851660009081526004602081815260409283902083516101408101855260018201546101008201908152600283015461012083015260808083019182528651808801885260038501548152958401548686015260a080840196909652865180880188526005850154815260068501548187015260c080850191909152875180890189526007860154815260088601548188015260e0850152918352865180830188526009850154818301908152600a86015482890152815287518089018952600b8601548152600c860154818801528187015287518089018952600d8601548152600e860154818801528189015287518089018952600f8601548152601086015481880152606082810191909152848701919091528751808401895260118601548184019081526012870154828a015281528851808a018a5260138701548152601487015481890152818801528851808a018a5260158701548152601687015481890152818a01528851808a018a52601787015481526018870154818901528183015284890152875192830188526019850154918301918252601a85015496830196909652815285518087018752601b8401548152601c840154818601528185015285518087018752601d8401548152601e84015481860152818701528551808701909652601f8301548652918301549285019290925280830193909352908101919091526109a161491b565b6001600160a01b0387166000908152600360209081526040918290208251815460c09381028201840190945260a081018481529093919284928491840182828015610a1557602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116109f7575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015610a6d57602002820191906000526020600020905b815481526020019060010190808311610a59575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015610ac557602002820191906000526020600020905b815481526020019060010190808311610ab1575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015610b1d57602002820191906000526020600020905b815481526020019060010190808311610b09575b5050505050815260200160058201805480602002602001604051908101604052809291908181526020018280548015610b7557602002820191906000526020600020905b815481526020019060010190808311610b61575b505050505081525050905060608160000151516001600160401b0381118015610b9d57600080fd5b50604051908082528060200260200182016040528015610bc7578160200160208202803683370190505b506001600160a01b03808a1660009081526005602090815260408083205460078352818420948d168452939091528120805493945091929091908290610c0957fe5b9060005260206000200154905060005b845151811015610d3b576000610c68600d54610c62610c3c8b8b600001516133aa565b89602001518681518110610c4c57fe5b602002602001015161345190919063ffffffff16565b9061348b565b90506000610c93600d54610c62610c838c8c602001516133aa565b8a604001518781518110610c4c57fe5b90506000610cbe600d54610c62610cae8d8d604001516133aa565b8b606001518881518110610c4c57fe5b90506000610ce9600d54610c62610cd98e8e606001516133aa565b8c608001518981518110610c4c57fe5b90506000610d0382610cfd858189896134ca565b906134ca565b9050610d1388610c62838a613451565b898781518110610d1f57fe5b6020908102919091010152505060019093019250610c19915050565b50509151955093505050505b9250929050565b6001546001600160a01b03163314610d785760405162461bcd60e51b815260040161077a90615273565b6001600160a01b038083166000908152600460208190526040918290206001549251636e0cf42160e11b81529093929092169163dc19e84291610dbd9187910161513c565b60206040518083038186803b158015610dd557600080fd5b505afa158015610de9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0d9190614f65565b610e295760405162461bcd60e51b815260040161077a906153b5565b805462010000900460ff1615610e515760405162461bcd60e51b815260040161077a9061545d565b805462ff0000191662010000178155815180518051600184015560209081015160028401558082015180516003850155810151600484015560408083015180516005860155820151600685015560609283015180516007860155820151600885015581850151805180516009870155830151600a860155808301518051600b870155830151600c860155808201518051600d870155830151600e8601558301518051600f8601558201516010850155808501518051805160118701558301516012860155808301518051601387015583015160148601558082015180516015870155830151601686015583015180516017860155820151601885015593820151805180516019860155820151601a850155808201518051601b860155820151601c850155938401518051601d850155810151601e8401559201518051601f83015582015191015550565b610fa361491b565b610fab61491b565b6001600160a01b0384166000908152600360209081526040918290208251815460c09381028201840190945260a08101848152909391928492849184018282801561101f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611001575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561107757602002820191906000526020600020905b815481526020019060010190808311611063575b50505050508152602001600382018054806020026020016040519081016040528092919081815260200182805480156110cf57602002820191906000526020600020905b8154815260200190600101908083116110bb575b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561112757602002820191906000526020600020905b815481526020019060010190808311611113575b505050505081526020016005820180548060200260200160405190810160405280929190818152602001828054801561117f57602002820191906000526020600020905b81548152602001906001019080831161116b575b5050509190925250508151845250805151909150806001600160401b03811180156111a957600080fd5b506040519080825280602002602001820160405280156111d3578160200160208202803683370190505b506020840152806001600160401b03811180156111ef57600080fd5b50604051908082528060200260200182016040528015611219578160200160208202803683370190505b506040840152806001600160401b038111801561123557600080fd5b5060405190808252806020026020018201604052801561125f578160200160208202803683370190505b506060840152806001600160401b038111801561127b57600080fd5b506040519080825280602002602001820160405280156112a5578160200160208202803683370190505b50608084015260005b818110156113c3576112ec6112c687876000856134ef565b856020015183815181106112d657fe5b60200260200101516134ca90919063ffffffff16565b846020015182815181106112fc57fe5b60200260200101818152505061132861131887876001856134ef565b856040015183815181106112d657fe5b8460400151828151811061133857fe5b60200260200101818152505061136461135487876002856134ef565b856060015183815181106112d657fe5b8460600151828151811061137457fe5b6020026020010181815250506113a061139087876003856134ef565b856080015183815181106112d657fe5b846080015182815181106113b057fe5b60209081029190910101526001016112ae565b50505092915050565b6113d461491b565b60405163aa93ae4960e01b8152309063aa93ae49906113f790859060040161513c565b60006040518083038186803b15801561140f57600080fd5b505afa158015611423573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261144b9190810190614fa0565b905061145561491b565b61145e83613ad4565b82515190915060005b818110156115a8576114b08360200151828151811061148257fe5b60200260200101518560200151838151811061149a57fe5b6020026020010151613f8890919063ffffffff16565b846020015182815181106114c057fe5b6020026020010181815250506114f7836040015182815181106114df57fe5b60200260200101518560400151838151811061149a57fe5b8460400151828151811061150757fe5b60200260200101818152505061153e8360600151828151811061152657fe5b60200260200101518560600151838151811061149a57fe5b8460600151828151811061154e57fe5b6020026020010181815250506115858360800151828151811061156d57fe5b60200260200101518560800151838151811061149a57fe5b8460800151828151811061159557fe5b6020908102919091010152600101611467565b505050919050565b6115b8613fca565b6001600160a01b03166115c9611aad565b6001600160a01b0316146115ef5760405162461bcd60e51b815260040161077a90615428565b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516116219291906151e5565b60405180910390a26001600160a01b03909116600090815260046020526040902080549115156101000261ff0019909216919091179055565b606080606080306001600160a01b0316637234100a866040518263ffffffff1660e01b815260040161168c919061513c565b60006040518083038186803b1580156116a457600080fd5b505afa1580156116b8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116e09190810190614ed3565b6001600160a01b0387166000908152600c60209081526040909120835193955091935090916117149183919086019061494a565b50600181015483518082146117515781810360005b8181101561174e57600180860180548083018255600091825260208220015501611729565b50505b84516060816001600160401b038111801561176b57600080fd5b50604051908082528060200260200182016040528015611795578160200160208202803683370190505b50905060005b87518110156117f2578560010181815481106117b357fe5b90600052602060002001548782815181106117ca57fe5b6020026020010151038282815181106117df57fe5b602090810291909101015260010161179b565b509597509495505050505050915091565b61180b613fca565b6001600160a01b031661181c611aad565b6001600160a01b0316146118425760405162461bcd60e51b815260040161077a90615428565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b606080606080306001600160a01b031663a536ebf3866040518263ffffffff1660e01b81526004016118be919061513c565b60006040518083038186803b1580156118d657600080fd5b505afa1580156118ea573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119129190810190614ed3565b604051631437ac1360e01b815291935091506060903090631437ac139061193d90899060040161513c565b60006040518083038186803b15801561195557600080fd5b505afa158015611969573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119919190810190614ed3565b845190925090506060816001600160401b03811180156119b057600080fd5b506040519080825280602002602001820160405280156119da578160200160208202803683370190505b50905060005b82811015611a30578381815181106119f457fe5b6020026020010151858281518110611a0857fe5b602002602001015103828281518110611a1d57fe5b60209081029190910101526001016119e0565b50939550929350505050915091565b611a47613fca565b6001600160a01b0316611a58611aad565b6001600160a01b031614611a7e5760405162461bcd60e51b815260040161077a90615428565b60405133904780156108fc02916000818181858888f19350505050158015611aaa573d6000803e3d6000fd5b50565b6000546001600160a01b031690565b6002546001600160a01b03163314611ae65760405162461bcd60e51b815260040161077a90615247565b828114611b055760405162461bcd60e51b815260040161077a9061531b565b611b74868686868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808a02828101820190935289825290935089925088918291850190849080828437600092019190915250613fce92505050565b5050506001600160a01b039092166000908152600460205260409020805460ff191660011790555050565b611ba76149af565b6001600160a01b038084166000908152600b602090815260408083209386168352928152908290208251815460609381028201840185529381018481529093919284928491840182828015611c2557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611c07575b5050505050815260200160018201805480602002602001604051908101604052809291908181526020018280548015611c7d57602002820191906000526020600020905b815481526020019060010190808311611c69575b50505050508152505090505b92915050565b606080611c9a61491b565b6001600160a01b0384166000908152600360209081526040918290208251815460c09381028201840190945260a081018481529093919284928491840182828015611d0e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611cf0575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015611d6657602002820191906000526020600020905b815481526020019060010190808311611d52575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015611dbe57602002820191906000526020600020905b815481526020019060010190808311611daa575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015611e1657602002820191906000526020600020905b815481526020019060010190808311611e02575b5050505050815260200160058201805480602002602001604051908101604052809291908181526020018280548015611e6e57602002820191906000526020600020905b815481526020019060010190808311611e5a575b5050509190925250508151519192508190506001600160401b0381118015611e9557600080fd5b50604051908082528060200260200182016040528015611ebf578160200160208202803683370190505b5082519450925060005b81811015611f5157611f3283608001518281518110611ee457fe5b6020026020010151610cfd85606001518481518110611eff57fe5b6020026020010151610cfd87604001518681518110611f1a57fe5b6020026020010151886020015187815181106112d657fe5b848281518110611f3e57fe5b6020908102919091010152600101611ec9565b505050915091565b611f6161491b565b611f6961491b565b6001600160a01b0383166000908152600360209081526040918290208251815460c09381028201840190945260a081018481529093919284928491840182828015611fdd57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611fbf575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561203557602002820191906000526020600020905b815481526020019060010190808311612021575b505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561208d57602002820191906000526020600020905b815481526020019060010190808311612079575b50505050508152602001600482018054806020026020016040519081016040528092919081815260200182805480156120e557602002820191906000526020600020905b8154815260200190600101908083116120d1575b505050505081526020016005820180548060200260200160405190810160405280929190818152602001828054801561213d57602002820191906000526020600020905b815481526020019060010190808311612129575b50505091909252505081518452506020808201519084015260408082015190840152606080820151908401526080908101519083015250919050565b612181613fca565b6001600160a01b0316612192611aad565b6001600160a01b0316146121b85760405162461bcd60e51b815260040161077a90615428565b6121cc6001600160a01b038416838361422c565b505050565b600a6020908152600092835260408084209091529082529020546001600160a01b031681565b6121ff6149af565b6001600160a01b0382166000908152600c6020908152604091829020825181546060938102820184018552938101848152909391928492849184018282801561227157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612253575b50505050508152602001600182018054806020026020016040519081016040528092919081815260200182805480156122c957602002820191906000526020600020905b8154815260200190600101908083116122b5575b5050505050815250509050919050565b606080606080306001600160a01b031663245cd1db87876040518363ffffffff1660e01b815260040161230d929190615150565b60006040518083038186803b15801561232557600080fd5b505afa158015612339573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526123619190810190614ed3565b6001600160a01b0388166000908152600b6020908152604080832033845282529091208351939550919350909161239d9183919086019061494a565b50600181015483518082146123da5781810360005b818110156123d7576001808601805480830182556000918252602082200155016123b2565b50505b84516060816001600160401b03811180156123f457600080fd5b5060405190808252806020026020018201604052801561241e578160200160208202803683370190505b50905060005b8281101561247a5785600101818154811061243b57fe5b906000526020600020015487828151811061245257fe5b60200260200101510382828151811061246757fe5b6020908102919091010152600101612424565b50959a95995094975050505050505050565b612494613fca565b6001600160a01b03166124a5611aad565b6001600160a01b0316146124cb5760405162461bcd60e51b815260040161077a90615428565b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516124fd9291906151e5565b60405180910390a2600180546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0381166000908152600660205260409020606090611c8990614282565b6125548161428e565b15611aaa57600154604051636e0cf42160e11b81526001600160a01b039091169063dc19e8429061258990849060040161513c565b60206040518083038186803b1580156125a157600080fd5b505afa1580156125b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125d99190614f65565b6125f55760405162461bcd60e51b815260040161077a906153b5565b806001600160a01b0316635468d6d76040518163ffffffff1660e01b815260040160206040518083038186803b15801561262e57600080fd5b505afa158015612642573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126669190614f65565b6126825760405162461bcd60e51b815260040161077a906154ad565b60405163245cd1db60e01b81526060908190309063245cd1db906126ac9086903390600401615150565b60006040518083038186803b1580156126c457600080fd5b505afa1580156126d8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526127009190810190614ed3565b6001600160a01b0385166000908152600b6020908152604080832033845282529091208351939550919350909161273c9183919086019061494a565b50600181015483518082146127795781810360005b8181101561277657600180860180548083018255600091825260208220015501612751565b50505b600061278433614315565b61278e57336127ff565b336001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156127c757600080fd5b505afa1580156127db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127ff9190614c79565b905060005b865181101561292557600085600101828154811061281e57fe5b906000526020600020015487838151811061283557fe5b602002602001015103905061287183828a858151811061285157fe5b60200260200101516001600160a01b031661422c9092919063ffffffff16565b61289d8187600101848154811061288457fe5b90600052602060002001546134ca90919063ffffffff16565b8660010183815481106128ac57fe5b9060005260206000200181905550826001600160a01b0316336001600160a01b03167fcf0b5b5e344fd092a8b2211145583746df8436ec32469680c9d800af50d7b7378a85815181106128fb57fe5b6020026020010151844260405161291493929190615183565b60405180910390a350600101612804565b5050505050505050565b6008602052826000526040600020602052816000526040600020818154811061295457fe5b60009182526020909120600290910201546001600160a01b0316925083915050565b61297e613fca565b6001600160a01b031661298f611aad565b6001600160a01b0316146129b55760405162461bcd60e51b815260040161077a90615428565b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516129e79291906151e5565b60405180910390a2600280546001600160a01b0319166001600160a01b0392909216919091179055565b3383828114612a325760405162461bcd60e51b815260040161077a9061531b565b600154604051636e0cf42160e11b81526001600160a01b039091169063dc19e84290612a6290859060040161513c565b60206040518083038186803b158015612a7a57600080fd5b505afa158015612a8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ab29190614f65565b612ace5760405162461bcd60e51b815260040161077a906153b5565b6001600160a01b038281166000908152600a602090815260408083208b851684529091529020541680612b75576001600160a01b038381166000818152600a602090815260408083208d86168452825280832080546001600160a01b031916958f1695909517909455918152600690915220612b4a908a61434e565b612b72576001600160a01b0383166000908152600660205260409020612b70908a614363565b505b50875b6001600160a01b038116612b9b5760405162461bcd60e51b815260040161077a9061534f565b612bd385856000818110612bab57fe5b6001600160a01b038716600090815260056020908152604090912054939102013590506134ca565b6001600160a01b0384166000908152600560205260409020556060826001600160401b0381118015612c0457600080fd5b50604051908082528060200260200182016040528015612c2e578160200160208202803683370190505b50905060005b83811015612d19576001600160a01b03808616600090815260076020908152604080832093871683529290522054612c9657868682818110612c7257fe5b90506020020135828281518110612c8557fe5b602002602001018181525050612d11565b6001600160a01b0380861660009081526007602090815260408083209387168352929052208054612cf8919083908110612ccc57fe5b9060005260206000200154888884818110612ce357fe5b905060200201356134ca90919063ffffffff16565b828281518110612d0457fe5b6020026020010181815250505b600101612c34565b506001600160a01b03808516600090815260076020908152604080832093861683529281529190208251612d4f928401906149c9565b506001600160a01b0380851660008181526008602090815260408083208786168452825280832093835260098252808320948e168352939052919091205480612e8357612d9a614a10565b6001600160a01b038c168152604080516020808b0282810182019093528a825290918b918b91829185019084908082843760009201829052506020868101958652885460018082018b558a845292829020885160029092020180546001600160a01b0319166001600160a01b039092169190911781559551805188979650612e299550928601935001906149c9565b505050828054905060096000896001600160a01b03166001600160a01b0316815260200190815260200160002060008e6001600160a01b03166001600160a01b031681526020019081526020016000208190555050612f24565b6001600160a01b038087166000908152600860209081526040808320938816835292905290812080546000198401908110612eba57fe5b9060005260206000209060020201905060005b6001820154811015612f2157612efe8a8a83818110612ee857fe5b9050602002013583600101838154811061288457fe5b826001018281548110612f0d57fe5b600091825260209091200155600101612ecd565b50505b505050505050505050505050565b60076020528260005260406000206020528160005260406000208181548110612f5757fe5b9060005260206000200160009250925050505481565b612f768161428e565b15611aaa576040516327304dfd60e01b81526000906001600160a01b038316906327304dfd90612faa90339060040161513c565b60206040518083038186803b158015612fc257600080fd5b505afa158015612fd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ffa9190614f65565b806130865750336001600160a01b0316826001600160a01b0316633018205f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561304357600080fd5b505afa158015613057573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061307b9190614c79565b6001600160a01b0316145b90506000826001600160a01b0316635468d6d76040518163ffffffff1660e01b815260040160206040518083038186803b1580156130c357600080fd5b505afa1580156130d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130fb9190614f65565b90508061311a5760405162461bcd60e51b815260040161077a906154ad565b816131375760405162461bcd60e51b815260040161077a90615484565b604051631bf52ea760e21b815260609081903090636fd4ba9c9061315f90889060040161513c565b600060405180830381600087803b15801561317957600080fd5b505af115801561318d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526131b59190810190614ed3565b6001600160a01b0387166000908152600460209081526040808320805460ff19169055600c8252909120835193955091935090916131f89183919086019061494a565b50600181015483518082146132355781810360005b818110156132325760018086018054808301825560009182526020822001550161320d565b50505b60005b85518110156132c157600086828151811061324f57fe5b602002602001015190506132778a8288858151811061326a57fe5b6020026020010151614378565b61329d86838151811061328657fe5b602002602001015186600101848154811061288457fe5b8560010183815481106132ac57fe5b60009182526020909120015550600101613238565b505050505050505050565b6132d4613fca565b6001600160a01b03166132e5611aad565b6001600160a01b03161461330b5760405162461bcd60e51b815260040161077a90615428565b6001600160a01b0381166133315760405162461bcd60e51b815260040161077a906152a0565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000611c89826146a8565b60006133a383836146ac565b9392505050565b80515160009083108015906133c3575060208201515183105b156133d45750805160200151611c89565b60208201515183108015906133ed575060408201515183105b1561340057506020808201510151611c89565b6040820151518310801590613419575060608201515183105b1561342d5750604081015160200151611c89565b60608201515183106134485750606081015160200151611c89565b50600092915050565b60008261346057506000611c89565b8282028284828161346d57fe5b04146133a35760405162461bcd60e51b815260040161077a906153e7565b60006133a383836040518060400160405280601a815260200179536166654d6174683a206469766973696f6e206279207a65726f60301b8152506146d0565b6000828201838110156133a35760405162461bcd60e51b815260040161077a906152e6565b6001600160a01b0380851660009081526007602090815260408083209387168352929052908120548190613524576000613562565b6001600160a01b0380871660009081526007602090815260408083209389168352929052908120805490919061355657fe5b90600052602060002001545b905061356c6148dc565b506001600160a01b038616600090815260046020818152604080842081516101408101835260018201546101008201908152600283015461012083015260808083019182528451808601865260038501548152968401548787015260a080840197909752845180860186526005850154815260068501548188015260c080850191909152855180870187526007860154815260088601548189015260e0850152918352845180830186526009850154818301908152600a860154828a0152815285518087018752600b8601548152600c860154818901528188015285518087018752600d8601548152600e860154818901528187015285518087018752600f8601548152601086015481890152606082810191909152848801919091528551808401875260118601548184019081526012870154828b0152815286518088018852601387015481526014870154818a01528189015286518088018852601587015481526016870154818a01528188015286518088018852601787015481526018870154818a01528183015284870152855192830186526019850154918301918252601a85015497830197909752815283518085018552601b8401548152601c840154818701528186015283518085018552601d8401548152601e84015481870152818501528351808501909452601f8301548452918401549383019390935280840191909152918101919091529061378261491b565b6001600160a01b0389166000908152600360209081526040918290208251815460c09381028201840190945260a0810184815290939192849284918401828280156137f657602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116137d8575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561384e57602002820191906000526020600020905b81548152602001906001019080831161383a575b50505050508152602001600382018054806020026020016040519081016040528092919081815260200182805480156138a657602002820191906000526020600020905b815481526020019060010190808311613892575b50505050508152602001600482018054806020026020016040519081016040528092919081815260200182805480156138fe57602002820191906000526020600020905b8154815260200190600101908083116138ea575b505050505081526020016005820180548060200260200160405190810160405280929190818152602001828054801561395657602002820191906000526020600020905b815481526020019060010190808311613942575b50505050508152505090508360001415613977576000945050505050613acc565b6001600160a01b038916600090815260056020526040902054871580156139a357506000826020015151115b156139e0576139dd600d54610c6283610c62896139d76139c78c8c600001516133aa565b89602001518f81518110610c4c57fe5b90613451565b92505b8760011480156139f557506000826040015151115b15613a2c57613a29600d54610c6283610c62896139d7613a198c8c602001516133aa565b89604001518f81518110610c4c57fe5b92505b876002148015613a4157506000826060015151115b15613a7857613a75600d54610c6283610c62896139d7613a658c8c604001516133aa565b89606001518f81518110610c4c57fe5b92505b876003148015613a8d57506000826080015151115b15613ac457613ac1600d54610c6283610c62896139d7613ab18c8c606001516133aa565b89608001518f81518110610c4c57fe5b92505b509093505050505b949350505050565b613adc61491b565b613ae461491b565b6001600160a01b0383166000908152600360209081526040918290208251815460c09381028201840190945260a081018481529093919284928491840182828015613b5857602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613b3a575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015613bb057602002820191906000526020600020905b815481526020019060010190808311613b9c575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015613c0857602002820191906000526020600020905b815481526020019060010190808311613bf4575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015613c6057602002820191906000526020600020905b815481526020019060010190808311613c4c575b5050505050815260200160058201805480602002602001604051908101604052809291908181526020018280548015613cb857602002820191906000526020600020905b815481526020019060010190808311613ca4575b505050919092525050815180519085526001600160a01b038616600090815260066020526040812093945090929150613cf08261338c565b9050826001600160401b0381118015613d0857600080fd5b50604051908082528060200260200182016040528015613d32578160200160208202803683370190505b506020860152826001600160401b0381118015613d4e57600080fd5b50604051908082528060200260200182016040528015613d78578160200160208202803683370190505b506040860152826001600160401b0381118015613d9457600080fd5b50604051908082528060200260200182016040528015613dbe578160200160208202803683370190505b506060860152826001600160401b0381118015613dda57600080fd5b50604051908082528060200260200182016040528015613e04578160200160208202803683370190505b50608086015260005b6004811015613f7e5760005b84811015613f755760005b83811015613f6c5782613e7757613e5a613e4a8a613e428885613397565b6000866134ef565b896020015184815181106112d657fe5b88602001518381518110613e6a57fe5b6020026020010181815250505b8260011415613ec657613ea9613e998a613e918885613397565b6001866134ef565b896040015184815181106112d657fe5b88604001518381518110613eb957fe5b6020026020010181815250505b8260021415613f1557613ef8613ee88a613ee08885613397565b6002866134ef565b896060015184815181106112d657fe5b88606001518381518110613f0857fe5b6020026020010181815250505b8260031415613f6457613f47613f378a613f2f8885613397565b6003866134ef565b896080015184815181106112d657fe5b88608001518381518110613f5757fe5b6020026020010181815250505b600101613e24565b50600101613e19565b50600101613e0d565b5050505050919050565b60006133a383836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250614707565b3390565b6001600160a01b0384166000908152600360205260408120905b8351811015614224576000848281518110613fff57fe5b60200260200101519050600084838151811061401757fe5b6020908102919091018101516001600160a01b0384166000908152600187019092526040822054865491935091901561408a57811580156140855750836001600160a01b03168660000160008154811061406d57fe5b6000918252602090912001546001600160a01b031614155b61408d565b60015b90508015614138578554600180820188556000888152602080822090930180546001600160a01b0319166001600160a01b03891690811790915560028a01805480850182559083528483200182905560038a01805480850182559083528483200182905560048a01805480850182559083528483200182905560058a018054808501825590835284832001829055895490825291890190925260409091206000199091019081905591505b8861416c576141508387600201848154811061288457fe5b86600201838154811061415f57fe5b6000918252602090912001555b88600114156141a4576141888387600301848154811061288457fe5b86600301838154811061419757fe5b6000918252602090912001555b88600214156141dc576141c08387600401848154811061288457fe5b8660040183815481106141cf57fe5b6000918252602090912001555b8860031415614214576141f88387600501848154811061288457fe5b86600501838154811061420757fe5b6000918252602090912001555b505060019092019150613fe89050565b505050505050565b6121cc8363a9059cbb60e01b848460405160240161424b92919061516a565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614733565b6060806133a38361481e565b60006001826001600160a01b03166373a9855c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156142cb57600080fd5b505afa1580156142df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143039190614f81565b600181111561430e57fe5b1492915050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590613acc575050151592915050565b60006133a3836001600160a01b03841661487a565b60006133a3836001600160a01b038416614892565b6060836001600160a01b031663a0e67e2b6040518163ffffffff1660e01b815260040160006040518083038186803b1580156143b357600080fd5b505afa1580156143c7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526143ef9190810190614ea1565b90506060846001600160a01b031663309a042c6040518163ffffffff1660e01b815260040160006040518083038186803b15801561442c57600080fd5b505afa158015614440573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526144689190810190614f33565b90506000856001600160a01b031663d29986c16040518163ffffffff1660e01b815260040160206040518083038186803b1580156144a557600080fd5b505afa1580156144b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144dd9190615096565b905060005b83518110156146505760006145128583815181106144fc57fe5b60200260200101516001600160a01b0316614315565b61452f5784828151811061452257fe5b60200260200101516145b3565b84828151811061453b57fe5b60200260200101516001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561457b57600080fd5b505afa15801561458f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145b39190614c79565b905060006145e184610c628786815181106145ca57fe5b60200260200101518a61345190919063ffffffff16565b90506145f76001600160a01b038916838361422c565b816001600160a01b0316336001600160a01b03167f749a9ef4b9bff1f02a1a1d45429a3949e524fd93e3948001eab8dca05f1fcd6d8a844260405161463e93929190615183565b60405180910390a350506001016144e2565b50856001600160a01b0316336001600160a01b03167f1bf0129823b56213a46996bc874ce50b318995cae2bbdcd2000933d36012547d87874260405161469893929190615183565b60405180910390a3505050505050565b5490565b60008260000182815481106146bd57fe5b9060005260206000200154905092915050565b600081836146f15760405162461bcd60e51b815260040161077a9190615214565b5060008385816146fd57fe5b0495945050505050565b6000818484111561472b5760405162461bcd60e51b815260040161077a9190615214565b505050900390565b614745826001600160a01b0316614315565b6147615760405162461bcd60e51b815260040161077a90615559565b60006060836001600160a01b03168360405161477d9190615120565b6000604051808303816000865af19150503d80600081146147ba576040519150601f19603f3d011682016040523d82523d6000602084013e6147bf565b606091505b5091509150816147e15760405162461bcd60e51b815260040161077a90615380565b80511561481857808060200190518101906147fc9190614f65565b6148185760405162461bcd60e51b815260040161077a906154e0565b50505050565b60608160000180548060200260200160405190810160405280929190818152602001828054801561486e57602002820191906000526020600020905b81548152602001906001019080831161485a575b50505050509050919050565b60009081526001919091016020526040902054151590565b600061489e838361487a565b6148d457508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611c89565b506000611c89565b60405180608001604052806148ef614a28565b81526020016148fc614a28565b8152602001614909614a28565b8152602001614916614a28565b905290565b6040518060a0016040528060608152602001606081526020016060815260200160608152602001606081525090565b82805482825590600052602060002090810192821561499f579160200282015b8281111561499f57825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019061496a565b506149ab929150614a62565b5090565b604051806040016040528060608152602001606081525090565b828054828255906000526020600020908101928215614a04579160200282015b82811115614a045782518255916020019190600101906149e9565b506149ab929150614a81565b60408051808201909152600081526060602082015290565b6040518060800160405280614a3b614a96565b8152602001614a48614a96565b8152602001614a55614a96565b8152602001614916614a96565b5b808211156149ab5780546001600160a01b0319168155600101614a63565b5b808211156149ab5760008155600101614a82565b604051806040016040528060008152602001600081525090565b60008083601f840112614ac1578182fd5b5081356001600160401b03811115614ad7578182fd5b6020830191508360208083028501011115610d4757600080fd5b600082601f830112614b01578081fd5b8151614b14614b0f8261568a565b615664565b818152915060208083019084810181840286018201871015614b3557600080fd5b60005b84811015614b5d578151614b4b816156d5565b84529282019290820190600101614b38565b505050505092915050565b600082601f830112614b78578081fd5b8151614b86614b0f8261568a565b818152915060208083019084810181840286018201871015614ba757600080fd5b60005b84811015614b5d57815184529282019290820190600101614baa565b60006101008284031215614bd8578081fd5b614be26080615664565b9050614bee8383614c2c565b8152614bfd8360408401614c2c565b6020820152614c0f8360808401614c2c565b6040820152614c218360c08401614c2c565b606082015292915050565b600060408284031215614c3d578081fd5b614c476040615664565b9050813581526020820135602082015292915050565b600060208284031215614c6e578081fd5b81356133a3816156d5565b600060208284031215614c8a578081fd5b81516133a3816156d5565b60008060408385031215614ca7578081fd5b8235614cb2816156d5565b91506020830135614cc2816156d5565b809150509250929050565b60008060008060008060808789031215614ce5578182fd5b8635614cf0816156d5565b95506020870135614d00816156d5565b945060408701356001600160401b0380821115614d1b578384fd5b614d278a838b01614ab0565b90965094506060890135915080821115614d3f578384fd5b50614d4c89828a01614ab0565b979a9699509497509295939492505050565b600080600060608486031215614d72578283fd5b8335614d7d816156d5565b92506020840135614d8d816156d5565b929592945050506040919091013590565b60008060408385031215614db0578182fd5b8235614dbb816156d5565b91506020830135614cc2816156ea565b600080828403610420811215614ddf578283fd5b8335614dea816156d5565b9250610400601f1982011215614dfe578182fd5b50614e096080615664565b614e168560208601614bc6565b8152614e26856101208601614bc6565b6020820152614e39856102208601614bc6565b6040820152614e4c856103208601614bc6565b6060820152809150509250929050565b60008060008060008060808789031215614e74578384fd5b8635614e7f816156d5565b95506020870135945060408701356001600160401b0380821115614d1b578586fd5b600060208284031215614eb2578081fd5b81516001600160401b03811115614ec7578182fd5b613acc84828501614af1565b60008060408385031215614ee5578182fd5b82516001600160401b0380821115614efb578384fd5b614f0786838701614af1565b93506020850151915080821115614f1c578283fd5b50614f2985828601614b68565b9150509250929050565b600060208284031215614f44578081fd5b81516001600160401b03811115614f59578182fd5b613acc84828501614b68565b600060208284031215614f76578081fd5b81516133a3816156ea565b600060208284031215614f92578081fd5b8151600281106133a3578182fd5b600060208284031215614fb1578081fd5b81516001600160401b0380821115614fc7578283fd5b9083019060a08286031215614fda578283fd5b614fe460a0615664565b825182811115614ff2578485fd5b614ffe87828601614af1565b825250602083015182811115615012578485fd5b61501e87828601614b68565b602083015250604083015182811115615035578485fd5b61504187828601614b68565b604083015250606083015182811115615058578485fd5b61506487828601614b68565b60608301525060808301518281111561507b578485fd5b61508787828601614b68565b60808301525095945050505050565b6000602082840312156150a7578081fd5b5051919050565b6000815180845260208085019450808401835b838110156150e65781516001600160a01b0316875295820195908201906001016150c1565b509495945050505050565b6000815180845260208085019450808401835b838110156150e657815187529582019590820190600101615104565b600082516151328184602087016156a9565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b6000602082526133a360208301846150ae565b6000604082526151ca60408301856150ae565b82810360208401526151dc81856150f1565b95945050505050565b60006020825282602083015282846040840137818301604090810191909152601f909201601f19160101919050565b60006020825282518060208401526152338160408501602087016156a9565b601f01601f19169190910160400192915050565b60208082526012908201527122a9292fa727aa2fa1a7a72a2927a62622a960711b604082015260600190565b6020808252601390820152724552525f4e4f545f4352505f464143544f525960681b604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601b908201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604082015260600190565b6020808252601a908201527908aa4a4bea89e968a9cbe988a9c8ea890be9c9ea8be9a82a886960331b604082015260600190565b6020808252601790820152764552525f494e56414c49445f4b4f4c5f4144445245535360481b604082015260600190565b6020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b6020808252601890820152774552525f494e56414c49445f504f4f4c5f4144445245535360401b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600d908201526c11549497d21054d7d4d1551151609a1b604082015260600190565b6020808252600f908201526e22a9292fa727aa2fa6a0a720a3a2a960891b604082015260600190565b60208082526019908201527811549497d393d517d0d3d354131155115117d0d3d3131150d5603a1b604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b60208082526015908201527411549497d2d3d317d21054d7d393d7d49155d05491605a1b604082015260600190565b6020808252601f908201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604082015260600190565b6000602082528251604060208401526155ac60608401826150ae565b90506020840151601f198483030160408501526151dc82826150f1565b600060208252825160a060208401526155e560c08401826150ae565b90506020840151601f198085840301604086015261560383836150f1565b9250604086015191508085840301606086015261562083836150f1565b9250606086015191508085840301608086015261563d83836150f1565b925060808601519150808584030160a0860152506151dc82826150f1565b90815260200190565b6040518181016001600160401b038111828210171561568257600080fd5b604052919050565b60006001600160401b0382111561569f578081fd5b5060209081020190565b60005b838110156156c45781810151838201526020016156ac565b838111156148185750506000910152565b6001600160a01b0381168114611aaa57600080fd5b8015158114611aaa57600080fdfea264697066735822122052e6da628de8e3c1a14f6d9eec51b871a3fd5d203d1bd045b89f8fd0dbc28f0c64736f6c634300060c0033",
  "deployedBytecode": "0x60806040526004361061014b5760003560e01c80631437ac1314610157578063245cd1db1461018e5780634660c5a5146101ae5780635740845d146101d0578063598797ad146101fd57806368092bd91461021d5780636fd4ba9c1461023d578063715018a61461025d5780637234100a1461027257806378a619de146102925780638da5cb5b1461029a5780639155dae7146102bc5780639f1da160146102dc578063a536ebf314610309578063aa93ae4914610329578063b8baccb814610349578063bb408f2d14610369578063bf91b4c914610389578063c0663cc9146103a9578063c1e57622146103c9578063c90361dd146103e9578063c969229c14610416578063cfa11d7e14610436578063d6b485a514610456578063d7256c7014610476578063ebee7bcc14610496578063edb12adf146104c3578063f2fde38b146104e357610152565b3661015257005b600080fd5b34801561016357600080fd5b50610177610172366004614c5d565b610503565b6040516101859291906151b7565b60405180910390f35b34801561019a57600080fd5b506101776101a9366004614c95565b6106e2565b3480156101ba57600080fd5b506101ce6101c9366004614dcb565b610d4e565b005b3480156101dc57600080fd5b506101f06101eb366004614c95565b610f9b565b60405161018591906155c9565b34801561020957600080fd5b506101f0610218366004614c5d565b6113cc565b34801561022957600080fd5b506101ce610238366004614d9e565b6115b0565b34801561024957600080fd5b50610177610258366004614c5d565b61165a565b34801561026957600080fd5b506101ce611803565b34801561027e57600080fd5b5061017761028d366004614c5d565b61188c565b6101ce611a3f565b3480156102a657600080fd5b506102af611aad565b604051610185919061513c565b3480156102c857600080fd5b506101ce6102d7366004614e5c565b611abc565b3480156102e857600080fd5b506102fc6102f7366004614c95565b611b9f565b6040516101859190615590565b34801561031557600080fd5b50610177610324366004614c5d565b611c8f565b34801561033557600080fd5b506101f0610344366004614c5d565b611f59565b34801561035557600080fd5b506101ce610364366004614d5e565b612179565b34801561037557600080fd5b506102af610384366004614c95565b6121d1565b34801561039557600080fd5b506102fc6103a4366004614c5d565b6121f7565b3480156103b557600080fd5b506101776103c4366004614c95565b6122d9565b3480156103d557600080fd5b506101ce6103e4366004614c5d565b61248c565b3480156103f557600080fd5b50610409610404366004614c5d565b612527565b60405161018591906151a4565b34801561042257600080fd5b506101ce610431366004614c5d565b61254b565b34801561044257600080fd5b506102af610451366004614d5e565b61292f565b34801561046257600080fd5b506101ce610471366004614c5d565b612976565b34801561048257600080fd5b506101ce610491366004614ccd565b612a11565b3480156104a257600080fd5b506104b66104b1366004614d5e565b612f32565b604051610185919061565b565b3480156104cf57600080fd5b506101ce6104de366004614c5d565b612f6d565b3480156104ef57600080fd5b506101ce6104fe366004614c5d565b6132cc565b6001600160a01b038116600090815260066020526040812060609182919061052a8261338c565b6001600160a01b0386166000908152600360209081526040918290208054835181840281018401909452808452939450606093909183018282801561059857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161057a575b50505050509050606081516001600160401b03811180156105b857600080fd5b506040519080825280602002602001820160405280156105e2578160200160208202803683370190505b50905060005b838110156106d55760603063245cd1db8a6106038986613397565b6040518363ffffffff1660e01b8152600401610620929190615150565b60006040518083038186803b15801561063857600080fd5b505afa15801561064c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106749190810190614ed3565b91505060005b81518110156106cb5781818151811061068f57fe5b60200260200101518482815181106106a357fe5b6020026020010151018482815181106106b857fe5b602090810291909101015260010161067a565b50506001016105e8565b5090945092505050915091565b6001600160a01b038083166000908152600760209081526040808320938516835292905290812054606091829161071a576000610758565b6001600160a01b0380861660009081526007602090815260408083209388168352929052908120805490919061074c57fe5b90600052602060002001545b9050600081116107835760405162461bcd60e51b815260040161077a9061552a565b60405180910390fd5b61078b6148dc565b506001600160a01b03851660009081526004602081815260409283902083516101408101855260018201546101008201908152600283015461012083015260808083019182528651808801885260038501548152958401548686015260a080840196909652865180880188526005850154815260068501548187015260c080850191909152875180890189526007860154815260088601548188015260e0850152918352865180830188526009850154818301908152600a86015482890152815287518089018952600b8601548152600c860154818801528187015287518089018952600d8601548152600e860154818801528189015287518089018952600f8601548152601086015481880152606082810191909152848701919091528751808401895260118601548184019081526012870154828a015281528851808a018a5260138701548152601487015481890152818801528851808a018a5260158701548152601687015481890152818a01528851808a018a52601787015481526018870154818901528183015284890152875192830188526019850154918301918252601a85015496830196909652815285518087018752601b8401548152601c840154818601528185015285518087018752601d8401548152601e84015481860152818701528551808701909652601f8301548652918301549285019290925280830193909352908101919091526109a161491b565b6001600160a01b0387166000908152600360209081526040918290208251815460c09381028201840190945260a081018481529093919284928491840182828015610a1557602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116109f7575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015610a6d57602002820191906000526020600020905b815481526020019060010190808311610a59575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015610ac557602002820191906000526020600020905b815481526020019060010190808311610ab1575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015610b1d57602002820191906000526020600020905b815481526020019060010190808311610b09575b5050505050815260200160058201805480602002602001604051908101604052809291908181526020018280548015610b7557602002820191906000526020600020905b815481526020019060010190808311610b61575b505050505081525050905060608160000151516001600160401b0381118015610b9d57600080fd5b50604051908082528060200260200182016040528015610bc7578160200160208202803683370190505b506001600160a01b03808a1660009081526005602090815260408083205460078352818420948d168452939091528120805493945091929091908290610c0957fe5b9060005260206000200154905060005b845151811015610d3b576000610c68600d54610c62610c3c8b8b600001516133aa565b89602001518681518110610c4c57fe5b602002602001015161345190919063ffffffff16565b9061348b565b90506000610c93600d54610c62610c838c8c602001516133aa565b8a604001518781518110610c4c57fe5b90506000610cbe600d54610c62610cae8d8d604001516133aa565b8b606001518881518110610c4c57fe5b90506000610ce9600d54610c62610cd98e8e606001516133aa565b8c608001518981518110610c4c57fe5b90506000610d0382610cfd858189896134ca565b906134ca565b9050610d1388610c62838a613451565b898781518110610d1f57fe5b6020908102919091010152505060019093019250610c19915050565b50509151955093505050505b9250929050565b6001546001600160a01b03163314610d785760405162461bcd60e51b815260040161077a90615273565b6001600160a01b038083166000908152600460208190526040918290206001549251636e0cf42160e11b81529093929092169163dc19e84291610dbd9187910161513c565b60206040518083038186803b158015610dd557600080fd5b505afa158015610de9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0d9190614f65565b610e295760405162461bcd60e51b815260040161077a906153b5565b805462010000900460ff1615610e515760405162461bcd60e51b815260040161077a9061545d565b805462ff0000191662010000178155815180518051600184015560209081015160028401558082015180516003850155810151600484015560408083015180516005860155820151600685015560609283015180516007860155820151600885015581850151805180516009870155830151600a860155808301518051600b870155830151600c860155808201518051600d870155830151600e8601558301518051600f8601558201516010850155808501518051805160118701558301516012860155808301518051601387015583015160148601558082015180516015870155830151601686015583015180516017860155820151601885015593820151805180516019860155820151601a850155808201518051601b860155820151601c850155938401518051601d850155810151601e8401559201518051601f83015582015191015550565b610fa361491b565b610fab61491b565b6001600160a01b0384166000908152600360209081526040918290208251815460c09381028201840190945260a08101848152909391928492849184018282801561101f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611001575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561107757602002820191906000526020600020905b815481526020019060010190808311611063575b50505050508152602001600382018054806020026020016040519081016040528092919081815260200182805480156110cf57602002820191906000526020600020905b8154815260200190600101908083116110bb575b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561112757602002820191906000526020600020905b815481526020019060010190808311611113575b505050505081526020016005820180548060200260200160405190810160405280929190818152602001828054801561117f57602002820191906000526020600020905b81548152602001906001019080831161116b575b5050509190925250508151845250805151909150806001600160401b03811180156111a957600080fd5b506040519080825280602002602001820160405280156111d3578160200160208202803683370190505b506020840152806001600160401b03811180156111ef57600080fd5b50604051908082528060200260200182016040528015611219578160200160208202803683370190505b506040840152806001600160401b038111801561123557600080fd5b5060405190808252806020026020018201604052801561125f578160200160208202803683370190505b506060840152806001600160401b038111801561127b57600080fd5b506040519080825280602002602001820160405280156112a5578160200160208202803683370190505b50608084015260005b818110156113c3576112ec6112c687876000856134ef565b856020015183815181106112d657fe5b60200260200101516134ca90919063ffffffff16565b846020015182815181106112fc57fe5b60200260200101818152505061132861131887876001856134ef565b856040015183815181106112d657fe5b8460400151828151811061133857fe5b60200260200101818152505061136461135487876002856134ef565b856060015183815181106112d657fe5b8460600151828151811061137457fe5b6020026020010181815250506113a061139087876003856134ef565b856080015183815181106112d657fe5b846080015182815181106113b057fe5b60209081029190910101526001016112ae565b50505092915050565b6113d461491b565b60405163aa93ae4960e01b8152309063aa93ae49906113f790859060040161513c565b60006040518083038186803b15801561140f57600080fd5b505afa158015611423573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261144b9190810190614fa0565b905061145561491b565b61145e83613ad4565b82515190915060005b818110156115a8576114b08360200151828151811061148257fe5b60200260200101518560200151838151811061149a57fe5b6020026020010151613f8890919063ffffffff16565b846020015182815181106114c057fe5b6020026020010181815250506114f7836040015182815181106114df57fe5b60200260200101518560400151838151811061149a57fe5b8460400151828151811061150757fe5b60200260200101818152505061153e8360600151828151811061152657fe5b60200260200101518560600151838151811061149a57fe5b8460600151828151811061154e57fe5b6020026020010181815250506115858360800151828151811061156d57fe5b60200260200101518560800151838151811061149a57fe5b8460800151828151811061159557fe5b6020908102919091010152600101611467565b505050919050565b6115b8613fca565b6001600160a01b03166115c9611aad565b6001600160a01b0316146115ef5760405162461bcd60e51b815260040161077a90615428565b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516116219291906151e5565b60405180910390a26001600160a01b03909116600090815260046020526040902080549115156101000261ff0019909216919091179055565b606080606080306001600160a01b0316637234100a866040518263ffffffff1660e01b815260040161168c919061513c565b60006040518083038186803b1580156116a457600080fd5b505afa1580156116b8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116e09190810190614ed3565b6001600160a01b0387166000908152600c60209081526040909120835193955091935090916117149183919086019061494a565b50600181015483518082146117515781810360005b8181101561174e57600180860180548083018255600091825260208220015501611729565b50505b84516060816001600160401b038111801561176b57600080fd5b50604051908082528060200260200182016040528015611795578160200160208202803683370190505b50905060005b87518110156117f2578560010181815481106117b357fe5b90600052602060002001548782815181106117ca57fe5b6020026020010151038282815181106117df57fe5b602090810291909101015260010161179b565b509597509495505050505050915091565b61180b613fca565b6001600160a01b031661181c611aad565b6001600160a01b0316146118425760405162461bcd60e51b815260040161077a90615428565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b606080606080306001600160a01b031663a536ebf3866040518263ffffffff1660e01b81526004016118be919061513c565b60006040518083038186803b1580156118d657600080fd5b505afa1580156118ea573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119129190810190614ed3565b604051631437ac1360e01b815291935091506060903090631437ac139061193d90899060040161513c565b60006040518083038186803b15801561195557600080fd5b505afa158015611969573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119919190810190614ed3565b845190925090506060816001600160401b03811180156119b057600080fd5b506040519080825280602002602001820160405280156119da578160200160208202803683370190505b50905060005b82811015611a30578381815181106119f457fe5b6020026020010151858281518110611a0857fe5b602002602001015103828281518110611a1d57fe5b60209081029190910101526001016119e0565b50939550929350505050915091565b611a47613fca565b6001600160a01b0316611a58611aad565b6001600160a01b031614611a7e5760405162461bcd60e51b815260040161077a90615428565b60405133904780156108fc02916000818181858888f19350505050158015611aaa573d6000803e3d6000fd5b50565b6000546001600160a01b031690565b6002546001600160a01b03163314611ae65760405162461bcd60e51b815260040161077a90615247565b828114611b055760405162461bcd60e51b815260040161077a9061531b565b611b74868686868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808a02828101820190935289825290935089925088918291850190849080828437600092019190915250613fce92505050565b5050506001600160a01b039092166000908152600460205260409020805460ff191660011790555050565b611ba76149af565b6001600160a01b038084166000908152600b602090815260408083209386168352928152908290208251815460609381028201840185529381018481529093919284928491840182828015611c2557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611c07575b5050505050815260200160018201805480602002602001604051908101604052809291908181526020018280548015611c7d57602002820191906000526020600020905b815481526020019060010190808311611c69575b50505050508152505090505b92915050565b606080611c9a61491b565b6001600160a01b0384166000908152600360209081526040918290208251815460c09381028201840190945260a081018481529093919284928491840182828015611d0e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611cf0575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015611d6657602002820191906000526020600020905b815481526020019060010190808311611d52575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015611dbe57602002820191906000526020600020905b815481526020019060010190808311611daa575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015611e1657602002820191906000526020600020905b815481526020019060010190808311611e02575b5050505050815260200160058201805480602002602001604051908101604052809291908181526020018280548015611e6e57602002820191906000526020600020905b815481526020019060010190808311611e5a575b5050509190925250508151519192508190506001600160401b0381118015611e9557600080fd5b50604051908082528060200260200182016040528015611ebf578160200160208202803683370190505b5082519450925060005b81811015611f5157611f3283608001518281518110611ee457fe5b6020026020010151610cfd85606001518481518110611eff57fe5b6020026020010151610cfd87604001518681518110611f1a57fe5b6020026020010151886020015187815181106112d657fe5b848281518110611f3e57fe5b6020908102919091010152600101611ec9565b505050915091565b611f6161491b565b611f6961491b565b6001600160a01b0383166000908152600360209081526040918290208251815460c09381028201840190945260a081018481529093919284928491840182828015611fdd57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611fbf575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561203557602002820191906000526020600020905b815481526020019060010190808311612021575b505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561208d57602002820191906000526020600020905b815481526020019060010190808311612079575b50505050508152602001600482018054806020026020016040519081016040528092919081815260200182805480156120e557602002820191906000526020600020905b8154815260200190600101908083116120d1575b505050505081526020016005820180548060200260200160405190810160405280929190818152602001828054801561213d57602002820191906000526020600020905b815481526020019060010190808311612129575b50505091909252505081518452506020808201519084015260408082015190840152606080820151908401526080908101519083015250919050565b612181613fca565b6001600160a01b0316612192611aad565b6001600160a01b0316146121b85760405162461bcd60e51b815260040161077a90615428565b6121cc6001600160a01b038416838361422c565b505050565b600a6020908152600092835260408084209091529082529020546001600160a01b031681565b6121ff6149af565b6001600160a01b0382166000908152600c6020908152604091829020825181546060938102820184018552938101848152909391928492849184018282801561227157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612253575b50505050508152602001600182018054806020026020016040519081016040528092919081815260200182805480156122c957602002820191906000526020600020905b8154815260200190600101908083116122b5575b5050505050815250509050919050565b606080606080306001600160a01b031663245cd1db87876040518363ffffffff1660e01b815260040161230d929190615150565b60006040518083038186803b15801561232557600080fd5b505afa158015612339573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526123619190810190614ed3565b6001600160a01b0388166000908152600b6020908152604080832033845282529091208351939550919350909161239d9183919086019061494a565b50600181015483518082146123da5781810360005b818110156123d7576001808601805480830182556000918252602082200155016123b2565b50505b84516060816001600160401b03811180156123f457600080fd5b5060405190808252806020026020018201604052801561241e578160200160208202803683370190505b50905060005b8281101561247a5785600101818154811061243b57fe5b906000526020600020015487828151811061245257fe5b60200260200101510382828151811061246757fe5b6020908102919091010152600101612424565b50959a95995094975050505050505050565b612494613fca565b6001600160a01b03166124a5611aad565b6001600160a01b0316146124cb5760405162461bcd60e51b815260040161077a90615428565b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516124fd9291906151e5565b60405180910390a2600180546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0381166000908152600660205260409020606090611c8990614282565b6125548161428e565b15611aaa57600154604051636e0cf42160e11b81526001600160a01b039091169063dc19e8429061258990849060040161513c565b60206040518083038186803b1580156125a157600080fd5b505afa1580156125b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125d99190614f65565b6125f55760405162461bcd60e51b815260040161077a906153b5565b806001600160a01b0316635468d6d76040518163ffffffff1660e01b815260040160206040518083038186803b15801561262e57600080fd5b505afa158015612642573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126669190614f65565b6126825760405162461bcd60e51b815260040161077a906154ad565b60405163245cd1db60e01b81526060908190309063245cd1db906126ac9086903390600401615150565b60006040518083038186803b1580156126c457600080fd5b505afa1580156126d8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526127009190810190614ed3565b6001600160a01b0385166000908152600b6020908152604080832033845282529091208351939550919350909161273c9183919086019061494a565b50600181015483518082146127795781810360005b8181101561277657600180860180548083018255600091825260208220015501612751565b50505b600061278433614315565b61278e57336127ff565b336001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156127c757600080fd5b505afa1580156127db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127ff9190614c79565b905060005b865181101561292557600085600101828154811061281e57fe5b906000526020600020015487838151811061283557fe5b602002602001015103905061287183828a858151811061285157fe5b60200260200101516001600160a01b031661422c9092919063ffffffff16565b61289d8187600101848154811061288457fe5b90600052602060002001546134ca90919063ffffffff16565b8660010183815481106128ac57fe5b9060005260206000200181905550826001600160a01b0316336001600160a01b03167fcf0b5b5e344fd092a8b2211145583746df8436ec32469680c9d800af50d7b7378a85815181106128fb57fe5b6020026020010151844260405161291493929190615183565b60405180910390a350600101612804565b5050505050505050565b6008602052826000526040600020602052816000526040600020818154811061295457fe5b60009182526020909120600290910201546001600160a01b0316925083915050565b61297e613fca565b6001600160a01b031661298f611aad565b6001600160a01b0316146129b55760405162461bcd60e51b815260040161077a90615428565b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516129e79291906151e5565b60405180910390a2600280546001600160a01b0319166001600160a01b0392909216919091179055565b3383828114612a325760405162461bcd60e51b815260040161077a9061531b565b600154604051636e0cf42160e11b81526001600160a01b039091169063dc19e84290612a6290859060040161513c565b60206040518083038186803b158015612a7a57600080fd5b505afa158015612a8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ab29190614f65565b612ace5760405162461bcd60e51b815260040161077a906153b5565b6001600160a01b038281166000908152600a602090815260408083208b851684529091529020541680612b75576001600160a01b038381166000818152600a602090815260408083208d86168452825280832080546001600160a01b031916958f1695909517909455918152600690915220612b4a908a61434e565b612b72576001600160a01b0383166000908152600660205260409020612b70908a614363565b505b50875b6001600160a01b038116612b9b5760405162461bcd60e51b815260040161077a9061534f565b612bd385856000818110612bab57fe5b6001600160a01b038716600090815260056020908152604090912054939102013590506134ca565b6001600160a01b0384166000908152600560205260409020556060826001600160401b0381118015612c0457600080fd5b50604051908082528060200260200182016040528015612c2e578160200160208202803683370190505b50905060005b83811015612d19576001600160a01b03808616600090815260076020908152604080832093871683529290522054612c9657868682818110612c7257fe5b90506020020135828281518110612c8557fe5b602002602001018181525050612d11565b6001600160a01b0380861660009081526007602090815260408083209387168352929052208054612cf8919083908110612ccc57fe5b9060005260206000200154888884818110612ce357fe5b905060200201356134ca90919063ffffffff16565b828281518110612d0457fe5b6020026020010181815250505b600101612c34565b506001600160a01b03808516600090815260076020908152604080832093861683529281529190208251612d4f928401906149c9565b506001600160a01b0380851660008181526008602090815260408083208786168452825280832093835260098252808320948e168352939052919091205480612e8357612d9a614a10565b6001600160a01b038c168152604080516020808b0282810182019093528a825290918b918b91829185019084908082843760009201829052506020868101958652885460018082018b558a845292829020885160029092020180546001600160a01b0319166001600160a01b039092169190911781559551805188979650612e299550928601935001906149c9565b505050828054905060096000896001600160a01b03166001600160a01b0316815260200190815260200160002060008e6001600160a01b03166001600160a01b031681526020019081526020016000208190555050612f24565b6001600160a01b038087166000908152600860209081526040808320938816835292905290812080546000198401908110612eba57fe5b9060005260206000209060020201905060005b6001820154811015612f2157612efe8a8a83818110612ee857fe5b9050602002013583600101838154811061288457fe5b826001018281548110612f0d57fe5b600091825260209091200155600101612ecd565b50505b505050505050505050505050565b60076020528260005260406000206020528160005260406000208181548110612f5757fe5b9060005260206000200160009250925050505481565b612f768161428e565b15611aaa576040516327304dfd60e01b81526000906001600160a01b038316906327304dfd90612faa90339060040161513c565b60206040518083038186803b158015612fc257600080fd5b505afa158015612fd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ffa9190614f65565b806130865750336001600160a01b0316826001600160a01b0316633018205f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561304357600080fd5b505afa158015613057573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061307b9190614c79565b6001600160a01b0316145b90506000826001600160a01b0316635468d6d76040518163ffffffff1660e01b815260040160206040518083038186803b1580156130c357600080fd5b505afa1580156130d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130fb9190614f65565b90508061311a5760405162461bcd60e51b815260040161077a906154ad565b816131375760405162461bcd60e51b815260040161077a90615484565b604051631bf52ea760e21b815260609081903090636fd4ba9c9061315f90889060040161513c565b600060405180830381600087803b15801561317957600080fd5b505af115801561318d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526131b59190810190614ed3565b6001600160a01b0387166000908152600460209081526040808320805460ff19169055600c8252909120835193955091935090916131f89183919086019061494a565b50600181015483518082146132355781810360005b818110156132325760018086018054808301825560009182526020822001550161320d565b50505b60005b85518110156132c157600086828151811061324f57fe5b602002602001015190506132778a8288858151811061326a57fe5b6020026020010151614378565b61329d86838151811061328657fe5b602002602001015186600101848154811061288457fe5b8560010183815481106132ac57fe5b60009182526020909120015550600101613238565b505050505050505050565b6132d4613fca565b6001600160a01b03166132e5611aad565b6001600160a01b03161461330b5760405162461bcd60e51b815260040161077a90615428565b6001600160a01b0381166133315760405162461bcd60e51b815260040161077a906152a0565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000611c89826146a8565b60006133a383836146ac565b9392505050565b80515160009083108015906133c3575060208201515183105b156133d45750805160200151611c89565b60208201515183108015906133ed575060408201515183105b1561340057506020808201510151611c89565b6040820151518310801590613419575060608201515183105b1561342d5750604081015160200151611c89565b60608201515183106134485750606081015160200151611c89565b50600092915050565b60008261346057506000611c89565b8282028284828161346d57fe5b04146133a35760405162461bcd60e51b815260040161077a906153e7565b60006133a383836040518060400160405280601a815260200179536166654d6174683a206469766973696f6e206279207a65726f60301b8152506146d0565b6000828201838110156133a35760405162461bcd60e51b815260040161077a906152e6565b6001600160a01b0380851660009081526007602090815260408083209387168352929052908120548190613524576000613562565b6001600160a01b0380871660009081526007602090815260408083209389168352929052908120805490919061355657fe5b90600052602060002001545b905061356c6148dc565b506001600160a01b038616600090815260046020818152604080842081516101408101835260018201546101008201908152600283015461012083015260808083019182528451808601865260038501548152968401548787015260a080840197909752845180860186526005850154815260068501548188015260c080850191909152855180870187526007860154815260088601548189015260e0850152918352845180830186526009850154818301908152600a860154828a0152815285518087018752600b8601548152600c860154818901528188015285518087018752600d8601548152600e860154818901528187015285518087018752600f8601548152601086015481890152606082810191909152848801919091528551808401875260118601548184019081526012870154828b0152815286518088018852601387015481526014870154818a01528189015286518088018852601587015481526016870154818a01528188015286518088018852601787015481526018870154818a01528183015284870152855192830186526019850154918301918252601a85015497830197909752815283518085018552601b8401548152601c840154818701528186015283518085018552601d8401548152601e84015481870152818501528351808501909452601f8301548452918401549383019390935280840191909152918101919091529061378261491b565b6001600160a01b0389166000908152600360209081526040918290208251815460c09381028201840190945260a0810184815290939192849284918401828280156137f657602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116137d8575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561384e57602002820191906000526020600020905b81548152602001906001019080831161383a575b50505050508152602001600382018054806020026020016040519081016040528092919081815260200182805480156138a657602002820191906000526020600020905b815481526020019060010190808311613892575b50505050508152602001600482018054806020026020016040519081016040528092919081815260200182805480156138fe57602002820191906000526020600020905b8154815260200190600101908083116138ea575b505050505081526020016005820180548060200260200160405190810160405280929190818152602001828054801561395657602002820191906000526020600020905b815481526020019060010190808311613942575b50505050508152505090508360001415613977576000945050505050613acc565b6001600160a01b038916600090815260056020526040902054871580156139a357506000826020015151115b156139e0576139dd600d54610c6283610c62896139d76139c78c8c600001516133aa565b89602001518f81518110610c4c57fe5b90613451565b92505b8760011480156139f557506000826040015151115b15613a2c57613a29600d54610c6283610c62896139d7613a198c8c602001516133aa565b89604001518f81518110610c4c57fe5b92505b876002148015613a4157506000826060015151115b15613a7857613a75600d54610c6283610c62896139d7613a658c8c604001516133aa565b89606001518f81518110610c4c57fe5b92505b876003148015613a8d57506000826080015151115b15613ac457613ac1600d54610c6283610c62896139d7613ab18c8c606001516133aa565b89608001518f81518110610c4c57fe5b92505b509093505050505b949350505050565b613adc61491b565b613ae461491b565b6001600160a01b0383166000908152600360209081526040918290208251815460c09381028201840190945260a081018481529093919284928491840182828015613b5857602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613b3a575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015613bb057602002820191906000526020600020905b815481526020019060010190808311613b9c575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015613c0857602002820191906000526020600020905b815481526020019060010190808311613bf4575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015613c6057602002820191906000526020600020905b815481526020019060010190808311613c4c575b5050505050815260200160058201805480602002602001604051908101604052809291908181526020018280548015613cb857602002820191906000526020600020905b815481526020019060010190808311613ca4575b505050919092525050815180519085526001600160a01b038616600090815260066020526040812093945090929150613cf08261338c565b9050826001600160401b0381118015613d0857600080fd5b50604051908082528060200260200182016040528015613d32578160200160208202803683370190505b506020860152826001600160401b0381118015613d4e57600080fd5b50604051908082528060200260200182016040528015613d78578160200160208202803683370190505b506040860152826001600160401b0381118015613d9457600080fd5b50604051908082528060200260200182016040528015613dbe578160200160208202803683370190505b506060860152826001600160401b0381118015613dda57600080fd5b50604051908082528060200260200182016040528015613e04578160200160208202803683370190505b50608086015260005b6004811015613f7e5760005b84811015613f755760005b83811015613f6c5782613e7757613e5a613e4a8a613e428885613397565b6000866134ef565b896020015184815181106112d657fe5b88602001518381518110613e6a57fe5b6020026020010181815250505b8260011415613ec657613ea9613e998a613e918885613397565b6001866134ef565b896040015184815181106112d657fe5b88604001518381518110613eb957fe5b6020026020010181815250505b8260021415613f1557613ef8613ee88a613ee08885613397565b6002866134ef565b896060015184815181106112d657fe5b88606001518381518110613f0857fe5b6020026020010181815250505b8260031415613f6457613f47613f378a613f2f8885613397565b6003866134ef565b896080015184815181106112d657fe5b88608001518381518110613f5757fe5b6020026020010181815250505b600101613e24565b50600101613e19565b50600101613e0d565b5050505050919050565b60006133a383836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250614707565b3390565b6001600160a01b0384166000908152600360205260408120905b8351811015614224576000848281518110613fff57fe5b60200260200101519050600084838151811061401757fe5b6020908102919091018101516001600160a01b0384166000908152600187019092526040822054865491935091901561408a57811580156140855750836001600160a01b03168660000160008154811061406d57fe5b6000918252602090912001546001600160a01b031614155b61408d565b60015b90508015614138578554600180820188556000888152602080822090930180546001600160a01b0319166001600160a01b03891690811790915560028a01805480850182559083528483200182905560038a01805480850182559083528483200182905560048a01805480850182559083528483200182905560058a018054808501825590835284832001829055895490825291890190925260409091206000199091019081905591505b8861416c576141508387600201848154811061288457fe5b86600201838154811061415f57fe5b6000918252602090912001555b88600114156141a4576141888387600301848154811061288457fe5b86600301838154811061419757fe5b6000918252602090912001555b88600214156141dc576141c08387600401848154811061288457fe5b8660040183815481106141cf57fe5b6000918252602090912001555b8860031415614214576141f88387600501848154811061288457fe5b86600501838154811061420757fe5b6000918252602090912001555b505060019092019150613fe89050565b505050505050565b6121cc8363a9059cbb60e01b848460405160240161424b92919061516a565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614733565b6060806133a38361481e565b60006001826001600160a01b03166373a9855c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156142cb57600080fd5b505afa1580156142df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143039190614f81565b600181111561430e57fe5b1492915050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590613acc575050151592915050565b60006133a3836001600160a01b03841661487a565b60006133a3836001600160a01b038416614892565b6060836001600160a01b031663a0e67e2b6040518163ffffffff1660e01b815260040160006040518083038186803b1580156143b357600080fd5b505afa1580156143c7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526143ef9190810190614ea1565b90506060846001600160a01b031663309a042c6040518163ffffffff1660e01b815260040160006040518083038186803b15801561442c57600080fd5b505afa158015614440573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526144689190810190614f33565b90506000856001600160a01b031663d29986c16040518163ffffffff1660e01b815260040160206040518083038186803b1580156144a557600080fd5b505afa1580156144b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144dd9190615096565b905060005b83518110156146505760006145128583815181106144fc57fe5b60200260200101516001600160a01b0316614315565b61452f5784828151811061452257fe5b60200260200101516145b3565b84828151811061453b57fe5b60200260200101516001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561457b57600080fd5b505afa15801561458f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145b39190614c79565b905060006145e184610c628786815181106145ca57fe5b60200260200101518a61345190919063ffffffff16565b90506145f76001600160a01b038916838361422c565b816001600160a01b0316336001600160a01b03167f749a9ef4b9bff1f02a1a1d45429a3949e524fd93e3948001eab8dca05f1fcd6d8a844260405161463e93929190615183565b60405180910390a350506001016144e2565b50856001600160a01b0316336001600160a01b03167f1bf0129823b56213a46996bc874ce50b318995cae2bbdcd2000933d36012547d87874260405161469893929190615183565b60405180910390a3505050505050565b5490565b60008260000182815481106146bd57fe5b9060005260206000200154905092915050565b600081836146f15760405162461bcd60e51b815260040161077a9190615214565b5060008385816146fd57fe5b0495945050505050565b6000818484111561472b5760405162461bcd60e51b815260040161077a9190615214565b505050900390565b614745826001600160a01b0316614315565b6147615760405162461bcd60e51b815260040161077a90615559565b60006060836001600160a01b03168360405161477d9190615120565b6000604051808303816000865af19150503d80600081146147ba576040519150601f19603f3d011682016040523d82523d6000602084013e6147bf565b606091505b5091509150816147e15760405162461bcd60e51b815260040161077a90615380565b80511561481857808060200190518101906147fc9190614f65565b6148185760405162461bcd60e51b815260040161077a906154e0565b50505050565b60608160000180548060200260200160405190810160405280929190818152602001828054801561486e57602002820191906000526020600020905b81548152602001906001019080831161485a575b50505050509050919050565b60009081526001919091016020526040902054151590565b600061489e838361487a565b6148d457508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611c89565b506000611c89565b60405180608001604052806148ef614a28565b81526020016148fc614a28565b8152602001614909614a28565b8152602001614916614a28565b905290565b6040518060a0016040528060608152602001606081526020016060815260200160608152602001606081525090565b82805482825590600052602060002090810192821561499f579160200282015b8281111561499f57825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019061496a565b506149ab929150614a62565b5090565b604051806040016040528060608152602001606081525090565b828054828255906000526020600020908101928215614a04579160200282015b82811115614a045782518255916020019190600101906149e9565b506149ab929150614a81565b60408051808201909152600081526060602082015290565b6040518060800160405280614a3b614a96565b8152602001614a48614a96565b8152602001614a55614a96565b8152602001614916614a96565b5b808211156149ab5780546001600160a01b0319168155600101614a63565b5b808211156149ab5760008155600101614a82565b604051806040016040528060008152602001600081525090565b60008083601f840112614ac1578182fd5b5081356001600160401b03811115614ad7578182fd5b6020830191508360208083028501011115610d4757600080fd5b600082601f830112614b01578081fd5b8151614b14614b0f8261568a565b615664565b818152915060208083019084810181840286018201871015614b3557600080fd5b60005b84811015614b5d578151614b4b816156d5565b84529282019290820190600101614b38565b505050505092915050565b600082601f830112614b78578081fd5b8151614b86614b0f8261568a565b818152915060208083019084810181840286018201871015614ba757600080fd5b60005b84811015614b5d57815184529282019290820190600101614baa565b60006101008284031215614bd8578081fd5b614be26080615664565b9050614bee8383614c2c565b8152614bfd8360408401614c2c565b6020820152614c0f8360808401614c2c565b6040820152614c218360c08401614c2c565b606082015292915050565b600060408284031215614c3d578081fd5b614c476040615664565b9050813581526020820135602082015292915050565b600060208284031215614c6e578081fd5b81356133a3816156d5565b600060208284031215614c8a578081fd5b81516133a3816156d5565b60008060408385031215614ca7578081fd5b8235614cb2816156d5565b91506020830135614cc2816156d5565b809150509250929050565b60008060008060008060808789031215614ce5578182fd5b8635614cf0816156d5565b95506020870135614d00816156d5565b945060408701356001600160401b0380821115614d1b578384fd5b614d278a838b01614ab0565b90965094506060890135915080821115614d3f578384fd5b50614d4c89828a01614ab0565b979a9699509497509295939492505050565b600080600060608486031215614d72578283fd5b8335614d7d816156d5565b92506020840135614d8d816156d5565b929592945050506040919091013590565b60008060408385031215614db0578182fd5b8235614dbb816156d5565b91506020830135614cc2816156ea565b600080828403610420811215614ddf578283fd5b8335614dea816156d5565b9250610400601f1982011215614dfe578182fd5b50614e096080615664565b614e168560208601614bc6565b8152614e26856101208601614bc6565b6020820152614e39856102208601614bc6565b6040820152614e4c856103208601614bc6565b6060820152809150509250929050565b60008060008060008060808789031215614e74578384fd5b8635614e7f816156d5565b95506020870135945060408701356001600160401b0380821115614d1b578586fd5b600060208284031215614eb2578081fd5b81516001600160401b03811115614ec7578182fd5b613acc84828501614af1565b60008060408385031215614ee5578182fd5b82516001600160401b0380821115614efb578384fd5b614f0786838701614af1565b93506020850151915080821115614f1c578283fd5b50614f2985828601614b68565b9150509250929050565b600060208284031215614f44578081fd5b81516001600160401b03811115614f59578182fd5b613acc84828501614b68565b600060208284031215614f76578081fd5b81516133a3816156ea565b600060208284031215614f92578081fd5b8151600281106133a3578182fd5b600060208284031215614fb1578081fd5b81516001600160401b0380821115614fc7578283fd5b9083019060a08286031215614fda578283fd5b614fe460a0615664565b825182811115614ff2578485fd5b614ffe87828601614af1565b825250602083015182811115615012578485fd5b61501e87828601614b68565b602083015250604083015182811115615035578485fd5b61504187828601614b68565b604083015250606083015182811115615058578485fd5b61506487828601614b68565b60608301525060808301518281111561507b578485fd5b61508787828601614b68565b60808301525095945050505050565b6000602082840312156150a7578081fd5b5051919050565b6000815180845260208085019450808401835b838110156150e65781516001600160a01b0316875295820195908201906001016150c1565b509495945050505050565b6000815180845260208085019450808401835b838110156150e657815187529582019590820190600101615104565b600082516151328184602087016156a9565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b6000602082526133a360208301846150ae565b6000604082526151ca60408301856150ae565b82810360208401526151dc81856150f1565b95945050505050565b60006020825282602083015282846040840137818301604090810191909152601f909201601f19160101919050565b60006020825282518060208401526152338160408501602087016156a9565b601f01601f19169190910160400192915050565b60208082526012908201527122a9292fa727aa2fa1a7a72a2927a62622a960711b604082015260600190565b6020808252601390820152724552525f4e4f545f4352505f464143544f525960681b604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601b908201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604082015260600190565b6020808252601a908201527908aa4a4bea89e968a9cbe988a9c8ea890be9c9ea8be9a82a886960331b604082015260600190565b6020808252601790820152764552525f494e56414c49445f4b4f4c5f4144445245535360481b604082015260600190565b6020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b6020808252601890820152774552525f494e56414c49445f504f4f4c5f4144445245535360401b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600d908201526c11549497d21054d7d4d1551151609a1b604082015260600190565b6020808252600f908201526e22a9292fa727aa2fa6a0a720a3a2a960891b604082015260600190565b60208082526019908201527811549497d393d517d0d3d354131155115117d0d3d3131150d5603a1b604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b60208082526015908201527411549497d2d3d317d21054d7d393d7d49155d05491605a1b604082015260600190565b6020808252601f908201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604082015260600190565b6000602082528251604060208401526155ac60608401826150ae565b90506020840151601f198483030160408501526151dc82826150f1565b600060208252825160a060208401526155e560c08401826150ae565b90506020840151601f198085840301604086015261560383836150f1565b9250604086015191508085840301606086015261562083836150f1565b9250606086015191508085840301608086015261563d83836150f1565b925060808601519150808584030160a0860152506151dc82826150f1565b90815260200190565b6040518181016001600160401b038111828210171561568257600080fd5b604052919050565b60006001600160401b0382111561569f578081fd5b5060209081020190565b60005b838110156156c45781810151838201526020016156ac565b838111156148185750506000910152565b6001600160a01b0381168114611aaa57600080fd5b8015158114611aaa57600080fdfea264697066735822122052e6da628de8e3c1a14f6d9eec51b871a3fd5d203d1bd045b89f8fd0dbc28f0c64736f6c634300060c0033",
  "libraries": {},
  "devdoc": {
    "author": "Desyn Labs",
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Vault managerFee",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 18434,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9681,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "crpFactory",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ICRPFactory)9596"
      },
      {
        "astId": 9683,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "vaultAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 9722,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "poolsTokens",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(PoolTokens)9703_storage)"
      },
      {
        "astId": 9726,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "poolsStatus",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(PoolStatus)9712_storage)"
      },
      {
        "astId": 9730,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "poolInviteTotal",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9734,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "kolsList",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_struct(AddressSet)16095_storage)"
      },
      {
        "astId": 9741,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "kolTotalAmountList",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_array(t_uint256)dyn_storage))"
      },
      {
        "astId": 9748,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "kolUserInfo",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_address,t_array(t_struct(KolUserInfo)9718_storage)dyn_storage))"
      },
      {
        "astId": 9754,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "userIndexList",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 9760,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "userKolList",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 9789,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "kolHasClaimed",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(ClaimTokens)9767_storage))"
      },
      {
        "astId": 9809,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "manageHasClaimed",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_struct(ClaimTokens)9767_storage)"
      },
      {
        "astId": 9824,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "RATIO_TOTAL",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(KolUserInfo)9718_storage)dyn_storage": {
        "base": "t_struct(KolUserInfo)9718_storage",
        "encoding": "dynamic_array",
        "label": "struct UserVault.KolUserInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ICRPFactory)9596": {
        "encoding": "inplace",
        "label": "contract ICRPFactory",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_struct(KolUserInfo)9718_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct UserVault.KolUserInfo[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(KolUserInfo)9718_storage)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_array(t_struct(KolUserInfo)9718_storage)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct UserVault.KolUserInfo[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_struct(KolUserInfo)9718_storage)dyn_storage)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_array(t_uint256)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(ClaimTokens)9767_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct UserVault.ClaimTokens))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(ClaimTokens)9767_storage)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(AddressSet)16095_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)16095_storage"
      },
      "t_mapping(t_address,t_struct(ClaimTokens)9767_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct UserVault.ClaimTokens)",
        "numberOfBytes": "32",
        "value": "t_struct(ClaimTokens)9767_storage"
      },
      "t_mapping(t_address,t_struct(PoolStatus)9712_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct UserVault.PoolStatus)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolStatus)9712_storage"
      },
      "t_mapping(t_address,t_struct(PoolTokens)9703_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct UserVault.PoolTokens)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolTokens)9703_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)16095_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 16094,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)15908_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ClaimTokens)9767_storage": {
        "encoding": "inplace",
        "label": "struct UserVault.ClaimTokens",
        "members": [
          {
            "astId": 9763,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "tokens",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 9766,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "amounts",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(KolPoolParams)16911_storage": {
        "encoding": "inplace",
        "label": "struct SmartPoolManager.KolPoolParams",
        "members": [
          {
            "astId": 16904,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "managerFee",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(feeParams)16902_storage"
          },
          {
            "astId": 16906,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "issueFee",
            "offset": 0,
            "slot": "8",
            "type": "t_struct(feeParams)16902_storage"
          },
          {
            "astId": 16908,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "redeemFee",
            "offset": 0,
            "slot": "16",
            "type": "t_struct(feeParams)16902_storage"
          },
          {
            "astId": 16910,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "perfermanceFee",
            "offset": 0,
            "slot": "24",
            "type": "t_struct(feeParams)16902_storage"
          }
        ],
        "numberOfBytes": "1024"
      },
      "t_struct(KolUserInfo)9718_storage": {
        "encoding": "inplace",
        "label": "struct UserVault.KolUserInfo",
        "members": [
          {
            "astId": 9714,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "userAdr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 9717,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "userAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PoolStatus)9712_storage": {
        "encoding": "inplace",
        "label": "struct UserVault.PoolStatus",
        "members": [
          {
            "astId": 9705,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "couldManagerClaim",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 9707,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "isBlackList",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 9709,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "isSetParams",
            "offset": 2,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 9711,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "kolPoolConfig",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(KolPoolParams)16911_storage"
          }
        ],
        "numberOfBytes": "1056"
      },
      "t_struct(PoolTokens)9703_storage": {
        "encoding": "inplace",
        "label": "struct UserVault.PoolTokens",
        "members": [
          {
            "astId": 9686,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "tokenList",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 9690,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "tokenIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 9693,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "managerAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 9696,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "issueAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 9699,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "redeemAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 9702,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "perfermanceAmount",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Set)15908_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 15903,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 15907,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(feeParams)16902_storage": {
        "encoding": "inplace",
        "label": "struct SmartPoolManager.feeParams",
        "members": [
          {
            "astId": 16895,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "firstLevel",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(levelParams)16893_storage"
          },
          {
            "astId": 16897,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "secondLevel",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(levelParams)16893_storage"
          },
          {
            "astId": 16899,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "thirdLevel",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(levelParams)16893_storage"
          },
          {
            "astId": 16901,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "fourLevel",
            "offset": 0,
            "slot": "6",
            "type": "t_struct(levelParams)16893_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(levelParams)16893_storage": {
        "encoding": "inplace",
        "label": "struct SmartPoolManager.levelParams",
        "members": [
          {
            "astId": 16890,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "level",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 16892,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "ratio",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
