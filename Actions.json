{
  "address": "0x4F2A274352D129CdeEBdE02CD020B5d09e0669eD",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract FactoryActions",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "weights",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "swapFee",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "finalize",
          "type": "bool"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "contract LiquidityPoolActions",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICRPFactory",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "contract FactoryActions",
          "name": "coreFactory",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "poolTokenSymbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "poolTokenName",
              "type": "string"
            },
            {
              "internalType": "address[]",
              "name": "constituentTokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenBalances",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenWeights",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "swapFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "managerFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "redeemFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "issueFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "perfermanceFee",
              "type": "uint256"
            },
            {
              "internalType": "enum IConfigurableRightsPool.Etypes",
              "name": "etype",
              "type": "uint8"
            }
          ],
          "internalType": "struct IConfigurableRightsPool.PoolParams",
          "name": "poolParams",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "initialSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collectPeriod",
              "type": "uint256"
            },
            {
              "internalType": "enum IConfigurableRightsPool.Period",
              "name": "period",
              "type": "uint8"
            }
          ],
          "internalType": "struct IConfigurableRightsPool.CrpParams",
          "name": "crpParams",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "canPauseSwapping",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canChangeSwapFee",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canChangeWeights",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canAddRemoveTokens",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canWhitelistLPs",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canTokenWhiteLists",
              "type": "bool"
            }
          ],
          "internalType": "struct RightsManager.Rights",
          "name": "rights",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "firstLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "secondLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "thirdLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "fourLevel",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SmartPoolManager.feeParams",
              "name": "managerFee",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "firstLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "secondLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "thirdLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "fourLevel",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SmartPoolManager.feeParams",
              "name": "issueFee",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "firstLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "secondLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "thirdLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "fourLevel",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SmartPoolManager.feeParams",
              "name": "redeemFee",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "firstLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "secondLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "thirdLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "fourLevel",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SmartPoolManager.feeParams",
              "name": "perfermanceFee",
              "type": "tuple"
            }
          ],
          "internalType": "struct SmartPoolManager.KolPoolParams",
          "name": "kolPoolParams",
          "type": "tuple"
        },
        {
          "internalType": "address[]",
          "name": "owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ownerPercentage",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "bspFloor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bspCap",
              "type": "uint256"
            }
          ],
          "internalType": "struct IConfigurableRightsPool.PoolTokenRange",
          "name": "tokenRange",
          "type": "tuple"
        }
      ],
      "name": "createSmartPool",
      "outputs": [
        {
          "internalType": "contract IConfigurableRightsPool",
          "name": "crp",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract LiquidityPoolActions",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "finalize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract LiquidityPoolActions",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "poolAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "maxAmountsIn",
          "type": "uint256[]"
        }
      ],
      "name": "joinPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IConfigurableRightsPool",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "poolAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "maxAmountsIn",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "kol",
          "type": "address"
        }
      ],
      "name": "joinSmartPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IConfigurableRightsPool",
          "name": "crp",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deltaWeight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmountOut",
          "type": "uint256"
        }
      ],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IConfigurableRightsPool",
          "name": "crp",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        }
      ],
      "name": "removeWhitelistedLiquidityProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IConfigurableRightsPool",
          "name": "crp",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newCap",
          "type": "uint256"
        }
      ],
      "name": "setCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AbstractPool",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newController",
          "type": "address"
        }
      ],
      "name": "setController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AbstractPool",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "publicSwap",
          "type": "bool"
        }
      ],
      "name": "setPublicSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AbstractPool",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "setSwapFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract LiquidityPoolActions",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "denorms",
          "type": "uint256[]"
        }
      ],
      "name": "setTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IConfigurableRightsPool",
          "name": "crp",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        }
      ],
      "name": "whitelistLiquidityProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2e1ee581406045e2fd402f26304ec5460bdfb90e405801e27a781ed93112d3d9",
  "receipt": {
    "to": null,
    "from": "0x595b85b4A418e3B8df897D02F5BD49167D00862F",
    "contractAddress": "0x4F2A274352D129CdeEBdE02CD020B5d09e0669eD",
    "transactionIndex": 0,
    "gasUsed": "2395233",
    "logsBloom": "0x
    "blockHash": "0xe0ff843fba5622afd630c93e1acfe3a98507705b9a1b9bf9aea33b858c2ec17c",
    "transactionHash": "0x2e1ee581406045e2fd402f26304ec5460bdfb90e405801e27a781ed93112d3d9",
    "logs": [],
    "blockNumber": 7888091,
    "cumulativeGasUsed": "2395233",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c4935c7bbb687e1b5444e68bf79f180c",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract FactoryActions\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"finalize\",\"type\":\"bool\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"contract LiquidityPoolActions\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICRPFactory\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"contract FactoryActions\",\"name\":\"coreFactory\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"poolTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"poolTokenName\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"constituentTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenBalances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenWeights\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"managerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"issueFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perfermanceFee\",\"type\":\"uint256\"},{\"internalType\":\"enum IConfigurableRightsPool.Etypes\",\"name\":\"etype\",\"type\":\"uint8\"}],\"internalType\":\"struct IConfigurableRightsPool.PoolParams\",\"name\":\"poolParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collectPeriod\",\"type\":\"uint256\"},{\"internalType\":\"enum IConfigurableRightsPool.Period\",\"name\":\"period\",\"type\":\"uint8\"}],\"internalType\":\"struct IConfigurableRightsPool.CrpParams\",\"name\":\"crpParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"canPauseSwapping\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canChangeSwapFee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canChangeWeights\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canAddRemoveTokens\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canWhitelistLPs\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canTokenWhiteLists\",\"type\":\"bool\"}],\"internalType\":\"struct RightsManager.Rights\",\"name\":\"rights\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"managerFee\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"issueFee\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"redeemFee\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"perfermanceFee\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.KolPoolParams\",\"name\":\"kolPoolParams\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ownerPercentage\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"bspFloor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bspCap\",\"type\":\"uint256\"}],\"internalType\":\"struct IConfigurableRightsPool.PoolTokenRange\",\"name\":\"tokenRange\",\"type\":\"tuple\"}],\"name\":\"createSmartPool\",\"outputs\":[{\"internalType\":\"contract IConfigurableRightsPool\",\"name\":\"crp\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract LiquidityPoolActions\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract LiquidityPoolActions\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"maxAmountsIn\",\"type\":\"uint256[]\"}],\"name\":\"joinPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConfigurableRightsPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"maxAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"kol\",\"type\":\"address\"}],\"name\":\"joinSmartPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConfigurableRightsPool\",\"name\":\"crp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deltaWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"}],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConfigurableRightsPool\",\"name\":\"crp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"removeWhitelistedLiquidityProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConfigurableRightsPool\",\"name\":\"crp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newCap\",\"type\":\"uint256\"}],\"name\":\"setCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AbstractPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AbstractPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"publicSwap\",\"type\":\"bool\"}],\"name\":\"setPublicSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AbstractPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setSwapFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract LiquidityPoolActions\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"denorms\",\"type\":\"uint256[]\"}],\"name\":\"setTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConfigurableRightsPool\",\"name\":\"crp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"whitelistLiquidityProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/deploy/Actions.sol\":\"Actions\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"contracts/deploy/Actions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\npragma experimental ABIEncoderV2;\\nimport {RightsManager} from \\\"../libraries/RightsManager.sol\\\";\\nimport {SmartPoolManager} from \\\"../libraries/SmartPoolManager.sol\\\";\\n\\nabstract contract ERC20 {\\n    function approve(address spender, uint amount) external virtual returns (bool);\\n\\n    function transfer(address dst, uint amt) external virtual returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint amount\\n    ) external virtual returns (bool);\\n\\n    function balanceOf(address whom) external view virtual returns (uint);\\n\\n    function allowance(address, address) external view virtual returns (uint);\\n}\\n\\nabstract contract DesynOwnable {\\n    function setController(address controller) external virtual;\\n}\\n\\nabstract contract AbstractPool is ERC20, DesynOwnable {\\n    function setSwapFee(uint swapFee) external virtual;\\n\\n    function setPublicSwap(bool public_) external virtual;\\n\\n    function joinPool(\\n        uint poolAmountOut,\\n        uint[] calldata maxAmountsIn,\\n        address kol\\n    ) external virtual;\\n}\\n\\nabstract contract LiquidityPoolActions is AbstractPool {\\n    function finalize() external virtual;\\n\\n    function bind(\\n        address token,\\n        uint balance,\\n        uint denorm\\n    ) external virtual;\\n\\n    function rebind(\\n        address token,\\n        uint balance,\\n        uint denorm\\n    ) external virtual;\\n\\n    function unbind(address token) external virtual;\\n\\n    function isBound(address t) external view virtual returns (bool);\\n\\n    function getCurrentTokens() external view virtual returns (address[] memory);\\n\\n    function getFinalTokens() external view virtual returns (address[] memory);\\n\\n    function getBalance(address token) external view virtual returns (uint);\\n}\\n\\nabstract contract FactoryActions {\\n    function newLiquidityPool() external virtual returns (LiquidityPoolActions);\\n}\\n\\nabstract contract IConfigurableRightsPool is AbstractPool {\\n    enum Etypes {\\n        OPENED,\\n        CLOSED\\n    }\\n    enum Period {\\n        HALF,\\n        ONE,\\n        TWO\\n    }\\n\\n    struct PoolTokenRange {\\n        uint bspFloor;\\n        uint bspCap;\\n    }\\n\\n    struct PoolParams {\\n        string poolTokenSymbol;\\n        string poolTokenName;\\n        address[] constituentTokens;\\n        uint[] tokenBalances;\\n        uint[] tokenWeights;\\n        uint swapFee;\\n        uint managerFee;\\n        uint redeemFee;\\n        uint issueFee;\\n        uint perfermanceFee;\\n        Etypes etype;\\n    }\\n\\n    struct CrpParams {\\n        uint initialSupply;\\n        uint collectPeriod;\\n        Period period;\\n    }\\n\\n    function createPool(\\n        uint initialSupply,\\n        uint collectPeriod,\\n        Period period,\\n        PoolTokenRange memory tokenRange\\n    ) external virtual;\\n\\n    function createPool(uint initialSupply) external virtual;\\n\\n    function setCap(uint newCap) external virtual;\\n\\n    function rebalance(\\n        address tokenA,\\n        address tokenB,\\n        uint deltaWeight,\\n        uint minAmountOut\\n    ) external virtual;\\n\\n    function commitAddToken(\\n        address token,\\n        uint balance,\\n        uint denormalizedWeight\\n    ) external virtual;\\n\\n    function applyAddToken() external virtual;\\n\\n    function whitelistLiquidityProvider(address provider) external virtual;\\n\\n    function removeWhitelistedLiquidityProvider(address provider) external virtual;\\n\\n    function bPool() external view virtual returns (LiquidityPoolActions);\\n}\\n\\nabstract contract ICRPFactory {\\n    function newCrp(\\n        address factoryAddress,\\n        IConfigurableRightsPool.PoolParams calldata params,\\n        RightsManager.Rights calldata rights,\\n        SmartPoolManager.KolPoolParams calldata kolPoolParams,\\n        address[] memory owners,\\n        uint[] memory ownerPercentage\\n    ) external virtual returns (IConfigurableRightsPool);\\n}\\n\\n/********************************** WARNING **********************************/\\n//                                                                           //\\n// This contract is only meant to be used in conjunction with ds-proxy.      //\\n// Calling this contract directly will lead to loss of funds.                //\\n//                                                                           //\\n/********************************** WARNING **********************************/\\n\\ncontract Actions {\\n    // --- Pool Creation ---\\n\\n    function create(\\n        FactoryActions factory,\\n        address[] calldata tokens,\\n        uint[] calldata balances,\\n        uint[] calldata weights,\\n        uint swapFee,\\n        bool finalize\\n    ) external returns (LiquidityPoolActions pool) {\\n        require(tokens.length == balances.length, \\\"ERR_LENGTH_MISMATCH\\\");\\n        require(tokens.length == weights.length, \\\"ERR_LENGTH_MISMATCH\\\");\\n\\n        pool = factory.newLiquidityPool();\\n        pool.setSwapFee(swapFee);\\n\\n        for (uint i = 0; i < tokens.length; i++) {\\n            ERC20 token = ERC20(tokens[i]);\\n            require(token.transferFrom(msg.sender, address(this), balances[i]), \\\"ERR_TRANSFER_FAILED\\\");\\n            _safeApprove(token, address(pool), balances[i]);\\n            pool.bind(tokens[i], balances[i], weights[i]);\\n        }\\n\\n        if (finalize) {\\n            pool.finalize();\\n            require(pool.transfer(msg.sender, pool.balanceOf(address(this))), \\\"ERR_TRANSFER_FAILED\\\");\\n        } else {\\n            pool.setPublicSwap(true);\\n        }\\n    }\\n\\n    function createSmartPool(\\n        ICRPFactory factory,\\n        FactoryActions coreFactory,\\n        IConfigurableRightsPool.PoolParams calldata poolParams,\\n        IConfigurableRightsPool.CrpParams calldata crpParams,\\n        RightsManager.Rights calldata rights,\\n        SmartPoolManager.KolPoolParams calldata kolPoolParams,\\n        address[] memory owners,\\n        uint[] memory ownerPercentage,\\n        IConfigurableRightsPool.PoolTokenRange memory tokenRange\\n    ) external returns (IConfigurableRightsPool crp) {\\n        require(poolParams.constituentTokens.length == poolParams.tokenBalances.length, \\\"ERR_LENGTH_MISMATCH\\\");\\n        require(poolParams.constituentTokens.length == poolParams.tokenWeights.length, \\\"ERR_LENGTH_MISMATCH\\\");\\n\\n        crp = factory.newCrp(address(coreFactory), poolParams, rights, kolPoolParams, owners, ownerPercentage);\\n        for (uint i = 0; i < poolParams.constituentTokens.length; i++) {\\n            ERC20 token = ERC20(poolParams.constituentTokens[i]);\\n            require(token.transferFrom(msg.sender, address(this), poolParams.tokenBalances[i]), \\\"ERR_TRANSFER_FAILED\\\");\\n            _safeApprove(token, address(crp), poolParams.tokenBalances[i]);\\n        }\\n\\n        crp.createPool(crpParams.initialSupply, crpParams.collectPeriod, crpParams.period, tokenRange);\\n        require(crp.transfer(msg.sender, crpParams.initialSupply), \\\"ERR_TRANSFER_FAILED\\\");\\n        // DSProxy instance keeps pool ownership to enable management\\n    }\\n\\n    // --- Joins ---\\n\\n    function joinPool(\\n        LiquidityPoolActions pool,\\n        uint poolAmountOut,\\n        uint[] calldata maxAmountsIn\\n    ) external {\\n        address[] memory tokens = pool.getFinalTokens();\\n        _join(pool, tokens, poolAmountOut, maxAmountsIn, msg.sender);\\n    }\\n\\n    function joinSmartPool(\\n        IConfigurableRightsPool pool,\\n        uint poolAmountOut,\\n        uint[] calldata maxAmountsIn,\\n        address kol\\n    ) external {\\n        address[] memory tokens = pool.bPool().getCurrentTokens();\\n        _join(pool, tokens, poolAmountOut, maxAmountsIn, kol);\\n    }\\n\\n    // --- Pool management (common) ---\\n\\n    function setPublicSwap(AbstractPool pool, bool publicSwap) external {\\n        pool.setPublicSwap(publicSwap);\\n    }\\n\\n    function setSwapFee(AbstractPool pool, uint newFee) external {\\n        pool.setSwapFee(newFee);\\n    }\\n\\n    function setController(AbstractPool pool, address newController) external {\\n        pool.setController(newController);\\n    }\\n\\n    // --- Private pool management ---\\n\\n    function setTokens(\\n        LiquidityPoolActions pool,\\n        address[] calldata tokens,\\n        uint[] calldata balances,\\n        uint[] calldata denorms\\n    ) external {\\n        require(tokens.length == balances.length, \\\"ERR_LENGTH_MISMATCH\\\");\\n        require(tokens.length == denorms.length, \\\"ERR_LENGTH_MISMATCH\\\");\\n\\n        for (uint i = 0; i < tokens.length; i++) {\\n            ERC20 token = ERC20(tokens[i]);\\n            if (pool.isBound(tokens[i])) {\\n                if (balances[i] > pool.getBalance(tokens[i])) {\\n                    require(token.transferFrom(msg.sender, address(this), balances[i] - pool.getBalance(tokens[i])), \\\"ERR_TRANSFER_FAILED\\\");\\n                    _safeApprove(token, address(pool), balances[i] - pool.getBalance(tokens[i]));\\n                }\\n                if (balances[i] > 10**6) {\\n                    pool.rebind(tokens[i], balances[i], denorms[i]);\\n                } else {\\n                    pool.unbind(tokens[i]);\\n                }\\n            } else {\\n                require(token.transferFrom(msg.sender, address(this), balances[i]), \\\"ERR_TRANSFER_FAILED\\\");\\n                _safeApprove(token, address(pool), balances[i]);\\n                pool.bind(tokens[i], balances[i], denorms[i]);\\n            }\\n\\n            if (token.balanceOf(address(this)) > 0) {\\n                require(token.transfer(msg.sender, token.balanceOf(address(this))), \\\"ERR_TRANSFER_FAILED\\\");\\n            }\\n        }\\n    }\\n\\n    function finalize(LiquidityPoolActions pool) external {\\n        pool.finalize();\\n        require(pool.transfer(msg.sender, pool.balanceOf(address(this))), \\\"ERR_TRANSFER_FAILED\\\");\\n    }\\n\\n    // --- Smart pool management ---\\n\\n    function rebalance(\\n        IConfigurableRightsPool crp,\\n        address tokenA,\\n        address tokenB,\\n        uint deltaWeight,\\n        uint minAmountOut\\n    ) external {\\n        crp.rebalance(tokenA, tokenB, deltaWeight, minAmountOut);\\n    }\\n\\n    function setCap(IConfigurableRightsPool crp, uint newCap) external {\\n        crp.setCap(newCap);\\n    }\\n\\n    function whitelistLiquidityProvider(IConfigurableRightsPool crp, address provider) external {\\n        crp.whitelistLiquidityProvider(provider);\\n    }\\n\\n    function removeWhitelistedLiquidityProvider(IConfigurableRightsPool crp, address provider) external {\\n        crp.removeWhitelistedLiquidityProvider(provider);\\n    }\\n\\n    // --- Internals ---\\n\\n    function _safeApprove(\\n        ERC20 token,\\n        address spender,\\n        uint amount\\n    ) internal {\\n        if (token.allowance(address(this), spender) > 0) {\\n            token.approve(spender, 0);\\n        }\\n        token.approve(spender, amount);\\n    }\\n\\n    function _join(\\n        AbstractPool pool,\\n        address[] memory tokens,\\n        uint poolAmountOut,\\n        uint[] memory maxAmountsIn,\\n        address kol\\n    ) internal {\\n        require(maxAmountsIn.length == tokens.length, \\\"ERR_LENGTH_MISMATCH\\\");\\n\\n        for (uint i = 0; i < tokens.length; i++) {\\n            ERC20 token = ERC20(tokens[i]);\\n            require(token.transferFrom(msg.sender, address(this), maxAmountsIn[i]), \\\"ERR_TRANSFER_FAILED\\\");\\n            _safeApprove(token, address(pool), maxAmountsIn[i]);\\n        }\\n        pool.joinPool(poolAmountOut, maxAmountsIn, kol);\\n        for (uint i = 0; i < tokens.length; i++) {\\n            ERC20 token = ERC20(tokens[i]);\\n            if (token.balanceOf(address(this)) > 0) {\\n                require(token.transfer(msg.sender, token.balanceOf(address(this))), \\\"ERR_TRANSFER_FAILED\\\");\\n            }\\n        }\\n        require(pool.transfer(msg.sender, pool.balanceOf(address(this))), \\\"ERR_TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xc85fe39811bc4992dc5a7f0e28e23db9b691615013f1368a5ee359bc66d5e8d3\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IBFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\nimport \\\"../libraries/SmartPoolManager.sol\\\";\\n\\ninterface IBPool {\\n    function rebind(\\n        address token,\\n        uint balance,\\n        uint denorm\\n    ) external;\\n\\n    function rebindSmart(\\n        address tokenA,\\n        address tokenB,\\n        uint deltaWeight,\\n        uint deltaBalance,\\n        bool isSoldout,\\n        uint minAmountOut\\n    ) external;\\n\\n    function execute(\\n        address _target,\\n        uint _value,\\n        bytes calldata _data\\n    ) external returns (bytes memory _returnValue);\\n\\n    function bind(\\n        address token,\\n        uint balance,\\n        uint denorm\\n    ) external;\\n\\n    function unbind(address token) external;\\n\\n    function unbindPure(address token) external;\\n\\n    function isBound(address token) external view returns (bool);\\n\\n    function getBalance(address token) external view returns (uint);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function getSwapFee() external view returns (uint);\\n\\n    function isPublicSwap() external view returns (bool);\\n\\n    function getDenormalizedWeight(address token) external view returns (uint);\\n\\n    function getTotalDenormalizedWeight() external view returns (uint);\\n\\n    function EXIT_FEE() external view returns (uint);\\n\\n    function getCurrentTokens() external view returns (address[] memory tokens);\\n\\n    function setController(address owner) external;\\n}\\n\\ninterface IBFactory {\\n    function newLiquidityPool() external returns (IBPool);\\n\\n    function setBLabs(address b) external;\\n\\n    function collect(IBPool pool) external;\\n\\n    function isBPool(address b) external view returns (bool);\\n\\n    function getBLabs() external view returns (address);\\n\\n    function getSwapRouter() external view returns (address);\\n\\n    function getVault() external view returns (address);\\n\\n    function getUserVault() external view returns (address);\\n\\n    function getVaultAddress() external view returns (address);\\n\\n    function getOracleAddress() external view returns (address);\\n\\n    function getManagerOwner() external view returns (address);\\n\\n    function isTokenWhitelistedForVerify(uint sort, address token) external view returns (bool);\\n\\n    function isTokenWhitelistedForVerify(address token) external view returns (bool);\\n\\n    function getModuleStatus(address etf, address module) external view returns (bool);\\n}\\n\\ninterface IVault {\\n    function depositManagerToken(address[] calldata poolTokens, uint[] calldata tokensAmount) external;\\n\\n    function depositIssueRedeemPToken(\\n        address[] calldata poolTokens,\\n        uint[] calldata tokensAmount,\\n        uint[] calldata tokensAmountP,\\n        bool isPerfermance\\n    ) external;\\n\\n    function managerClaim(address pool) external;\\n\\n    function getManagerClaimBool(address pool) external view returns (bool);\\n}\\n\\ninterface IUserVault {\\n    function recordTokenInfo(\\n        address kol,\\n        address user,\\n        address[] calldata poolTokens,\\n        uint[] calldata tokensAmount\\n    ) external;\\n}\\n\\ninterface Oracles {\\n    function getPrice(address tokenAddress) external returns (uint price);\\n\\n    function getAllPrice(address[] calldata poolTokens, uint[] calldata tokensAmount) external returns (uint);\\n}\\n\",\"keccak256\":\"0x13c400ca7a5f59c8730f553fcf189c14af0c0d65a79012793cbde56ce221a419\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IConfigurableRightsPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Interface declarations\\n\\n// Introduce to avoid circularity (otherwise, the CRP and SmartPoolManager include each other)\\n// Removing circularity allows flattener tools to work, which enables Etherscan verification\\ninterface IConfigurableRightsPool {\\n    function mintPoolShareFromLib(uint amount) external;\\n\\n    function pushPoolShareFromLib(address to, uint amount) external;\\n\\n    function pullPoolShareFromLib(address from, uint amount) external;\\n\\n    function burnPoolShareFromLib(uint amount) external;\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function getController() external view returns (address);\\n}\\n\",\"keccak256\":\"0x54defbc333ab8f90c4fe352c694c360cc38fd707606199caf05fc165a64da788\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Interface declarations\\n\\n/* solhint-disable func-order */\\n\\ninterface IERC20 {\\n    // Emitted when the allowance of a spender for an owner is set by a call to approve.\\n    // Value is the new allowance\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n\\n    // Emitted when value tokens are moved from one account (from) to another (to).\\n    // Note that value may be zero\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    // Returns the amount of tokens in existence\\n    function totalSupply() external view returns (uint);\\n\\n    // Returns the amount of tokens owned by account\\n    function balanceOf(address account) external view returns (uint);\\n\\n    // Returns the decimals of tokens\\n    function decimals() external view returns (uint8);\\n\\n    function symbol() external view returns (string memory);\\n\\n    // Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner\\n    // through transferFrom. This is zero by default\\n    // This value changes when approve or transferFrom are called\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    // Sets amount as the allowance of spender over the caller\\u2019s tokens\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits an Approval event.\\n    function approve(address spender, uint amount) external returns (bool);\\n\\n    // Moves amount tokens from the caller\\u2019s account to recipient\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits a Transfer event.\\n    function transfer(address recipient, uint amount) external returns (bool);\\n\\n    // Moves amount tokens from sender to recipient using the allowance mechanism\\n    // Amount is then deducted from the caller\\u2019s allowance\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits a Transfer event\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xfe22b6d6029b400b9cce7f9b39c546f99cd6922b2fd926e480e2b4d476ab26f8\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/DesynConstants.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n/**\\n * @author Desyn Labs\\n * @title Put all the constants in one place\\n */\\n\\nlibrary DesynConstants {\\n    // State variables (must be constant in a library)\\n\\n    // B \\\"ONE\\\" - all math is in the \\\"realm\\\" of 10 ** 18;\\n    // where numeric 1 = 10 ** 18\\n    uint public constant BONE = 10**18;\\n    uint public constant MIN_WEIGHT = BONE;\\n    uint public constant MAX_WEIGHT = BONE * 50;\\n    uint public constant MAX_TOTAL_WEIGHT = BONE * 50;\\n    uint public constant MIN_BALANCE = BONE / 10**6;\\n    uint public constant MAX_BALANCE = BONE * 10**12;\\n    uint public constant MIN_POOL_SUPPLY = BONE * 100;\\n    uint public constant MAX_POOL_SUPPLY = BONE * 10**9;\\n    uint public constant MIN_FEE = BONE / 10**6;\\n    uint public constant MAX_FEE = BONE / 10;\\n    //Fee Set\\n    uint public constant MANAGER_MIN_FEE = 0;\\n    uint public constant MANAGER_MAX_FEE = BONE / 10;\\n    uint public constant ISSUE_MIN_FEE = 0;\\n    uint public constant ISSUE_MAX_FEE = BONE / 10;\\n    uint public constant REDEEM_MIN_FEE = 0;\\n    uint public constant REDEEM_MAX_FEE = BONE / 10;\\n    uint public constant PERFERMANCE_MIN_FEE = 0;\\n    uint public constant PERFERMANCE_MAX_FEE = BONE / 2;\\n    // EXIT_FEE must always be zero, or ConfigurableRightsPool._pushUnderlying will fail\\n    uint public constant EXIT_FEE = 0;\\n    uint public constant MAX_IN_RATIO = BONE / 2;\\n    uint public constant MAX_OUT_RATIO = (BONE / 3) + 1 wei;\\n    // Must match BConst.MIN_BOUND_TOKENS and BConst.MAX_BOUND_TOKENS\\n    uint public constant MIN_ASSET_LIMIT = 1;\\n    uint public constant MAX_ASSET_LIMIT = 16;\\n    uint public constant MAX_UINT = uint(-1);\\n    uint public constant MAX_COLLECT_PERIOD = 60 days;\\n}\\n\",\"keccak256\":\"0x7980d0f32316714804b3fa02faa0f450ce206920e5538a27921b5de4e85de737\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/DesynSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Imports\\n\\nimport \\\"./DesynConstants.sol\\\";\\n\\n/**\\n * @author Desyn Labs\\n * @title SafeMath - wrap Solidity operators to prevent underflow/overflow\\n * @dev badd and bsub are basically identical to OpenZeppelin SafeMath; mul/div have extra checks\\n */\\nlibrary DesynSafeMath {\\n    /**\\n     * @notice Safe addition\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev if we are adding b to a, the resulting sum must be greater than a\\n     * @return - sum of operands; throws if overflow\\n     */\\n    function badd(uint a, uint b) internal pure returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, \\\"ERR_ADD_OVERFLOW\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned subtraction\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Do a signed subtraction, and check that it produces a positive value\\n     *      (i.e., a - b is valid if b <= a)\\n     * @return - a - b; throws if underflow\\n     */\\n    function bsub(uint a, uint b) internal pure returns (uint) {\\n        (uint c, bool negativeResult) = bsubSign(a, b);\\n        require(!negativeResult, \\\"ERR_SUB_UNDERFLOW\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Safe signed subtraction\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Do a signed subtraction\\n     * @return - difference between a and b, and a flag indicating a negative result\\n     *           (i.e., a - b if a is greater than or equal to b; otherwise b - a)\\n     */\\n    function bsubSign(uint a, uint b) internal pure returns (uint, bool) {\\n        if (b <= a) {\\n            return (a - b, false);\\n        } else {\\n            return (b - a, true);\\n        }\\n    }\\n\\n    /**\\n     * @notice Safe multiplication\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Multiply safely (and efficiently), rounding down\\n     * @return - product of operands; throws if overflow or rounding error\\n     */\\n    function bmul(uint a, uint b) internal pure returns (uint) {\\n        // Gas optimization (see github.com/OpenZeppelin/openzeppelin-contracts/pull/522)\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // Standard overflow check: a/a*b=b\\n        uint c0 = a * b;\\n        require(c0 / a == b, \\\"ERR_MUL_OVERFLOW\\\");\\n\\n        // Round to 0 if x*y < BONE/2?\\n        uint c1 = c0 + (DesynConstants.BONE / 2);\\n        require(c1 >= c0, \\\"ERR_MUL_OVERFLOW\\\");\\n        uint c2 = c1 / DesynConstants.BONE;\\n        return c2;\\n    }\\n\\n    /**\\n     * @notice Safe division\\n     * @param dividend - first operand\\n     * @param divisor - second operand\\n     * @dev Divide safely (and efficiently), rounding down\\n     * @return - quotient; throws if overflow or rounding error\\n     */\\n    function bdiv(uint dividend, uint divisor) internal pure returns (uint) {\\n        require(divisor != 0, \\\"ERR_DIV_ZERO\\\");\\n\\n        // Gas optimization\\n        if (dividend == 0) {\\n            return 0;\\n        }\\n\\n        uint c0 = dividend * DesynConstants.BONE;\\n        require(c0 / dividend == DesynConstants.BONE, \\\"ERR_DIV_INTERNAL\\\"); // bmul overflow\\n\\n        uint c1 = c0 + (divisor / 2);\\n        require(c1 >= c0, \\\"ERR_DIV_INTERNAL\\\"); //  badd require\\n\\n        uint c2 = c1 / divisor;\\n        return c2;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer modulo\\n     * @dev Returns the remainder of dividing two unsigned integers.\\n     *      Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * @param dividend - first operand\\n     * @param divisor - second operand -- cannot be zero\\n     * @return - quotient; throws if overflow or rounding error\\n     */\\n    function bmod(uint dividend, uint divisor) internal pure returns (uint) {\\n        require(divisor != 0, \\\"ERR_MODULO_BY_ZERO\\\");\\n\\n        return dividend % divisor;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer max\\n     * @dev Returns the greater of the two input values\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the maximum of a and b\\n     */\\n    function bmax(uint a, uint b) internal pure returns (uint) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer min\\n     * @dev returns b, if b < a; otherwise returns a\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the lesser of the two input values\\n     */\\n    function bmin(uint a, uint b) internal pure returns (uint) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer average\\n     * @dev Guard against (a+b) overflow by dividing each operand separately\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the average of the two values\\n     */\\n    function baverage(uint a, uint b) internal pure returns (uint) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\\n    }\\n\\n    /**\\n     * @notice Babylonian square root implementation\\n     * @dev (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n     * @param y - operand\\n     * @return z - the square root result\\n     */\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9baf30b98a5f3a8c13ac9c4d5d4b176eabfd936aba8f5172c95b7c568fba68f3\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/RightsManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Needed to handle structures externally\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @author Desyn Labs\\n * @title Manage Configurable Rights for the smart pool\\n *      canPauseSwapping - can setPublicSwap back to false after turning it on\\n *                         by default, it is off on initialization and can only be turned on\\n *      canChangeSwapFee - can setSwapFee after initialization (by default, it is fixed at create time)\\n *      canChangeWeights - can bind new token weights (allowed by default in base pool)\\n *      canAddRemoveTokens - can bind/unbind tokens (allowed by default in base pool)\\n *      canWhitelistLPs - can limit liquidity providers to a given set of addresses\\n *      canChangeCap - can change the BSP cap (max # of pool tokens)\\n *      canChangeFloor - can change the BSP floor for Closure ETF (min # of pool tokens)\\n */\\nlibrary RightsManager {\\n    // Type declarations\\n\\n    enum Permissions {\\n        PAUSE_SWAPPING,\\n        CHANGE_SWAP_FEE,\\n        CHANGE_WEIGHTS,\\n        ADD_REMOVE_TOKENS,\\n        WHITELIST_LPS,\\n        TOKEN_WHITELISTS\\n        // CHANGE_CAP,\\n        // CHANGE_FLOOR\\n    }\\n\\n    struct Rights {\\n        bool canPauseSwapping;\\n        bool canChangeSwapFee;\\n        bool canChangeWeights;\\n        bool canAddRemoveTokens;\\n        bool canWhitelistLPs;\\n        bool canTokenWhiteLists;\\n        // bool canChangeCap;\\n        // bool canChangeFloor;\\n    }\\n\\n    // State variables (can only be constants in a library)\\n    bool public constant DEFAULT_CAN_PAUSE_SWAPPING = false;\\n    bool public constant DEFAULT_CAN_CHANGE_SWAP_FEE = true;\\n    bool public constant DEFAULT_CAN_CHANGE_WEIGHTS = true;\\n    bool public constant DEFAULT_CAN_ADD_REMOVE_TOKENS = false;\\n    bool public constant DEFAULT_CAN_WHITELIST_LPS = false;\\n    bool public constant DEFAULT_CAN_TOKEN_WHITELISTS = false;\\n    // bool public constant DEFAULT_CAN_CHANGE_CAP = false;\\n    // bool public constant DEFAULT_CAN_CHANGE_FLOOR = false;\\n\\n    // Functions\\n\\n    /**\\n     * @notice create a struct from an array (or return defaults)\\n     * @dev If you pass an empty array, it will construct it using the defaults\\n     * @param a - array input\\n     * @return Rights struct\\n     */\\n    function constructRights(bool[] calldata a) external pure returns (Rights memory) {\\n        if (a.length < 6) {\\n            return\\n                Rights(\\n                    DEFAULT_CAN_PAUSE_SWAPPING,\\n                    DEFAULT_CAN_CHANGE_SWAP_FEE,\\n                    DEFAULT_CAN_CHANGE_WEIGHTS,\\n                    DEFAULT_CAN_ADD_REMOVE_TOKENS,\\n                    DEFAULT_CAN_WHITELIST_LPS,\\n                    DEFAULT_CAN_TOKEN_WHITELISTS\\n                    // DEFAULT_CAN_CHANGE_CAP,\\n                    // DEFAULT_CAN_CHANGE_FLOOR\\n                );\\n        } else {\\n            // return Rights(a[0], a[1], a[2], a[3], a[4], a[5], a[6]);\\n            return Rights(a[0], a[1], a[2], a[3], a[4], a[5]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Convert rights struct to an array (e.g., for events, GUI)\\n     * @dev avoids multiple calls to hasPermission\\n     * @param rights - the rights struct to convert\\n     * @return boolean array containing the rights settings\\n     */\\n    function convertRights(Rights calldata rights) external pure returns (bool[] memory) {\\n        bool[] memory result = new bool[](7);\\n\\n        result[0] = rights.canPauseSwapping;\\n        result[1] = rights.canChangeSwapFee;\\n        result[2] = rights.canChangeWeights;\\n        result[3] = rights.canAddRemoveTokens;\\n        result[4] = rights.canWhitelistLPs;\\n        result[5] = rights.canTokenWhiteLists;\\n        // result[5] = rights.canChangeCap;\\n        // result[6] = rights.canChangeFloor;\\n\\n        return result;\\n    }\\n\\n    // Though it is actually simple, the number of branches triggers code-complexity\\n    /* solhint-disable code-complexity */\\n\\n    /**\\n     * @notice Externally check permissions using the Enum\\n     * @param self - Rights struct containing the permissions\\n     * @param permission - The permission to check\\n     * @return Boolean true if it has the permission\\n     */\\n    function hasPermission(Rights calldata self, Permissions permission) external pure returns (bool) {\\n        if (Permissions.PAUSE_SWAPPING == permission) {\\n            return self.canPauseSwapping;\\n        } else if (Permissions.CHANGE_SWAP_FEE == permission) {\\n            return self.canChangeSwapFee;\\n        } else if (Permissions.CHANGE_WEIGHTS == permission) {\\n            return self.canChangeWeights;\\n        } else if (Permissions.ADD_REMOVE_TOKENS == permission) {\\n            return self.canAddRemoveTokens;\\n        } else if (Permissions.WHITELIST_LPS == permission) {\\n            return self.canWhitelistLPs;\\n        }  else if (Permissions.TOKEN_WHITELISTS == permission) {\\n            return self.canTokenWhiteLists;\\n        }\\n        // else if (Permissions.CHANGE_CAP == permission) {\\n        //     return self.canChangeCap;\\n        // } else if (Permissions.CHANGE_FLOOR == permission) {\\n        //     return self.canChangeFloor;\\n        // }\\n    }\\n\\n    /* solhint-enable code-complexity */\\n}\\n\",\"keccak256\":\"0x4141fba7172e2018d45ed376fadf71b53d3c05421979d22511fbd5cd922db962\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/SafeApprove.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Imports\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n// Libraries\\n\\n/**\\n * @author PieDAO (ported to Desyn Labs)\\n * @title SafeApprove - set approval for tokens that require 0 prior approval\\n * @dev Perhaps to address the known ERC20 race condition issue\\n *      See https://github.com/crytic/not-so-smart-contracts/tree/master/race_condition\\n *      Some tokens - notably KNC - only allow approvals to be increased from 0\\n */\\nlibrary SafeApprove {\\n    /**\\n     * @notice handle approvals of tokens that require approving from a base of 0\\n     * @param token - the token we're approving\\n     * @param spender - entity the owner (sender) is approving to spend his tokens\\n     * @param amount - number of tokens being approved\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint amount\\n    ) internal returns (bool) {\\n        uint currentAllowance = token.allowance(address(this), spender);\\n\\n        // Do nothing if allowance is already set to this value\\n        if (currentAllowance == amount) {\\n            return true;\\n        }\\n\\n        // If approval is not zero reset it to zero first\\n        if (currentAllowance != 0) {\\n            token.approve(spender, 0);\\n        }\\n\\n        // do the actual approval\\n        return token.approve(spender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xa51ebf770f2676085b89b1636688cc086289cfe27f614dfd0c15142535c26752\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/SmartPoolManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Needed to pass in structs\\npragma experimental ABIEncoderV2;\\n\\n// Imports\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IConfigurableRightsPool.sol\\\";\\nimport \\\"../interfaces/IBFactory.sol\\\"; // unused\\nimport \\\"./DesynSafeMath.sol\\\"; // unused\\nimport \\\"./SafeApprove.sol\\\";\\n\\n/**\\n * @author Desyn Labs\\n * @title Factor out the weight updates\\n */\\nlibrary SmartPoolManager {\\n    //kol pool params\\n    struct levelParams {\\n        uint level;\\n        uint ratio;\\n    }\\n\\n    struct feeParams {\\n        levelParams firstLevel;\\n        levelParams secondLevel;\\n        levelParams thirdLevel;\\n        levelParams fourLevel;\\n    }\\n    struct KolPoolParams {\\n        feeParams managerFee;\\n        feeParams issueFee;\\n        feeParams redeemFee;\\n        feeParams perfermanceFee;\\n    }\\n\\n    // Type declarations\\n    enum Etypes {\\n        OPENED,\\n        CLOSED\\n    }\\n\\n    enum Period {\\n        HALF,\\n        ONE,\\n        TWO\\n    }\\n\\n    // updateWeight and pokeWeights are unavoidably long\\n    /* solhint-disable function-max-lines */\\n    struct Status {\\n        uint collectPeriod;\\n        uint collectEndTime;\\n        uint closurePeriod;\\n        uint closureEndTime;\\n        uint upperCap;\\n        uint floorCap;\\n        uint managerFee;\\n        uint redeemFee;\\n        uint issueFee;\\n        uint perfermanceFee;\\n        uint startClaimFeeTime;\\n    }\\n\\n    struct PoolParams {\\n        // Desyn Pool Token (representing shares of the pool)\\n        string poolTokenSymbol;\\n        string poolTokenName;\\n        // Tokens inside the Pool\\n        address[] constituentTokens;\\n        uint[] tokenBalances;\\n        uint[] tokenWeights;\\n        uint swapFee;\\n        uint managerFee;\\n        uint redeemFee;\\n        uint issueFee;\\n        uint perfermanceFee;\\n        Etypes etype;\\n    }\\n\\n    struct PoolTokenRange {\\n        uint bspFloor;\\n        uint bspCap;\\n    }\\n\\n    struct Fund {\\n        uint etfAmount;\\n        uint fundAmount;\\n    }\\n\\n    function initRequire(\\n        uint swapFee,\\n        uint managerFee,\\n        uint issueFee,\\n        uint redeemFee,\\n        uint perfermanceFee,\\n        uint tokenBalancesLength,\\n        uint tokenWeightsLength,\\n        uint constituentTokensLength,\\n        bool initBool\\n    ) external pure {\\n        // We don't have a pool yet; check now or it will fail later (in order of likelihood to fail)\\n        // (and be unrecoverable if they don't have permission set to change it)\\n        // Most likely to fail, so check first\\n        require(!initBool, \\\"Init fail\\\");\\n        require(swapFee >= DesynConstants.MIN_FEE, \\\"ERR_INVALID_SWAP_FEE\\\");\\n        require(swapFee <= DesynConstants.MAX_FEE, \\\"ERR_INVALID_SWAP_FEE\\\");\\n        require(managerFee >= DesynConstants.MANAGER_MIN_FEE, \\\"ERR_INVALID_MANAGER_FEE\\\");\\n        require(managerFee <= DesynConstants.MANAGER_MAX_FEE, \\\"ERR_INVALID_MANAGER_FEE\\\");\\n        require(issueFee >= DesynConstants.ISSUE_MIN_FEE, \\\"ERR_INVALID_ISSUE_MIN_FEE\\\");\\n        require(issueFee <= DesynConstants.ISSUE_MAX_FEE, \\\"ERR_INVALID_ISSUE_MAX_FEE\\\");\\n        require(redeemFee >= DesynConstants.REDEEM_MIN_FEE, \\\"ERR_INVALID_REDEEM_MIN_FEE\\\");\\n        require(redeemFee <= DesynConstants.REDEEM_MAX_FEE, \\\"ERR_INVALID_REDEEM_MAX_FEE\\\");\\n        require(perfermanceFee >= DesynConstants.PERFERMANCE_MIN_FEE, \\\"ERR_INVALID_PERFERMANCE_MIN_FEE\\\");\\n        require(perfermanceFee <= DesynConstants.PERFERMANCE_MAX_FEE, \\\"ERR_INVALID_PERFERMANCE_MAX_FEE\\\");\\n\\n        // Arrays must be parallel\\n        require(tokenBalancesLength == constituentTokensLength, \\\"ERR_START_BALANCES_MISMATCH\\\");\\n        require(tokenWeightsLength == constituentTokensLength, \\\"ERR_START_WEIGHTS_MISMATCH\\\");\\n        // Cannot have too many or too few - technically redundant, since BPool.bind() would fail later\\n        // But if we don't check now, we could have a useless contract with no way to create a pool\\n\\n        require(constituentTokensLength >= DesynConstants.MIN_ASSET_LIMIT, \\\"ERR_TOO_FEW_TOKENS\\\");\\n        require(constituentTokensLength <= DesynConstants.MAX_ASSET_LIMIT, \\\"ERR_TOO_MANY_TOKENS\\\");\\n        // There are further possible checks (e.g., if they use the same token twice), but\\n        // we can let bind() catch things like that (i.e., not things that might reasonably work)\\n    }\\n\\n    /**\\n     * @notice Update the weight of an existing token\\n     * @dev Refactored to library to make CRPFactory deployable\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param tokenA - token to sell\\n     * @param tokenB - token to buy\\n     */\\n    function rebalance(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address tokenA,\\n        address tokenB,\\n        uint deltaWeight,\\n        uint minAmountOut\\n    ) external {\\n        uint currentWeightA = bPool.getDenormalizedWeight(tokenA);\\n        uint currentBalanceA = bPool.getBalance(tokenA);\\n        // uint currentWeightB = bPool.getDenormalizedWeight(tokenB);\\n\\n        require(deltaWeight <= currentWeightA, \\\"ERR_DELTA_WEIGHT_TOO_BIG\\\");\\n\\n        // deltaBalance = currentBalance * (deltaWeight / currentWeight)\\n        uint deltaBalanceA = DesynSafeMath.bmul(currentBalanceA, DesynSafeMath.bdiv(deltaWeight, currentWeightA));\\n\\n        // uint currentBalanceB = bPool.getBalance(tokenB);\\n\\n        // uint deltaWeight = DesynSafeMath.bsub(newWeight, currentWeightA);\\n\\n        // uint newWeightB = DesynSafeMath.bsub(currentWeightB, deltaWeight);\\n        // require(newWeightB >= 0, \\\"ERR_INCORRECT_WEIGHT_B\\\");\\n        bool soldout;\\n        if (deltaWeight == currentWeightA) {\\n            // reduct token A\\n            bPool.unbindPure(tokenA);\\n            soldout = true;\\n        }\\n\\n        // Now with the tokens this contract can bind them to the pool it controls\\n        bPool.rebindSmart(tokenA, tokenB, deltaWeight, deltaBalanceA, soldout, minAmountOut);\\n    }\\n\\n    /**\\n     * @notice Non ERC20-conforming tokens are problematic; don't allow them in pools\\n     * @dev Will revert if invalid\\n     * @param token - The prospective token to verify\\n     */\\n    function verifyTokenCompliance(address token) external {\\n        verifyTokenComplianceInternal(token);\\n    }\\n\\n    /**\\n     * @notice Non ERC20-conforming tokens are problematic; don't allow them in pools\\n     * @dev Will revert if invalid - overloaded to save space in the main contract\\n     * @param tokens - The prospective tokens to verify\\n     */\\n    function verifyTokenCompliance(address[] calldata tokens) external {\\n        for (uint i = 0; i < tokens.length; i++) {\\n            verifyTokenComplianceInternal(tokens[i]);\\n        }\\n    }\\n\\n    function createPoolInternalHandle(IBPool bPool, uint initialSupply) external view {\\n        require(initialSupply >= DesynConstants.MIN_POOL_SUPPLY, \\\"ERR_INIT_SUPPLY_MIN\\\");\\n        require(initialSupply <= DesynConstants.MAX_POOL_SUPPLY, \\\"ERR_INIT_SUPPLY_MAX\\\");\\n        require(bPool.EXIT_FEE() == 0, \\\"ERR_NONZERO_EXIT_FEE\\\");\\n        // EXIT_FEE must always be zero, or ConfigurableRightsPool._pushUnderlying will fail\\n        require(DesynConstants.EXIT_FEE == 0, \\\"ERR_NONZERO_EXIT_FEE\\\");\\n    }\\n\\n    function createPoolHandle(\\n        uint collectPeriod,\\n        uint upperCap,\\n        uint initialSupply\\n    ) external pure {\\n        require(collectPeriod <= DesynConstants.MAX_COLLECT_PERIOD, \\\"ERR_EXCEEDS_FUND_RAISING_PERIOD\\\");\\n        require(upperCap >= initialSupply, \\\"ERR_CAP_BIGGER_THAN_INITSUPPLY\\\");\\n        // collectEndTime = block.timestamp + collectPeriod;\\n        // if (boolA) {\\n        //     period = 1 seconds; // for test only\\n        // } else if (boolB) {\\n        //     period = 365 days;\\n        // } else {\\n        //     period = 730 days;\\n        // }\\n        // closureEndTime = period + collectEndTime;\\n    }\\n\\n    function exitPoolHandle(\\n        uint _endEtfAmount,\\n        uint _endFundAmount,\\n        uint _beginEtfAmount,\\n        uint _beginFundAmount,\\n        uint poolAmountIn,\\n        uint totalEnd\\n    )\\n        external\\n        pure\\n        returns (\\n            uint endEtfAmount,\\n            uint endFundAmount,\\n            uint profitRate\\n        )\\n    {\\n        endEtfAmount = DesynSafeMath.badd(_endEtfAmount, poolAmountIn);\\n        endFundAmount = DesynSafeMath.badd(_endFundAmount, totalEnd);\\n        uint amount1 = DesynSafeMath.bdiv(endFundAmount, endEtfAmount);\\n        uint amount2 = DesynSafeMath.bdiv(_beginFundAmount, _beginEtfAmount);\\n        if (amount1 > amount2) {\\n            profitRate = DesynSafeMath.bdiv(\\n                DesynSafeMath.bmul(DesynSafeMath.bsub(DesynSafeMath.bdiv(endFundAmount, endEtfAmount), DesynSafeMath.bdiv(_beginFundAmount, _beginEtfAmount)), poolAmountIn),\\n                totalEnd\\n            );\\n        }\\n    }\\n\\n    function exitPoolHandleA(\\n        uint _tokenAmountOut,\\n        uint redeemFee,\\n        uint profitRate,\\n        uint perfermanceFee\\n    )\\n        external\\n        pure\\n        returns (\\n            uint tokenAmountOutNew,\\n            uint amount,\\n            uint tokensAmountRedeem\\n        )\\n    {\\n        uint tokenAmountOut = _tokenAmountOut;\\n        tokenAmountOutNew = DesynSafeMath.bmul(tokenAmountOut, redeemFee);\\n        tokensAmountRedeem = tokenAmountOutNew;\\n        tokenAmountOutNew = DesynSafeMath.badd(DesynSafeMath.bmul(DesynSafeMath.bmul(tokenAmountOut, profitRate), perfermanceFee), tokenAmountOutNew);\\n        amount = DesynSafeMath.bsub(tokenAmountOut, tokenAmountOutNew);\\n    }\\n\\n    function exitPoolHandleB(\\n        bool bools,\\n        bool isCompletedCollect,\\n        uint closureEndTime,\\n        uint collectEndTime,\\n        uint _etfAmount,\\n        uint _fundAmount,\\n        uint poolAmountIn\\n    ) external view returns (uint etfAmount, uint fundAmount) {\\n        if (bools) {\\n            bool isCloseEtfCollectEndWithFailure = isCompletedCollect == false && block.timestamp >= collectEndTime;\\n            bool isCloseEtfClosureEnd = block.timestamp >= closureEndTime;\\n            require(isCloseEtfCollectEndWithFailure || isCloseEtfClosureEnd, \\\"ERR_CLOSURE_TIME_NOT_ARRIVED!\\\");\\n        }\\n        fundAmount = _fundAmount;\\n        etfAmount = _etfAmount;\\n        if (bools && block.timestamp <= collectEndTime) {\\n            fundAmount = DesynSafeMath.bmul(DesynSafeMath.bdiv(DesynSafeMath.bsub(_etfAmount, poolAmountIn), _etfAmount), _fundAmount);\\n            etfAmount = DesynSafeMath.bsub(_etfAmount, poolAmountIn);\\n        }\\n    }\\n\\n    function joinPoolHandle(\\n        bool canWhitelistLPs,\\n        bool isList,\\n        bool bools,\\n        uint collectEndTime\\n    ) external view {\\n        require(!canWhitelistLPs || isList, \\\"ERR_NOT_ON_WHITELIST\\\");\\n\\n        if (bools) {\\n            require(block.timestamp <= collectEndTime, \\\"ERR_COLLECT_PERIOD_FINISHED!\\\");\\n        }\\n    }\\n\\n    function rebalanceHandle(\\n        bool bools,\\n        uint collectEndTime,\\n        uint closureEndTime,\\n        bool canChangeWeights,\\n        address tokenA,\\n        address tokenB\\n    ) external view {\\n        if (bools) {\\n            require(block.timestamp > collectEndTime && block.timestamp < closureEndTime, \\\"ERR_NOT_REBALANCE_PERIOD\\\");\\n        }\\n\\n        require(canChangeWeights, \\\"ERR_NOT_CONFIGURABLE_WEIGHTS\\\");\\n        require(tokenA != tokenB, \\\"ERR_TOKENS_SAME\\\");\\n    }\\n\\n    /**\\n     * @notice Join a pool\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param poolAmountOut - number of pool tokens to receive\\n     * @param maxAmountsIn - Max amount of asset tokens to spend\\n     * @return actualAmountsIn - calculated values of the tokens to pull in\\n     */\\n    function joinPool(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        uint poolAmountOut,\\n        uint[] calldata maxAmountsIn\\n    ) external view returns (uint[] memory actualAmountsIn) {\\n        address[] memory tokens = bPool.getCurrentTokens();\\n\\n        require(maxAmountsIn.length == tokens.length, \\\"ERR_AMOUNTS_MISMATCH\\\");\\n\\n        uint poolTotal = self.totalSupply();\\n        // Subtract  1 to ensure any rounding errors favor the pool\\n        uint ratio = DesynSafeMath.bdiv(poolAmountOut, DesynSafeMath.bsub(poolTotal, 1));\\n\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        // We know the length of the array; initialize it, and fill it below\\n        // Cannot do \\\"push\\\" in memory\\n        actualAmountsIn = new uint[](tokens.length);\\n\\n        // This loop contains external calls\\n        // External calls are to math libraries or the underlying pool, so low risk\\n        for (uint i = 0; i < tokens.length; i++) {\\n            address t = tokens[i];\\n            uint bal = bPool.getBalance(t);\\n            // Add 1 to ensure any rounding errors favor the pool\\n            uint tokenAmountIn = DesynSafeMath.bmul(ratio, DesynSafeMath.badd(bal, 1));\\n\\n            require(tokenAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountIn <= maxAmountsIn[i], \\\"ERR_LIMIT_IN\\\");\\n\\n            actualAmountsIn[i] = tokenAmountIn;\\n        }\\n    }\\n\\n    /**\\n     * @notice Exit a pool - redeem pool tokens for underlying assets\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param poolAmountIn - amount of pool tokens to redeem\\n     * @param minAmountsOut - minimum amount of asset tokens to receive\\n     * @return pAiAfterExitFee - final amount in (after accounting for exit fee)\\n     * @return actualAmountsOut - calculated amounts of each token to pull\\n     */\\n    function exitPool(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        uint poolAmountIn,\\n        uint[] calldata minAmountsOut\\n    ) external view returns (uint pAiAfterExitFee, uint[] memory actualAmountsOut) {\\n        address[] memory tokens = bPool.getCurrentTokens();\\n\\n        require(minAmountsOut.length == tokens.length, \\\"ERR_AMOUNTS_MISMATCH\\\");\\n\\n        uint poolTotal = self.totalSupply();\\n\\n        // Calculate exit fee and the final amount in\\n        pAiAfterExitFee = DesynSafeMath.bsub(poolAmountIn, 0);\\n\\n        uint ratio = DesynSafeMath.bdiv(pAiAfterExitFee, DesynSafeMath.badd(poolTotal, 1));\\n\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        actualAmountsOut = new uint[](tokens.length);\\n\\n        // This loop contains external calls\\n        // External calls are to math libraries or the underlying pool, so low risk\\n        for (uint i = 0; i < tokens.length; i++) {\\n            address t = tokens[i];\\n            uint bal = bPool.getBalance(t);\\n            // Subtract 1 to ensure any rounding errors favor the pool\\n            uint tokenAmountOut = DesynSafeMath.bmul(ratio, DesynSafeMath.bsub(bal, 1));\\n\\n            require(tokenAmountOut != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountOut >= minAmountsOut[i], \\\"ERR_LIMIT_OUT\\\");\\n\\n            actualAmountsOut[i] = tokenAmountOut;\\n        }\\n    }\\n\\n    // Internal functions\\n    // Check for zero transfer, and make sure it returns true to returnValue\\n    function verifyTokenComplianceInternal(address token) internal {\\n        bool returnValue = IERC20(token).transfer(msg.sender, 0);\\n        require(returnValue, \\\"ERR_NONCONFORMING_TOKEN\\\");\\n    }\\n\\n    function WhitelistHandle(\\n        bool bool1,\\n        bool bool2,\\n        address adr\\n    ) external pure {\\n        require(bool1, \\\"ERR_CANNOT_WHITELIST_LPS\\\");\\n        require(bool2, \\\"ERR_LP_NOT_WHITELISTED\\\");\\n        require(adr != address(0), \\\"ERR_INVALID_ADDRESS\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x661001d283d11be82aca3a46a41378006d086545f28fc7582b8fd26122f82c14\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612a5f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100af5760003560e01c8063135b968d146100b45780631a78a275146100c95780631eccc185146100f2578063333fbeef146101055780634ef39b75146101185780637b7d6c681461012b57806380ad2cf31461013e5780638a5c57df14610151578063991991c714610164578063a7f28da714610177578063affdd4ee1461018a578063d94594071461019d578063e0d945bf146101b0575b600080fd5b6100c76100c2366004612204565b6101c3565b005b6100dc6100d7366004611fc7565b6102f5565b6040516100e991906125d7565b60405180910390f35b6100c7610100366004611f6f565b61079f565b6100c7610113366004612198565b6107f9565b6100c7610126366004611e60565b610825565b6100c7610139366004611f37565b61098c565b6100c761014c366004611f9c565b6109b8565b6100c761015f36600461231d565b6109e4565b6100c7610172366004611f9c565b610aa5565b6100c7610185366004612198565b610ad1565b6100c76101983660046121aa565b610afd565b6100dc6101ab36600461208b565b610b68565b6100c76101be366004612275565b610ea9565b6060856001600160a01b031663b64ef17b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156101fe57600080fd5b505afa158015610212573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610236919061217c565b6001600160a01b031663cc77828d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561026e57600080fd5b505afa158015610282573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102aa9190810190611e83565b90506102ed8682878787808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508992506116d1915050565b505050505050565b600087861461031f5760405162461bcd60e51b815260040161031690612814565b60405180910390fd5b87841461033e5760405162461bcd60e51b815260040161031690612814565b896001600160a01b03166391cefde46040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561037957600080fd5b505af115801561038d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b1919061217c565b6040516334e1990760e01b81529091506001600160a01b038216906334e19907906103e090869060040161286e565b600060405180830381600087803b1580156103fa57600080fd5b505af115801561040e573d6000803e3d6000fd5b5050505060005b888110156105c25760008a8a8381811061042b57fe5b90506020020160208101906104409190611e60565b9050806001600160a01b03166323b872dd33308c8c8781811061045f57fe5b905060200201356040518463ffffffff1660e01b8152600401610484939291906125eb565b602060405180830381600087803b15801561049e57600080fd5b505af11580156104b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d69190611f1b565b6104f25760405162461bcd60e51b815260040161031690612841565b61050f81848b8b8681811061050357fe5b90506020020135611b25565b826001600160a01b031663e4e1e5388c8c8581811061052a57fe5b905060200201602081019061053f9190611e60565b8b8b8681811061054b57fe5b905060200201358a8a8781811061055e57fe5b905060200201356040518463ffffffff1660e01b8152600401610583939291906127e8565b600060405180830381600087803b15801561059d57600080fd5b505af11580156105b1573d6000803e3d6000fd5b505060019093019250610415915050565b50811561073257806001600160a01b0316634bb278f36040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561060457600080fd5b505af1158015610618573d6000803e3d6000fd5b50506040516370a0823160e01b81526001600160a01b038416925063a9059cbb9150339083906370a08231906106529030906004016125d7565b60206040518083038186803b15801561066a57600080fd5b505afa15801561067e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a29190612395565b6040518363ffffffff1660e01b81526004016106bf92919061260f565b602060405180830381600087803b1580156106d957600080fd5b505af11580156106ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107119190611f1b565b61072d5760405162461bcd60e51b815260040161031690612841565b610792565b6040516324dacaa960e11b81526001600160a01b038216906349b595529061075f90600190600401612809565b600060405180830381600087803b15801561077957600080fd5b505af115801561078d573d6000803e3d6000fd5b505050505b9998505050505050505050565b6040516324dacaa960e11b81526001600160a01b038316906349b59552906107cb908490600401612809565b600060405180830381600087803b1580156107e557600080fd5b505af11580156102ed573d6000803e3d6000fd5b60405163c83a1c2d60e01b81526001600160a01b0383169063c83a1c2d906107cb9084906004016125d7565b806001600160a01b0316634bb278f36040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561086057600080fd5b505af1158015610874573d6000803e3d6000fd5b50506040516370a0823160e01b81526001600160a01b038416925063a9059cbb9150339083906370a08231906108ae9030906004016125d7565b60206040518083038186803b1580156108c657600080fd5b505afa1580156108da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fe9190612395565b6040518363ffffffff1660e01b815260040161091b92919061260f565b602060405180830381600087803b15801561093557600080fd5b505af1158015610949573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096d9190611f1b565b6109895760405162461bcd60e51b815260040161031690612841565b50565b6040516392eefe9b60e01b81526001600160a01b038316906392eefe9b906107cb9084906004016125d7565b6040516347786d3760e01b81526001600160a01b038316906347786d37906107cb90849060040161286e565b6060846001600160a01b031663be3bbd2e6040518163ffffffff1660e01b815260040160006040518083038186803b158015610a1f57600080fd5b505afa158015610a33573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a5b9190810190611e83565b9050610a9e8582868686808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152503392506116d1915050565b5050505050565b6040516334e1990760e01b81526001600160a01b038316906334e19907906107cb90849060040161286e565b60405163e2762d4b60e01b81526001600160a01b0383169063e2762d4b906107cb9084906004016125d7565b604051631b9276c760e21b81526001600160a01b03861690636e49db1c90610b2f908790879087908790600401612642565b600060405180830381600087803b158015610b4957600080fd5b505af1158015610b5d573d6000803e3d6000fd5b505050505050505050565b6000610b7760608901896128e0565b9050610b8660408a018a6128e0565b905014610ba55760405162461bcd60e51b815260040161031690612814565b610bb260808901896128e0565b9050610bc160408a018a6128e0565b905014610be05760405162461bcd60e51b815260040161031690612814565b60405163074aa1b960e51b81526001600160a01b038b169063e954372090610c16908c908c908b908b908b908b9060040161266b565b602060405180830381600087803b158015610c3057600080fd5b505af1158015610c44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c68919061217c565b905060005b610c7a60408a018a6128e0565b9050811015610d93576000610c9260408b018b6128e0565b83818110610c9c57fe5b9050602002016020810190610cb19190611e60565b90506001600160a01b0381166323b872dd3330610cd160608f018f6128e0565b87818110610cdb57fe5b905060200201356040518463ffffffff1660e01b8152600401610d00939291906125eb565b602060405180830381600087803b158015610d1a57600080fd5b505af1158015610d2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d529190611f1b565b610d6e5760405162461bcd60e51b815260040161031690612841565b610d8a8184610d8060608e018e6128e0565b8681811061050357fe5b50600101610c6d565b506001600160a01b038116630892b93d883560208a0135610dba60608c0160408d01612376565b866040518563ffffffff1660e01b8152600401610dda94939291906128a8565b600060405180830381600087803b158015610df457600080fd5b505af1158015610e08573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038416925063a9059cbb9150610e3b9033908b359060040161260f565b602060405180830381600087803b158015610e5557600080fd5b505af1158015610e69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8d9190611f1b565b6107925760405162461bcd60e51b815260040161031690612841565b848314610ec85760405162461bcd60e51b815260040161031690612814565b848114610ee75760405162461bcd60e51b815260040161031690612814565b60005b858110156116c7576000878783818110610f0057fe5b9050602002016020810190610f159190611e60565b9050886001600160a01b0316632f37b624898985818110610f3257fe5b9050602002016020810190610f479190611e60565b6040518263ffffffff1660e01b8152600401610f6391906125d7565b60206040518083038186803b158015610f7b57600080fd5b505afa158015610f8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb39190611f1b565b156113c057886001600160a01b031663f8b2cb4f898985818110610fd357fe5b9050602002016020810190610fe89190611e60565b6040518263ffffffff1660e01b815260040161100491906125d7565b60206040518083038186803b15801561101c57600080fd5b505afa158015611030573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110549190612395565b86868481811061106057fe5b90506020020135111561127457806001600160a01b03166323b872dd33308c6001600160a01b031663f8b2cb4f8d8d8981811061109957fe5b90506020020160208101906110ae9190611e60565b6040518263ffffffff1660e01b81526004016110ca91906125d7565b60206040518083038186803b1580156110e257600080fd5b505afa1580156110f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111a9190612395565b8a8a8881811061112657fe5b90506020020135036040518463ffffffff1660e01b815260040161114c939291906125eb565b602060405180830381600087803b15801561116657600080fd5b505af115801561117a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119e9190611f1b565b6111ba5760405162461bcd60e51b815260040161031690612841565b611274818a8b6001600160a01b031663f8b2cb4f8c8c888181106111da57fe5b90506020020160208101906111ef9190611e60565b6040518263ffffffff1660e01b815260040161120b91906125d7565b60206040518083038186803b15801561122357600080fd5b505afa158015611237573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125b9190612395565b89898781811061126757fe5b9050602002013503611b25565b620f424086868481811061128457fe5b90506020020135111561133c57886001600160a01b0316633fdddaa28989858181106112ac57fe5b90506020020160208101906112c19190611e60565b8888868181106112cd57fe5b905060200201358787878181106112e057fe5b905060200201356040518463ffffffff1660e01b8152600401611305939291906127e8565b600060405180830381600087803b15801561131f57600080fd5b505af1158015611333573d6000803e3d6000fd5b505050506113bb565b886001600160a01b031663cf5e7bd389898581811061135757fe5b905060200201602081019061136c9190611e60565b6040518263ffffffff1660e01b815260040161138891906125d7565b600060405180830381600087803b1580156113a257600080fd5b505af11580156113b6573d6000803e3d6000fd5b505050505b611528565b806001600160a01b03166323b872dd33308989878181106113dd57fe5b905060200201356040518463ffffffff1660e01b8152600401611402939291906125eb565b602060405180830381600087803b15801561141c57600080fd5b505af1158015611430573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114549190611f1b565b6114705760405162461bcd60e51b815260040161031690612841565b611481818a88888681811061050357fe5b886001600160a01b031663e4e1e53889898581811061149c57fe5b90506020020160208101906114b19190611e60565b8888868181106114bd57fe5b905060200201358787878181106114d057fe5b905060200201356040518463ffffffff1660e01b81526004016114f5939291906127e8565b600060405180830381600087803b15801561150f57600080fd5b505af1158015611523573d6000803e3d6000fd5b505050505b6040516370a0823160e01b81526000906001600160a01b038316906370a08231906115579030906004016125d7565b60206040518083038186803b15801561156f57600080fd5b505afa158015611583573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a79190612395565b11156116be576040516370a0823160e01b81526001600160a01b0382169063a9059cbb90339083906370a08231906115e39030906004016125d7565b60206040518083038186803b1580156115fb57600080fd5b505afa15801561160f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116339190612395565b6040518363ffffffff1660e01b815260040161165092919061260f565b602060405180830381600087803b15801561166a57600080fd5b505af115801561167e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a29190611f1b565b6116be5760405162461bcd60e51b815260040161031690612841565b50600101610eea565b5050505050505050565b83518251146116f25760405162461bcd60e51b815260040161031690612814565b60005b84518110156117ee57600085828151811061170c57fe5b60200260200101519050806001600160a01b03166323b872dd333087868151811061173357fe5b60200260200101516040518463ffffffff1660e01b8152600401611759939291906125eb565b602060405180830381600087803b15801561177357600080fd5b505af1158015611787573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ab9190611f1b565b6117c75760405162461bcd60e51b815260040161031690612841565b6117e581888685815181106117d857fe5b6020026020010151611b25565b506001016116f5565b5060405163077df9bd60e31b81526001600160a01b03861690633befcde89061181f90869086908690600401612877565b600060405180830381600087803b15801561183957600080fd5b505af115801561184d573d6000803e3d6000fd5b5050505060005b8451811015611a1357600085828151811061186b57fe5b602002602001015190506000816001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016118a391906125d7565b60206040518083038186803b1580156118bb57600080fd5b505afa1580156118cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f39190612395565b1115611a0a576040516370a0823160e01b81526001600160a01b0382169063a9059cbb90339083906370a082319061192f9030906004016125d7565b60206040518083038186803b15801561194757600080fd5b505afa15801561195b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197f9190612395565b6040518363ffffffff1660e01b815260040161199c92919061260f565b602060405180830381600087803b1580156119b657600080fd5b505af11580156119ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ee9190611f1b565b611a0a5760405162461bcd60e51b815260040161031690612841565b50600101611854565b506040516370a0823160e01b81526001600160a01b0386169063a9059cbb90339083906370a0823190611a4a9030906004016125d7565b60206040518083038186803b158015611a6257600080fd5b505afa158015611a76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a9a9190612395565b6040518363ffffffff1660e01b8152600401611ab792919061260f565b602060405180830381600087803b158015611ad157600080fd5b505af1158015611ae5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b099190611f1b565b610a9e5760405162461bcd60e51b815260040161031690612841565b604051636eb1769f60e11b81526000906001600160a01b0385169063dd62ed3e90611b569030908790600401612628565b60206040518083038186803b158015611b6e57600080fd5b505afa158015611b82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba69190612395565b1115611c2f5760405163095ea7b360e01b81526001600160a01b0384169063095ea7b390611bdb90859060009060040161260f565b602060405180830381600087803b158015611bf557600080fd5b505af1158015611c09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c2d9190611f1b565b505b60405163095ea7b360e01b81526001600160a01b0384169063095ea7b390611c5d908590859060040161260f565b602060405180830381600087803b158015611c7757600080fd5b505af1158015611c8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611caf9190611f1b565b50505050565b60008083601f840112611cc6578182fd5b5081356001600160401b03811115611cdc578182fd5b6020830191508360208083028501011115611cf657600080fd5b9250929050565b600082601f830112611d0d578081fd5b8135611d20611d1b8261294c565b612926565b818152915060208083019084810181840286018201871015611d4157600080fd5b60005b84811015611d69578135611d5781612a06565b84529282019290820190600101611d44565b505050505092915050565b600082601f830112611d84578081fd5b8135611d92611d1b8261294c565b818152915060208083019084810181840286018201871015611db357600080fd5b60005b84811015611d6957813584529282019290820190600101611db6565b8035611ddd81612a06565b92915050565b600060608284031215611df4578081fd5b50919050565b60006104008284031215611df4578081fd5b60006101608284031215611df4578081fd5b600060408284031215611e2f578081fd5b611e396040612926565b9050813581526020820135602082015292915050565b600060c08284031215611df4578081fd5b600060208284031215611e71578081fd5b8135611e7c81612a06565b9392505050565b60006020808385031215611e95578182fd5b82516001600160401b03811115611eaa578283fd5b8301601f81018513611eba578283fd5b8051611ec8611d1b8261294c565b8181528381019083850185840285018601891015611ee4578687fd5b8694505b83851015611f0f578051611efb81612a06565b835260019490940193918501918501611ee8565b50979650505050505050565b600060208284031215611f2c578081fd5b8151611e7c81612a1b565b60008060408385031215611f49578081fd5b8235611f5481612a06565b91506020830135611f6481612a06565b809150509250929050565b60008060408385031215611f81578182fd5b8235611f8c81612a06565b91506020830135611f6481612a1b565b60008060408385031215611fae578182fd5b8235611fb981612a06565b946020939093013593505050565b600080600080600080600080600060c08a8c031215611fe4578485fd5b8935611fef81612a06565b985060208a01356001600160401b038082111561200a578687fd5b6120168d838e01611cb5565b909a50985060408c013591508082111561202e578687fd5b61203a8d838e01611cb5565b909850965060608c0135915080821115612052578586fd5b5061205f8c828d01611cb5565b90955093505060808a0135915060a08a013561207a81612a1b565b809150509295985092959850929598565b60008060008060008060008060006106008a8c0312156120a9578283fd5b6120b38b8b611dd2565b98506120c28b60208c01611dd2565b975060408a01356001600160401b03808211156120dd578485fd5b6120e98d838e01611e0c565b98506120f88d60608e01611de3565b97506121078d60c08e01611e4f565b96506121178d6101808e01611dfa565b95506105808c013591508082111561212d578485fd5b6121398d838e01611cfd565b94506105a08c013591508082111561214f578384fd5b5061215c8c828d01611d74565b92505061216d8b6105c08c01611e1e565b90509295985092959850929598565b60006020828403121561218d578081fd5b8151611e7c81612a06565b60008060408385031215611f49578182fd5b600080600080600060a086880312156121c1578283fd5b85356121cc81612a06565b945060208601356121dc81612a06565b935060408601356121ec81612a06565b94979396509394606081013594506080013592915050565b60008060008060006080868803121561221b578283fd5b853561222681612a06565b94506020860135935060408601356001600160401b03811115612247578384fd5b61225388828901611cb5565b909450925050606086013561226781612a06565b809150509295509295909350565b60008060008060008060006080888a03121561228f578081fd5b873561229a81612a06565b965060208801356001600160401b03808211156122b5578283fd5b6122c18b838c01611cb5565b909850965060408a01359150808211156122d9578283fd5b6122e58b838c01611cb5565b909650945060608a01359150808211156122fd578283fd5b5061230a8a828b01611cb5565b989b979a50959850939692959293505050565b60008060008060608587031215612332578182fd5b843561233d81612a06565b93506020850135925060408501356001600160401b0381111561235e578283fd5b61236a87828801611cb5565b95989497509550505050565b600060208284031215612387578081fd5b813560038110611e7c578182fd5b6000602082840312156123a6578081fd5b5051919050565b60008284526020808501945082825b858110156123ea5781356123cf81612a06565b6001600160a01b0316875295820195908201906001016123bc565b509495945050505050565b6000815180845260208085019450808401835b838110156123ea5781516001600160a01b031687529582019590820190600101612408565b81835260006001600160fb1b03831115612445578081fd5b6020830280836020870137939093016020019283525090919050565b6000815180845260208085019450808401835b838110156123ea57815187529582019590820190600101612474565b6002811061249a57fe5b9052565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b6124d2828261258a565b6101006124e381840182840161258a565b506102006124f581840182840161258a565b5061030061250781840182840161258a565b505050565b803561251781612a1b565b15158252602081013561252981612a1b565b15156020830152604081013561253e81612a1b565b15156040830152606081013561255381612a1b565b15156060830152608081013561256881612a1b565b1515608083015260a081013561257d81612a1b565b80151560a0840152505050565b61259482826125c8565b6125a460408301604083016125c8565b6125b460808301608083016125c8565b6125c460c0830160c083016125c8565b5050565b80358252602090810135910152565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6001600160a01b03871681526105406020820181905260009061268e88806129c2565b610160838601526126a46106a08601828461249e565b925050506126b560208901896129c2565b61053f1980868503016105608701526126cf84838561249e565b93506126de60408c018c61296b565b9350915080868503016105808701526126f88484846123ad565b935061270760608c018c61296b565b9350915080868503016105a087015261272184848461242d565b935061273060808c018c61296b565b9350915080868503016105c08701525061274b83838361242d565b9250505060a08801356105e084015260c088013561060084015260e0880135610620840152610100808901356106408501526101208901356106608501526127976101408a018a6129b2565b6127a5610680860182612490565b506127b3604085018961250c565b6127bf818501886124c8565b508281036105008401526127d381866123f5565b90508281036105208401526107928185612461565b6001600160a01b039390931683526020830191909152604082015260600190565b901515815260200190565b60208082526013908201527208aa4a4be988a9c8ea890be9a92a69a82a8869606b1b604082015260600190565b60208082526013908201527211549497d514905394d1915497d19052531151606a1b604082015260600190565b90815260200190565b6000848252606060208301526128906060830185612461565b905060018060a01b0383166040830152949350505050565b8481526020810184905260a08101600384106128c057fe5b836040830152825160608301526020830151608083015295945050505050565b6000808335601e198436030181126128f6578283fd5b8301803591506001600160401b0382111561290f578283fd5b6020908101925081023603821315611cf657600080fd5b6040518181016001600160401b038111828210171561294457600080fd5b604052919050565b60006001600160401b03821115612961578081fd5b5060209081020190565b6000808335601e19843603018112612981578283fd5b83016020810192503590506001600160401b038111156129a057600080fd5b602081023603831315611cf657600080fd5b6000823560028110611e7c578182fd5b6000808335601e198436030181126129d8578283fd5b83016020810192503590506001600160401b038111156129f757600080fd5b803603831315611cf657600080fd5b6001600160a01b038116811461098957600080fd5b801515811461098957600080fdfea264697066735822122080a84d21f712b11ea777cf29ebf218711731e3423fb5f06efa1e66f4817bbf7164736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100af5760003560e01c8063135b968d146100b45780631a78a275146100c95780631eccc185146100f2578063333fbeef146101055780634ef39b75146101185780637b7d6c681461012b57806380ad2cf31461013e5780638a5c57df14610151578063991991c714610164578063a7f28da714610177578063affdd4ee1461018a578063d94594071461019d578063e0d945bf146101b0575b600080fd5b6100c76100c2366004612204565b6101c3565b005b6100dc6100d7366004611fc7565b6102f5565b6040516100e991906125d7565b60405180910390f35b6100c7610100366004611f6f565b61079f565b6100c7610113366004612198565b6107f9565b6100c7610126366004611e60565b610825565b6100c7610139366004611f37565b61098c565b6100c761014c366004611f9c565b6109b8565b6100c761015f36600461231d565b6109e4565b6100c7610172366004611f9c565b610aa5565b6100c7610185366004612198565b610ad1565b6100c76101983660046121aa565b610afd565b6100dc6101ab36600461208b565b610b68565b6100c76101be366004612275565b610ea9565b6060856001600160a01b031663b64ef17b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156101fe57600080fd5b505afa158015610212573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610236919061217c565b6001600160a01b031663cc77828d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561026e57600080fd5b505afa158015610282573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102aa9190810190611e83565b90506102ed8682878787808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508992506116d1915050565b505050505050565b600087861461031f5760405162461bcd60e51b815260040161031690612814565b60405180910390fd5b87841461033e5760405162461bcd60e51b815260040161031690612814565b896001600160a01b03166391cefde46040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561037957600080fd5b505af115801561038d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b1919061217c565b6040516334e1990760e01b81529091506001600160a01b038216906334e19907906103e090869060040161286e565b600060405180830381600087803b1580156103fa57600080fd5b505af115801561040e573d6000803e3d6000fd5b5050505060005b888110156105c25760008a8a8381811061042b57fe5b90506020020160208101906104409190611e60565b9050806001600160a01b03166323b872dd33308c8c8781811061045f57fe5b905060200201356040518463ffffffff1660e01b8152600401610484939291906125eb565b602060405180830381600087803b15801561049e57600080fd5b505af11580156104b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d69190611f1b565b6104f25760405162461bcd60e51b815260040161031690612841565b61050f81848b8b8681811061050357fe5b90506020020135611b25565b826001600160a01b031663e4e1e5388c8c8581811061052a57fe5b905060200201602081019061053f9190611e60565b8b8b8681811061054b57fe5b905060200201358a8a8781811061055e57fe5b905060200201356040518463ffffffff1660e01b8152600401610583939291906127e8565b600060405180830381600087803b15801561059d57600080fd5b505af11580156105b1573d6000803e3d6000fd5b505060019093019250610415915050565b50811561073257806001600160a01b0316634bb278f36040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561060457600080fd5b505af1158015610618573d6000803e3d6000fd5b50506040516370a0823160e01b81526001600160a01b038416925063a9059cbb9150339083906370a08231906106529030906004016125d7565b60206040518083038186803b15801561066a57600080fd5b505afa15801561067e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a29190612395565b6040518363ffffffff1660e01b81526004016106bf92919061260f565b602060405180830381600087803b1580156106d957600080fd5b505af11580156106ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107119190611f1b565b61072d5760405162461bcd60e51b815260040161031690612841565b610792565b6040516324dacaa960e11b81526001600160a01b038216906349b595529061075f90600190600401612809565b600060405180830381600087803b15801561077957600080fd5b505af115801561078d573d6000803e3d6000fd5b505050505b9998505050505050505050565b6040516324dacaa960e11b81526001600160a01b038316906349b59552906107cb908490600401612809565b600060405180830381600087803b1580156107e557600080fd5b505af11580156102ed573d6000803e3d6000fd5b60405163c83a1c2d60e01b81526001600160a01b0383169063c83a1c2d906107cb9084906004016125d7565b806001600160a01b0316634bb278f36040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561086057600080fd5b505af1158015610874573d6000803e3d6000fd5b50506040516370a0823160e01b81526001600160a01b038416925063a9059cbb9150339083906370a08231906108ae9030906004016125d7565b60206040518083038186803b1580156108c657600080fd5b505afa1580156108da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fe9190612395565b6040518363ffffffff1660e01b815260040161091b92919061260f565b602060405180830381600087803b15801561093557600080fd5b505af1158015610949573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096d9190611f1b565b6109895760405162461bcd60e51b815260040161031690612841565b50565b6040516392eefe9b60e01b81526001600160a01b038316906392eefe9b906107cb9084906004016125d7565b6040516347786d3760e01b81526001600160a01b038316906347786d37906107cb90849060040161286e565b6060846001600160a01b031663be3bbd2e6040518163ffffffff1660e01b815260040160006040518083038186803b158015610a1f57600080fd5b505afa158015610a33573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a5b9190810190611e83565b9050610a9e8582868686808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152503392506116d1915050565b5050505050565b6040516334e1990760e01b81526001600160a01b038316906334e19907906107cb90849060040161286e565b60405163e2762d4b60e01b81526001600160a01b0383169063e2762d4b906107cb9084906004016125d7565b604051631b9276c760e21b81526001600160a01b03861690636e49db1c90610b2f908790879087908790600401612642565b600060405180830381600087803b158015610b4957600080fd5b505af1158015610b5d573d6000803e3d6000fd5b505050505050505050565b6000610b7760608901896128e0565b9050610b8660408a018a6128e0565b905014610ba55760405162461bcd60e51b815260040161031690612814565b610bb260808901896128e0565b9050610bc160408a018a6128e0565b905014610be05760405162461bcd60e51b815260040161031690612814565b60405163074aa1b960e51b81526001600160a01b038b169063e954372090610c16908c908c908b908b908b908b9060040161266b565b602060405180830381600087803b158015610c3057600080fd5b505af1158015610c44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c68919061217c565b905060005b610c7a60408a018a6128e0565b9050811015610d93576000610c9260408b018b6128e0565b83818110610c9c57fe5b9050602002016020810190610cb19190611e60565b90506001600160a01b0381166323b872dd3330610cd160608f018f6128e0565b87818110610cdb57fe5b905060200201356040518463ffffffff1660e01b8152600401610d00939291906125eb565b602060405180830381600087803b158015610d1a57600080fd5b505af1158015610d2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d529190611f1b565b610d6e5760405162461bcd60e51b815260040161031690612841565b610d8a8184610d8060608e018e6128e0565b8681811061050357fe5b50600101610c6d565b506001600160a01b038116630892b93d883560208a0135610dba60608c0160408d01612376565b866040518563ffffffff1660e01b8152600401610dda94939291906128a8565b600060405180830381600087803b158015610df457600080fd5b505af1158015610e08573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038416925063a9059cbb9150610e3b9033908b359060040161260f565b602060405180830381600087803b158015610e5557600080fd5b505af1158015610e69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8d9190611f1b565b6107925760405162461bcd60e51b815260040161031690612841565b848314610ec85760405162461bcd60e51b815260040161031690612814565b848114610ee75760405162461bcd60e51b815260040161031690612814565b60005b858110156116c7576000878783818110610f0057fe5b9050602002016020810190610f159190611e60565b9050886001600160a01b0316632f37b624898985818110610f3257fe5b9050602002016020810190610f479190611e60565b6040518263ffffffff1660e01b8152600401610f6391906125d7565b60206040518083038186803b158015610f7b57600080fd5b505afa158015610f8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb39190611f1b565b156113c057886001600160a01b031663f8b2cb4f898985818110610fd357fe5b9050602002016020810190610fe89190611e60565b6040518263ffffffff1660e01b815260040161100491906125d7565b60206040518083038186803b15801561101c57600080fd5b505afa158015611030573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110549190612395565b86868481811061106057fe5b90506020020135111561127457806001600160a01b03166323b872dd33308c6001600160a01b031663f8b2cb4f8d8d8981811061109957fe5b90506020020160208101906110ae9190611e60565b6040518263ffffffff1660e01b81526004016110ca91906125d7565b60206040518083038186803b1580156110e257600080fd5b505afa1580156110f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111a9190612395565b8a8a8881811061112657fe5b90506020020135036040518463ffffffff1660e01b815260040161114c939291906125eb565b602060405180830381600087803b15801561116657600080fd5b505af115801561117a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119e9190611f1b565b6111ba5760405162461bcd60e51b815260040161031690612841565b611274818a8b6001600160a01b031663f8b2cb4f8c8c888181106111da57fe5b90506020020160208101906111ef9190611e60565b6040518263ffffffff1660e01b815260040161120b91906125d7565b60206040518083038186803b15801561122357600080fd5b505afa158015611237573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125b9190612395565b89898781811061126757fe5b9050602002013503611b25565b620f424086868481811061128457fe5b90506020020135111561133c57886001600160a01b0316633fdddaa28989858181106112ac57fe5b90506020020160208101906112c19190611e60565b8888868181106112cd57fe5b905060200201358787878181106112e057fe5b905060200201356040518463ffffffff1660e01b8152600401611305939291906127e8565b600060405180830381600087803b15801561131f57600080fd5b505af1158015611333573d6000803e3d6000fd5b505050506113bb565b886001600160a01b031663cf5e7bd389898581811061135757fe5b905060200201602081019061136c9190611e60565b6040518263ffffffff1660e01b815260040161138891906125d7565b600060405180830381600087803b1580156113a257600080fd5b505af11580156113b6573d6000803e3d6000fd5b505050505b611528565b806001600160a01b03166323b872dd33308989878181106113dd57fe5b905060200201356040518463ffffffff1660e01b8152600401611402939291906125eb565b602060405180830381600087803b15801561141c57600080fd5b505af1158015611430573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114549190611f1b565b6114705760405162461bcd60e51b815260040161031690612841565b611481818a88888681811061050357fe5b886001600160a01b031663e4e1e53889898581811061149c57fe5b90506020020160208101906114b19190611e60565b8888868181106114bd57fe5b905060200201358787878181106114d057fe5b905060200201356040518463ffffffff1660e01b81526004016114f5939291906127e8565b600060405180830381600087803b15801561150f57600080fd5b505af1158015611523573d6000803e3d6000fd5b505050505b6040516370a0823160e01b81526000906001600160a01b038316906370a08231906115579030906004016125d7565b60206040518083038186803b15801561156f57600080fd5b505afa158015611583573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a79190612395565b11156116be576040516370a0823160e01b81526001600160a01b0382169063a9059cbb90339083906370a08231906115e39030906004016125d7565b60206040518083038186803b1580156115fb57600080fd5b505afa15801561160f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116339190612395565b6040518363ffffffff1660e01b815260040161165092919061260f565b602060405180830381600087803b15801561166a57600080fd5b505af115801561167e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a29190611f1b565b6116be5760405162461bcd60e51b815260040161031690612841565b50600101610eea565b5050505050505050565b83518251146116f25760405162461bcd60e51b815260040161031690612814565b60005b84518110156117ee57600085828151811061170c57fe5b60200260200101519050806001600160a01b03166323b872dd333087868151811061173357fe5b60200260200101516040518463ffffffff1660e01b8152600401611759939291906125eb565b602060405180830381600087803b15801561177357600080fd5b505af1158015611787573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ab9190611f1b565b6117c75760405162461bcd60e51b815260040161031690612841565b6117e581888685815181106117d857fe5b6020026020010151611b25565b506001016116f5565b5060405163077df9bd60e31b81526001600160a01b03861690633befcde89061181f90869086908690600401612877565b600060405180830381600087803b15801561183957600080fd5b505af115801561184d573d6000803e3d6000fd5b5050505060005b8451811015611a1357600085828151811061186b57fe5b602002602001015190506000816001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016118a391906125d7565b60206040518083038186803b1580156118bb57600080fd5b505afa1580156118cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f39190612395565b1115611a0a576040516370a0823160e01b81526001600160a01b0382169063a9059cbb90339083906370a082319061192f9030906004016125d7565b60206040518083038186803b15801561194757600080fd5b505afa15801561195b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197f9190612395565b6040518363ffffffff1660e01b815260040161199c92919061260f565b602060405180830381600087803b1580156119b657600080fd5b505af11580156119ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ee9190611f1b565b611a0a5760405162461bcd60e51b815260040161031690612841565b50600101611854565b506040516370a0823160e01b81526001600160a01b0386169063a9059cbb90339083906370a0823190611a4a9030906004016125d7565b60206040518083038186803b158015611a6257600080fd5b505afa158015611a76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a9a9190612395565b6040518363ffffffff1660e01b8152600401611ab792919061260f565b602060405180830381600087803b158015611ad157600080fd5b505af1158015611ae5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b099190611f1b565b610a9e5760405162461bcd60e51b815260040161031690612841565b604051636eb1769f60e11b81526000906001600160a01b0385169063dd62ed3e90611b569030908790600401612628565b60206040518083038186803b158015611b6e57600080fd5b505afa158015611b82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba69190612395565b1115611c2f5760405163095ea7b360e01b81526001600160a01b0384169063095ea7b390611bdb90859060009060040161260f565b602060405180830381600087803b158015611bf557600080fd5b505af1158015611c09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c2d9190611f1b565b505b60405163095ea7b360e01b81526001600160a01b0384169063095ea7b390611c5d908590859060040161260f565b602060405180830381600087803b158015611c7757600080fd5b505af1158015611c8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611caf9190611f1b565b50505050565b60008083601f840112611cc6578182fd5b5081356001600160401b03811115611cdc578182fd5b6020830191508360208083028501011115611cf657600080fd5b9250929050565b600082601f830112611d0d578081fd5b8135611d20611d1b8261294c565b612926565b818152915060208083019084810181840286018201871015611d4157600080fd5b60005b84811015611d69578135611d5781612a06565b84529282019290820190600101611d44565b505050505092915050565b600082601f830112611d84578081fd5b8135611d92611d1b8261294c565b818152915060208083019084810181840286018201871015611db357600080fd5b60005b84811015611d6957813584529282019290820190600101611db6565b8035611ddd81612a06565b92915050565b600060608284031215611df4578081fd5b50919050565b60006104008284031215611df4578081fd5b60006101608284031215611df4578081fd5b600060408284031215611e2f578081fd5b611e396040612926565b9050813581526020820135602082015292915050565b600060c08284031215611df4578081fd5b600060208284031215611e71578081fd5b8135611e7c81612a06565b9392505050565b60006020808385031215611e95578182fd5b82516001600160401b03811115611eaa578283fd5b8301601f81018513611eba578283fd5b8051611ec8611d1b8261294c565b8181528381019083850185840285018601891015611ee4578687fd5b8694505b83851015611f0f578051611efb81612a06565b835260019490940193918501918501611ee8565b50979650505050505050565b600060208284031215611f2c578081fd5b8151611e7c81612a1b565b60008060408385031215611f49578081fd5b8235611f5481612a06565b91506020830135611f6481612a06565b809150509250929050565b60008060408385031215611f81578182fd5b8235611f8c81612a06565b91506020830135611f6481612a1b565b60008060408385031215611fae578182fd5b8235611fb981612a06565b946020939093013593505050565b600080600080600080600080600060c08a8c031215611fe4578485fd5b8935611fef81612a06565b985060208a01356001600160401b038082111561200a578687fd5b6120168d838e01611cb5565b909a50985060408c013591508082111561202e578687fd5b61203a8d838e01611cb5565b909850965060608c0135915080821115612052578586fd5b5061205f8c828d01611cb5565b90955093505060808a0135915060a08a013561207a81612a1b565b809150509295985092959850929598565b60008060008060008060008060006106008a8c0312156120a9578283fd5b6120b38b8b611dd2565b98506120c28b60208c01611dd2565b975060408a01356001600160401b03808211156120dd578485fd5b6120e98d838e01611e0c565b98506120f88d60608e01611de3565b97506121078d60c08e01611e4f565b96506121178d6101808e01611dfa565b95506105808c013591508082111561212d578485fd5b6121398d838e01611cfd565b94506105a08c013591508082111561214f578384fd5b5061215c8c828d01611d74565b92505061216d8b6105c08c01611e1e565b90509295985092959850929598565b60006020828403121561218d578081fd5b8151611e7c81612a06565b60008060408385031215611f49578182fd5b600080600080600060a086880312156121c1578283fd5b85356121cc81612a06565b945060208601356121dc81612a06565b935060408601356121ec81612a06565b94979396509394606081013594506080013592915050565b60008060008060006080868803121561221b578283fd5b853561222681612a06565b94506020860135935060408601356001600160401b03811115612247578384fd5b61225388828901611cb5565b909450925050606086013561226781612a06565b809150509295509295909350565b60008060008060008060006080888a03121561228f578081fd5b873561229a81612a06565b965060208801356001600160401b03808211156122b5578283fd5b6122c18b838c01611cb5565b909850965060408a01359150808211156122d9578283fd5b6122e58b838c01611cb5565b909650945060608a01359150808211156122fd578283fd5b5061230a8a828b01611cb5565b989b979a50959850939692959293505050565b60008060008060608587031215612332578182fd5b843561233d81612a06565b93506020850135925060408501356001600160401b0381111561235e578283fd5b61236a87828801611cb5565b95989497509550505050565b600060208284031215612387578081fd5b813560038110611e7c578182fd5b6000602082840312156123a6578081fd5b5051919050565b60008284526020808501945082825b858110156123ea5781356123cf81612a06565b6001600160a01b0316875295820195908201906001016123bc565b509495945050505050565b6000815180845260208085019450808401835b838110156123ea5781516001600160a01b031687529582019590820190600101612408565b81835260006001600160fb1b03831115612445578081fd5b6020830280836020870137939093016020019283525090919050565b6000815180845260208085019450808401835b838110156123ea57815187529582019590820190600101612474565b6002811061249a57fe5b9052565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b6124d2828261258a565b6101006124e381840182840161258a565b506102006124f581840182840161258a565b5061030061250781840182840161258a565b505050565b803561251781612a1b565b15158252602081013561252981612a1b565b15156020830152604081013561253e81612a1b565b15156040830152606081013561255381612a1b565b15156060830152608081013561256881612a1b565b1515608083015260a081013561257d81612a1b565b80151560a0840152505050565b61259482826125c8565b6125a460408301604083016125c8565b6125b460808301608083016125c8565b6125c460c0830160c083016125c8565b5050565b80358252602090810135910152565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6001600160a01b03871681526105406020820181905260009061268e88806129c2565b610160838601526126a46106a08601828461249e565b925050506126b560208901896129c2565b61053f1980868503016105608701526126cf84838561249e565b93506126de60408c018c61296b565b9350915080868503016105808701526126f88484846123ad565b935061270760608c018c61296b565b9350915080868503016105a087015261272184848461242d565b935061273060808c018c61296b565b9350915080868503016105c08701525061274b83838361242d565b9250505060a08801356105e084015260c088013561060084015260e0880135610620840152610100808901356106408501526101208901356106608501526127976101408a018a6129b2565b6127a5610680860182612490565b506127b3604085018961250c565b6127bf818501886124c8565b508281036105008401526127d381866123f5565b90508281036105208401526107928185612461565b6001600160a01b039390931683526020830191909152604082015260600190565b901515815260200190565b60208082526013908201527208aa4a4be988a9c8ea890be9a92a69a82a8869606b1b604082015260600190565b60208082526013908201527211549497d514905394d1915497d19052531151606a1b604082015260600190565b90815260200190565b6000848252606060208301526128906060830185612461565b905060018060a01b0383166040830152949350505050565b8481526020810184905260a08101600384106128c057fe5b836040830152825160608301526020830151608083015295945050505050565b6000808335601e198436030181126128f6578283fd5b8301803591506001600160401b0382111561290f578283fd5b6020908101925081023603821315611cf657600080fd5b6040518181016001600160401b038111828210171561294457600080fd5b604052919050565b60006001600160401b03821115612961578081fd5b5060209081020190565b6000808335601e19843603018112612981578283fd5b83016020810192503590506001600160401b038111156129a057600080fd5b602081023603831315611cf657600080fd5b6000823560028110611e7c578182fd5b6000808335601e198436030181126129d8578283fd5b83016020810192503590506001600160401b038111156129f757600080fd5b803603831315611cf657600080fd5b6001600160a01b038116811461098957600080fd5b801515811461098957600080fdfea264697066735822122080a84d21f712b11ea777cf29ebf218711731e3423fb5f06efa1e66f4817bbf7164736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
