{
  "address": "0xc71A9CD29f0f33E3e7e28ae22b7736F65Fd211fa",
  "abi": [
    {
      "anonymous": true,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes4",
          "name": "sig",
          "type": "bytes4"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "LOG_CALL",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "ManagerClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "ManagersClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "TOTAL_RATIO",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimEther",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "claimToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokensIn",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amountsIn",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokensAmountIR",
          "type": "uint256[]"
        },
        {
          "internalType": "bool",
          "name": "isPerfermance",
          "type": "bool"
        }
      ],
      "name": "depositIssueRedeemPToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokensIn",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amountsIn",
          "type": "uint256[]"
        }
      ],
      "name": "depositManagerToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getManagerClaimBool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getManagerFeeTypes",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "tokenList",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "managerAmount",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "issueAmount",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "redeemAmount",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "perfermanceAmount",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct Vault.PoolTokens",
          "name": "result",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getUnManagerReward",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokensList",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "issuance_portion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "management_portion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "managerClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "performance_portion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolsStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "couldManagerClaim",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isBlackList",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redemption_portion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "bools",
          "type": "bool"
        }
      ],
      "name": "setBlackList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adr",
          "type": "address"
        }
      ],
      "name": "setCrpFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setIssueRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setManagerRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setPerfermanceRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setRedeemRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adr",
          "type": "address"
        }
      ],
      "name": "setUserVaultAdr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "userVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xf04e9bbde874ab7695ec000ead5cfa0ed568b73f98ec9afe56165968bed59e46",
  "receipt": {
    "to": null,
    "from": "0x595b85b4A418e3B8df897D02F5BD49167D00862F",
    "contractAddress": "0xc71A9CD29f0f33E3e7e28ae22b7736F65Fd211fa",
    "transactionIndex": 0,
    "gasUsed": "3427323",
    "logsBloom": "0x
    "blockHash": "0x66f69021a2adbc071ccb59228864dac889f69007c96b1e54c2df5ee1dbf2b093",
    "transactionHash": "0xf04e9bbde874ab7695ec000ead5cfa0ed568b73f98ec9afe56165968bed59e46",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 8248456,
        "transactionHash": "0xf04e9bbde874ab7695ec000ead5cfa0ed568b73f98ec9afe56165968bed59e46",
        "address": "0xc71A9CD29f0f33E3e7e28ae22b7736F65Fd211fa",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000595b85b4a418e3b8df897d02f5bd49167d00862f"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x66f69021a2adbc071ccb59228864dac889f69007c96b1e54c2df5ee1dbf2b093"
      }
    ],
    "blockNumber": 8248456,
    "cumulativeGasUsed": "3427323",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "db1bbd35822d98d7e95e73010e06935d",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"LOG_CALL\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ManagerClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ManagersClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TOTAL_RATIO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimEther\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokensIn\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokensAmountIR\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"isPerfermance\",\"type\":\"bool\"}],\"name\":\"depositIssueRedeemPToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokensIn\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsIn\",\"type\":\"uint256[]\"}],\"name\":\"depositManagerToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getManagerClaimBool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getManagerFeeTypes\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"tokenList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"managerAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"issueAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"redeemAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"perfermanceAmount\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Vault.PoolTokens\",\"name\":\"result\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getUnManagerReward\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokensList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issuance_portion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"management_portion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"managerClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performance_portion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolsStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"couldManagerClaim\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isBlackList\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemption_portion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"bools\",\"type\":\"bool\"}],\"name\":\"setBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setCrpFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setIssueRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setManagerRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setPerfermanceRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setRedeemRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setUserVaultAdr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Desyn Labs\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Vault managerFee\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/deploy/Vault.sol\":\"Vault\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"contracts/base/Logs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\ncontract Logs {\\n    event LOG_CALL(bytes4 indexed sig, address indexed caller, bytes data) anonymous;\\n\\n    modifier _logs_() {\\n        emit LOG_CALL(msg.sig, msg.sender, msg.data);\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x942b3c172dd3f0910c3589d703b4f224c94c76a13cc84d7add6318206cff512e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/deploy/Vault.sol\":{\"content\":\"pragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../openzeppelin/Ownable.sol\\\";\\nimport \\\"../interfaces/IDSProxy.sol\\\";\\nimport \\\"../libraries/SafeMath.sol\\\";\\nimport \\\"../libraries/Address.sol\\\";\\nimport \\\"../libraries/SafeERC20.sol\\\";\\nimport \\\"../base/Logs.sol\\\";\\n\\ninterface ICRPPool {\\n    function getController() external view returns (address);\\n\\n    enum Etypes {\\n        OPENED,\\n        CLOSED\\n    }\\n\\n    function etype() external view returns (Etypes);\\n}\\n\\ninterface IDesynOwnable {\\n    function adminList(address adr) external view returns (bool);\\n    function getController() external view returns (address);\\n    function getOwners() external view returns (address[] memory);\\n    function getOwnerPercentage() external view returns (uint[] memory);\\n    function allOwnerPercentage() external view returns (uint);\\n}\\n\\ninterface IUserVault {\\n    function depositToken(\\n        address pool,\\n        uint types,\\n        address[] calldata poolTokens,\\n        uint[] calldata tokensAmount\\n    ) external;\\n}\\n\\ninterface ICRPFactory {\\n    function isCrp(address addr) external view returns (bool);\\n}\\n\\n/**\\n * @author Desyn Labs\\n * @title Vault managerFee\\n */\\ncontract Vault is Ownable, Logs {\\n    using SafeMath for uint;\\n    using Address for address;\\n    using SafeERC20 for IERC20;\\n\\n    ICRPFactory crpFactory;\\n    address public userVault;\\n\\n    event ManagersClaim(address indexed caller,address indexed pool, address token, uint amount, uint time);\\n    event ManagerClaim(address indexed caller, address indexed pool, address indexed manager, address token, uint amount, uint time);\\n\\n    // pool of tokens\\n    struct PoolTokens {\\n        address[] tokenList;\\n        uint[] managerAmount;\\n        uint[] issueAmount;\\n        uint[] redeemAmount;\\n        uint[] perfermanceAmount;\\n    }\\n\\n    struct PoolStatus {\\n        bool couldManagerClaim;\\n        bool isBlackList;\\n    }\\n    \\n    struct ClaimTokens {\\n        address[] tokens;\\n        uint[] amounts;\\n    }\\n\\n    // pool tokens\\n    mapping(address => PoolTokens) poolsTokens;\\n    mapping(address => PoolStatus) public poolsStatus;\\n\\n    mapping (address => ClaimTokens) manageHasClaimed;\\n\\n    // default ratio config\\n    uint public TOTAL_RATIO = 1000;\\n    uint public management_portion = 800;\\n    uint public issuance_portion = 800;\\n    uint public redemption_portion = 800;\\n    uint public performance_portion = 800;\\n\\n    receive() external payable {}\\n\\n    function depositManagerToken(address[] calldata tokensIn, uint[] calldata amountsIn) external {\\n        address pool = msg.sender;\\n        require(crpFactory.isCrp(pool), \\\"ERR_INVALID_POOL_ADDRESS\\\");\\n        require(tokensIn.length == amountsIn.length, \\\"ERR_TOKEN_LENGTH_NOT_MATCH\\\");\\n        _depositTokenIM(0, pool, tokensIn, amountsIn);\\n\\n        poolsStatus[pool].couldManagerClaim = true;\\n        \\n        if (_isClosePool(pool)) managerClaim(pool);\\n    }\\n\\n    function depositIssueRedeemPToken(\\n        address[] calldata tokensIn,\\n        uint[] calldata amountsIn,\\n        uint[] calldata tokensAmountIR,\\n        bool isPerfermance\\n    ) external {\\n        address pool = msg.sender;\\n        require(crpFactory.isCrp(pool), \\\"ERR_INVALID_POOL_ADDRESS\\\");\\n        require(tokensIn.length == amountsIn.length, \\\"ERR_TOKEN_LENGTH_NOT_MATCH\\\");\\n\\n        isPerfermance\\n                // I-issuce\\uff1b M-mamager\\uff1b R-redeem\\uff1bp-performance\\n                ? _depositTokenRP(pool, tokensIn, amountsIn, tokensAmountIR)\\n                : _depositTokenIM(1, pool, tokensIn, amountsIn);\\n\\n        poolsStatus[pool].couldManagerClaim = true;\\n\\n        if (_isClosePool(pool)) managerClaim(pool);   \\n    }\\n\\n    function getManagerClaimBool(address pool) external view returns (bool) {\\n        return poolsStatus[pool].couldManagerClaim;\\n    }\\n\\n    function setBlackList(address pool, bool bools) external onlyOwner _logs_ {\\n        poolsStatus[pool].isBlackList = bools;\\n    }\\n\\n    function setUserVaultAdr(address adr) external onlyOwner _logs_ {\\n        require(adr != address(0), \\\"ERR_INVALID_USERVAULT_ADDRESS\\\");\\n        userVault = adr;\\n    }\\n\\n    function setCrpFactory(address adr) external onlyOwner _logs_ {\\n        crpFactory = ICRPFactory(adr);\\n    }\\n\\n    function claimToken(\\n        address token,\\n        address user,\\n        uint amount\\n    ) external onlyOwner {\\n        IERC20(token).safeTransfer(user, amount);\\n    }\\n\\n    function claimEther() external payable onlyOwner {\\n        msg.sender.transfer(address(this).balance);\\n    }\\n\\n    function setManagerRatio(uint amount) external onlyOwner _logs_ {\\n        require(amount <= TOTAL_RATIO, \\\"Maximum limit exceeded\\\");\\n        management_portion = amount;\\n    }\\n\\n    function setIssueRatio(uint amount) external onlyOwner _logs_ {\\n        require(amount <= TOTAL_RATIO, \\\"Maximum limit exceeded\\\");\\n        issuance_portion = amount;\\n    }\\n\\n    function setRedeemRatio(uint amount) external onlyOwner _logs_ {\\n        require(amount <= TOTAL_RATIO, \\\"Maximum limit exceeded\\\");\\n        redemption_portion = amount;\\n    }\\n\\n    function setPerfermanceRatio(uint amount) external onlyOwner _logs_{\\n        performance_portion = amount;\\n    }\\n\\n    function managerClaim(address pool) public {\\n        require(crpFactory.isCrp(pool), \\\"ERR_INVALID_POOL_ADDRESS\\\");\\n        address managerAddr = ICRPPool(pool).getController();\\n\\n        PoolTokens memory tokens = poolsTokens[pool];\\n        PoolStatus storage status = poolsStatus[pool];\\n        bool isCloseETF = _isClosePool(pool);\\n\\n        address[] memory poolManageTokens = tokens.tokenList;\\n        uint len = poolManageTokens.length;\\n        require(!status.isBlackList, \\\"ERR_POOL_IS_BLACKLIST\\\");\\n        require(len > 0, \\\"ERR_NOT_MANGER_FEE\\\");\\n        require(status.couldManagerClaim, \\\"ERR_MANAGER_COULD_NOT_CLAIM\\\");\\n        status.couldManagerClaim = false;\\n\\n        uint[] memory managerTokenAmount = new uint[](len);\\n        uint[] memory issueTokenAmount = new uint[](len);\\n        uint[] memory redeemTokenAmount = new uint[](len);\\n        uint[] memory perfermanceTokenAmount = new uint[](len);\\n\\n        for (uint i; i < len; i++) {\\n            address t = poolManageTokens[i];\\n            uint b;\\n            (b, managerTokenAmount[i], issueTokenAmount[i], redeemTokenAmount[i], perfermanceTokenAmount[i]) = _computeBalance(i, pool);\\n            if(!isCloseETF) b = b.sub(_getManagerHasClaimed(pool,t));\\n            if(b != 0) _transferHandle(pool, managerAddr, t, b);\\n        }\\n        \\n        if (isCloseETF) {\\n            _recordUserVault(pool, poolManageTokens, managerTokenAmount, issueTokenAmount, redeemTokenAmount, perfermanceTokenAmount);\\n            _clearPool(pool);\\n        }   \\n    }\\n\\n    function getManagerFeeTypes(address pool) external view returns(PoolTokens memory result){     \\n        PoolTokens memory tokens = poolsTokens[pool];\\n        address[] memory poolManageTokens = tokens.tokenList;\\n        uint len = poolManageTokens.length;\\n\\n        result.tokenList = tokens.tokenList;\\n        result.managerAmount = new uint[](len);\\n        result.issueAmount = new uint[](len);\\n        result.redeemAmount = new uint[](len);\\n        result.perfermanceAmount = new uint[](len);\\n\\n        for(uint i; i< len; i++){\\n            (,result.managerAmount[i],result.issueAmount[i],result.redeemAmount[i],result.perfermanceAmount[i]) = _computeBalance(i,pool);\\n        }\\n    }\\n\\n    function getUnManagerReward(address pool) external view returns (address[] memory tokensList, uint[] memory amounts) {\\n        PoolTokens memory tokens = poolsTokens[pool];\\n        address[] memory poolManageTokens = tokens.tokenList;\\n        uint len = poolManageTokens.length;\\n\\n        tokensList = new address[](len);\\n        amounts = new uint[](len);\\n\\n        for (uint i; i < len; i++) {\\n            address t = poolManageTokens[i];\\n            tokensList[i] = t;\\n            (amounts[i],,,,) = _computeBalance(i,pool);\\n            amounts[i] = amounts[i].sub(_getManagerHasClaimed(pool, t));\\n        }\\n    }\\n\\n    function _addTokenInPool(address pool, address tokenAddr) internal {\\n        PoolTokens storage tokens = poolsTokens[pool];\\n\\n        tokens.tokenList.push(tokenAddr);\\n        tokens.managerAmount.push(0);\\n        tokens.issueAmount.push(0);\\n        tokens.redeemAmount.push(0);\\n        tokens.perfermanceAmount.push(0);\\n    }\\n    // for old token\\n    function _updateTokenAmountInPool(uint types, address pool, uint tokenIndex, uint amount) internal {\\n        PoolTokens storage tokens = poolsTokens[pool];\\n\\n        if(types == 0) tokens.managerAmount[tokenIndex] = tokens.managerAmount[tokenIndex].add(amount);\\n        else if(types == 1) tokens.issueAmount[tokenIndex] = tokens.issueAmount[tokenIndex].add(amount);\\n        else if(types == 2) tokens.redeemAmount[tokenIndex] = tokens.redeemAmount[tokenIndex].add(amount);\\n        else if(types == 3) tokens.perfermanceAmount[tokenIndex] = tokens.perfermanceAmount[tokenIndex].add(amount);\\n    }\\n    // for new token\\n    function _updateTokenAmountInPool(uint types, address pool, uint amount) internal {\\n        PoolTokens storage tokens = poolsTokens[pool];\\n        uint tokenIndex = tokens.tokenList.length - 1;\\n\\n        if(types == 0) tokens.managerAmount[tokenIndex] = amount;\\n        else if(types == 1) tokens.issueAmount[tokenIndex] = amount;\\n        else if(types == 2) tokens.redeemAmount[tokenIndex] = amount;\\n        else if(types == 3) tokens.perfermanceAmount[tokenIndex] = amount;\\n    }\\n\\n    function _depositTokenIM(\\n        uint types,\\n        address pool,\\n        address[] memory tokensIn,\\n        uint[] memory amountsIn\\n    ) internal {\\n        PoolTokens memory tokens = poolsTokens[pool];\\n\\n        uint len = tokensIn.length;\\n        for (uint i; i < len; i++) {\\n            address t = tokensIn[i];\\n            uint b = amountsIn[i];\\n\\n            IERC20(t).safeTransferFrom(msg.sender, address(this), b);\\n            (bool isExit, uint index) = _arrIncludeAddr(tokens.tokenList,t);\\n            if (isExit) {\\n                _updateTokenAmountInPool(types,pool,index,b);\\n            } else { \\n                _addTokenInPool(pool,t); \\n                _updateTokenAmountInPool(types,pool,b);    \\n            }\\n        }\\n    }\\n\\n    function _arrIncludeAddr(address[] memory tokens, address target) internal pure returns(bool isInclude, uint index){\\n        for(uint i; i<tokens.length; i++){\\n            if(tokens[i] == target){ \\n                isInclude = true;\\n                index = i;\\n                break;\\n            }\\n        }\\n    }\\n\\n    function _depositTokenRP(\\n        address pool,\\n        address[] calldata tokenIns,\\n        uint[] calldata tokensAmount,\\n        uint[] calldata tokensAmountIR\\n    ) internal {\\n        address[] memory tokenList = poolsTokens[pool].tokenList;\\n\\n        uint len = tokensAmount.length;\\n        for (uint i; i < len; i++) {\\n            address t = tokenIns[i];\\n            uint b = tokensAmount[i];\\n            // uint bIR = tokensAmountIR[i];\\n            IERC20(t).safeTransferFrom(msg.sender, address(this), b);\\n\\n            (bool isExit,uint index) = _arrIncludeAddr(tokenList, t);\\n            if(isExit){\\n                _updateTokenAmountInPool(2, pool, index, tokensAmountIR[i]);\\n                _updateTokenAmountInPool(3, pool, index, b.sub(tokensAmountIR[i]));\\n            } else {\\n                _addTokenInPool(pool, t);\\n                _updateTokenAmountInPool(2,pool, tokensAmountIR[i]);\\n                _updateTokenAmountInPool(3, pool,b.sub(tokensAmountIR[i]));        \\n            }\\n        }\\n    }\\n\\n    function _isClosePool(address pool) internal view returns (bool) {\\n        return ICRPPool(pool).etype() == ICRPPool.Etypes.CLOSED;\\n    }\\n\\n    function _computeBalance(uint i, address pool)\\n        internal\\n        view\\n        returns (\\n            uint balance,\\n            uint bManagerAmount,\\n            uint bIssueAmount,\\n            uint bRedeemAmount,\\n            uint bPerfermanceAmount\\n        )\\n    {\\n        PoolTokens memory tokens = poolsTokens[pool];\\n\\n        if (tokens.tokenList.length != 0) {\\n            bManagerAmount = tokens.managerAmount[i].mul(management_portion).div(TOTAL_RATIO);\\n            bIssueAmount = tokens.issueAmount[i].mul(issuance_portion).div(TOTAL_RATIO);\\n            bRedeemAmount = tokens.redeemAmount[i].mul(redemption_portion).div(TOTAL_RATIO);\\n            bPerfermanceAmount = tokens.perfermanceAmount[i].mul(performance_portion).div(TOTAL_RATIO);\\n\\n            balance = bManagerAmount.add(bIssueAmount).add(bRedeemAmount).add(bPerfermanceAmount);\\n        }\\n    }\\n\\n    function _clearPool(address pool) internal {\\n        delete poolsTokens[pool];\\n    }\\n\\n    function _recordUserVault(\\n        address pool,\\n        address[] memory tokenList,\\n        uint[] memory managerTokenAmount,\\n        uint[] memory issueTokenAmount,\\n        uint[] memory redeemTokenAmount,\\n        uint[] memory perfermanceTokenAmount\\n    ) internal {\\n        if (tokenList.length != 0) {\\n            IUserVault(userVault).depositToken(pool, 0, tokenList, managerTokenAmount);\\n            IUserVault(userVault).depositToken(pool, 1, tokenList, issueTokenAmount);\\n            IUserVault(userVault).depositToken(pool, 2, tokenList, redeemTokenAmount);\\n            IUserVault(userVault).depositToken(pool, 3, tokenList, perfermanceTokenAmount);\\n        }\\n\\n    }\\n\\n    function _transferHandle(\\n        address pool,\\n        address managerAddr,\\n        address t,\\n        uint balance\\n    ) internal {\\n        require(balance != 0, \\\"ERR_ILLEGAL_BALANCE\\\");\\n        bool isCloseETF = _isClosePool(pool);\\n        bool isOpenETF = !isCloseETF;\\n        bool isContractManager = managerAddr.isContract();\\n\\n        if(isCloseETF){\\n            IERC20(t).safeTransfer(userVault, balance);\\n        }\\n\\n        if(isOpenETF && isContractManager){\\n            address[] memory managerAddressList = IDesynOwnable(pool).getOwners();\\n            uint[] memory ownerPercentage = IDesynOwnable(pool).getOwnerPercentage();\\n            uint allOwnerPercentage = IDesynOwnable(pool).allOwnerPercentage();\\n\\n            for (uint k; k < managerAddressList.length; k++) {\\n                address reciver = address(managerAddressList[k]).isContract()? IDSProxy(managerAddressList[k]).owner(): managerAddressList[k];\\n                uint b = balance.mul(ownerPercentage[k]).div(allOwnerPercentage);\\n                IERC20(t).safeTransfer(reciver, b);\\n                emit ManagerClaim(msg.sender, pool, reciver,t,b,block.timestamp);\\n            }\\n            _updateManageHasClaimed(pool,t,balance);\\n            emit ManagersClaim(msg.sender, pool, t, balance, block.timestamp);\\n        }\\n\\n        if(isOpenETF && !isContractManager){\\n            IERC20(t).safeTransfer(managerAddr, balance);\\n        }\\n    }\\n\\n    function _updateManageHasClaimed(address pool, address token, uint amount) internal {\\n        ClaimTokens storage claimInfo = manageHasClaimed[pool];\\n        (bool isExit, uint index) = _arrIncludeAddr(claimInfo.tokens, token);\\n\\n        if(isExit){\\n            claimInfo.amounts[index] = claimInfo.amounts[index].add(amount);\\n        } else{\\n            claimInfo.tokens.push(token);\\n            claimInfo.amounts.push(amount);\\n        }\\n    }\\n\\n    function _getManagerHasClaimed(address pool, address token) internal view returns(uint){\\n        require(!_isClosePool(pool),\\\"ERR_NOT_OPEN_POOL\\\");\\n\\n        ClaimTokens memory claimInfo = manageHasClaimed[pool];\\n        (bool isExit,uint index) = _arrIncludeAddr(claimInfo.tokens, token);\\n\\n        if(isExit) return claimInfo.amounts[index];\\n        if(!isExit) return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x234b3fd1338362011b5b1da412cc737560ebbb1e3656e014a2b7f97f0ca79a85\"},\"contracts/interfaces/IDSProxy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\ninterface IDSProxy {\\n    function owner() external view returns(address);\\n}\",\"keccak256\":\"0xe330359819e40d60365ba92005c9b8b1eccdf18ae583352a0cff0a2a4cf7ff14\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Interface declarations\\n\\n/* solhint-disable func-order */\\n\\ninterface IERC20 {\\n    // Emitted when the allowance of a spender for an owner is set by a call to approve.\\n    // Value is the new allowance\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n\\n    // Emitted when value tokens are moved from one account (from) to another (to).\\n    // Note that value may be zero\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    // Returns the amount of tokens in existence\\n    function totalSupply() external view returns (uint);\\n\\n    // Returns the amount of tokens owned by account\\n    function balanceOf(address account) external view returns (uint);\\n\\n    // Returns the decimals of tokens\\n    function decimals() external view returns (uint8);\\n\\n    function symbol() external view returns (string memory);\\n\\n    // Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner\\n    // through transferFrom. This is zero by default\\n    // This value changes when approve or transferFrom are called\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    // Sets amount as the allowance of spender over the caller\\u2019s tokens\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits an Approval event.\\n    function approve(address spender, uint amount) external returns (bool);\\n\\n    // Moves amount tokens from the caller\\u2019s account to recipient\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits a Transfer event.\\n    function transfer(address recipient, uint amount) external returns (bool);\\n\\n    // Moves amount tokens from sender to recipient using the allowance mechanism\\n    // Amount is then deducted from the caller\\u2019s allowance\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits a Transfer event\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xfe22b6d6029b400b9cce7f9b39c546f99cd6922b2fd926e480e2b4d476ab26f8\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            codehash := extcodehash(account)\\n        }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint weiValue,\\n        string memory errorMessage\\n    ) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2f31de87a6037a6a1ab4cefb32f22352df92b082dde0c182801bf421bacc303c\",\"license\":\"agpl-3.0\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\nimport {SafeMath} from \\\"./SafeMath.sol\\\";\\nimport {Address} from \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint value\\n    ) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint value\\n    ) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint value\\n    ) internal {\\n        require((value == 0) || (token.allowance(address(this), spender) == 0), \\\"SafeERC20: approve from non-zero to non-zero allowance\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdb66e9e24513d153d62e792a46c723eeff7ad7c93215a56aa3a27f1143d95ae9\",\"license\":\"MIT\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint a, uint b) internal pure returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint a, uint b) internal pure returns (uint) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint a,\\n        uint b,\\n        string memory errorMessage\\n    ) internal pure returns (uint) {\\n        require(b <= a, errorMessage);\\n        uint c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint a, uint b) internal pure returns (uint) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint a, uint b) internal pure returns (uint) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint a,\\n        uint b,\\n        string memory errorMessage\\n    ) internal pure returns (uint) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint a, uint b) internal pure returns (uint) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint a,\\n        uint b,\\n        string memory errorMessage\\n    ) internal pure returns (uint) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x7ce3fd7d17047f684821e1a20b4f5989630f6755a377b12c087dfde359f710d6\",\"license\":\"agpl-3.0\"},\"contracts/openzeppelin/Ownable.sol\":{\"content\":\"pragma solidity >=0.6.0 <0.8.0;\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\",\"keccak256\":\"0x8e1e573ff7c1a90087b58f618ae87f33f04616ec7f959f73db4a3b73ff1ee939\"}},\"version\":1}",
  "bytecode": "0x60806040526103e8600655610320600755610320600855610320600955610320600a553480156200002f57600080fd5b5060006200003c6200008c565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35062000090565b3390565b613a8f80620000a06000396000f3fe60806040526004361061012a5760003560e01c80630417c5f5146101365780630922f29d146101615780630b6b3b2a146101835780630bac7b81146101a3578063125bfb66146101c35780631483d99d146101e357806336e4c87f1461020357806337dfe11414610231578063483e194814610246578063545274ea1461026657806355291dbd1461027b578063598797ad1461028357806368092bd9146102b05780636fd4ba9c146102d0578063715018a6146102fe57806371bb41a91461031357806389a612e5146103335780638da5cb5b1461035357806393782db0146103755780639daafec71461038a578063c0fcb1661461039f578063c1e57622146103cc578063d89b1681146103ec578063edb12adf14610401578063f2fde38b1461042157610131565b3661013157005b600080fd5b34801561014257600080fd5b5061014b610441565b60405161015891906139bc565b60405180910390f35b34801561016d57600080fd5b5061018161017c366004613091565b610447565b005b34801561018f57600080fd5b5061018161019e3660046133ad565b610511565b3480156101af57600080fd5b506101816101be366004613141565b61058f565b3480156101cf57600080fd5b506101816101de3660046130c9565b6106fb565b3480156101ef57600080fd5b506101816101fe3660046131a9565b610753565b34801561020f57600080fd5b5061022361021e366004613091565b6108db565b60405161015892919061355a565b34801561023d57600080fd5b5061014b6108f9565b34801561025257600080fd5b506101816102613660046133ad565b6108ff565b34801561027257600080fd5b5061014b61099f565b6101816109a5565b34801561028f57600080fd5b506102a361029e366004613091565b610a13565b604051610158919061392a565b3480156102bc57600080fd5b506101816102cb366004613109565b610dbb565b3480156102dc57600080fd5b506102f06102eb366004613091565b610e65565b604051610158929190613521565b34801561030a57600080fd5b506101816111ad565b34801561031f57600080fd5b5061018161032e3660046133ad565b611236565b34801561033f57600080fd5b5061018161034e3660046133ad565b6112d6565b34801561035f57600080fd5b50610368611376565b604051610158919061346b565b34801561038157600080fd5b5061014b611385565b34801561039657600080fd5b5061036861138b565b3480156103ab57600080fd5b506103bf6103ba366004613091565b61139a565b604051610158919061354f565b3480156103d857600080fd5b506101816103e7366004613091565b6113b8565b3480156103f857600080fd5b5061014b611453565b34801561040d57600080fd5b5061018161041c366004613091565b611459565b34801561042d57600080fd5b5061018161043c366004613091565b6119f0565b60065481565b61044f611ab0565b6001600160a01b0316610460611376565b6001600160a01b03161461048f5760405162461bcd60e51b815260040161048690613810565b60405180910390fd5b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516104c192919061356c565b60405180910390a26001600160a01b0381166104ef5760405162461bcd60e51b815260040161048690613644565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b610519611ab0565b6001600160a01b031661052a611376565b6001600160a01b0316146105505760405162461bcd60e51b815260040161048690613810565b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405161058292919061356c565b60405180910390a2600a55565b600154604051636e0cf42160e11b815233916001600160a01b03169063dc19e842906105bf90849060040161346b565b60206040518083038186803b1580156105d757600080fd5b505afa1580156105eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060f9190613372565b61062b5760405162461bcd60e51b815260040161048690613772565b83821461064a5760405162461bcd60e51b8152600401610486906136dd565b6106ba60008287878080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808b0282810182019093528a82529093508a925089918291850190849080828437600092019190915250611ab492505050565b6001600160a01b0381166000908152600460205260409020805460ff191660011790556106e681611d4e565b156106f4576106f481611459565b5050505050565b610703611ab0565b6001600160a01b0316610714611376565b6001600160a01b03161461073a5760405162461bcd60e51b815260040161048690613810565b61074e6001600160a01b0384168383611dd5565b505050565b600154604051636e0cf42160e11b815233916001600160a01b03169063dc19e8429061078390849060040161346b565b60206040518083038186803b15801561079b57600080fd5b505afa1580156107af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d39190613372565b6107ef5760405162461bcd60e51b815260040161048690613772565b86851461080e5760405162461bcd60e51b8152600401610486906136dd565b81610888576108836001828a8a8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808e0282810182019093528d82529093508d92508c918291850190849080828437600092019190915250611ab492505050565b610897565b61089781898989898989611e2b565b6001600160a01b0381166000908152600460205260409020805460ff191660011790556108c381611d4e565b156108d1576108d181611459565b5050505050505050565b60046020526000908152604090205460ff8082169161010090041682565b60095481565b610907611ab0565b6001600160a01b0316610918611376565b6001600160a01b03161461093e5760405162461bcd60e51b815260040161048690613810565b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405161097092919061356c565b60405180910390a260065481111561099a5760405162461bcd60e51b815260040161048690613614565b600955565b600a5481565b6109ad611ab0565b6001600160a01b03166109be611376565b6001600160a01b0316146109e45760405162461bcd60e51b815260040161048690613810565b60405133904780156108fc02916000818181858888f19350505050158015610a10573d6000803e3d6000fd5b50565b610a1b612fce565b610a23612fce565b6001600160a01b0383166000908152600360209081526040918290208251815460c09381028201840190945260a081018481529093919284928491840182828015610a9757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610a79575b5050505050815260200160018201805480602002602001604051908101604052809291908181526020018280548015610aef57602002820191906000526020600020905b815481526020019060010190808311610adb575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015610b4757602002820191906000526020600020905b815481526020019060010190808311610b33575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015610b9f57602002820191906000526020600020905b815481526020019060010190808311610b8b575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015610bf757602002820191906000526020600020905b815481526020019060010190808311610be3575b50505091909252505081518051818652929350919050806001600160401b0381118015610c2357600080fd5b50604051908082528060200260200182016040528015610c4d578160200160208202803683370190505b506020850152806001600160401b0381118015610c6957600080fd5b50604051908082528060200260200182016040528015610c93578160200160208202803683370190505b506040850152806001600160401b0381118015610caf57600080fd5b50604051908082528060200260200182016040528015610cd9578160200160208202803683370190505b506060850152806001600160401b0381118015610cf557600080fd5b50604051908082528060200260200182016040528015610d1f578160200160208202803683370190505b50608085015260005b81811015610db257610d3a8187611fdf565b909192935088602001518581518110610d4f57fe5b6020026020010189604001518681518110610d6657fe5b602002602001018a606001518781518110610d7d57fe5b602002602001018b608001518881518110610d9457fe5b60209081029190910101939093529290915291905252600101610d28565b50505050919050565b610dc3611ab0565b6001600160a01b0316610dd4611376565b6001600160a01b031614610dfa5760405162461bcd60e51b815260040161048690613810565b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051610e2c92919061356c565b60405180910390a26001600160a01b03909116600090815260046020526040902080549115156101000261ff0019909216919091179055565b606080610e70612fce565b6001600160a01b0384166000908152600360209081526040918290208251815460c09381028201840190945260a081018481529093919284928491840182828015610ee457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610ec6575b5050505050815260200160018201805480602002602001604051908101604052809291908181526020018280548015610f3c57602002820191906000526020600020905b815481526020019060010190808311610f28575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015610f9457602002820191906000526020600020905b815481526020019060010190808311610f80575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015610fec57602002820191906000526020600020905b815481526020019060010190808311610fd8575b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561104457602002820191906000526020600020905b815481526020019060010190808311611030575b50505091909252505081518051929350919050806001600160401b038111801561106d57600080fd5b50604051908082528060200260200182016040528015611097578160200160208202803683370190505b509450806001600160401b03811180156110b057600080fd5b506040519080825280602002602001820160405280156110da578160200160208202803683370190505b50935060005b818110156111a45760008382815181106110f657fe5b602002602001015190508087838151811061110d57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506111378289611fdf565b50508851899250859150811061114957fe5b6020026020010181815250506111846111628983612290565b87848151811061116e57fe5b60200260200101516123ed90919063ffffffff16565b86838151811061119057fe5b6020908102919091010152506001016110e0565b50505050915091565b6111b5611ab0565b6001600160a01b03166111c6611376565b6001600160a01b0316146111ec5760405162461bcd60e51b815260040161048690613810565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b61123e611ab0565b6001600160a01b031661124f611376565b6001600160a01b0316146112755760405162461bcd60e51b815260040161048690613810565b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516112a792919061356c565b60405180910390a26006548111156112d15760405162461bcd60e51b815260040161048690613614565b600855565b6112de611ab0565b6001600160a01b03166112ef611376565b6001600160a01b0316146113155760405162461bcd60e51b815260040161048690613810565b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405161134792919061356c565b60405180910390a26006548111156113715760405162461bcd60e51b815260040161048690613614565b600755565b6000546001600160a01b031690565b60075481565b6002546001600160a01b031681565b6001600160a01b031660009081526004602052604090205460ff1690565b6113c0611ab0565b6001600160a01b03166113d1611376565b6001600160a01b0316146113f75760405162461bcd60e51b815260040161048690613810565b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405161142992919061356c565b60405180910390a2600180546001600160a01b0319166001600160a01b0392909216919091179055565b60085481565b600154604051636e0cf42160e11b81526001600160a01b039091169063dc19e8429061148990849060040161346b565b60206040518083038186803b1580156114a157600080fd5b505afa1580156114b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d99190613372565b6114f55760405162461bcd60e51b815260040161048690613772565b6000816001600160a01b0316633018205f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561153057600080fd5b505afa158015611544573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061156891906130ad565b9050611572612fce565b6001600160a01b0383166000908152600360209081526040918290208251815460c09381028201840190945260a0810184815290939192849284918401828280156115e657602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116115c8575b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561163e57602002820191906000526020600020905b81548152602001906001019080831161162a575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561169657602002820191906000526020600020905b815481526020019060010190808311611682575b50505050508152602001600382018054806020026020016040519081016040528092919081815260200182805480156116ee57602002820191906000526020600020905b8154815260200190600101908083116116da575b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561174657602002820191906000526020600020905b815481526020019060010190808311611732575b505050919092525050506001600160a01b038416600090815260046020526040812091925061177485611d4e565b8351805184549293509091610100900460ff16156117a45760405162461bcd60e51b81526004016104869061387a565b600081116117c45760405162461bcd60e51b815260040161048690613746565b835460ff166117e55760405162461bcd60e51b815260040161048690613845565b835460ff191684556060816001600160401b038111801561180557600080fd5b5060405190808252806020026020018201604052801561182f578160200160208202803683370190505b5090506060826001600160401b038111801561184a57600080fd5b50604051908082528060200260200182016040528015611874578160200160208202803683370190505b5090506060836001600160401b038111801561188f57600080fd5b506040519080825280602002602001820160405280156118b9578160200160208202803683370190505b5090506060846001600160401b03811180156118d457600080fd5b506040519080825280602002602001820160405280156118fe578160200160208202803683370190505b50905060005b858110156119c557600087828151811061191a57fe5b602002602001015190506000611930838f611fdf565b8b888151811061193c57fe5b602002602001018b898151811061194f57fe5b602002602001018b8a8151811061196257fe5b602002602001018b8b8151811061197557fe5b602090810291909101019390935292909152919052529050896119a9576119a661199f8f84612290565b82906123ed565b90505b80156119bb576119bb8e8e8484612436565b5050600101611904565b5086156119e3576119da8b878686868661280c565b6119e38b6129b9565b5050505050505050505050565b6119f8611ab0565b6001600160a01b0316611a09611376565b6001600160a01b031614611a2f5760405162461bcd60e51b815260040161048690613810565b6001600160a01b038116611a555760405162461bcd60e51b8152600401610486906135ce565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b611abc612fce565b6001600160a01b0384166000908152600360209081526040918290208251815460c09381028201840190945260a081018481529093919284928491840182828015611b3057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611b12575b5050505050815260200160018201805480602002602001604051908101604052809291908181526020018280548015611b8857602002820191906000526020600020905b815481526020019060010190808311611b74575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015611be057602002820191906000526020600020905b815481526020019060010190808311611bcc575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015611c3857602002820191906000526020600020905b815481526020019060010190808311611c24575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015611c9057602002820191906000526020600020905b815481526020019060010190808311611c7c575b505050505081525050905060008351905060005b81811015611d45576000858281518110611cba57fe5b602002602001015190506000858381518110611cd257fe5b60209081029190910101519050611cf46001600160a01b038316333084612a14565b600080611d05876000015185612a3b565b915091508115611d2057611d1b8b8b8386612a93565b611d35565b611d2a8a85612b90565b611d358b8b85612c26565b505060019092019150611ca49050565b50505050505050565b60006001826001600160a01b03166373a9855c6040518163ffffffff1660e01b815260040160206040518083038186803b158015611d8b57600080fd5b505afa158015611d9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc3919061338e565b6001811115611dce57fe5b1492915050565b61074e8363a9059cbb60e01b8484604051602401611df49291906134e7565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612ca4565b6001600160a01b038716600090815260036020908152604091829020805483518184028101840190945280845260609392830182828015611e9557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611e77575b509394508793506000925050505b81811015611fd3576000898983818110611eb957fe5b9050602002016020810190611ece9190613091565b90506000888884818110611ede57fe5b60200291909101359150611eff90506001600160a01b038316333084612a14565b600080611f0c8785612a3b565b915091508115611f6b57611f3560028f838c8c8a818110611f2957fe5b90506020020135612a93565b611f6660038f83611f618d8d8b818110611f4b57fe5b90506020020135886123ed90919063ffffffff16565b612a93565b611fc3565b611f758e85612b90565b611f9360028f8b8b89818110611f8757fe5b90506020020135612c26565b611fc360038f611fbe8c8c8a818110611fa857fe5b90506020020135876123ed90919063ffffffff16565b612c26565b505060019092019150611ea39050565b50505050505050505050565b6000806000806000611fef612fce565b6001600160a01b0387166000908152600360209081526040918290208251815460c09381028201840190945260a08101848152909391928492849184018282801561206357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612045575b50505050508152602001600182018054806020026020016040519081016040528092919081815260200182805480156120bb57602002820191906000526020600020905b8154815260200190600101908083116120a7575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561211357602002820191906000526020600020905b8154815260200190600101908083116120ff575b505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561216b57602002820191906000526020600020905b815481526020019060010190808311612157575b50505050508152602001600482018054806020026020016040519081016040528092919081815260200182805480156121c357602002820191906000526020600020905b8154815260200190600101908083116121af575b50505091909252505081515191925050156122855761221060065461220a60075484602001518c815181106121f457fe5b6020026020010151612d8990919063ffffffff16565b90612dc3565b945061222e60065461220a60085484604001518c815181106121f457fe5b935061224c60065461220a60095484606001518c815181106121f457fe5b925061226a60065461220a600a5484608001518c815181106121f457fe5b91506122828261227c85818989612e02565b90612e02565b95505b509295509295909350565b600061229b83611d4e565b156122b85760405162461bcd60e51b8152600401610486906137a4565b6122c0612ffd565b6001600160a01b038416600090815260056020908152604091829020825181546060938102820184018552938101848152909391928492849184018282801561233257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612314575b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561238a57602002820191906000526020600020905b815481526020019060010190808311612376575b50505050508152505090506000806123a6836000015186612a3b565b9150915081156123d257826020015181815181106123c057fe5b602002602001015193505050506123e7565b816123e357600093505050506123e7565b5050505b92915050565b600061242f83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612e27565b9392505050565b806124535760405162461bcd60e51b8152600401610486906136b0565b600061245e85611d4e565b9050801560006124766001600160a01b038716612e53565b9050821561249857600254612498906001600160a01b03878116911686611dd5565b8180156124a25750805b156127e8576060876001600160a01b031663a0e67e2b6040518163ffffffff1660e01b815260040160006040518083038186803b1580156124e257600080fd5b505afa1580156124f6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261251e9190810190613252565b90506060886001600160a01b031663309a042c6040518163ffffffff1660e01b815260040160006040518083038186803b15801561255b57600080fd5b505afa15801561256f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261259791908101906132ef565b90506000896001600160a01b031663d29986c16040518163ffffffff1660e01b815260040160206040518083038186803b1580156125d457600080fd5b505afa1580156125e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061260c91906133c5565b905060005b835181101561278957600061264185838151811061262b57fe5b60200260200101516001600160a01b0316612e53565b61265e5784828151811061265157fe5b60200260200101516126e2565b84828151811061266a57fe5b60200260200101516001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156126aa57600080fd5b505afa1580156126be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126e291906130ad565b905060006127108461220a8786815181106126f957fe5b60200260200101518d612d8990919063ffffffff16565b90506127266001600160a01b038c168383611dd5565b816001600160a01b03168d6001600160a01b0316336001600160a01b03167f589269304a5775087fef7422dd5076938901ab1fa82e920b6de707864f198e608e854260405161277793929190613500565b60405180910390a45050600101612611565b506127958a8989612e8f565b896001600160a01b0316336001600160a01b03167f1bf0129823b56213a46996bc874ce50b318995cae2bbdcd2000933d36012547d8a8a426040516127dc93929190613500565b60405180910390a35050505b8180156127f3575080155b15611d4557611d456001600160a01b0386168786611dd5565b8451156129b157600254604051639155dae760e01b81526001600160a01b0390911690639155dae79061284a9089906000908a908a906004016134a3565b600060405180830381600087803b15801561286457600080fd5b505af1158015612878573d6000803e3d6000fd5b5050600254604051639155dae760e01b81526001600160a01b039091169250639155dae791506128b39089906001908a9089906004016134a3565b600060405180830381600087803b1580156128cd57600080fd5b505af11580156128e1573d6000803e3d6000fd5b505060028054604051639155dae760e01b81526001600160a01b039091169350639155dae7925061291a918a918a9088906004016134a3565b600060405180830381600087803b15801561293457600080fd5b505af1158015612948573d6000803e3d6000fd5b5050600254604051639155dae760e01b81526001600160a01b039091169250639155dae791506129839089906003908a9087906004016134a3565b600060405180830381600087803b15801561299d57600080fd5b505af1158015611fd3573d6000803e3d6000fd5b505050505050565b6001600160a01b0381166000908152600360205260408120906129dc8282613017565b6129ea600183016000613017565b6129f8600283016000613017565b612a06600383016000613017565b61074e600483016000613017565b612a35846323b872dd60e01b858585604051602401611df49392919061347f565b50505050565b60008060005b8451811015612a8b57836001600160a01b0316858281518110612a6057fe5b60200260200101516001600160a01b03161415612a835760019250809150612a8b565b600101612a41565b509250929050565b6001600160a01b038316600090815260036020526040902084612afc57612adc82826001018581548110612ac357fe5b9060005260206000200154612e0290919063ffffffff16565b816001018481548110612aeb57fe5b6000918252602090912001556106f4565b8460011415612b2757612b1882826002018581548110612ac357fe5b816002018481548110612aeb57fe5b8460021415612b5257612b4382826003018581548110612ac357fe5b816003018481548110612aeb57fe5b84600314156106f457612b6e82826004018581548110612ac357fe5b816004018481548110612b7d57fe5b6000918252602090912001555050505050565b6001600160a01b039182166000908152600360208181526040832080546001808201835582865283862090910180546001600160a01b03191696909716959095179095558385018054808601825590845281842001839055600285018054808601825590845281842001839055908401805480850182559083528183200182905560049093018054928301815581529182200155565b6001600160a01b038216600090815260036020526040902080546000190184612c595782826001018281548110612aeb57fe5b8460011415612c725782826002018281548110612aeb57fe5b8460021415612c8b5782826003018281548110612aeb57fe5b84600314156106f45782826004018281548110612b7d57fe5b612cb6826001600160a01b0316612e53565b612cd25760405162461bcd60e51b8152600401610486906138f3565b60006060836001600160a01b031683604051612cee919061344f565b6000604051808303816000865af19150503d8060008114612d2b576040519150601f19603f3d011682016040523d82523d6000602084013e612d30565b606091505b509150915081612d525760405162461bcd60e51b815260040161048690613711565b805115612a355780806020019051810190612d6d9190613372565b612a355760405162461bcd60e51b8152600401610486906138a9565b600082612d98575060006123e7565b82820282848281612da557fe5b041461242f5760405162461bcd60e51b8152600401610486906137cf565b600061242f83836040518060400160405280601a815260200179536166654d6174683a206469766973696f6e206279207a65726f60301b815250612f97565b60008282018381101561242f5760405162461bcd60e51b81526004016104869061367b565b60008184841115612e4b5760405162461bcd60e51b8152600401610486919061359b565b505050900390565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590612e8757508115155b949350505050565b6001600160a01b038316600090815260056020908152604080832080548251818502810185019093528083529093928392612f0d929091869190830182828015612f0257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612ee4575b505050505086612a3b565b915091508115612f4a57612f2a84846001018381548110612ac357fe5b836001018281548110612f3957fe5b6000918252602090912001556129b1565b8254600181810185556000858152602080822090930180546001600160a01b038a166001600160a01b03199091161790558186018054928301815581529190912001849055505050505050565b60008183612fb85760405162461bcd60e51b8152600401610486919061359b565b506000838581612fc457fe5b0495945050505050565b6040518060a0016040528060608152602001606081526020016060815260200160608152602001606081525090565b604051806040016040528060608152602001606081525090565b5080546000825590600052602060002090810190610a1091905b808211156130455760008155600101613031565b5090565b60008083601f84011261305a578182fd5b5081356001600160401b03811115613070578182fd5b602083019150836020808302850101111561308a57600080fd5b9250929050565b6000602082840312156130a2578081fd5b813561242f81613a36565b6000602082840312156130be578081fd5b815161242f81613a36565b6000806000606084860312156130dd578182fd5b83356130e881613a36565b925060208401356130f881613a36565b929592945050506040919091013590565b6000806040838503121561311b578182fd5b823561312681613a36565b9150602083013561313681613a4b565b809150509250929050565b60008060008060408587031215613156578081fd5b84356001600160401b038082111561316c578283fd5b61317888838901613049565b90965094506020870135915080821115613190578283fd5b5061319d87828801613049565b95989497509550505050565b60008060008060008060006080888a0312156131c3578283fd5b87356001600160401b03808211156131d9578485fd5b6131e58b838c01613049565b909950975060208a01359150808211156131fd578485fd5b6132098b838c01613049565b909750955060408a0135915080821115613221578485fd5b5061322e8a828b01613049565b909450925050606088013561324281613a4b565b8091505092959891949750929550565b60006020808385031215613264578182fd5b82516001600160401b03811115613279578283fd5b8301601f81018513613289578283fd5b805161329c613297826139eb565b6139c5565b81815283810190838501858402850186018910156132b8578687fd5b8694505b838510156132e35780516132cf81613a36565b8352600194909401939185019185016132bc565b50979650505050505050565b60006020808385031215613301578182fd5b82516001600160401b03811115613316578283fd5b8301601f81018513613326578283fd5b8051613334613297826139eb565b8181528381019083850185840285018601891015613350578687fd5b8694505b838510156132e3578051835260019490940193918501918501613354565b600060208284031215613383578081fd5b815161242f81613a4b565b60006020828403121561339f578081fd5b81516002811061242f578182fd5b6000602082840312156133be578081fd5b5035919050565b6000602082840312156133d6578081fd5b5051919050565b6000815180845260208085019450808401835b838110156134155781516001600160a01b0316875295820195908201906001016133f0565b509495945050505050565b6000815180845260208085019450808401835b8381101561341557815187529582019590820190600101613433565b60008251613461818460208701613a0a565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060018060a01b0386168252846020830152608060408301526134ca60808301856133dd565b82810360608401526134dc8185613420565b979650505050505050565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b60006040825261353460408301856133dd565b82810360208401526135468185613420565b95945050505050565b901515815260200190565b91151582521515602082015260400190565b60006020825282602083015282846040840137818301604090810191909152601f909201601f19160101919050565b60006020825282518060208401526135ba816040850160208701613a0a565b601f01601f19169190910160400192915050565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526016908201527513585e1a5b5d5b481b1a5b5a5d08195e18d95959195960521b604082015260600190565b6020808252601d908201527f4552525f494e56414c49445f555345525641554c545f41444452455353000000604082015260600190565b6020808252601b908201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604082015260600190565b6020808252601390820152724552525f494c4c4547414c5f42414c414e434560681b604082015260600190565b6020808252601a908201527908aa4a4bea89e968a9cbe988a9c8ea890be9c9ea8be9a82a886960331b604082015260600190565b6020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b6020808252601290820152714552525f4e4f545f4d414e4745525f46454560701b604082015260600190565b6020808252601890820152774552525f494e56414c49445f504f4f4c5f4144445245535360401b604082015260600190565b60208082526011908201527011549497d393d517d3d4115397d413d3d3607a1b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601b908201527a4552525f4d414e414745525f434f554c445f4e4f545f434c41494d60281b604082015260600190565b60208082526015908201527411549497d413d3d317d254d7d0931050d2d31254d5605a1b604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b6020808252601f908201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604082015260600190565b600060208252825160a0602084015261394660c08401826133dd565b90506020840151601f19808584030160408601526139648383613420565b925060408601519150808584030160608601526139818383613420565b9250606086015191508085840301608086015261399e8383613420565b925060808601519150808584030160a0860152506135468282613420565b90815260200190565b6040518181016001600160401b03811182821017156139e357600080fd5b604052919050565b60006001600160401b03821115613a00578081fd5b5060209081020190565b60005b83811015613a25578181015183820152602001613a0d565b83811115612a355750506000910152565b6001600160a01b0381168114610a1057600080fd5b8015158114610a1057600080fdfea26469706673582212206193072e63f9c08c49df9a989e19d8bcd97e0d711d92ac8cad89a76f52059a9064736f6c634300060c0033",
  "deployedBytecode": "",
  "libraries": {},
  "devdoc": {
    "author": "Desyn Labs",
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Vault managerFee",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 18199,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 12653,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "crpFactory",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ICRPFactory)12637"
      },
      {
        "astId": 12655,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "userVault",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 12713,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "poolsTokens",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(PoolTokens)12697_storage)"
      },
      {
        "astId": 12717,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "poolsStatus",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(PoolStatus)12702_storage)"
      },
      {
        "astId": 12721,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "manageHasClaimed",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(ClaimTokens)12709_storage)"
      },
      {
        "astId": 12724,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "TOTAL_RATIO",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 12727,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "management_portion",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 12730,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "issuance_portion",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 12733,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "redemption_portion",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 12736,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "performance_portion",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ICRPFactory)12637": {
        "encoding": "inplace",
        "label": "contract ICRPFactory",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(ClaimTokens)12709_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Vault.ClaimTokens)",
        "numberOfBytes": "32",
        "value": "t_struct(ClaimTokens)12709_storage"
      },
      "t_mapping(t_address,t_struct(PoolStatus)12702_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Vault.PoolStatus)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolStatus)12702_storage"
      },
      "t_mapping(t_address,t_struct(PoolTokens)12697_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Vault.PoolTokens)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolTokens)12697_storage"
      },
      "t_struct(ClaimTokens)12709_storage": {
        "encoding": "inplace",
        "label": "struct Vault.ClaimTokens",
        "members": [
          {
            "astId": 12705,
            "contract": "contracts/deploy/Vault.sol:Vault",
            "label": "tokens",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 12708,
            "contract": "contracts/deploy/Vault.sol:Vault",
            "label": "amounts",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PoolStatus)12702_storage": {
        "encoding": "inplace",
        "label": "struct Vault.PoolStatus",
        "members": [
          {
            "astId": 12699,
            "contract": "contracts/deploy/Vault.sol:Vault",
            "label": "couldManagerClaim",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 12701,
            "contract": "contracts/deploy/Vault.sol:Vault",
            "label": "isBlackList",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(PoolTokens)12697_storage": {
        "encoding": "inplace",
        "label": "struct Vault.PoolTokens",
        "members": [
          {
            "astId": 12684,
            "contract": "contracts/deploy/Vault.sol:Vault",
            "label": "tokenList",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 12687,
            "contract": "contracts/deploy/Vault.sol:Vault",
            "label": "managerAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 12690,
            "contract": "contracts/deploy/Vault.sol:Vault",
            "label": "issueAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 12693,
            "contract": "contracts/deploy/Vault.sol:Vault",
            "label": "redeemAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 12696,
            "contract": "contracts/deploy/Vault.sol:Vault",
            "label": "perfermanceAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}