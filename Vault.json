{
  "address": "0x3FECaD7411320588a48D49eCaaba1B03D681189D",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AddAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "IssueRatio",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "LOGUserVaultAdr",
      "type": "event"
    },
    {
      "anonymous": true,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes4",
          "name": "sig",
          "type": "bytes4"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "LOG_CALL",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ManagerRatio",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RedeemRatio",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RemoveAdmin",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "RATIO_ISSUE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RATIO_MANAGER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RATIO_PERFERMANCE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RATIO_REDEEM",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RATIO_TOTAL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "adminClaimToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "adminList",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allOwnerPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "poolTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokensAmount",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokensAmountIR",
          "type": "uint256[]"
        },
        {
          "internalType": "bool",
          "name": "isPerfermance",
          "type": "bool"
        }
      ],
      "name": "depositIssueRedeemPToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "poolTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokensAmount",
          "type": "uint256[]"
        }
      ],
      "name": "depositManagerToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBNB",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getController",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getManagerClaimBool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "bools",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwnerPercentage",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwners",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_ownerPercentage",
          "type": "uint256[]"
        }
      ],
      "name": "initHandle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "isClosePool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "managerClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "managerClaimList",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "decimals",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct Vault.ClaimTokenInfo[]",
          "name": "claimTokenInfos",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "managerClaimRecordList",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "time",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Vault.ClaimTokenInfo[]",
              "name": "tokens",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Vault.ClaimRecordInfo[]",
          "name": "claimRecordInfos",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ownerPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "owners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "poolIssueTokenAmount",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenAmount",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "poolIssueTokenList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "poolManagerTokenAmount",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenAmount",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "poolManagerTokenList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "poolPerfermanceTokenAmount",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenAmount",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "poolPerfermanceTokenList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "poolRedeemTokenAmount",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenAmount",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "poolRedeemTokenList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pool_manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolsStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "couldManagerClaim",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isBlackList",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "record_List",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "record_number",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "removeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_ownerPercentage",
          "type": "uint256"
        }
      ],
      "name": "setAddAdminList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "bools",
          "type": "bool"
        }
      ],
      "name": "setBlackList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "setController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adr",
          "type": "address"
        }
      ],
      "name": "setCrpFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setIssueRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setManagerRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setPerfermanceRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setRedeemRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adr",
          "type": "address"
        }
      ],
      "name": "setUserVaultAdr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "userVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x72430a8dbbbe5cb98e3c1ddb44f100784dcd607aac7aff0c5850455a1066f892",
  "receipt": {
    "to": null,
    "from": "0x595b85b4A418e3B8df897D02F5BD49167D00862F",
    "contractAddress": "0x3FECaD7411320588a48D49eCaaba1B03D681189D",
    "transactionIndex": 0,
    "gasUsed": "4901069",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x4bc833490a2b322f7b713b534b92233859e55ad275860523a16f3f69e165cdff",
    "transactionHash": "0x72430a8dbbbe5cb98e3c1ddb44f100784dcd607aac7aff0c5850455a1066f892",
    "logs": [],
    "blockNumber": 8126936,
    "cumulativeGasUsed": "4901069",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0e997af3b88dbcb9772d4d5054dabb5f",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"IssueRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"LOGUserVaultAdr\",\"type\":\"event\"},{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"LOG_CALL\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ManagerRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RedeemRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RemoveAdmin\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RATIO_ISSUE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RATIO_MANAGER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RATIO_PERFERMANCE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RATIO_REDEEM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RATIO_TOTAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"adminClaimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"adminList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allOwnerPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"poolTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokensAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokensAmountIR\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"isPerfermance\",\"type\":\"bool\"}],\"name\":\"depositIssueRedeemPToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"poolTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokensAmount\",\"type\":\"uint256[]\"}],\"name\":\"depositManagerToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBNB\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getManagerClaimBool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"bools\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwnerPercentage\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ownerPercentage\",\"type\":\"uint256[]\"}],\"name\":\"initHandle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isClosePool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"managerClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"managerClaimList\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Vault.ClaimTokenInfo[]\",\"name\":\"claimTokenInfos\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"managerClaimRecordList\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Vault.ClaimTokenInfo[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Vault.ClaimRecordInfo[]\",\"name\":\"claimRecordInfos\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"poolIssueTokenAmount\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenAmount\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"poolIssueTokenList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"poolManagerTokenAmount\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenAmount\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"poolManagerTokenList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"poolPerfermanceTokenAmount\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenAmount\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"poolPerfermanceTokenList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"poolRedeemTokenAmount\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenAmount\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"poolRedeemTokenList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pool_manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolsStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"couldManagerClaim\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isBlackList\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"record_List\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"record_number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ownerPercentage\",\"type\":\"uint256\"}],\"name\":\"setAddAdminList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"bools\",\"type\":\"bool\"}],\"name\":\"setBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setCrpFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setIssueRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setManagerRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setPerfermanceRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setRedeemRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setUserVaultAdr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Desyn Labs\",\"kind\":\"dev\",\"methods\":{\"getController()\":{\"details\":\"external for gas optimization\",\"returns\":{\"_0\":\"address - of the owner (AKA controller)\"}},\"removeOwner(address)\":{\"details\":\"Allows to remove an owner. Transaction has to be sent by wallet.\",\"params\":{\"owner\":\"Address of owner.\"}},\"setAddAdminList(address,uint256)\":{\"details\":\"external for gas optimization\",\"params\":{\"newOwner\":\"- address of new owner\"}},\"setController(address)\":{\"details\":\"external for gas optimization\",\"params\":{\"newOwner\":\"- address of new owner\"}}},\"title\":\"Vault managerFee\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getController()\":{\"notice\":\"Returns the address of the current owner\"},\"setAddAdminList(address,uint256)\":{\"notice\":\"Transfers ownership of the contract to a new account (`newOwner`).         Can only be called by the current owner\"},\"setController(address)\":{\"notice\":\"Transfers ownership of the contract to a new account (`newOwner`).         Can only be called by the current owner\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/deploy/Vault.sol\":\"Vault\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"contracts/base/Logs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\ncontract Logs {\\n    event LOG_CALL(bytes4 indexed sig, address indexed caller, bytes data) anonymous;\\n\\n    modifier _logs_() {\\n        emit LOG_CALL(msg.sig, msg.sender, msg.data);\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x942b3c172dd3f0910c3589d703b4f224c94c76a13cc84d7add6318206cff512e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/deploy/Vault.sol\":{\"content\":\"pragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../utils/DesynOwnable.sol\\\";\\nimport \\\"../interfaces/IDSProxy.sol\\\";\\nimport \\\"../libraries/SafeMath.sol\\\";\\nimport \\\"../libraries/Address.sol\\\";\\nimport \\\"../libraries/SafeERC20.sol\\\";\\nimport \\\"../base/Logs.sol\\\";\\n\\ninterface ICRPPool {\\n    function getController() external view returns (address);\\n\\n    enum Etypes {\\n        OPENED,\\n        CLOSED\\n    }\\n\\n    function etype() external view returns (Etypes);\\n}\\n\\ninterface IDesynOwnable {\\n    function adminList(address adr) external view returns (bool);\\n\\n    function getController() external view returns (address);\\n\\n    function getOwners() external view returns (address[] memory);\\n\\n    function getOwnerPercentage() external view returns (uint[] memory);\\n\\n    function allOwnerPercentage() external view returns (uint);\\n}\\n\\ninterface IUserVault {\\n    function depositToken(\\n        address pool,\\n        uint types,\\n        address[] calldata poolTokens,\\n        uint[] calldata tokensAmount\\n    ) external;\\n}\\n\\ninterface ICRPFactory {\\n    function isCrp(address addr) external view returns (bool);\\n}\\n\\n/**\\n * @author Desyn Labs\\n * @title Vault managerFee\\n */\\ncontract Vault is DesynOwnable, Logs {\\n    using SafeMath for uint;\\n    using Address for address;\\n    using SafeERC20 for IERC20;\\n\\n    ICRPFactory crpFactory;\\n    address public userVault;\\n\\n    event ManagerRatio(address indexed caller, uint indexed amount);\\n    event LOGUserVaultAdr(address indexed manager, address indexed caller);\\n    event IssueRatio(address indexed caller, uint indexed amount);\\n    event RedeemRatio(address indexed caller, uint indexed amount);\\n\\n    struct ClaimTokenInfo {\\n        address token;\\n        uint decimals;\\n        uint amount;\\n    }\\n\\n    struct ClaimRecordInfo {\\n        uint time;\\n        ClaimTokenInfo[] tokens;\\n    }\\n\\n    // pool of tokens\\n    struct PoolTokens {\\n        address[] tokenList;\\n        address[] issueTokens;\\n        address[] redeemTokens;\\n        address[] perfermanceTokens;\\n        uint[] managerAmount;\\n        uint[] issueAmount;\\n        uint[] redeemAmount;\\n        uint[] perfermanceAmount;\\n    }\\n\\n    struct PoolStatus {\\n        bool couldManagerClaim;\\n        bool isBlackList;\\n    }\\n\\n    // pool tokens\\n    mapping(address => PoolTokens) poolsTokens;\\n    mapping(address => PoolStatus) public poolsStatus;\\n\\n    //history record\\n    mapping(address => uint) public record_number;\\n    mapping(address => mapping(uint => ClaimRecordInfo)) public record_List;\\n\\n    //pool=>manager\\n    mapping(address => address) public pool_manager;\\n\\n    // default ratio config\\n    uint public RATIO_TOTAL = 1000;\\n    uint public RATIO_MANAGER = 800;\\n    uint public RATIO_ISSUE = 800;\\n    uint public RATIO_REDEEM = 800;\\n    uint public RATIO_PERFERMANCE = 800;\\n\\n    receive() external payable {}\\n\\n    // \\u5b58\\u5165token\\n    function depositManagerToken(address[] calldata poolTokens, uint[] calldata tokensAmount) external {\\n        address pool = msg.sender;\\n        require(crpFactory.isCrp(pool), \\\"ERR_INVALID_POOL_ADDRESS\\\");\\n        require(poolTokens.length == tokensAmount.length, \\\"ERR_TOKEN_LENGTH_NOT_MATCH\\\");\\n        if (pool_manager[pool] == address(0)) {\\n            pool_manager[pool] = ICRPPool(pool).getController();\\n        }\\n\\n        PoolTokens storage tokens = poolsTokens[pool];\\n\\n        (address[] memory new_pool_tokenList, uint[] memory new_pool_tokenAmount) = communaldepositToken(\\n            poolTokens,\\n            tokensAmount,\\n            pool,\\n            tokens.tokenList,\\n            tokens.managerAmount\\n        );\\n        tokens.tokenList = new_pool_tokenList;\\n        tokens.managerAmount = new_pool_tokenAmount;\\n        poolsStatus[pool].couldManagerClaim = true;\\n        if (this.isClosePool(pool)) {\\n            this.managerClaim(pool);\\n        }\\n    }\\n\\n    // \\u5b58\\u5165token\\n    function depositIssueRedeemPToken(\\n        address[] calldata poolTokens,\\n        uint[] calldata tokensAmount,\\n        uint[] calldata tokensAmountIR,\\n        bool isPerfermance\\n    ) external {\\n        address pool = msg.sender;\\n        require(crpFactory.isCrp(pool), \\\"ERR_INVALID_POOL_ADDRESS\\\");\\n        require(poolTokens.length == tokensAmount.length, \\\"ERR_TOKEN_LENGTH_NOT_MATCH\\\");\\n        if (pool_manager[pool] == address(0)) {\\n            pool_manager[pool] = ICRPPool(pool).getController();\\n        }\\n        PoolTokens storage tokens = poolsTokens[pool];\\n\\n        if (!isPerfermance) {\\n            (address[] memory new_pool_tokenList, uint[] memory new_pool_tokenAmount) = communaldepositToken(\\n                poolTokens,\\n                tokensAmount,\\n                pool,\\n                tokens.issueTokens,\\n                tokens.issueAmount\\n            );\\n            tokens.issueTokens = new_pool_tokenList;\\n            tokens.issueAmount = new_pool_tokenAmount;\\n        } \\n        if (isPerfermance) {\\n            (\\n                address[] memory new_pool_tokenList,\\n                uint[] memory new_pool_tokenAmount,\\n                address[] memory new_pool_tokenListP,\\n                uint[] memory new_pool_tokenAmountP\\n            ) = communaldepositTokenNew(poolTokens, tokensAmount, tokensAmountIR, pool);\\n            tokens.redeemTokens = new_pool_tokenList;\\n            tokens.redeemAmount = new_pool_tokenAmount;\\n            tokens.perfermanceTokens = new_pool_tokenListP;\\n            tokens.perfermanceAmount = new_pool_tokenAmountP;\\n        }\\n\\n        poolsStatus[pool].couldManagerClaim = true;\\n        if (this.isClosePool(pool)) {\\n            this.managerClaim(pool);\\n        }\\n    }\\n\\n    function communaldepositToken(\\n        address[] calldata poolTokens,\\n        uint[] calldata tokensAmount,\\n        address poolAdr,\\n        address[] memory _pool_tokenList,\\n        uint[] memory _pool_tokenAmount\\n    ) internal returns (address[] memory new_pool_tokenList, uint[] memory new_pool_tokenAmount) {\\n        uint len = poolTokens.length;\\n        //old\\n        //new\\n        new_pool_tokenList = new address[](len);\\n        new_pool_tokenAmount = new uint[](len);\\n        if ((_pool_tokenList.length == _pool_tokenAmount.length && _pool_tokenList.length == 0) || !poolsStatus[poolAdr].couldManagerClaim) {\\n            for (uint i = 0; i < len; i++) {\\n                address t = poolTokens[i];\\n                uint tokenBalance = tokensAmount[i];\\n                IERC20(t).safeTransferFrom(msg.sender, address(this), tokenBalance);\\n                new_pool_tokenList[i] = poolTokens[i];\\n                new_pool_tokenAmount[i] = tokensAmount[i];\\n            }\\n        } else {\\n            for (uint k = 0; k < len; k++) {\\n                if (_pool_tokenList[k] == poolTokens[k]) {\\n                    address t = poolTokens[k];\\n                    uint tokenBalance = tokensAmount[k];\\n                    IERC20(t).safeTransferFrom(msg.sender, address(this), tokenBalance);\\n                    new_pool_tokenList[k] = poolTokens[k];\\n                    new_pool_tokenAmount[k] = _pool_tokenAmount[k].add(tokenBalance);\\n                }\\n            }\\n        }\\n        return (new_pool_tokenList, new_pool_tokenAmount);\\n    }\\n\\n    function communaldepositTokenNew(\\n        address[] calldata poolTokens,\\n        uint[] calldata tokensAmount,\\n        uint[] calldata tokensAmountIR,\\n        address poolAdr\\n    )\\n        internal\\n        returns (\\n            address[] memory new_pool_tokenList,\\n            uint[] memory new_pool_tokenAmount,\\n            address[] memory new_pool_tokenListP,\\n            uint[] memory new_pool_tokenAmountP\\n        )\\n    {\\n        uint len = poolTokens.length;\\n        //old\\n        //new\\n        new_pool_tokenList = new address[](len);\\n        new_pool_tokenAmount = new uint[](len);\\n        new_pool_tokenListP = new address[](len);\\n        new_pool_tokenAmountP = new uint[](len);\\n\\n        PoolTokens storage tokens = poolsTokens[poolAdr];\\n\\n        //issue_redeem\\n        if ((tokens.redeemTokens.length == tokens.redeemAmount.length && tokens.redeemTokens.length == 0) || !poolsStatus[poolAdr].couldManagerClaim) {\\n            for (uint i = 0; i < len; i++) {\\n                address t = poolTokens[i];\\n                uint tokenBalance = tokensAmount[i];\\n                IERC20(t).safeTransferFrom(msg.sender, address(this), tokenBalance);\\n                new_pool_tokenList[i] = t;\\n                new_pool_tokenAmount[i] = tokensAmountIR[i];\\n            }\\n        } else {\\n            for (uint k = 0; k < len; k++) {\\n                if (tokens.redeemTokens[k] == poolTokens[k]) {\\n                    address t = poolTokens[k];\\n                    uint tokenBalance = tokensAmount[k];\\n                    IERC20(t).safeTransferFrom(msg.sender, address(this), tokenBalance);\\n                    new_pool_tokenList[k] = t;\\n                    new_pool_tokenAmount[k] = tokens.perfermanceAmount[k].add(tokensAmountIR[k]);\\n                }\\n            }\\n        }\\n        //perfermance\\n        if ((tokens.perfermanceTokens.length == tokens.perfermanceAmount.length && tokens.perfermanceTokens.length == 0) || !poolsStatus[poolAdr].couldManagerClaim) {\\n            for (uint i = 0; i < len; i++) {\\n                new_pool_tokenListP[i] = poolTokens[i];\\n                new_pool_tokenAmountP[i] = tokensAmount[i].sub(tokensAmountIR[i]);\\n            }\\n        } else {\\n            for (uint k = 0; k < len; k++) {\\n                new_pool_tokenListP[k] = poolTokens[k];\\n                new_pool_tokenAmountP[k] = tokens.perfermanceAmount[k].add(tokensAmount[k].sub(tokensAmountIR[k]));\\n            }\\n        }\\n\\n        return (new_pool_tokenList, new_pool_tokenAmount, new_pool_tokenListP, new_pool_tokenAmountP);\\n    }\\n\\n    function poolManagerTokenList(address pool) external view returns (address[] memory tokens) {\\n        return poolsTokens[pool].tokenList;\\n    }\\n\\n    function poolManagerTokenAmount(address pool) external view returns (uint[] memory tokenAmount) {\\n        return poolsTokens[pool].managerAmount;\\n    }\\n\\n    function poolIssueTokenList(address pool) external view returns (address[] memory tokens) {\\n        return poolsTokens[pool].issueTokens;\\n    }\\n\\n    function poolRedeemTokenList(address pool) external view returns (address[] memory tokens) {\\n        return poolsTokens[pool].redeemTokens;\\n    }\\n\\n    function poolIssueTokenAmount(address pool) external view returns (uint[] memory tokenAmount) {\\n        return poolsTokens[pool].issueAmount;\\n    }\\n\\n    function poolRedeemTokenAmount(address pool) external view returns (uint[] memory tokenAmount) {\\n        return poolsTokens[pool].redeemAmount;\\n    }\\n\\n    function poolPerfermanceTokenList(address pool) external view returns (address[] memory tokens) {\\n        return poolsTokens[pool].perfermanceTokens;\\n    }\\n\\n    function poolPerfermanceTokenAmount(address pool) external view returns (uint[] memory tokenAmount) {\\n        return poolsTokens[pool].perfermanceAmount;\\n    }\\n\\n    function getManagerClaimBool(address pool) external view returns (bool bools) {\\n        bools = poolsStatus[pool].couldManagerClaim;\\n    }\\n\\n    function setBlackList(address pool, bool bools) external onlyOwner _logs_ {\\n        poolsStatus[pool].isBlackList = bools;\\n    }\\n\\n    function setUserVaultAdr(address adr) external onlyOwner {\\n        require(adr != address(0), \\\"ERR_INVALID_USERVAULT_ADDRESS\\\");\\n        userVault = adr;\\n        emit LOGUserVaultAdr(adr, msg.sender);\\n    }\\n\\n    function setCrpFactory(address adr) external onlyOwner _logs_ {\\n        crpFactory = ICRPFactory(adr);\\n    }\\n\\n    function adminClaimToken(\\n        address token,\\n        address user,\\n        uint amount\\n    ) external onlyOwner {\\n        IERC20(token).safeTransfer(user, amount);\\n    }\\n\\n    function getBNB() external payable onlyOwner {\\n        msg.sender.transfer(address(this).balance);\\n    }\\n\\n    function setManagerRatio(uint amount) external onlyOwner {\\n        require(amount <= RATIO_TOTAL, \\\"Maximum limit exceeded\\\");\\n        RATIO_MANAGER = amount;\\n        emit ManagerRatio(msg.sender, amount);\\n    }\\n\\n    function setIssueRatio(uint amount) external onlyOwner {\\n        require(amount <= RATIO_TOTAL, \\\"Maximum limit exceeded\\\");\\n        RATIO_ISSUE = amount;\\n        emit IssueRatio(msg.sender, amount);\\n    }\\n\\n    function setRedeemRatio(uint amount) external onlyOwner {\\n        require(amount <= RATIO_TOTAL, \\\"Maximum limit exceeded\\\");\\n        RATIO_REDEEM = amount;\\n        emit RedeemRatio(msg.sender, amount);\\n    }\\n\\n    function setPerfermanceRatio(uint amount) external onlyOwner _logs_{\\n        RATIO_PERFERMANCE = amount;\\n    }\\n\\n    function managerClaim(address pool) external {\\n        require(crpFactory.isCrp(pool), \\\"ERR_INVALID_POOL_ADDRESS\\\");\\n        address manager_address = ICRPPool(pool).getController();\\n\\n        PoolTokens memory tokens = poolsTokens[pool];\\n        PoolStatus storage status = poolsStatus[pool];\\n\\n        address[] memory _pool_manager_tokenList = tokens.tokenList.length != 0\\n            ? tokens.tokenList\\n            : (tokens.issueTokens.length != 0 ? tokens.issueTokens : (tokens.redeemTokens.length != 0 ? tokens.redeemTokens : tokens.perfermanceTokens));\\n        uint len = _pool_manager_tokenList.length;\\n        require(!status.isBlackList, \\\"ERR_POOL_IS_BLACKLIST\\\");\\n        if (pool_manager[pool] != manager_address) {\\n            pool_manager[pool] = manager_address;\\n        }\\n        require(len > 0, \\\"ERR_NOT_MANGER_FEE\\\");\\n        require(status.couldManagerClaim, \\\"ERR_MANAGER_COULD_NOT_CLAIM\\\");\\n        status.couldManagerClaim = false;\\n        //record\\n        ClaimRecordInfo storage recordInfo = record_List[pool][record_number[pool].add(1)];\\n        delete recordInfo.time;\\n        delete recordInfo.tokens;\\n        recordInfo.time = block.timestamp;\\n        uint[] memory managerTokenAmount = new uint[](len);\\n        uint[] memory issueTokenAmount = new uint[](len);\\n        uint[] memory redeemTokenAmount = new uint[](len);\\n        uint[] memory perfermanceTokenAmount = new uint[](len);\\n        for (uint i = 0; i < len; i++) {\\n            uint balance;\\n            ClaimTokenInfo memory tokenInfo;\\n            (balance, managerTokenAmount[i], issueTokenAmount[i], redeemTokenAmount[i], perfermanceTokenAmount[i]) = computeBalance(i, pool);\\n            address t = _pool_manager_tokenList[i];\\n            tokenInfo.token = t;\\n            tokenInfo.amount = balance;\\n            tokenInfo.decimals = IERC20(t).decimals();\\n            recordInfo.tokens.push(tokenInfo);\\n            transferHandle(pool, manager_address, t, balance);\\n        }\\n        if (this.isClosePool(pool)) {\\n            recordUserVault(pool, _pool_manager_tokenList, managerTokenAmount, issueTokenAmount, redeemTokenAmount, perfermanceTokenAmount);\\n        }\\n\\n        record_number[pool] = record_number[pool].add(1);\\n        record_List[pool][record_number[pool]] = recordInfo;\\n        clearPool(pool);\\n    }\\n\\n    function recordUserVault(\\n        address pool,\\n        address[] memory tokenList,\\n        uint[] memory managerTokenAmount,\\n        uint[] memory issueTokenAmount,\\n        uint[] memory redeemTokenAmount,\\n        uint[] memory perfermanceTokenAmount\\n    ) internal {\\n        PoolTokens memory tokens = poolsTokens[pool];\\n\\n        if (tokens.managerAmount.length != 0) {\\n            IUserVault(userVault).depositToken(pool, 0, tokenList, managerTokenAmount);\\n        }\\n        if (tokens.issueAmount.length != 0) {\\n            IUserVault(userVault).depositToken(pool, 1, tokenList, issueTokenAmount);\\n        }\\n        if (tokens.redeemAmount.length != 0) {\\n            IUserVault(userVault).depositToken(pool, 2, tokenList, redeemTokenAmount);\\n        }\\n        if (tokens.perfermanceAmount.length != 0) {\\n            IUserVault(userVault).depositToken(pool, 3, tokenList, perfermanceTokenAmount);\\n        }\\n    }\\n\\n    function transferHandle(\\n        address pool,\\n        address manager_address,\\n        address t,\\n        uint balance\\n    ) internal {\\n        bool isCloseETF = this.isClosePool(pool);\\n        bool isOpenETF = !isCloseETF;\\n        bool isContractManager = manager_address.isContract();\\n\\n        if(isCloseETF){\\n            IERC20(t).safeTransfer(userVault, balance);\\n        }\\n\\n        if(isOpenETF && isContractManager){\\n            address[] memory managerAddressList = DesynOwnable(pool).getOwners();\\n            uint[] memory ownerPercentage = DesynOwnable(pool).getOwnerPercentage();\\n            uint allOwnerPercentage = DesynOwnable(pool).allOwnerPercentage();\\n\\n            for (uint k = 0; k < managerAddressList.length; k++) {\\n                address reciver = address(managerAddressList[k]).isContract()? IDSProxy(managerAddressList[k]).owner(): managerAddressList[k];\\n                IERC20(t).safeTransfer(reciver, balance.mul(ownerPercentage[k]).div(allOwnerPercentage));\\n            }\\n        }\\n\\n        if(isOpenETF && !isContractManager){\\n            IERC20(t).safeTransfer(manager_address, balance);\\n        }\\n    }\\n\\n    function computeBalance(uint i, address pool)\\n        internal\\n        view\\n        returns (\\n            uint balance,\\n            uint balanceOne,\\n            uint balanceTwo,\\n            uint balanceThree,\\n            uint balanceFour\\n        )\\n    {\\n        PoolTokens memory tokens = poolsTokens[pool];\\n\\n        //manager fee\\n        if (tokens.managerAmount.length != 0) {\\n            balanceOne = tokens.managerAmount[i].mul(RATIO_MANAGER).div(RATIO_TOTAL);\\n            balance = balance.add(balanceOne);\\n        }\\n        if (tokens.issueAmount.length != 0) {\\n            balanceTwo = tokens.issueAmount[i].mul(RATIO_ISSUE).div(RATIO_TOTAL);\\n            balance = balance.add(balanceTwo);\\n        }\\n        if (tokens.redeemAmount.length != 0) {\\n            balanceThree = tokens.redeemAmount[i].mul(RATIO_REDEEM).div(RATIO_TOTAL);\\n            balance = balance.add(balanceThree);\\n        }\\n        if (tokens.perfermanceAmount.length != 0) {\\n            balanceFour = tokens.perfermanceAmount[i].mul(RATIO_PERFERMANCE).div(RATIO_TOTAL);\\n            balance = balance.add(balanceFour);\\n        }\\n    }\\n\\n    function isClosePool(address pool) external view returns (bool) {\\n        return ICRPPool(pool).etype() == ICRPPool.Etypes.CLOSED;\\n    }\\n\\n    function clearPool(address pool) internal {\\n        delete poolsTokens[pool];\\n    }\\n\\n    function managerClaimRecordList(address pool) external view returns (ClaimRecordInfo[] memory claimRecordInfos) {\\n        uint num = record_number[pool];\\n        ClaimRecordInfo[] memory records = new ClaimRecordInfo[](num);\\n        for (uint i = 1; i < num + 1; i++) {\\n            ClaimRecordInfo memory record;\\n            record = record_List[pool][i];\\n            records[i.sub(1)] = record;\\n        }\\n        return records;\\n    }\\n\\n    function managerClaimList(address pool) external view returns (ClaimTokenInfo[] memory claimTokenInfos) {\\n        PoolTokens memory tokens = poolsTokens[pool];\\n        address[] memory _pool_manager_tokenList = tokens.tokenList.length != 0\\n            ? tokens.tokenList\\n            : (tokens.issueTokens.length != 0 ? tokens.issueTokens : (tokens.redeemTokens.length != 0 ? tokens.redeemTokens : tokens.perfermanceTokens));\\n        uint len = _pool_manager_tokenList.length;\\n\\n        ClaimTokenInfo[] memory infos = new ClaimTokenInfo[](len);\\n        for (uint i = 0; i < len; i++) {\\n            {\\n                ClaimTokenInfo memory tokenInfo;\\n                tokenInfo.token = _pool_manager_tokenList[i];\\n\\n                (uint balance,,,,) = computeBalance(i,pool);\\n                tokenInfo.amount = balance;\\n                tokenInfo.decimals = IERC20(_pool_manager_tokenList[i]).decimals();\\n                \\n                infos[i] = tokenInfo;\\n            }\\n        }\\n\\n        return infos;\\n    }\\n}\\n\",\"keccak256\":\"0xc5b5bff99fc7064eb13b303f425854b5a09b8614a4682b50ff27f618d7184780\"},\"contracts/interfaces/IDSProxy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\ninterface IDSProxy {\\n    function owner() external view returns(address);\\n}\",\"keccak256\":\"0xe330359819e40d60365ba92005c9b8b1eccdf18ae583352a0cff0a2a4cf7ff14\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Interface declarations\\n\\n/* solhint-disable func-order */\\n\\ninterface IERC20 {\\n    // Emitted when the allowance of a spender for an owner is set by a call to approve.\\n    // Value is the new allowance\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n\\n    // Emitted when value tokens are moved from one account (from) to another (to).\\n    // Note that value may be zero\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    // Returns the amount of tokens in existence\\n    function totalSupply() external view returns (uint);\\n\\n    // Returns the amount of tokens owned by account\\n    function balanceOf(address account) external view returns (uint);\\n\\n    // Returns the decimals of tokens\\n    function decimals() external view returns (uint8);\\n\\n    function symbol() external view returns (string memory);\\n\\n    // Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner\\n    // through transferFrom. This is zero by default\\n    // This value changes when approve or transferFrom are called\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    // Sets amount as the allowance of spender over the caller\\u2019s tokens\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits an Approval event.\\n    function approve(address spender, uint amount) external returns (bool);\\n\\n    // Moves amount tokens from the caller\\u2019s account to recipient\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits a Transfer event.\\n    function transfer(address recipient, uint amount) external returns (bool);\\n\\n    // Moves amount tokens from sender to recipient using the allowance mechanism\\n    // Amount is then deducted from the caller\\u2019s allowance\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits a Transfer event\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xfe22b6d6029b400b9cce7f9b39c546f99cd6922b2fd926e480e2b4d476ab26f8\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            codehash := extcodehash(account)\\n        }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint weiValue,\\n        string memory errorMessage\\n    ) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2f31de87a6037a6a1ab4cefb32f22352df92b082dde0c182801bf421bacc303c\",\"license\":\"agpl-3.0\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\nimport {SafeMath} from \\\"./SafeMath.sol\\\";\\nimport {Address} from \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint value\\n    ) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint value\\n    ) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint value\\n    ) internal {\\n        require((value == 0) || (token.allowance(address(this), spender) == 0), \\\"SafeERC20: approve from non-zero to non-zero allowance\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdb66e9e24513d153d62e792a46c723eeff7ad7c93215a56aa3a27f1143d95ae9\",\"license\":\"MIT\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint a, uint b) internal pure returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint a, uint b) internal pure returns (uint) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint a,\\n        uint b,\\n        string memory errorMessage\\n    ) internal pure returns (uint) {\\n        require(b <= a, errorMessage);\\n        uint c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint a, uint b) internal pure returns (uint) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint a, uint b) internal pure returns (uint) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint a,\\n        uint b,\\n        string memory errorMessage\\n    ) internal pure returns (uint) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint a, uint b) internal pure returns (uint) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint a,\\n        uint b,\\n        string memory errorMessage\\n    ) internal pure returns (uint) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x7ce3fd7d17047f684821e1a20b4f5989630f6755a377b12c087dfde359f710d6\",\"license\":\"agpl-3.0\"},\"contracts/utils/DesynOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract DesynOwnable {\\n    // State variables\\n\\n    address private _owner;\\n    mapping(address => bool) public adminList;\\n    address[] public owners;\\n    uint[] public ownerPercentage;\\n    uint public allOwnerPercentage;\\n    bool private initialized;\\n    // Event declarations\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    event AddAdmin(address indexed newAdmin, uint indexed amount);\\n    event RemoveAdmin(address indexed oldAdmin, uint indexed amount);\\n\\n    // Modifiers\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"ERR_NOT_CONTROLLER\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(adminList[msg.sender] || msg.sender == _owner, \\\"onlyAdmin\\\");\\n        _;\\n    }\\n\\n    // Function declarations\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() internal {\\n        _owner = msg.sender;\\n    }\\n\\n    function initHandle(address[] memory _owners, uint[] memory _ownerPercentage) external onlyOwner {\\n        require(_owners.length == _ownerPercentage.length, \\\"ownerP\\\");\\n        require(!initialized, \\\"initialized!\\\");\\n        for (uint i; i < _owners.length; i++) {\\n            address newOwner = _owners[i];\\n            require(!adminList[newOwner], \\\"Address is Owner\\\");\\n            allOwnerPercentage += _ownerPercentage[i];\\n            adminList[newOwner] = true;\\n        }\\n        owners = _owners;\\n        ownerPercentage = _ownerPercentage;\\n\\n        initialized = true;\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n     *         Can only be called by the current owner\\n     * @dev external for gas optimization\\n     * @param newOwner - address of new owner\\n     */\\n    function setController(address newOwner) external onlyOwner {\\n        require(newOwner != address(0), \\\"ERR_ZERO_ADDRESS\\\");\\n\\n        emit OwnershipTransferred(_owner, newOwner);\\n\\n        for (uint i;i < owners.length; i++) {\\n            if (owners[i] == _owner) {\\n                owners[i] = newOwner;\\n            }\\n        }\\n\\n        adminList[_owner] = false;\\n        adminList[newOwner] = true;\\n        _owner = newOwner;\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n     *         Can only be called by the current owner\\n     * @dev external for gas optimization\\n     * @param newOwner - address of new owner\\n     */\\n    function setAddAdminList(address newOwner, uint _ownerPercentage) external onlyOwner {\\n        require(!adminList[newOwner], \\\"Address is Owner\\\");\\n\\n        adminList[newOwner] = true;\\n        owners.push(newOwner);\\n        ownerPercentage.push(_ownerPercentage);\\n        allOwnerPercentage += _ownerPercentage;\\n        emit AddAdmin(newOwner, _ownerPercentage);\\n    }\\n\\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\\n    /// @param owner Address of owner.\\n    function removeOwner(address owner) external onlyOwner {\\n        require(adminList[owner], \\\"ERR_NOT_OWNER\\\");\\n        adminList[owner] = false;\\n        uint amount = 0;\\n        for (uint i = 0; i < owners.length; i++) {\\n            if (owners[i] == owner) {\\n                owners[i] = owners[owners.length - 1];\\n                amount = ownerPercentage[i];\\n                ownerPercentage[i] = ownerPercentage[ownerPercentage.length - 1];\\n                break;\\n            }\\n        }\\n        owners.pop();\\n        ownerPercentage.pop();\\n        allOwnerPercentage -= amount;\\n        emit RemoveAdmin(owner, amount);\\n    }\\n\\n    // @dev Returns list of owners.\\n    // @return List of owner addresses.\\n    function getOwners() external view returns (address[] memory) {\\n        return owners;\\n    }\\n\\n    // @dev Returns list of owners.\\n    // @return List of owner addresses.\\n    function getOwnerPercentage() external view returns (uint[] memory) {\\n        return ownerPercentage;\\n    }\\n\\n    /**\\n     * @notice Returns the address of the current owner\\n     * @dev external for gas optimization\\n     * @return address - of the owner (AKA controller)\\n     */\\n    function getController() external view returns (address) {\\n        return _owner;\\n    }\\n}\\n\",\"keccak256\":\"0xf205bb1dda18a4fca535dd18f8f10ab361b173f32810f789b3adfc3b02b941fa\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60806040526103e8600c55610320600d55610320600e55610320600f5561032060105534801561002e57600080fd5b50600080546001600160a01b03191633179055615545806100506000396000f3fe6080604052600436106102165760003560e01c80634d4ae12d1161011f5780634d4ae12d1461051257806368092bd91461053f57806371bb41a91461055f57806378a619de1461057f57806389a612e5146105875780638da901ba146105a757806392eefe9b146105c7578063992f6ba5146105e75780639daafec714610607578063a0e67e2b1461061c578063a5168ee214610631578063a5d2bf6314610651578063a97f9f3314610666578063c0fcb16614610686578063c1cad458146106a6578063c1e57622146106bb578063c3e4d04f146106db578063c5318d0f146106fb578063d29986c11461071b578063de7f302214610730578063ebef44d914610750578063edb12adf14610770578063edbfb5f5146107905761021d565b8063025e7c27146102225780630922f29d146102585780630a0148641461027a5780630b6b3b2a1461029c5780630bac7b81146102bc5780631483d99d146102dc578063173825d9146102fc5780631a46506e1461031c5780631cc9a579146103495780631eae039c146103765780631f70e80b14610396578063265f30da146103ab57806327304dfd146103c05780632b5230a9146103ed5780632c0bdbcf1461040d5780633018205f1461043a578063309a042c1461044f57806336e4c87f146104645780633ef144791461049257806341c65e83146104b2578063483e1948146104d25780634bbe2fca146104f25761021d565b3661021d57005b600080fd5b34801561022e57600080fd5b5061024261023d366004614e11565b6107b0565b60405161024f9190614f3e565b60405180910390f35b34801561026457600080fd5b50610278610273366004614a0d565b6107d7565b005b34801561028657600080fd5b5061028f61087d565b60405161024f9190615472565b3480156102a857600080fd5b506102786102b7366004614e11565b610883565b3480156102c857600080fd5b506102786102d7366004614ae8565b6108ec565b3480156102e857600080fd5b506102786102f7366004614b50565b610c7e565b34801561030857600080fd5b50610278610317366004614a0d565b61108b565b34801561032857600080fd5b5061033c610337366004614a0d565b6112a5565b60405161024f919061506a565b34801561035557600080fd5b50610369610364366004614a0d565b611314565b60405161024f9190614fe6565b34801561038257600080fd5b50610278610391366004614a45565b611480565b3480156103a257600080fd5b5061028f6114c3565b3480156103b757600080fd5b5061028f6114c9565b3480156103cc57600080fd5b506103e06103db366004614a0d565b6114cf565b60405161024f919061507d565b3480156103f957600080fd5b5061033c610408366004614a0d565b6114e4565b34801561041957600080fd5b5061042d610428366004614a0d565b611551565b60405161024f9190614fd3565b34801561044657600080fd5b506102426115c9565b34801561045b57600080fd5b5061033c6115d8565b34801561047057600080fd5b5061048461047f366004614a0d565b611630565b60405161024f929190615088565b34801561049e57600080fd5b506102786104ad366004614c91565b61164e565b3480156104be57600080fd5b5061042d6104cd366004614a0d565b6117a4565b3480156104de57600080fd5b506102786104ed366004614e11565b61181b565b3480156104fe57600080fd5b5061028f61050d366004614abd565b61189c565b34801561051e57600080fd5b5061053261052d366004614a0d565b6118b9565b60405161024f9190615057565b34801561054b57600080fd5b5061027861055a366004614a85565b611d77565b34801561056b57600080fd5b5061027861057a366004614e11565b611e0c565b610278611e8d565b34801561059357600080fd5b506102786105a2366004614e11565b611ee6565b3480156105b357600080fd5b506103e06105c2366004614a0d565b611f67565b3480156105d357600080fd5b506102786105e2366004614a0d565b611fee565b3480156105f357600080fd5b50610278610602366004614abd565b612150565b34801561061357600080fd5b50610242612279565b34801561062857600080fd5b5061042d612288565b34801561063d57600080fd5b5061033c61064c366004614a0d565b6122e9565b34801561065d57600080fd5b5061028f612356565b34801561067257600080fd5b5061033c610681366004614a0d565b61235c565b34801561069257600080fd5b506103e06106a1366004614a0d565b6123c9565b3480156106b257600080fd5b5061028f6123e7565b3480156106c757600080fd5b506102786106d6366004614a0d565b6123ed565b3480156106e757600080fd5b506102426106f6366004614a0d565b612479565b34801561070757600080fd5b5061028f610716366004614e11565b612494565b34801561072757600080fd5b5061028f6124b2565b34801561073c57600080fd5b5061042d61074b366004614a0d565b6124b8565b34801561075c57600080fd5b5061042d61076b366004614a0d565b61252f565b34801561077c57600080fd5b5061027861078b366004614a0d565b6125a3565b34801561079c57600080fd5b5061028f6107ab366004614a0d565b612ef0565b600281815481106107bd57fe5b6000918252602090912001546001600160a01b0316905081565b6000546001600160a01b0316331461080a5760405162461bcd60e51b8152600401610801906150fc565b60405180910390fd5b6001600160a01b0381166108305760405162461bcd60e51b81526004016108019061517f565b600680546001600160a01b0319166001600160a01b0383169081179091556040513391907fda49b6b843d6c52e6a8fa0f8645f8a33373438a8bf8500d292bf7a96a0a8041790600090a350565b600e5481565b6000546001600160a01b031633146108ad5760405162461bcd60e51b8152600401610801906150fc565b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516108df92919061509a565b60405180910390a2601055565b600554604051636e0cf42160e11b8152339161010090046001600160a01b03169063dc19e84290610921908490600401614f3e565b60206040518083038186803b15801561093957600080fd5b505afa15801561094d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109719190614dd6565b61098d5760405162461bcd60e51b81526004016108019061531a565b8382146109ac5760405162461bcd60e51b815260040161080190615211565b6001600160a01b038181166000908152600b602052604090205416610a6c57806001600160a01b0316633018205f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a0457600080fd5b505afa158015610a18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3c9190614a29565b6001600160a01b038281166000908152600b6020526040902080546001600160a01b031916929091169190911790555b600060076000836001600160a01b03166001600160a01b031681526020019081526020016000209050606080610b55888888888888600001805480602002602001604051908101604052809291908181526020018280548015610af857602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610ada575b505050505089600401805480602002602001604051908101604052809291908181526020018280548015610b4b57602002820191906000526020600020905b815481526020019060010190808311610b37575b5050505050612f02565b81519193509150610b6c9084906020850190614704565b508051610b829060048501906020840190614769565b506001600160a01b03841660009081526008602052604090819020805460ff19166001179055516346d480dd60e11b81523090638da901ba90610bc9908790600401614f3e565b60206040518083038186803b158015610be157600080fd5b505afa158015610bf5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c199190614dd6565b15610c745760405163edb12adf60e01b8152309063edb12adf90610c41908790600401614f3e565b600060405180830381600087803b158015610c5b57600080fd5b505af1158015610c6f573d6000803e3d6000fd5b505050505b5050505050505050565b600554604051636e0cf42160e11b8152339161010090046001600160a01b03169063dc19e84290610cb3908490600401614f3e565b60206040518083038186803b158015610ccb57600080fd5b505afa158015610cdf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d039190614dd6565b610d1f5760405162461bcd60e51b81526004016108019061531a565b868514610d3e5760405162461bcd60e51b815260040161080190615211565b6001600160a01b038181166000908152600b602052604090205416610dfe57806001600160a01b0316633018205f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d9657600080fd5b505afa158015610daa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dce9190614a29565b6001600160a01b038281166000908152600b6020526040902080546001600160a01b031916929091169190911790555b6001600160a01b038116600090815260076020526040902082610f0d57606080610ed98b8b8b8b8888600101805480602002602001604051908101604052809291908181526020018280548015610e7e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610e60575b505050505089600501805480602002602001604051908101604052809291908181526020018280548015610b4b5760200282019190600052602060002090815481526020019060010190808311610b37575050505050612f02565b81519193509150610ef39060018501906020850190614704565b508051610f099060058501906020840190614769565b5050505b8215610f8f57606080606080610f288d8d8d8d8d8d8c6131fc565b835193975091955093509150610f479060028701906020870190614704565b508251610f5d9060068701906020860190614769565b508151610f739060038701906020850190614704565b508051610f899060078701906020840190614769565b50505050505b6001600160a01b03821660009081526008602052604090819020805460ff19166001179055516346d480dd60e11b81523090638da901ba90610fd5908590600401614f3e565b60206040518083038186803b158015610fed57600080fd5b505afa158015611001573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110259190614dd6565b156110805760405163edb12adf60e01b8152309063edb12adf9061104d908590600401614f3e565b600060405180830381600087803b15801561106757600080fd5b505af115801561107b573d6000803e3d6000fd5b505050505b505050505050505050565b6000546001600160a01b031633146110b55760405162461bcd60e51b8152600401610801906150fc565b6001600160a01b03811660009081526001602052604090205460ff166110ed5760405162461bcd60e51b815260040161080190615128565b6001600160a01b0381166000908152600160205260408120805460ff19169055805b60025481101561121157826001600160a01b03166002828154811061113057fe5b6000918252602090912001546001600160a01b031614156112095760028054600019810190811061115d57fe5b600091825260209091200154600280546001600160a01b03909216918390811061118357fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600381815481106111be57fe5b906000526020600020015491506003600160038054905003815481106111e057fe5b9060005260206000200154600382815481106111f857fe5b600091825260209091200155611211565b60010161110f565b50600280548061121d57fe5b600082815260209020810160001990810180546001600160a01b0319169055019055600380548061124a57fe5b600082815260208120820160001990810182905590910190915560048054839003905560405182916001600160a01b038516917f7b0884b4b6bb4e0c1385ad42168fa556c14d4d799c1bf22f081aff3efff6ea0c9190a35050565b6001600160a01b03811660009081526007602081815260409283902090910180548351818402810184019094528084526060939283018282801561130857602002820191906000526020600020905b8154815260200190600101908083116112f4575b50505050509050919050565b6001600160a01b03811660009081526009602052604090205460609081816001600160401b038111801561134757600080fd5b5060405190808252806020026020018201604052801561138157816020015b61136e6147b0565b8152602001906001900390816113665790505b50905060015b826001018110156114785761139a6147b0565b6001600160a01b0386166000908152600a60209081526040808320858452825280832081518083018352815481526001820180548451818702810187019095528085529195929486810194939192919084015b82821015611442576000848152602090819020604080516060810182526003860290920180546001600160a01b03168352600180820154848601526002909101549183019190915290835290920191016113ed565b5050509152509091508190508361145a846001613727565b8151811061146457fe5b602090810291909101015250600101611387565b509392505050565b6000546001600160a01b031633146114aa5760405162461bcd60e51b8152600401610801906150fc565b6114be6001600160a01b0384168383613772565b505050565b600c5481565b60105481565b60016020526000908152604090205460ff1681565b6001600160a01b03811660009081526007602090815260409182902060060180548351818402810184019094528084526060939283018282801561130857602002820191906000526020600020908154815260200190600101908083116112f45750505050509050919050565b6001600160a01b03811660009081526007602090815260409182902060020180548351818402810184019094528084526060939283018282801561130857602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116115a05750505050509050919050565b6000546001600160a01b031690565b6060600380548060200260200160405190810160405280929190818152602001828054801561162657602002820191906000526020600020905b815481526020019060010190808311611612575b5050505050905090565b60086020526000908152604090205460ff8082169161010090041682565b6000546001600160a01b031633146116785760405162461bcd60e51b8152600401610801906150fc565b80518251146116995760405162461bcd60e51b8152600401610801906152fa565b60055460ff16156116bc5760405162461bcd60e51b8152600401610801906151eb565b60005b825181101561176a5760008382815181106116d657fe5b6020908102919091018101516001600160a01b0381166000908152600190925260409091205490915060ff161561171f5760405162461bcd60e51b815260040161080190615245565b82828151811061172b57fe5b6020908102919091018101516004805490910190556001600160a01b03909116600090815260019182905260409020805460ff191682179055016116bf565b50815161177e906002906020850190614704565b508051611792906003906020840190614769565b50506005805460ff1916600117905550565b6001600160a01b038116600090815260076020908152604091829020600301805483518184028101840190945280845260609392830182828015611308576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116115a05750505050509050919050565b6000546001600160a01b031633146118455760405162461bcd60e51b8152600401610801906150fc565b600c548111156118675760405162461bcd60e51b81526004016108019061514f565b600f819055604051819033907f401a2e9de953ac26f52ac90650c1c1c1d95f78ef7661efad2ab1f2c59b9fd5e490600090a350565b600a60209081526000928352604080842090915290825290205481565b60606118c36147ca565b6001600160a01b03831660009081526007602090815260409182902082518154610120938102820184019094526101008101848152909391928492849184018282801561193957602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161191b575b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561199b57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161197d575b50505050508152602001600282018054806020026020016040519081016040528092919081815260200182805480156119fd57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116119df575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015611a5f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611a41575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015611ab757602002820191906000526020600020905b815481526020019060010190808311611aa3575b5050505050815260200160058201805480602002602001604051908101604052809291908181526020018280548015611b0f57602002820191906000526020600020905b815481526020019060010190808311611afb575b5050505050815260200160068201805480602002602001604051908101604052809291908181526020018280548015611b6757602002820191906000526020600020905b815481526020019060010190808311611b53575b5050505050815260200160078201805480602002602001604051908101604052809291908181526020018280548015611bbf57602002820191906000526020600020905b815481526020019060010190808311611bab575b5050505050815250509050606081600001515160001415611c0e57602082015151611c0357604082015151611bf8578160600151611bfe565b81604001515b611c09565b81602001515b611c11565b81515b80519091506060816001600160401b0381118015611c2e57600080fd5b50604051908082528060200260200182016040528015611c6857816020015b611c5561480f565b815260200190600190039081611c4d5790505b50905060005b82811015611d6d57611c7e61480f565b848281518110611c8a57fe5b60209081029190910101516001600160a01b031681526000611cac838a6137c8565b50505050905080826040018181525050858381518110611cc857fe5b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611d0857600080fd5b505afa158015611d1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d409190614e41565b60ff16602083015283518290859085908110611d5857fe5b60209081029190910101525050600101611c6e565b5095945050505050565b6000546001600160a01b03163314611da15760405162461bcd60e51b8152600401610801906150fc565b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051611dd392919061509a565b60405180910390a26001600160a01b03909116600090815260086020526040902080549115156101000261ff0019909216919091179055565b6000546001600160a01b03163314611e365760405162461bcd60e51b8152600401610801906150fc565b600c54811115611e585760405162461bcd60e51b81526004016108019061514f565b600e819055604051819033907f448dcad41b13f10b7abd9393b3e1bb9887110740a9f0f9c7d2ed0b762652971f90600090a350565b6000546001600160a01b03163314611eb75760405162461bcd60e51b8152600401610801906150fc565b60405133904780156108fc02916000818181858888f19350505050158015611ee3573d6000803e3d6000fd5b50565b6000546001600160a01b03163314611f105760405162461bcd60e51b8152600401610801906150fc565b600c54811115611f325760405162461bcd60e51b81526004016108019061514f565b600d819055604051819033907f7d624dbda9646ad98f8b1fbd8de61497fb7a4e93b94bc13a6548b81c9b0ce91a90600090a350565b60006001826001600160a01b03166373a9855c6040518163ffffffff1660e01b815260040160206040518083038186803b158015611fa457600080fd5b505afa158015611fb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fdc9190614df2565b6001811115611fe757fe5b1492915050565b6000546001600160a01b031633146120185760405162461bcd60e51b8152600401610801906150fc565b6001600160a01b03811661203e5760405162461bcd60e51b8152600401610801906152a4565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a360005b60025481101561210157600054600280546001600160a01b0390921691839081106120a157fe5b6000918252602090912001546001600160a01b031614156120f95781600282815481106120ca57fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b60010161207a565b50600080546001600160a01b039081168252600160208190526040808420805460ff199081169091559490921680845291832080549094161790925580546001600160a01b0319169091179055565b6000546001600160a01b0316331461217a5760405162461bcd60e51b8152600401610801906150fc565b6001600160a01b03821660009081526001602052604090205460ff16156121b35760405162461bcd60e51b815260040161080190615245565b6001600160a01b0382166000818152600160208190526040808320805460ff191683179055600280548084019091557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319168517905560038054928301815583527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b9091018490556004805485019055518392917fbd5dcf0b25226117c4a68a0129ffdd4b0541ef5e482ad7de9a96ccb6d6a8ebde91a35050565b6006546001600160a01b031681565b6060600280548060200260200160405190810160405280929190818152602001828054801561162657602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116122c2575050505050905090565b6001600160a01b03811660009081526007602090815260409182902060050180548351818402810184019094528084526060939283018282801561130857602002820191906000526020600020908154815260200190600101908083116112f45750505050509050919050565b600f5481565b6001600160a01b03811660009081526007602090815260409182902060040180548351818402810184019094528084526060939283018282801561130857602002820191906000526020600020908154815260200190600101908083116112f45750505050509050919050565b6001600160a01b031660009081526008602052604090205460ff1690565b600d5481565b6000546001600160a01b031633146124175760405162461bcd60e51b8152600401610801906150fc565b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405161244992919061509a565b60405180910390a2600580546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b600b602052600090815260409020546001600160a01b031681565b600381815481106124a157fe5b600091825260209091200154905081565b60045481565b6001600160a01b038116600090815260076020908152604091829020600101805483518184028101840190945280845260609392830182828015611308576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116115a05750505050509050919050565b6001600160a01b038116600090815260076020908152604091829020805483518184028101840190945280845260609392830182828015611308576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116115a05750505050509050919050565b600554604051636e0cf42160e11b81526101009091046001600160a01b03169063dc19e842906125d7908490600401614f3e565b60206040518083038186803b1580156125ef57600080fd5b505afa158015612603573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126279190614dd6565b6126435760405162461bcd60e51b81526004016108019061531a565b6000816001600160a01b0316633018205f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561267e57600080fd5b505afa158015612692573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126b69190614a29565b90506126c06147ca565b6001600160a01b03831660009081526007602090815260409182902082518154610120938102820184019094526101008101848152909391928492849184018282801561273657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612718575b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561279857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161277a575b50505050508152602001600282018054806020026020016040519081016040528092919081815260200182805480156127fa57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116127dc575b505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561285c57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161283e575b50505050508152602001600482018054806020026020016040519081016040528092919081815260200182805480156128b457602002820191906000526020600020905b8154815260200190600101908083116128a0575b505050505081526020016005820180548060200260200160405190810160405280929190818152602001828054801561290c57602002820191906000526020600020905b8154815260200190600101908083116128f8575b505050505081526020016006820180548060200260200160405190810160405280929190818152602001828054801561296457602002820191906000526020600020905b815481526020019060010190808311612950575b50505050508152602001600782018054806020026020016040519081016040528092919081815260200182805480156129bc57602002820191906000526020600020905b8154815260200190600101908083116129a8575b505050919092525050506001600160a01b038416600090815260086020526040902081515191925090606090612a2057602083015151612a1557604083015151612a0a578260600151612a10565b82604001515b612a1b565b82602001515b612a23565b82515b8051835491925090610100900460ff1615612a505760405162461bcd60e51b8152600401610801906153c2565b6001600160a01b038681166000908152600b6020526040902054811690861614612aa3576001600160a01b038681166000908152600b6020526040902080546001600160a01b0319169187169190911790555b60008111612ac35760405162461bcd60e51b8152600401610801906152ce565b825460ff16612ae45760405162461bcd60e51b81526004016108019061538d565b825460ff191683556001600160a01b0386166000908152600a6020908152604080832060099092528220548290612b1c906001613be0565b815260200190815260200160002090508060000160009055806001016000612b449190614839565b4281556060826001600160401b0381118015612b5f57600080fd5b50604051908082528060200260200182016040528015612b89578160200160208202803683370190505b5090506060836001600160401b0381118015612ba457600080fd5b50604051908082528060200260200182016040528015612bce578160200160208202803683370190505b5090506060846001600160401b0381118015612be957600080fd5b50604051908082528060200260200182016040528015612c13578160200160208202803683370190505b5090506060856001600160401b0381118015612c2e57600080fd5b50604051908082528060200260200182016040528015612c58578160200160208202803683370190505b50905060005b86811015612de4576000612c7061480f565b612c7a838f6137c8565b8b8881518110612c8657fe5b602002602001018b8981518110612c9957fe5b602002602001018b8a81518110612cac57fe5b602002602001018b8b81518110612cbf57fe5b602090810291909101019390935292909152919052528a519092506000908b9085908110612ce957fe5b6020908102919091018101516001600160a01b0381168085526040808601879052805163313ce56760e01b81529051929450909263313ce56792600480840193829003018186803b158015612d3d57600080fd5b505afa158015612d51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d759190614e41565b60ff16602083810191825260018b8101805480830182556000918252929020855160039093020180546001600160a01b0319166001600160a01b039093169290921782559151918101919091556040830151600290910155612dd98f8f8386613c05565b505050600101612c5e565b506040516346d480dd60e11b81523090638da901ba90612e08908e90600401614f3e565b60206040518083038186803b158015612e2057600080fd5b505afa158015612e34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e589190614dd6565b15612e6b57612e6b8b8886868686613f7b565b6001600160a01b038b16600090815260096020526040902054612e8f906001613be0565b6001600160a01b038c166000908152600960209081526040808320849055600a8252808320938352929052208554815560018087018054889392612ed6929084019161485a565b50905050612ee38b61445b565b5050505050505050505050565b60096020526000908152604090205481565b60608087806001600160401b0381118015612f1c57600080fd5b50604051908082528060200260200182016040528015612f46578160200160208202803683370190505b509250806001600160401b0381118015612f5f57600080fd5b50604051908082528060200260200182016040528015612f89578160200160208202803683370190505b50915083518551148015612f9c57508451155b80612fc057506001600160a01b03861660009081526008602052604090205460ff16155b156130ab5760005b818110156130a55760008b8b83818110612fde57fe5b9050602002016020810190612ff39190614a0d565b905060008a8a8481811061300357fe5b6020029190910135915061302490506001600160a01b0383163330846144e0565b8c8c8481811061303057fe5b90506020020160208101906130459190614a0d565b86848151811061305157fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508a8a8481811061307d57fe5b9050602002013585848151811061309057fe5b60209081029190910101525050600101612fc8565b506131ef565b60005b818110156131ed578a8a828181106130c257fe5b90506020020160208101906130d79190614a0d565b6001600160a01b03168682815181106130ec57fe5b60200260200101516001600160a01b031614156131e55760008b8b8381811061311157fe5b90506020020160208101906131269190614a0d565b905060008a8a8481811061313657fe5b6020029190910135915061315790506001600160a01b0383163330846144e0565b8c8c8481811061316357fe5b90506020020160208101906131789190614a0d565b86848151811061318457fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506131ca818885815181106131b457fe5b6020026020010151613be090919063ffffffff16565b8584815181106131d657fe5b60200260200101818152505050505b6001016130ae565b505b5097509795505050505050565b606080808089806001600160401b038111801561321857600080fd5b50604051908082528060200260200182016040528015613242578160200160208202803683370190505b509450806001600160401b038111801561325b57600080fd5b50604051908082528060200260200182016040528015613285578160200160208202803683370190505b509350806001600160401b038111801561329e57600080fd5b506040519080825280602002602001820160405280156132c8578160200160208202803683370190505b509250806001600160401b03811180156132e157600080fd5b5060405190808252806020026020018201604052801561330b578160200160208202803683370190505b506001600160a01b038716600090815260076020526040902060068101546002820154929450909114801561334257506002810154155b8061336657506001600160a01b03871660009081526008602052604090205460ff16155b156134315760005b8281101561342b5760008e8e8381811061338457fe5b90506020020160208101906133999190614a0d565b905060008d8d848181106133a957fe5b602002919091013591506133ca90506001600160a01b0383163330846144e0565b818984815181106133d757fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508b8b8481811061340357fe5b9050602002013588848151811061341657fe5b6020908102919091010152505060010161336e565b50613574565b60005b82811015613572578d8d8281811061344857fe5b905060200201602081019061345d9190614a0d565b6001600160a01b031682600201828154811061347557fe5b6000918252602090912001546001600160a01b0316141561356a5760008e8e8381811061349e57fe5b90506020020160208101906134b39190614a0d565b905060008d8d848181106134c357fe5b602002919091013591506134e490506001600160a01b0383163330846144e0565b818984815181106134f157fe5b60200260200101906001600160a01b031690816001600160a01b03168152505061354f8c8c8581811061352057fe5b9050602002013585600701858154811061353657fe5b9060005260206000200154613be090919063ffffffff16565b88848151811061355b57fe5b60200260200101818152505050505b600101613434565b505b6007810154600382015414801561358d57506003810154155b806135b157506001600160a01b03871660009081526008602052604090205460ff16155b1561366a5760005b82811015613664578d8d828181106135cd57fe5b90506020020160208101906135e29190614a0d565b8582815181106135ee57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506136458a8a8381811061361d57fe5b905060200201358d8d8481811061363057fe5b9050602002013561372790919063ffffffff16565b84828151811061365157fe5b60209081029190910101526001016135b9565b50613717565b60005b82811015613715578d8d8281811061368157fe5b90506020020160208101906136969190614a0d565b8582815181106136a257fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506136f66136e78b8b848181106136d457fe5b905060200201358e8e8581811061363057fe5b83600701838154811061353657fe5b84828151811061370257fe5b602090810291909101015260010161366d565b505b5050975097509750979350505050565b600061376983836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250614507565b90505b92915050565b6114be8363a9059cbb60e01b8484604051602401613791929190614fba565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614533565b60008060008060006137d86147ca565b6001600160a01b03871660009081526007602090815260409182902082518154610120938102820184019094526101008101848152909391928492849184018282801561384e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613830575b50505050508152602001600182018054806020026020016040519081016040528092919081815260200182805480156138b057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613892575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561391257602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116138f4575b505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561397457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613956575b50505050508152602001600482018054806020026020016040519081016040528092919081815260200182805480156139cc57602002820191906000526020600020905b8154815260200190600101908083116139b8575b5050505050815260200160058201805480602002602001604051908101604052809291908181526020018280548015613a2457602002820191906000526020600020905b815481526020019060010190808311613a10575b5050505050815260200160068201805480602002602001604051908101604052809291908181526020018280548015613a7c57602002820191906000526020600020905b815481526020019060010190808311613a68575b5050505050815260200160078201805480602002602001604051908101604052809291908181526020018280548015613ad457602002820191906000526020600020905b815481526020019060010190808311613ac0575b5050505050815250509050806080015151600014613b3357613b24600c54613b1e600d5484608001518c81518110613b0857fe5b602002602001015161461890919063ffffffff16565b90614652565b9450613b308686613be0565b95505b60a08101515115613b6957613b5a600c54613b1e600e548460a001518c81518110613b0857fe5b9350613b668685613be0565b95505b60c08101515115613b9f57613b90600c54613b1e600f548460c001518c81518110613b0857fe5b9250613b9c8684613be0565b95505b60e08101515115613bd557613bc6600c54613b1e6010548460e001518c81518110613b0857fe5b9150613bd28683613be0565b95505b509295509295909350565b6000828201838110156137695760405162461bcd60e51b8152600401610801906151b6565b6040516346d480dd60e11b81526000903090638da901ba90613c2b908890600401614f3e565b60206040518083038186803b158015613c4357600080fd5b505afa158015613c57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c7b9190614dd6565b905080156000613c936001600160a01b038716614691565b90508215613cb557600654613cb5906001600160a01b03878116911686613772565b818015613cbf5750805b15613f4e576060876001600160a01b031663a0e67e2b6040518163ffffffff1660e01b815260040160006040518083038186803b158015613cff57600080fd5b505afa158015613d13573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613d3b9190810190614bf9565b90506060886001600160a01b031663309a042c6040518163ffffffff1660e01b815260040160006040518083038186803b158015613d7857600080fd5b505afa158015613d8c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613db49190810190614d53565b90506000896001600160a01b031663d29986c16040518163ffffffff1660e01b815260040160206040518083038186803b158015613df157600080fd5b505afa158015613e05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e299190614e29565b905060005b8351811015613f49576000613e5e858381518110613e4857fe5b60200260200101516001600160a01b0316614691565b613e7b57848281518110613e6e57fe5b6020026020010151613eff565b848281518110613e8757fe5b60200260200101516001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015613ec757600080fd5b505afa158015613edb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613eff9190614a29565b9050613f4081613f2f85613b1e888781518110613f1857fe5b60200260200101518e61461890919063ffffffff16565b6001600160a01b038d169190613772565b50600101613e2e565b505050505b818015613f59575080155b15613f7257613f726001600160a01b0386168786613772565b50505050505050565b613f836147ca565b6001600160a01b038716600090815260076020908152604091829020825181546101209381028201840190945261010081018481529093919284928491840182828015613ff957602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613fdb575b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561405b57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161403d575b50505050508152602001600282018054806020026020016040519081016040528092919081815260200182805480156140bd57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161409f575b505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561411f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311614101575b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561417757602002820191906000526020600020905b815481526020019060010190808311614163575b50505050508152602001600582018054806020026020016040519081016040528092919081815260200182805480156141cf57602002820191906000526020600020905b8154815260200190600101908083116141bb575b505050505081526020016006820180548060200260200160405190810160405280929190818152602001828054801561422757602002820191906000526020600020905b815481526020019060010190808311614213575b505050505081526020016007820180548060200260200160405190810160405280929190818152602001828054801561427f57602002820191906000526020600020905b81548152602001906001019080831161426b575b505050505081525050905080608001515160001461430157600654604051639155dae760e01b81526001600160a01b0390911690639155dae7906142ce908a906000908b908b90600401614f76565b600060405180830381600087803b1580156142e857600080fd5b505af11580156142fc573d6000803e3d6000fd5b505050505b60a0810151511561437657600654604051639155dae760e01b81526001600160a01b0390911690639155dae790614343908a906001908b908a90600401614f76565b600060405180830381600087803b15801561435d57600080fd5b505af1158015614371573d6000803e3d6000fd5b505050505b60c081015151156143eb57600654604051639155dae760e01b81526001600160a01b0390911690639155dae7906143b8908a906002908b908990600401614f76565b600060405180830381600087803b1580156143d257600080fd5b505af11580156143e6573d6000803e3d6000fd5b505050505b60e08101515115613f7257600654604051639155dae760e01b81526001600160a01b0390911690639155dae79061442d908a906003908b908890600401614f76565b600060405180830381600087803b15801561444757600080fd5b505af1158015612ee3573d6000803e3d6000fd5b6001600160a01b03811660009081526007602052604081209061447e82826148d8565b61448c6001830160006148d8565b61449a6002830160006148d8565b6144a86003830160006148d8565b6144b66004830160006148d8565b6144c46005830160006148d8565b6144d26006830160006148d8565b6114be6007830160006148d8565b614501846323b872dd60e01b85858560405160240161379193929190614f52565b50505050565b6000818484111561452b5760405162461bcd60e51b815260040161080191906150c9565b505050900390565b614545826001600160a01b0316614691565b6145615760405162461bcd60e51b81526004016108019061543b565b60006060836001600160a01b03168360405161457d9190614f22565b6000604051808303816000865af19150503d80600081146145ba576040519150601f19603f3d011682016040523d82523d6000602084013e6145bf565b606091505b5091509150816145e15760405162461bcd60e51b81526004016108019061526f565b80511561450157808060200190518101906145fc9190614dd6565b6145015760405162461bcd60e51b8152600401610801906153f1565b6000826146275750600061376c565b8282028284828161463457fe5b04146137695760405162461bcd60e51b81526004016108019061534c565b600061376983836040518060400160405280601a815260200179536166654d6174683a206469766973696f6e206279207a65726f60301b8152506146cd565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708181148015906146c557508115155b949350505050565b600081836146ee5760405162461bcd60e51b815260040161080191906150c9565b5060008385816146fa57fe5b0495945050505050565b828054828255906000526020600020908101928215614759579160200282015b8281111561475957825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190614724565b506147659291506148f6565b5090565b8280548282559060005260206000209081019282156147a4579160200282015b828111156147a4578251825591602001919060010190614789565b50614765929150614915565b604051806040016040528060008152602001606081525090565b60405180610100016040528060608152602001606081526020016060815260200160608152602001606081526020016060815260200160608152602001606081525090565b604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b5080546000825560030290600052602060002090810190611ee3919061492a565b8280548282559060005260206000209060030281019282156148cc5760005260206000209160030282015b828111156148cc57825482546001600160a01b0319166001600160a01b03909116178255600180840154908301556002808401549083015560039283019290910190614885565b5061476592915061492a565b5080546000825590600052602060002090810190611ee39190614915565b5b808211156147655780546001600160a01b03191681556001016148f7565b5b808211156147655760008155600101614916565b5b808211156147655780546001600160a01b0319168155600060018201819055600282015560030161492b565b60008083601f840112614968578182fd5b5081356001600160401b0381111561497e578182fd5b602083019150836020808302850101111561499857600080fd5b9250929050565b600082601f8301126149af578081fd5b81356149c26149bd826154a1565b61547b565b8181529150602080830190848101818402860182018710156149e357600080fd5b60005b84811015614a02578135845292820192908201906001016149e6565b505050505092915050565b600060208284031215614a1e578081fd5b8135613769816154ec565b600060208284031215614a3a578081fd5b8151613769816154ec565b600080600060608486031215614a59578182fd5b8335614a64816154ec565b92506020840135614a74816154ec565b929592945050506040919091013590565b60008060408385031215614a97578182fd5b8235614aa2816154ec565b91506020830135614ab281615501565b809150509250929050565b60008060408385031215614acf578182fd5b8235614ada816154ec565b946020939093013593505050565b60008060008060408587031215614afd578081fd5b84356001600160401b0380821115614b13578283fd5b614b1f88838901614957565b90965094506020870135915080821115614b37578283fd5b50614b4487828801614957565b95989497509550505050565b60008060008060008060006080888a031215614b6a578283fd5b87356001600160401b0380821115614b80578485fd5b614b8c8b838c01614957565b909950975060208a0135915080821115614ba4578485fd5b614bb08b838c01614957565b909750955060408a0135915080821115614bc8578485fd5b50614bd58a828b01614957565b9094509250506060880135614be981615501565b8091505092959891949750929550565b60006020808385031215614c0b578182fd5b82516001600160401b03811115614c20578283fd5b8301601f81018513614c30578283fd5b8051614c3e6149bd826154a1565b8181528381019083850185840285018601891015614c5a578687fd5b8694505b83851015614c85578051614c71816154ec565b835260019490940193918501918501614c5e565b50979650505050505050565b60008060408385031215614ca3578182fd5b82356001600160401b0380821115614cb9578384fd5b818501915085601f830112614ccc578384fd5b8135614cda6149bd826154a1565b80828252602080830192508086018a828387028901011115614cfa578889fd5b8896505b84871015614d25578035614d11816154ec565b845260019690960195928101928101614cfe565b509096508701359350505080821115614d3c578283fd5b50614d498582860161499f565b9150509250929050565b60006020808385031215614d65578182fd5b82516001600160401b03811115614d7a578283fd5b8301601f81018513614d8a578283fd5b8051614d986149bd826154a1565b8181528381019083850185840285018601891015614db4578687fd5b8694505b83851015614c85578051835260019490940193918501918501614db8565b600060208284031215614de7578081fd5b815161376981615501565b600060208284031215614e03578081fd5b815160028110613769578182fd5b600060208284031215614e22578081fd5b5035919050565b600060208284031215614e3a578081fd5b5051919050565b600060208284031215614e52578081fd5b815160ff81168114613769578182fd5b6000815180845260208085019450808401835b83811015614e9a5781516001600160a01b031687529582019590820190600101614e75565b509495945050505050565b6000815180845260208085019450808401835b83811015614e9a57815180516001600160a01b0316885283810151848901526040908101519088015260609096019590820190600101614eb8565b6000815180845260208085019450808401835b83811015614e9a57815187529582019590820190600101614f06565b60008251614f348184602087016154c0565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060018060a01b038616825284602083015260806040830152614f9d6080830185614e62565b8281036060840152614faf8185614ef3565b979650505050505050565b6001600160a01b03929092168252602082015260400190565b6000602082526137696020830184614e62565b60208082528251828201819052600091906040908185019080840286018301878501865b8381101561504957888303603f1901855281518051845287015187840187905261503687850182614ea5565b958801959350509086019060010161500a565b509098975050505050505050565b6000602082526137696020830184614ea5565b6000602082526137696020830184614ef3565b901515815260200190565b91151582521515602082015260400190565b60006020825282602083015282846040840137818301604090810191909152601f909201601f19160101919050565b60006020825282518060208401526150e88160408501602087016154c0565b601f01601f19169190910160400192915050565b60208082526012908201527122a9292fa727aa2fa1a7a72a2927a62622a960711b604082015260600190565b6020808252600d908201526c22a9292fa727aa2fa7aba722a960991b604082015260600190565b60208082526016908201527513585e1a5b5d5b481b1a5b5a5d08195e18d95959195960521b604082015260600190565b6020808252601d908201527f4552525f494e56414c49445f555345525641554c545f41444452455353000000604082015260600190565b6020808252601b908201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604082015260600190565b6020808252600c908201526b696e697469616c697a65642160a01b604082015260600190565b6020808252601a908201527908aa4a4bea89e968a9cbe988a9c8ea890be9c9ea8be9a82a886960331b604082015260600190565b60208082526010908201526f20b2323932b9b99034b99027bbb732b960811b604082015260600190565b6020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b60208082526010908201526f4552525f5a45524f5f4144445245535360801b604082015260600190565b6020808252601290820152714552525f4e4f545f4d414e4745525f46454560701b604082015260600190565b60208082526006908201526506f776e6572560d41b604082015260600190565b6020808252601890820152774552525f494e56414c49445f504f4f4c5f4144445245535360401b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252601b908201527a4552525f4d414e414745525f434f554c445f4e4f545f434c41494d60281b604082015260600190565b60208082526015908201527411549497d413d3d317d254d7d0931050d2d31254d5605a1b604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b6020808252601f908201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604082015260600190565b90815260200190565b6040518181016001600160401b038111828210171561549957600080fd5b604052919050565b60006001600160401b038211156154b6578081fd5b5060209081020190565b60005b838110156154db5781810151838201526020016154c3565b838111156145015750506000910152565b6001600160a01b0381168114611ee357600080fd5b8015158114611ee357600080fdfea264697066735822122080ad900817cdb2f1c9e269d53a2d9a23cc4050a411f9165539cb6cb50763e2ec64736f6c634300060c0033",
  "deployedBytecode": "",
  "libraries": {},
  "devdoc": {
    "author": "Desyn Labs",
    "kind": "dev",
    "methods": {
      "getController()": {
        "details": "external for gas optimization",
        "returns": {
          "_0": "address - of the owner (AKA controller)"
        }
      },
      "removeOwner(address)": {
        "details": "Allows to remove an owner. Transaction has to be sent by wallet.",
        "params": {
          "owner": "Address of owner."
        }
      },
      "setAddAdminList(address,uint256)": {
        "details": "external for gas optimization",
        "params": {
          "newOwner": "- address of new owner"
        }
      },
      "setController(address)": {
        "details": "external for gas optimization",
        "params": {
          "newOwner": "- address of new owner"
        }
      }
    },
    "title": "Vault managerFee",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getController()": {
        "notice": "Returns the address of the current owner"
      },
      "setAddAdminList(address,uint256)": {
        "notice": "Transfers ownership of the contract to a new account (`newOwner`).         Can only be called by the current owner"
      },
      "setController(address)": {
        "notice": "Transfers ownership of the contract to a new account (`newOwner`).         Can only be called by the current owner"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 17729,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 17733,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "adminList",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 17736,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "owners",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 17739,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "ownerPercentage",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 17741,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "allOwnerPercentage",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 17743,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "initialized",
        "offset": 0,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 11874,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "crpFactory",
        "offset": 1,
        "slot": "5",
        "type": "t_contract(ICRPFactory)11858"
      },
      {
        "astId": 11876,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "userVault",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 11947,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "poolsTokens",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_struct(PoolTokens)11938_storage)"
      },
      {
        "astId": 11951,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "poolsStatus",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(PoolStatus)11943_storage)"
      },
      {
        "astId": 11955,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "record_number",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11961,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "record_List",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(ClaimRecordInfo)11913_storage))"
      },
      {
        "astId": 11965,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "pool_manager",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 11968,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "RATIO_TOTAL",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 11971,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "RATIO_MANAGER",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 11974,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "RATIO_ISSUE",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 11977,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "RATIO_REDEEM",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 11980,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "RATIO_PERFERMANCE",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(ClaimTokenInfo)11907_storage)dyn_storage": {
        "base": "t_struct(ClaimTokenInfo)11907_storage",
        "encoding": "dynamic_array",
        "label": "struct Vault.ClaimTokenInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ICRPFactory)11858": {
        "encoding": "inplace",
        "label": "contract ICRPFactory",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(ClaimRecordInfo)11913_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct Vault.ClaimRecordInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(ClaimRecordInfo)11913_storage)"
      },
      "t_mapping(t_address,t_struct(PoolStatus)11943_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Vault.PoolStatus)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolStatus)11943_storage"
      },
      "t_mapping(t_address,t_struct(PoolTokens)11938_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Vault.PoolTokens)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolTokens)11938_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(ClaimRecordInfo)11913_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Vault.ClaimRecordInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(ClaimRecordInfo)11913_storage"
      },
      "t_struct(ClaimRecordInfo)11913_storage": {
        "encoding": "inplace",
        "label": "struct Vault.ClaimRecordInfo",
        "members": [
          {
            "astId": 11909,
            "contract": "contracts/deploy/Vault.sol:Vault",
            "label": "time",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11912,
            "contract": "contracts/deploy/Vault.sol:Vault",
            "label": "tokens",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_struct(ClaimTokenInfo)11907_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ClaimTokenInfo)11907_storage": {
        "encoding": "inplace",
        "label": "struct Vault.ClaimTokenInfo",
        "members": [
          {
            "astId": 11902,
            "contract": "contracts/deploy/Vault.sol:Vault",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 11904,
            "contract": "contracts/deploy/Vault.sol:Vault",
            "label": "decimals",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11906,
            "contract": "contracts/deploy/Vault.sol:Vault",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(PoolStatus)11943_storage": {
        "encoding": "inplace",
        "label": "struct Vault.PoolStatus",
        "members": [
          {
            "astId": 11940,
            "contract": "contracts/deploy/Vault.sol:Vault",
            "label": "couldManagerClaim",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 11942,
            "contract": "contracts/deploy/Vault.sol:Vault",
            "label": "isBlackList",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(PoolTokens)11938_storage": {
        "encoding": "inplace",
        "label": "struct Vault.PoolTokens",
        "members": [
          {
            "astId": 11916,
            "contract": "contracts/deploy/Vault.sol:Vault",
            "label": "tokenList",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 11919,
            "contract": "contracts/deploy/Vault.sol:Vault",
            "label": "issueTokens",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 11922,
            "contract": "contracts/deploy/Vault.sol:Vault",
            "label": "redeemTokens",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 11925,
            "contract": "contracts/deploy/Vault.sol:Vault",
            "label": "perfermanceTokens",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 11928,
            "contract": "contracts/deploy/Vault.sol:Vault",
            "label": "managerAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 11931,
            "contract": "contracts/deploy/Vault.sol:Vault",
            "label": "issueAmount",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 11934,
            "contract": "contracts/deploy/Vault.sol:Vault",
            "label": "redeemAmount",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 11937,
            "contract": "contracts/deploy/Vault.sol:Vault",
            "label": "perfermanceAmount",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
