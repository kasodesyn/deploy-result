{
  "address": "0x63de2f72343f2ff63ef399530ed24b29a8349d3c",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AddAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "LOGVaultAdr",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RemoveAdmin",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "adminClaimToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "adminList",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allOwnerPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "black_list",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "claimKolReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "claimManagersReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "kol",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "types",
          "type": "uint256"
        }
      ],
      "name": "computeReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "types",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "poolTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokensAmount",
          "type": "uint256[]"
        }
      ],
      "name": "depositToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getAllKolReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getAllManagersReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBNB",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getController",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getKolsAdr",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getManagerClaimBool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "bools",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "maragerAdr",
          "type": "address"
        }
      ],
      "name": "getManagerReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwnerPercentage",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwners",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getPoolAllFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "kol",
          "type": "address"
        }
      ],
      "name": "getPoolKolTotalAmounts",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "kol",
          "type": "address"
        }
      ],
      "name": "getPoolKolUserInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "userAdr",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "userAmount",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct UserVault.kolUserInfo[]",
          "name": "info",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getPoolUserKolAdr",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getPoolUserList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokenList",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "maragerAdr",
          "type": "address"
        }
      ],
      "name": "getUnManagerReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_ownerPercentage",
          "type": "uint256[]"
        }
      ],
      "name": "initHandle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "init_totalAmount_list",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "isClosePool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "is_set_params",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "kol",
          "type": "address"
        }
      ],
      "name": "kolClaimTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "kol",
          "type": "address"
        }
      ],
      "name": "kolUnClaimAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "kol_claimed_list",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "kol_pool_params",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "level",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "ratio",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SmartPoolManager.levelParams",
              "name": "firstLevel",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "level",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "ratio",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SmartPoolManager.levelParams",
              "name": "secondLevel",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "level",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "ratio",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SmartPoolManager.levelParams",
              "name": "thirdLevel",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "level",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "ratio",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SmartPoolManager.levelParams",
              "name": "fourLevel",
              "type": "tuple"
            }
          ],
          "internalType": "struct SmartPoolManager.feeParams",
          "name": "managerFee",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "level",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "ratio",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SmartPoolManager.levelParams",
              "name": "firstLevel",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "level",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "ratio",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SmartPoolManager.levelParams",
              "name": "secondLevel",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "level",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "ratio",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SmartPoolManager.levelParams",
              "name": "thirdLevel",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "level",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "ratio",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SmartPoolManager.levelParams",
              "name": "fourLevel",
              "type": "tuple"
            }
          ],
          "internalType": "struct SmartPoolManager.feeParams",
          "name": "issueFee",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "level",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "ratio",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SmartPoolManager.levelParams",
              "name": "firstLevel",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "level",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "ratio",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SmartPoolManager.levelParams",
              "name": "secondLevel",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "level",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "ratio",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SmartPoolManager.levelParams",
              "name": "thirdLevel",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "level",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "ratio",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SmartPoolManager.levelParams",
              "name": "fourLevel",
              "type": "tuple"
            }
          ],
          "internalType": "struct SmartPoolManager.feeParams",
          "name": "redeemFee",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "level",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "ratio",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SmartPoolManager.levelParams",
              "name": "firstLevel",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "level",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "ratio",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SmartPoolManager.levelParams",
              "name": "secondLevel",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "level",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "ratio",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SmartPoolManager.levelParams",
              "name": "thirdLevel",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "level",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "ratio",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SmartPoolManager.levelParams",
              "name": "fourLevel",
              "type": "tuple"
            }
          ],
          "internalType": "struct SmartPoolManager.feeParams",
          "name": "perfermanceFee",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "kol_token_list",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "kol_totalAmount_list",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "kol_user_info",
      "outputs": [
        {
          "internalType": "address",
          "name": "userAdr",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "manager_claimed_list",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ownerPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "owners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "poolIssueTokenAmount",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenAmount",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "poolIssueTokenList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "poolManagerTokenAmount",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenAmount",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "poolManagerTokenList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "poolPerfermanceTokenAmount",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenAmount",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "poolPerfermanceTokenList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "poolRedeemTokenAmount",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenAmount",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "poolRedeemTokenList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pool_issue_tokenAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pool_issue_tokenList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pool_manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pool_manager_isClaim",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pool_manager_tokenAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pool_manager_tokenList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pool_perfermance_tokenAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pool_perfermance_tokenList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pool_redeem_tokenAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pool_redeem_tokenList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "kol",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "poolTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokensAmount",
          "type": "uint256[]"
        }
      ],
      "name": "recordTokenInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "record_List",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "record_number",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "removeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_ownerPercentage",
          "type": "uint256"
        }
      ],
      "name": "setAddAdminList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "bools",
          "type": "bool"
        }
      ],
      "name": "setBlackList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "setController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adr",
          "type": "address"
        }
      ],
      "name": "setCrpFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "firstLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "secondLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "thirdLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "fourLevel",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SmartPoolManager.feeParams",
              "name": "managerFee",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "firstLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "secondLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "thirdLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "fourLevel",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SmartPoolManager.feeParams",
              "name": "issueFee",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "firstLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "secondLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "thirdLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "fourLevel",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SmartPoolManager.feeParams",
              "name": "redeemFee",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "firstLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "secondLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "thirdLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "fourLevel",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SmartPoolManager.feeParams",
              "name": "perfermanceFee",
              "type": "tuple"
            }
          ],
          "internalType": "struct SmartPoolManager.KolPoolParams",
          "name": "_poolParams",
          "type": "tuple"
        }
      ],
      "name": "setPoolParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adr",
          "type": "address"
        }
      ],
      "name": "setVaultAdr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "total_ratio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "user_index_list",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "user_kol_list",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xc05e3ea1ce577c8cc45a6e5d4198b802235e993c98e7b64f1598026b9326539a",
  "receipt": {
    "to": null,
    "from": "0x595b85b4a418e3b8df897d02f5bd49167d00862f",
    "contractAddress": "0x63de2f72343f2ff63ef399530ed24b29a8349d3c",
    "transactionIndex": "0x8",
    "gasUsed": "0x456e96",
    "logsBloom": "0x
    "blockHash": "0x443ebbbce245811d055a7fea7306e0c80ffc784bb03acd56eb7dcd65ff2bf067",
    "transactionHash": "0xb65b2948ac36b3db54e9ae08fac3809ad2a6fa681c5016c1bca108c1b70d1eb9",
    "logs": [],
    "blockNumber": "0x796950",
    "cumulativeGasUsed": "0x4d5b55",
    "status": "0x1"
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "341113e2dc51548f479e05a10fb81ca7",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"LOGVaultAdr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RemoveAdmin\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"adminClaimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"adminList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allOwnerPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"black_list\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"claimKolReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"claimManagersReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"kol\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"types\",\"type\":\"uint256\"}],\"name\":\"computeReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"types\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"poolTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokensAmount\",\"type\":\"uint256[]\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getAllKolReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getAllManagersReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBNB\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getKolsAdr\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getManagerClaimBool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"bools\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maragerAdr\",\"type\":\"address\"}],\"name\":\"getManagerReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwnerPercentage\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolAllFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"kol\",\"type\":\"address\"}],\"name\":\"getPoolKolTotalAmounts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"kol\",\"type\":\"address\"}],\"name\":\"getPoolKolUserInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"userAdr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"userAmount\",\"type\":\"uint256[]\"}],\"internalType\":\"struct UserVault.kolUserInfo[]\",\"name\":\"info\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getPoolUserKolAdr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolUserList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenList\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maragerAdr\",\"type\":\"address\"}],\"name\":\"getUnManagerReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ownerPercentage\",\"type\":\"uint256[]\"}],\"name\":\"initHandle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"init_totalAmount_list\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isClosePool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"is_set_params\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"kol\",\"type\":\"address\"}],\"name\":\"kolClaimTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"kol\",\"type\":\"address\"}],\"name\":\"kolUnClaimAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"kol_claimed_list\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"kol_pool_params\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"managerFee\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"issueFee\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"redeemFee\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"perfermanceFee\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"kol_token_list\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"kol_totalAmount_list\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"kol_user_info\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"userAdr\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"manager_claimed_list\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"poolIssueTokenAmount\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenAmount\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"poolIssueTokenList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"poolManagerTokenAmount\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenAmount\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"poolManagerTokenList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"poolPerfermanceTokenAmount\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenAmount\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"poolPerfermanceTokenList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"poolRedeemTokenAmount\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenAmount\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"poolRedeemTokenList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool_issue_tokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool_issue_tokenList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pool_manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pool_manager_isClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool_manager_tokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool_manager_tokenList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool_perfermance_tokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool_perfermance_tokenList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool_redeem_tokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool_redeem_tokenList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"kol\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"poolTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokensAmount\",\"type\":\"uint256[]\"}],\"name\":\"recordTokenInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"record_List\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"record_number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ownerPercentage\",\"type\":\"uint256\"}],\"name\":\"setAddAdminList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"bools\",\"type\":\"bool\"}],\"name\":\"setBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setCrpFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"managerFee\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"issueFee\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"redeemFee\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"perfermanceFee\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.KolPoolParams\",\"name\":\"_poolParams\",\"type\":\"tuple\"}],\"name\":\"setPoolParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setVaultAdr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_ratio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"user_index_list\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"user_kol_list\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Desyn Labs\",\"kind\":\"dev\",\"methods\":{\"getController()\":{\"details\":\"external for gas optimization\",\"returns\":{\"_0\":\"address - of the owner (AKA controller)\"}},\"removeOwner(address)\":{\"details\":\"Allows to remove an owner. Transaction has to be sent by wallet.\",\"params\":{\"owner\":\"Address of owner.\"}},\"setAddAdminList(address,uint256)\":{\"details\":\"external for gas optimization\",\"params\":{\"newOwner\":\"- address of new owner\"}},\"setController(address)\":{\"details\":\"external for gas optimization\",\"params\":{\"newOwner\":\"- address of new owner\"}}},\"title\":\"Vault managerFee\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getController()\":{\"notice\":\"Returns the address of the current owner\"},\"setAddAdminList(address,uint256)\":{\"notice\":\"Transfers ownership of the contract to a new account (`newOwner`).         Can only be called by the current owner\"},\"setController(address)\":{\"notice\":\"Transfers ownership of the contract to a new account (`newOwner`).         Can only be called by the current owner\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/deploy/UserVault.sol\":\"UserVault\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"contracts/deploy/UserVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\nlibrary SafeMath {\\n    function add(uint a, uint b) internal pure returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint a, uint b) internal pure returns (uint) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(\\n        uint a,\\n        uint b,\\n        string memory errorMessage\\n    ) internal pure returns (uint) {\\n        require(b <= a, errorMessage);\\n        uint c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint a, uint b) internal pure returns (uint) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint a, uint b) internal pure returns (uint) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(\\n        uint a,\\n        uint b,\\n        string memory errorMessage\\n    ) internal pure returns (uint) {\\n        require(b > 0, errorMessage);\\n        uint c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    function mod(uint a, uint b) internal pure returns (uint) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    function mod(\\n        uint a,\\n        uint b,\\n        string memory errorMessage\\n    ) internal pure returns (uint) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\nlibrary Address {\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            codehash := extcodehash(account)\\n        }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    function sendValue(address payable recipient, uint amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint weiValue,\\n        string memory errorMessage\\n    ) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            if (returndata.length > 0) {\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function addValue(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    } \\n}\\n\\n\\npragma solidity 0.6.12;\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../utils/DesynOwnable.sol\\\";\\nimport \\\"../libraries/SmartPoolManager.sol\\\";\\n// Contracts\\npragma experimental ABIEncoderV2;\\n\\ninterface ICRPPool {\\n    function getController() external view returns (address);\\n   enum Etypes {\\n        OPENED,\\n        CLOSED\\n    }\\n\\n    function etype() external view returns (Etypes);\\n    function isCompletedCollect() external view returns (bool);\\n}\\n\\ninterface IToken {\\n    function decimals() external view returns (uint);\\n}\\n\\ninterface IDesynOwnable {\\n    function adminList(address adr) external view returns (bool);\\n\\n    function getController() external view returns (address);\\n\\n    function getOwners() external view returns (address[] memory);\\n\\n    function getOwnerPercentage() external view returns (uint[] memory);\\n\\n    function allOwnerPercentage() external view returns (uint);\\n}\\n\\ninterface IDSProxy {\\n    function owner() external view returns (address);\\n}\\n\\ninterface ICRPFactory {\\n    function isCrp(address addr) external view returns (bool);\\n}\\n\\n/**\\n * @author Desyn Labs\\n * @title Vault managerFee\\n */\\ncontract UserVault is DesynOwnable {\\n    using SafeMath for uint;\\n    using Address for address;\\n    using EnumerableSet for EnumerableSet.AddressSet; \\n    struct claimTokenInfo {\\n        address token;\\n        uint decimals;\\n        uint amount;\\n    }\\n\\n    modifier onlyVault() {\\n        require(vaultAddress == msg.sender, \\\"ERR_NOT_CONTROLLER\\\");\\n        _;\\n    }\\n\\n    event LOGVaultAdr(address indexed manager, address indexed caller);\\n    struct claimRecordInfo {\\n        uint time;\\n        claimTokenInfo[] tokens;\\n    }\\n    ICRPFactory crpFactory;\\n    //pool=>manager\\n    mapping(address => address) public pool_manager;\\n    //managerFee list\\n    mapping(address => address[]) public pool_manager_tokenList;\\n    mapping(address => uint[]) public pool_manager_tokenAmount;\\n    //issueFee list\\n    mapping(address => address[]) public pool_issue_tokenList;\\n    mapping(address => uint[]) public pool_issue_tokenAmount;\\n    //redeemFee list\\n    mapping(address => address[]) public pool_redeem_tokenList;\\n    mapping(address => uint[]) public pool_redeem_tokenAmount;\\n    //perfermanceFee list\\n    mapping(address => address[]) public pool_perfermance_tokenList;\\n    mapping(address => uint[]) public pool_perfermance_tokenAmount;\\n    //pool isClaim\\n    mapping(address => bool) public pool_manager_isClaim;\\n    mapping(address => bool) public black_list;\\n    //history record\\n    mapping(address => uint) public record_number;\\n    mapping(address => mapping(uint => claimRecordInfo)) public record_List;\\n    // kol list\\n    struct kolUserInfo {\\n        address userAdr;\\n        uint[] userAmount;\\n    }\\n    //pool => tokenList\\n    mapping(address => address[]) public kol_token_list;\\n    //pool => kol[]\\n    mapping(address => EnumerableSet.AddressSet)  kols_list;\\n    //pool => initTotalAmount[]\\n    mapping(address => uint) public init_totalAmount_list;\\n    //pool => manager => uint\\n    mapping(address => mapping(address => uint)) public manager_claimed_list;\\n    //pool => kol =>uint\\n    mapping(address => mapping(address => uint)) public kol_claimed_list;\\n    //pool => kol => totalAmount[]\\n    mapping(address => mapping(address => uint[])) public kol_totalAmount_list;\\n    //pool => user => index\\n    mapping(address => mapping(address => uint)) public user_index_list;\\n    // pool => user => kol\\n    mapping(address => mapping(address => address)) public user_kol_list;\\n    // pool => kol => kolUserInfo[]\\n    mapping(address => mapping(address => kolUserInfo[])) public kol_user_info;\\n    //kol pool params\\n    mapping(address => bool) public is_set_params;\\n    mapping(address => SmartPoolManager.KolPoolParams) public kol_pool_params;\\n    // struct\\n    uint public total_ratio = 100;\\n    //Vault address\\n    address public vaultAddress;\\n\\n    constructor() public {}\\n\\n    receive() external payable {}\\n\\n    function depositToken(\\n        address pool,\\n        uint types,\\n        address[] calldata poolTokens,\\n        uint[] calldata tokensAmount\\n    ) public onlyVault {\\n        require(poolTokens.length == tokensAmount.length, \\\"Token list length is not eequalqu\\\");\\n        if (pool_manager[pool] == address(0)) {\\n            address manager_address = ICRPPool(pool).getController();\\n            pool_manager[pool] = manager_address;\\n        }\\n        (address[] memory _pool_tokenList, uint[] memory _pool_tokenAmount) = createTokenParams(pool, types);\\n        (address[] memory new_pool_tokenList, uint[] memory new_pool_tokenAmount) = communaldepositToken(poolTokens, tokensAmount, pool, _pool_tokenList, _pool_tokenAmount);\\n        setResult(pool, types, new_pool_tokenList, new_pool_tokenAmount);\\n        pool_manager_isClaim[pool] = true;\\n    }\\n\\n    function claimKolReward(address pool) public {\\n        try IVault(vaultAddress).managerClaim(pool) {} catch {}\\n          if(isClosePool(pool)){\\n        require(crpFactory.isCrp(pool), \\\"invalid address\\\");\\n        require(ICRPPool(pool).isCompletedCollect(), \\\"Not CompletedCollect\\\");\\n        uint totalAmount = kolUnClaimAmount(pool, msg.sender);\\n        require(totalAmount > 0, \\\"Not Reward\\\");\\n        kol_claimed_list[pool][msg.sender] += totalAmount;\\n        if (address(msg.sender).isContract()) {\\n            IERC20(kol_token_list[pool][0]).transfer(IDSProxy(msg.sender).owner(), totalAmount);\\n        } else {\\n            IERC20(kol_token_list[pool][0]).transfer(msg.sender, totalAmount);\\n        }\\n          }\\n    }\\n\\n    function claimManagersReward(address pool) public {\\n        try IVault(vaultAddress).managerClaim(pool) {} catch {}\\n        if(isClosePool(pool)){\\n             require(crpFactory.isCrp(pool), \\\"invalid address\\\");\\n        require(ICRPPool(pool).isCompletedCollect(), \\\"Not CompletedCollect\\\");\\n        require(IDesynOwnable(pool).adminList(msg.sender) || IDesynOwnable(pool).getController() == msg.sender, \\\"Not Owner\\\");\\n        uint totalAmount = getUnManagerReward(pool, msg.sender);\\n        require(totalAmount > 0, \\\"Not Reward\\\");\\n        manager_claimed_list[pool][msg.sender] += totalAmount;\\n        if (address(msg.sender).isContract()) {\\n            IERC20(kol_token_list[pool][0]).transfer(IDSProxy(msg.sender).owner(), totalAmount);\\n        } else {\\n            IERC20(kol_token_list[pool][0]).transfer(msg.sender, totalAmount);\\n        }\\n        }  \\n    }\\n\\n        function isClosePool(address pool) public view returns (bool) {\\n        return ICRPPool(pool).etype() == ICRPPool.Etypes.CLOSED;\\n    }\\n\\n    function getUnManagerReward(address pool, address maragerAdr) public view returns (uint) {\\n        return getManagerReward(pool, maragerAdr).sub(manager_claimed_list[pool][maragerAdr]);\\n    }\\n\\n    function getManagerReward(address pool, address maragerAdr) public view returns (uint) {\\n        uint totalAmount = getAllManagersReward(pool);\\n        address[] memory managerAddressList = IDesynOwnable(pool).getOwners();\\n        uint[] memory ownerPercentage = IDesynOwnable(pool).getOwnerPercentage();\\n        uint allOwnerPercentage = IDesynOwnable(pool).allOwnerPercentage();\\n        for (uint k = 0; k < managerAddressList.length; k++) {\\n            if (maragerAdr == managerAddressList[k]) {\\n                return totalAmount.mul(ownerPercentage[k]).div(allOwnerPercentage);\\n            }\\n        }\\n    }\\n\\n    function getAllManagersReward(address pool) public view returns (uint) {\\n        return getPoolAllFee(pool).sub(getAllKolReward(pool));\\n    }\\n\\n    function getPoolAllFee(address pool) public view returns (uint totalAmount) {\\n        totalAmount += pool_manager_tokenAmount[pool].length > 0 ? pool_manager_tokenAmount[pool][0] : 0;\\n        totalAmount += pool_issue_tokenAmount[pool].length > 0 ? pool_issue_tokenAmount[pool][0] : 0;\\n        totalAmount += pool_redeem_tokenAmount[pool].length > 0 ? pool_redeem_tokenAmount[pool][0] : 0;\\n        totalAmount += pool_perfermance_tokenAmount[pool].length > 0 ? pool_perfermance_tokenAmount[pool][0] : 0;\\n    }\\n\\n    function getAllKolReward(address pool) public view returns (uint totalAmount) {\\n        EnumerableSet.AddressSet storage list = kols_list[pool];\\n        uint len = list.length();\\n        for (uint i = 0; i < len; i++) {\\n            totalAmount += kolClaimTotal(pool, list.at(i));\\n        }\\n    }\\n\\n    function kolUnClaimAmount(address pool, address kol) public view returns (uint) {\\n        uint totalClaim = kolClaimTotal(pool, kol);\\n        uint totalClaimed = kol_claimed_list[pool][kol];\\n        return totalClaim.sub(totalClaimed);\\n    }\\n\\n    function kolClaimTotal(address pool, address kol) public view returns (uint) {\\n        uint totalFee;\\n        if (kol_totalAmount_list[pool][kol].length == 0) return totalFee;\\n        totalFee = totalFee.add(computeReward(pool, kol, 0));\\n        totalFee = totalFee.add(computeReward(pool, kol, 1));\\n        totalFee = totalFee.add(computeReward(pool, kol, 2));\\n        totalFee = totalFee.add(computeReward(pool, kol, 3));\\n        totalFee = totalFee.mul(kol_totalAmount_list[pool][kol][0]).div(init_totalAmount_list[pool]);\\n        return totalFee;\\n    }\\n\\n    function computeReward(\\n        address pool,\\n        address kol,\\n        uint types\\n    ) public view returns (uint) {\\n        uint kolTotalAmount = kol_totalAmount_list[pool][kol].length > 0 ? kol_totalAmount_list[pool][kol][0] : 0;\\n        SmartPoolManager.KolPoolParams memory params = kol_pool_params[pool];\\n        uint totalFee;\\n        if (types == 0) {\\n            if (pool_manager_tokenAmount[pool].length > 0) {\\n                totalFee = pool_manager_tokenAmount[pool][0].mul(levelJudge(kolTotalAmount, params.managerFee)).div(total_ratio);\\n            }\\n        } else if (types == 1) {\\n            if (pool_issue_tokenAmount[pool].length > 0) {\\n                totalFee = pool_issue_tokenAmount[pool][0].mul(levelJudge(kolTotalAmount, params.issueFee)).div(total_ratio);\\n            }\\n        } else if (types == 2) {\\n            if (pool_redeem_tokenAmount[pool].length > 0) {\\n                totalFee = pool_redeem_tokenAmount[pool][0].mul(levelJudge(kolTotalAmount, params.redeemFee)).div(total_ratio);\\n            }\\n        } else if (types == 3) {\\n            if (pool_perfermance_tokenAmount[pool].length > 0) {\\n                totalFee = pool_perfermance_tokenAmount[pool][0].mul(levelJudge(kolTotalAmount, params.perfermanceFee)).div(total_ratio);\\n            }\\n        }\\n        return totalFee;\\n    }\\n\\n    function levelJudge(uint amount, SmartPoolManager.feeParams memory _feeParams) internal view returns (uint) {\\n        for (uint i = 0; i < 4; i++) {\\n            if (i == 0) {\\n                if (_feeParams.firstLevel.level <= amount && amount < _feeParams.secondLevel.level) {\\n                    return _feeParams.firstLevel.ratio;\\n                }\\n            }\\n            if (i == 1) {\\n                if (_feeParams.secondLevel.level <= amount && amount < _feeParams.thirdLevel.level) {\\n                    return _feeParams.secondLevel.ratio;\\n                }\\n            }\\n            if (i == 2) {\\n                if (_feeParams.thirdLevel.level <= amount && amount < _feeParams.fourLevel.level) {\\n                    return _feeParams.thirdLevel.ratio;\\n                }\\n            }\\n            if (i == 3) {\\n                if (_feeParams.fourLevel.level <= amount) {\\n                    return _feeParams.fourLevel.ratio;\\n                }\\n            }\\n        }\\n    }\\n\\n    function setResult(\\n        address pool,\\n        uint types,\\n        address[] memory new_pool_tokenList,\\n        uint[] memory new_pool_tokenAmount\\n    ) internal {\\n        if (types == 0) {\\n            pool_manager_tokenList[pool] = new_pool_tokenList;\\n            pool_manager_tokenAmount[pool] = new_pool_tokenAmount;\\n        } else if (types == 1) {\\n            pool_issue_tokenList[pool] = new_pool_tokenList;\\n            pool_issue_tokenAmount[pool] = new_pool_tokenAmount;\\n        } else if (types == 2) {\\n            pool_redeem_tokenList[pool] = new_pool_tokenList;\\n            pool_redeem_tokenAmount[pool] = new_pool_tokenAmount;\\n        } else if (types == 3) {\\n            pool_perfermance_tokenList[pool] = new_pool_tokenList;\\n            pool_perfermance_tokenAmount[pool] = new_pool_tokenAmount;\\n        }\\n    }\\n\\n    function createTokenParams(address pool, uint types) internal view returns (address[] memory _pool_tokenList, uint[] memory _pool_tokenAmount) {\\n        if (types == 0) {\\n            _pool_tokenList = pool_manager_tokenList[pool];\\n            _pool_tokenAmount = pool_manager_tokenAmount[pool];\\n        } else if (types == 1) {\\n            _pool_tokenList = pool_issue_tokenList[pool];\\n            _pool_tokenAmount = pool_issue_tokenAmount[pool];\\n        } else if (types == 2) {\\n            _pool_tokenList = pool_redeem_tokenList[pool];\\n            _pool_tokenAmount = pool_redeem_tokenAmount[pool];\\n        } else if (types == 3) {\\n            _pool_tokenList = pool_perfermance_tokenList[pool];\\n            _pool_tokenAmount = pool_perfermance_tokenAmount[pool];\\n        }\\n    }\\n\\n    function communaldepositToken(\\n        address[] calldata poolTokens,\\n        uint[] calldata tokensAmount,\\n        address poolAdr,\\n        address[] memory _pool_tokenList,\\n        uint[] memory _pool_tokenAmount\\n    ) internal returns (address[] memory new_pool_tokenList, uint[] memory new_pool_tokenAmount) {\\n        //old\\n        //new\\n        new_pool_tokenList = new address[](poolTokens.length);\\n        new_pool_tokenAmount = new uint[](poolTokens.length);\\n        if ((_pool_tokenList.length == _pool_tokenAmount.length && _pool_tokenList.length == 0) || !pool_manager_isClaim[poolAdr]) {\\n            for (uint i = 0; i < poolTokens.length; i++) {\\n                // uint tokenBalance = tokensAmount[i];\\n                new_pool_tokenList[i] = poolTokens[i];\\n                new_pool_tokenAmount[i] = tokensAmount[i];\\n            }\\n        } else {\\n            for (uint k = 0; k < poolTokens.length; k++) {\\n                if (_pool_tokenList[k] == poolTokens[k]) {\\n                    uint tokenBalance = tokensAmount[k];\\n                    new_pool_tokenList[k] = poolTokens[k];\\n                    new_pool_tokenAmount[k] = _pool_tokenAmount[k].add(tokenBalance);\\n                }\\n            }\\n        }\\n        return (new_pool_tokenList, new_pool_tokenAmount);\\n    }\\n\\n    function recordTokenInfo(\\n        address kol,\\n        address user,\\n        address[] calldata poolTokens,\\n        uint[] calldata tokensAmount\\n    ) public {\\n        require(poolTokens.length == tokensAmount.length, \\\"Token list length is not eequalqu\\\");\\n        require(crpFactory.isCrp(msg.sender), \\\"invalid address\\\");\\n        if (kol_token_list[msg.sender].length == 0) {\\n            kol_token_list[msg.sender] = poolTokens;\\n        }\\n        address newKol = user_kol_list[msg.sender][user];\\n        if (user_kol_list[msg.sender][user] == address(0)) {\\n            user_kol_list[msg.sender][user] = kol;\\n            if(!kols_list[msg.sender].contains(kol)){\\n                kols_list[msg.sender].addValue(kol);\\n            }    \\n            newKol = kol;\\n        }\\n        require(newKol != address(0), \\\"kol address is zore\\\");\\n        //total amount record\\n        init_totalAmount_list[msg.sender] = init_totalAmount_list[msg.sender].add(tokensAmount[0]);\\n        uint[] memory totalAmounts = new uint[](poolTokens.length);\\n        for (uint i = 0; i < poolTokens.length; i++) {\\n            if (kol_totalAmount_list[msg.sender][newKol].length == 0) {\\n                totalAmounts[i] = tokensAmount[i];\\n            } else {\\n                totalAmounts[i] = tokensAmount[i].add(kol_totalAmount_list[msg.sender][newKol][i]);\\n            }\\n        }\\n        kol_totalAmount_list[msg.sender][newKol] = totalAmounts;\\n        //kol user info record\\n        kolUserInfo[] storage userInfoArray = kol_user_info[msg.sender][newKol];\\n        uint index = user_index_list[msg.sender][user];\\n        if (index == 0) {\\n            kolUserInfo memory userInfo;\\n            userInfo.userAdr = user;\\n            userInfo.userAmount = tokensAmount;\\n            userInfoArray.push(userInfo);\\n            user_index_list[msg.sender][user] = userInfoArray.length;\\n        } else {\\n            kolUserInfo storage userInfo = kol_user_info[msg.sender][newKol][index - 1];\\n            for (uint a = 0; a < userInfo.userAmount.length; a++) {\\n                userInfo.userAmount[a] = userInfo.userAmount[a].add(tokensAmount[a]);\\n            }\\n        }\\n    }\\n\\n    function setPoolParams(address pool, SmartPoolManager.KolPoolParams memory _poolParams) public {\\n        require(crpFactory.isCrp(pool), \\\"invalid address\\\");\\n        require(!is_set_params[pool], \\\"Params is seted\\\");\\n        is_set_params[pool] = true;\\n        kol_pool_params[pool] = _poolParams;\\n    }\\n\\n    function getKolsAdr(address pool) public view returns (address[] memory) {\\n        return kols_list[pool].values();\\n    }\\n\\n    function getPoolUserList(address pool) public view returns (address[] memory tokenList) {\\n        return kol_token_list[pool];\\n    }\\n\\n    function getPoolUserKolAdr(address pool, address user) public view returns (address tokenAddress) {\\n        return user_kol_list[pool][user];\\n    }\\n\\n    function getPoolKolUserInfo(address pool, address kol) public view returns (kolUserInfo[] memory info) {\\n        return kol_user_info[pool][kol];\\n    }\\n\\n    function getPoolKolTotalAmounts(address pool, address kol) public view returns (uint[] memory) {\\n        return kol_totalAmount_list[pool][kol];\\n    }\\n\\n    function poolManagerTokenList(address pool) public view returns (address[] memory tokens) {\\n        return pool_manager_tokenList[pool];\\n    }\\n\\n    function poolManagerTokenAmount(address pool) public view returns (uint[] memory tokenAmount) {\\n        return pool_manager_tokenAmount[pool];\\n    }\\n\\n    function poolIssueTokenList(address pool) public view returns (address[] memory tokens) {\\n        return pool_issue_tokenList[pool];\\n    }\\n\\n    function poolRedeemTokenList(address pool) public view returns (address[] memory tokens) {\\n        return pool_redeem_tokenList[pool];\\n    }\\n\\n    function poolIssueTokenAmount(address pool) public view returns (uint[] memory tokenAmount) {\\n        return pool_issue_tokenAmount[pool];\\n    }\\n\\n    function poolRedeemTokenAmount(address pool) public view returns (uint[] memory tokenAmount) {\\n        return pool_redeem_tokenAmount[pool];\\n    }\\n\\n    function poolPerfermanceTokenList(address pool) public view returns (address[] memory tokens) {\\n        return pool_perfermance_tokenList[pool];\\n    }\\n\\n    function poolPerfermanceTokenAmount(address pool) public view returns (uint[] memory tokenAmount) {\\n        return pool_perfermance_tokenAmount[pool];\\n    }\\n\\n    function getManagerClaimBool(address pool) public view returns (bool bools) {\\n        bools = pool_manager_isClaim[pool];\\n    }\\n\\n    function setBlackList(address pool, bool bools) public onlyOwner {\\n        black_list[pool] = bools;\\n    }\\n\\n    function setCrpFactory(address adr) public onlyOwner {\\n        crpFactory = ICRPFactory(adr);\\n    }\\n\\n    function adminClaimToken(\\n        address token,\\n        address user,\\n        uint amount\\n    ) public onlyOwner {\\n        IERC20(token).transfer(user, amount);\\n    }\\n\\n    function getBNB() public payable onlyOwner {\\n        msg.sender.transfer(address(this).balance);\\n    }\\n\\n    function setVaultAdr(address adr) public onlyOwner {\\n        require(adr != address(0), \\\"Address is Zero\\\");\\n        vaultAddress = adr;\\n        emit LOGVaultAdr(adr, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0xae698ee255f7bd183c7fe53c52fb6638347e3abc0a4399f771ab0ff9c0bd33a9\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IBFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\nimport \\\"../libraries/SmartPoolManager.sol\\\";\\n\\ninterface IBPool {\\n    function rebind(\\n        address token,\\n        uint balance,\\n        uint denorm\\n    ) external;\\n\\n    function rebindSmart(\\n        address tokenA,\\n        address tokenB,\\n        uint deltaWeight,\\n        uint deltaBalance,\\n        bool isSoldout,\\n        uint minAmountOut\\n    ) external;\\n\\n    function execute(\\n        address _target,\\n        uint _value,\\n        bytes calldata _data\\n    ) external returns (bytes memory _returnValue);\\n\\n    function bind(\\n        address token,\\n        uint balance,\\n        uint denorm\\n    ) external;\\n\\n    function unbind(address token) external;\\n\\n    function unbindPure(address token) external;\\n\\n    function isBound(address token) external view returns (bool);\\n\\n    function getBalance(address token) external view returns (uint);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function getSwapFee() external view returns (uint);\\n\\n    function isPublicSwap() external view returns (bool);\\n\\n    function getDenormalizedWeight(address token) external view returns (uint);\\n\\n    function getTotalDenormalizedWeight() external view returns (uint);\\n\\n    function EXIT_FEE() external view returns (uint);\\n\\n    function getCurrentTokens() external view returns (address[] memory tokens);\\n\\n    function setController(address owner) external;\\n}\\n\\ninterface IBFactory {\\n    function newLiquidityPool() external returns (IBPool);\\n\\n    function setBLabs(address b) external;\\n\\n    function collect(IBPool pool) external;\\n\\n    function isBPool(address b) external view returns (bool);\\n\\n    function getBLabs() external view returns (address);\\n\\n    function getSwapRouter() external view returns (address);\\n\\n    function getVault() external view returns (address);\\n\\n    function getUserVault() external view returns (address);\\n\\n    function getVaultAddress() external view returns (address);\\n\\n    function getOracleAddress() external view returns (address);\\n\\n    function getManagerOwner() external view returns (address);\\n\\n    function isTokenWhitelistedForVerify(uint sort, address token) external view returns (bool);\\n\\n    function isTokenWhitelistedForVerify(address token) external view returns (bool);\\n\\n    function getModuleStatus(address etf, address module) external view returns (bool);\\n}\\n\\ninterface IVault {\\n    function depositManagerToken(address[] calldata poolTokens, uint[] calldata tokensAmount) external;\\n\\n    function depositIssueRedeemPToken(\\n        address[] calldata poolTokens,\\n        uint[] calldata tokensAmount,\\n        uint[] calldata tokensAmountP,\\n        bool isPerfermance\\n    ) external;\\n\\n    function managerClaim(address pool) external;\\n\\n    function getManagerClaimBool(address pool) external view returns (bool);\\n}\\n\\ninterface IUserVault {\\n    function recordTokenInfo(\\n        address kol,\\n        address user,\\n        address[] calldata poolTokens,\\n        uint[] calldata tokensAmount\\n    ) external;\\n}\\n\\ninterface Oracles {\\n    function getPrice(address tokenAddress) external returns (uint price);\\n\\n    function getAllPrice(address[] calldata poolTokens, uint[] calldata tokensAmount) external returns (uint);\\n}\\n\",\"keccak256\":\"0x13c400ca7a5f59c8730f553fcf189c14af0c0d65a79012793cbde56ce221a419\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IConfigurableRightsPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Interface declarations\\n\\n// Introduce to avoid circularity (otherwise, the CRP and SmartPoolManager include each other)\\n// Removing circularity allows flattener tools to work, which enables Etherscan verification\\ninterface IConfigurableRightsPool {\\n    function mintPoolShareFromLib(uint amount) external;\\n\\n    function pushPoolShareFromLib(address to, uint amount) external;\\n\\n    function pullPoolShareFromLib(address from, uint amount) external;\\n\\n    function burnPoolShareFromLib(uint amount) external;\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function getController() external view returns (address);\\n}\\n\",\"keccak256\":\"0x54defbc333ab8f90c4fe352c694c360cc38fd707606199caf05fc165a64da788\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Interface declarations\\n\\n/* solhint-disable func-order */\\n\\ninterface IERC20 {\\n    // Emitted when the allowance of a spender for an owner is set by a call to approve.\\n    // Value is the new allowance\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n\\n    // Emitted when value tokens are moved from one account (from) to another (to).\\n    // Note that value may be zero\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    // Returns the amount of tokens in existence\\n    function totalSupply() external view returns (uint);\\n\\n    // Returns the amount of tokens owned by account\\n    function balanceOf(address account) external view returns (uint);\\n\\n    // Returns the decimals of tokens\\n    function decimals() external view returns (uint8);\\n\\n    function symbol() external view returns (string memory);\\n\\n    // Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner\\n    // through transferFrom. This is zero by default\\n    // This value changes when approve or transferFrom are called\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    // Sets amount as the allowance of spender over the caller\\u2019s tokens\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits an Approval event.\\n    function approve(address spender, uint amount) external returns (bool);\\n\\n    // Moves amount tokens from the caller\\u2019s account to recipient\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits a Transfer event.\\n    function transfer(address recipient, uint amount) external returns (bool);\\n\\n    // Moves amount tokens from sender to recipient using the allowance mechanism\\n    // Amount is then deducted from the caller\\u2019s allowance\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits a Transfer event\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xfe22b6d6029b400b9cce7f9b39c546f99cd6922b2fd926e480e2b4d476ab26f8\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/DesynConstants.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n/**\\n * @author Desyn Labs\\n * @title Put all the constants in one place\\n */\\n\\nlibrary DesynConstants {\\n    // State variables (must be constant in a library)\\n\\n    // B \\\"ONE\\\" - all math is in the \\\"realm\\\" of 10 ** 18;\\n    // where numeric 1 = 10 ** 18\\n    uint public constant BONE = 10**18;\\n    uint public constant MIN_WEIGHT = BONE;\\n    uint public constant MAX_WEIGHT = BONE * 50;\\n    uint public constant MAX_TOTAL_WEIGHT = BONE * 50;\\n    uint public constant MIN_BALANCE = BONE / 10**6;\\n    uint public constant MAX_BALANCE = BONE * 10**12;\\n    uint public constant MIN_POOL_SUPPLY = BONE * 100;\\n    uint public constant MAX_POOL_SUPPLY = BONE * 10**9;\\n    uint public constant MIN_FEE = BONE / 10**6;\\n    uint public constant MAX_FEE = BONE / 10;\\n    //Fee Set\\n    uint public constant MANAGER_MIN_FEE = 0;\\n    uint public constant MANAGER_MAX_FEE = BONE / 10;\\n    uint public constant ISSUE_MIN_FEE = 0;\\n    uint public constant ISSUE_MAX_FEE = BONE / 10;\\n    uint public constant REDEEM_MIN_FEE = 0;\\n    uint public constant REDEEM_MAX_FEE = BONE / 10;\\n    uint public constant PERFERMANCE_MIN_FEE = 0;\\n    uint public constant PERFERMANCE_MAX_FEE = BONE / 2;\\n    // EXIT_FEE must always be zero, or ConfigurableRightsPool._pushUnderlying will fail\\n    uint public constant EXIT_FEE = 0;\\n    uint public constant MAX_IN_RATIO = BONE / 2;\\n    uint public constant MAX_OUT_RATIO = (BONE / 3) + 1 wei;\\n    // Must match BConst.MIN_BOUND_TOKENS and BConst.MAX_BOUND_TOKENS\\n    uint public constant MIN_ASSET_LIMIT = 1;\\n    uint public constant MAX_ASSET_LIMIT = 16;\\n    uint public constant MAX_UINT = uint(-1);\\n    uint public constant MAX_COLLECT_PERIOD = 60 days;\\n}\\n\",\"keccak256\":\"0x7980d0f32316714804b3fa02faa0f450ce206920e5538a27921b5de4e85de737\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/DesynSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Imports\\n\\nimport \\\"./DesynConstants.sol\\\";\\n\\n/**\\n * @author Desyn Labs\\n * @title SafeMath - wrap Solidity operators to prevent underflow/overflow\\n * @dev badd and bsub are basically identical to OpenZeppelin SafeMath; mul/div have extra checks\\n */\\nlibrary DesynSafeMath {\\n    /**\\n     * @notice Safe addition\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev if we are adding b to a, the resulting sum must be greater than a\\n     * @return - sum of operands; throws if overflow\\n     */\\n    function badd(uint a, uint b) internal pure returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, \\\"ERR_ADD_OVERFLOW\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned subtraction\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Do a signed subtraction, and check that it produces a positive value\\n     *      (i.e., a - b is valid if b <= a)\\n     * @return - a - b; throws if underflow\\n     */\\n    function bsub(uint a, uint b) internal pure returns (uint) {\\n        (uint c, bool negativeResult) = bsubSign(a, b);\\n        require(!negativeResult, \\\"ERR_SUB_UNDERFLOW\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Safe signed subtraction\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Do a signed subtraction\\n     * @return - difference between a and b, and a flag indicating a negative result\\n     *           (i.e., a - b if a is greater than or equal to b; otherwise b - a)\\n     */\\n    function bsubSign(uint a, uint b) internal pure returns (uint, bool) {\\n        if (b <= a) {\\n            return (a - b, false);\\n        } else {\\n            return (b - a, true);\\n        }\\n    }\\n\\n    /**\\n     * @notice Safe multiplication\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Multiply safely (and efficiently), rounding down\\n     * @return - product of operands; throws if overflow or rounding error\\n     */\\n    function bmul(uint a, uint b) internal pure returns (uint) {\\n        // Gas optimization (see github.com/OpenZeppelin/openzeppelin-contracts/pull/522)\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // Standard overflow check: a/a*b=b\\n        uint c0 = a * b;\\n        require(c0 / a == b, \\\"ERR_MUL_OVERFLOW\\\");\\n\\n        // Round to 0 if x*y < BONE/2?\\n        uint c1 = c0 + (DesynConstants.BONE / 2);\\n        require(c1 >= c0, \\\"ERR_MUL_OVERFLOW\\\");\\n        uint c2 = c1 / DesynConstants.BONE;\\n        return c2;\\n    }\\n\\n    /**\\n     * @notice Safe division\\n     * @param dividend - first operand\\n     * @param divisor - second operand\\n     * @dev Divide safely (and efficiently), rounding down\\n     * @return - quotient; throws if overflow or rounding error\\n     */\\n    function bdiv(uint dividend, uint divisor) internal pure returns (uint) {\\n        require(divisor != 0, \\\"ERR_DIV_ZERO\\\");\\n\\n        // Gas optimization\\n        if (dividend == 0) {\\n            return 0;\\n        }\\n\\n        uint c0 = dividend * DesynConstants.BONE;\\n        require(c0 / dividend == DesynConstants.BONE, \\\"ERR_DIV_INTERNAL\\\"); // bmul overflow\\n\\n        uint c1 = c0 + (divisor / 2);\\n        require(c1 >= c0, \\\"ERR_DIV_INTERNAL\\\"); //  badd require\\n\\n        uint c2 = c1 / divisor;\\n        return c2;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer modulo\\n     * @dev Returns the remainder of dividing two unsigned integers.\\n     *      Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * @param dividend - first operand\\n     * @param divisor - second operand -- cannot be zero\\n     * @return - quotient; throws if overflow or rounding error\\n     */\\n    function bmod(uint dividend, uint divisor) internal pure returns (uint) {\\n        require(divisor != 0, \\\"ERR_MODULO_BY_ZERO\\\");\\n\\n        return dividend % divisor;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer max\\n     * @dev Returns the greater of the two input values\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the maximum of a and b\\n     */\\n    function bmax(uint a, uint b) internal pure returns (uint) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer min\\n     * @dev returns b, if b < a; otherwise returns a\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the lesser of the two input values\\n     */\\n    function bmin(uint a, uint b) internal pure returns (uint) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer average\\n     * @dev Guard against (a+b) overflow by dividing each operand separately\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the average of the two values\\n     */\\n    function baverage(uint a, uint b) internal pure returns (uint) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\\n    }\\n\\n    /**\\n     * @notice Babylonian square root implementation\\n     * @dev (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n     * @param y - operand\\n     * @return z - the square root result\\n     */\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9baf30b98a5f3a8c13ac9c4d5d4b176eabfd936aba8f5172c95b7c568fba68f3\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/SafeApprove.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Imports\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n// Libraries\\n\\n/**\\n * @author PieDAO (ported to Desyn Labs)\\n * @title SafeApprove - set approval for tokens that require 0 prior approval\\n * @dev Perhaps to address the known ERC20 race condition issue\\n *      See https://github.com/crytic/not-so-smart-contracts/tree/master/race_condition\\n *      Some tokens - notably KNC - only allow approvals to be increased from 0\\n */\\nlibrary SafeApprove {\\n    /**\\n     * @notice handle approvals of tokens that require approving from a base of 0\\n     * @param token - the token we're approving\\n     * @param spender - entity the owner (sender) is approving to spend his tokens\\n     * @param amount - number of tokens being approved\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint amount\\n    ) internal returns (bool) {\\n        uint currentAllowance = token.allowance(address(this), spender);\\n\\n        // Do nothing if allowance is already set to this value\\n        if (currentAllowance == amount) {\\n            return true;\\n        }\\n\\n        // If approval is not zero reset it to zero first\\n        if (currentAllowance != 0) {\\n            token.approve(spender, 0);\\n        }\\n\\n        // do the actual approval\\n        return token.approve(spender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xa51ebf770f2676085b89b1636688cc086289cfe27f614dfd0c15142535c26752\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/SmartPoolManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Needed to pass in structs\\npragma experimental ABIEncoderV2;\\n\\n// Imports\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IConfigurableRightsPool.sol\\\";\\nimport \\\"../interfaces/IBFactory.sol\\\"; // unused\\nimport \\\"./DesynSafeMath.sol\\\"; // unused\\nimport \\\"./SafeApprove.sol\\\";\\n\\n/**\\n * @author Desyn Labs\\n * @title Factor out the weight updates\\n */\\nlibrary SmartPoolManager {\\n    //kol pool params\\n    struct levelParams {\\n        uint level;\\n        uint ratio;\\n    }\\n\\n    struct feeParams {\\n        levelParams firstLevel;\\n        levelParams secondLevel;\\n        levelParams thirdLevel;\\n        levelParams fourLevel;\\n    }\\n    struct KolPoolParams {\\n        feeParams managerFee;\\n        feeParams issueFee;\\n        feeParams redeemFee;\\n        feeParams perfermanceFee;\\n    }\\n\\n    // Type declarations\\n    enum Etypes {\\n        OPENED,\\n        CLOSED\\n    }\\n\\n    enum Period {\\n        HALF,\\n        ONE,\\n        TWO\\n    }\\n\\n    // updateWeight and pokeWeights are unavoidably long\\n    /* solhint-disable function-max-lines */\\n    struct Status {\\n        uint collectPeriod;\\n        uint collectEndTime;\\n        uint closurePeriod;\\n        uint closureEndTime;\\n        uint upperCap;\\n        uint floorCap;\\n        uint managerFee;\\n        uint redeemFee;\\n        uint issueFee;\\n        uint perfermanceFee;\\n        uint startClaimFeeTime;\\n    }\\n\\n    struct PoolParams {\\n        // Desyn Pool Token (representing shares of the pool)\\n        string poolTokenSymbol;\\n        string poolTokenName;\\n        // Tokens inside the Pool\\n        address[] constituentTokens;\\n        uint[] tokenBalances;\\n        uint[] tokenWeights;\\n        uint swapFee;\\n        uint managerFee;\\n        uint redeemFee;\\n        uint issueFee;\\n        uint perfermanceFee;\\n        Etypes etype;\\n    }\\n\\n    struct PoolTokenRange {\\n        uint bspFloor;\\n        uint bspCap;\\n    }\\n\\n    struct Fund {\\n        uint etfAmount;\\n        uint fundAmount;\\n    }\\n\\n    function initRequire(\\n        uint swapFee,\\n        uint managerFee,\\n        uint issueFee,\\n        uint redeemFee,\\n        uint perfermanceFee,\\n        uint tokenBalancesLength,\\n        uint tokenWeightsLength,\\n        uint constituentTokensLength,\\n        bool initBool\\n    ) external pure {\\n        // We don't have a pool yet; check now or it will fail later (in order of likelihood to fail)\\n        // (and be unrecoverable if they don't have permission set to change it)\\n        // Most likely to fail, so check first\\n        require(!initBool, \\\"Init fail\\\");\\n        require(swapFee >= DesynConstants.MIN_FEE, \\\"ERR_INVALID_SWAP_FEE\\\");\\n        require(swapFee <= DesynConstants.MAX_FEE, \\\"ERR_INVALID_SWAP_FEE\\\");\\n        require(managerFee >= DesynConstants.MANAGER_MIN_FEE, \\\"ERR_INVALID_MANAGER_FEE\\\");\\n        require(managerFee <= DesynConstants.MANAGER_MAX_FEE, \\\"ERR_INVALID_MANAGER_FEE\\\");\\n        require(issueFee >= DesynConstants.ISSUE_MIN_FEE, \\\"ERR_INVALID_ISSUE_MIN_FEE\\\");\\n        require(issueFee <= DesynConstants.ISSUE_MAX_FEE, \\\"ERR_INVALID_ISSUE_MAX_FEE\\\");\\n        require(redeemFee >= DesynConstants.REDEEM_MIN_FEE, \\\"ERR_INVALID_REDEEM_MIN_FEE\\\");\\n        require(redeemFee <= DesynConstants.REDEEM_MAX_FEE, \\\"ERR_INVALID_REDEEM_MAX_FEE\\\");\\n        require(perfermanceFee >= DesynConstants.PERFERMANCE_MIN_FEE, \\\"ERR_INVALID_PERFERMANCE_MIN_FEE\\\");\\n        require(perfermanceFee <= DesynConstants.PERFERMANCE_MAX_FEE, \\\"ERR_INVALID_PERFERMANCE_MAX_FEE\\\");\\n\\n        // Arrays must be parallel\\n        require(tokenBalancesLength == constituentTokensLength, \\\"ERR_START_BALANCES_MISMATCH\\\");\\n        require(tokenWeightsLength == constituentTokensLength, \\\"ERR_START_WEIGHTS_MISMATCH\\\");\\n        // Cannot have too many or too few - technically redundant, since BPool.bind() would fail later\\n        // But if we don't check now, we could have a useless contract with no way to create a pool\\n\\n        require(constituentTokensLength >= DesynConstants.MIN_ASSET_LIMIT, \\\"ERR_TOO_FEW_TOKENS\\\");\\n        require(constituentTokensLength <= DesynConstants.MAX_ASSET_LIMIT, \\\"ERR_TOO_MANY_TOKENS\\\");\\n        // There are further possible checks (e.g., if they use the same token twice), but\\n        // we can let bind() catch things like that (i.e., not things that might reasonably work)\\n    }\\n\\n    /**\\n     * @notice Update the weight of an existing token\\n     * @dev Refactored to library to make CRPFactory deployable\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param tokenA - token to sell\\n     * @param tokenB - token to buy\\n     */\\n    function rebalance(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address tokenA,\\n        address tokenB,\\n        uint deltaWeight,\\n        uint minAmountOut\\n    ) external {\\n        uint currentWeightA = bPool.getDenormalizedWeight(tokenA);\\n        uint currentBalanceA = bPool.getBalance(tokenA);\\n        // uint currentWeightB = bPool.getDenormalizedWeight(tokenB);\\n\\n        require(deltaWeight <= currentWeightA, \\\"ERR_DELTA_WEIGHT_TOO_BIG\\\");\\n\\n        // deltaBalance = currentBalance * (deltaWeight / currentWeight)\\n        uint deltaBalanceA = DesynSafeMath.bmul(currentBalanceA, DesynSafeMath.bdiv(deltaWeight, currentWeightA));\\n\\n        // uint currentBalanceB = bPool.getBalance(tokenB);\\n\\n        // uint deltaWeight = DesynSafeMath.bsub(newWeight, currentWeightA);\\n\\n        // uint newWeightB = DesynSafeMath.bsub(currentWeightB, deltaWeight);\\n        // require(newWeightB >= 0, \\\"ERR_INCORRECT_WEIGHT_B\\\");\\n        bool soldout;\\n        if (deltaWeight == currentWeightA) {\\n            // reduct token A\\n            bPool.unbindPure(tokenA);\\n            soldout = true;\\n        }\\n\\n        // Now with the tokens this contract can bind them to the pool it controls\\n        bPool.rebindSmart(tokenA, tokenB, deltaWeight, deltaBalanceA, soldout, minAmountOut);\\n    }\\n\\n    /**\\n     * @notice Non ERC20-conforming tokens are problematic; don't allow them in pools\\n     * @dev Will revert if invalid\\n     * @param token - The prospective token to verify\\n     */\\n    function verifyTokenCompliance(address token) external {\\n        verifyTokenComplianceInternal(token);\\n    }\\n\\n    /**\\n     * @notice Non ERC20-conforming tokens are problematic; don't allow them in pools\\n     * @dev Will revert if invalid - overloaded to save space in the main contract\\n     * @param tokens - The prospective tokens to verify\\n     */\\n    function verifyTokenCompliance(address[] calldata tokens) external {\\n        for (uint i = 0; i < tokens.length; i++) {\\n            verifyTokenComplianceInternal(tokens[i]);\\n        }\\n    }\\n\\n    function createPoolInternalHandle(IBPool bPool, uint initialSupply) external view {\\n        require(initialSupply >= DesynConstants.MIN_POOL_SUPPLY, \\\"ERR_INIT_SUPPLY_MIN\\\");\\n        require(initialSupply <= DesynConstants.MAX_POOL_SUPPLY, \\\"ERR_INIT_SUPPLY_MAX\\\");\\n        require(bPool.EXIT_FEE() == 0, \\\"ERR_NONZERO_EXIT_FEE\\\");\\n        // EXIT_FEE must always be zero, or ConfigurableRightsPool._pushUnderlying will fail\\n        require(DesynConstants.EXIT_FEE == 0, \\\"ERR_NONZERO_EXIT_FEE\\\");\\n    }\\n\\n    function createPoolHandle(\\n        uint collectPeriod,\\n        uint upperCap,\\n        uint initialSupply\\n    ) external pure {\\n        require(collectPeriod <= DesynConstants.MAX_COLLECT_PERIOD, \\\"ERR_EXCEEDS_FUND_RAISING_PERIOD\\\");\\n        require(upperCap >= initialSupply, \\\"ERR_CAP_BIGGER_THAN_INITSUPPLY\\\");\\n        // collectEndTime = block.timestamp + collectPeriod;\\n        // if (boolA) {\\n        //     period = 1 seconds; // for test only\\n        // } else if (boolB) {\\n        //     period = 365 days;\\n        // } else {\\n        //     period = 730 days;\\n        // }\\n        // closureEndTime = period + collectEndTime;\\n    }\\n\\n    function exitPoolHandle(\\n        uint _endEtfAmount,\\n        uint _endFundAmount,\\n        uint _beginEtfAmount,\\n        uint _beginFundAmount,\\n        uint poolAmountIn,\\n        uint totalEnd\\n    )\\n        external\\n        pure\\n        returns (\\n            uint endEtfAmount,\\n            uint endFundAmount,\\n            uint profitRate\\n        )\\n    {\\n        endEtfAmount = DesynSafeMath.badd(_endEtfAmount, poolAmountIn);\\n        endFundAmount = DesynSafeMath.badd(_endFundAmount, totalEnd);\\n        uint amount1 = DesynSafeMath.bdiv(endFundAmount, endEtfAmount);\\n        uint amount2 = DesynSafeMath.bdiv(_beginFundAmount, _beginEtfAmount);\\n        if (amount1 > amount2) {\\n            profitRate = DesynSafeMath.bdiv(\\n                DesynSafeMath.bmul(DesynSafeMath.bsub(DesynSafeMath.bdiv(endFundAmount, endEtfAmount), DesynSafeMath.bdiv(_beginFundAmount, _beginEtfAmount)), poolAmountIn),\\n                totalEnd\\n            );\\n        }\\n    }\\n\\n    function exitPoolHandleA(\\n        uint _tokenAmountOut,\\n        uint redeemFee,\\n        uint profitRate,\\n        uint perfermanceFee\\n    )\\n        external\\n        pure\\n        returns (\\n            uint tokenAmountOutNew,\\n            uint amount,\\n            uint tokensAmountRedeem\\n        )\\n    {\\n        uint tokenAmountOut = _tokenAmountOut;\\n        tokenAmountOutNew = DesynSafeMath.bmul(tokenAmountOut, redeemFee);\\n        tokensAmountRedeem = tokenAmountOutNew;\\n        tokenAmountOutNew = DesynSafeMath.badd(DesynSafeMath.bmul(DesynSafeMath.bmul(tokenAmountOut, profitRate), perfermanceFee), tokenAmountOutNew);\\n        amount = DesynSafeMath.bsub(tokenAmountOut, tokenAmountOutNew);\\n    }\\n\\n    function exitPoolHandleB(\\n        bool bools,\\n        bool isCompletedCollect,\\n        uint closureEndTime,\\n        uint collectEndTime,\\n        uint _etfAmount,\\n        uint _fundAmount,\\n        uint poolAmountIn\\n    ) external view returns (uint etfAmount, uint fundAmount) {\\n        if (bools) {\\n            bool isCloseEtfCollectEndWithFailure = isCompletedCollect == false && block.timestamp >= collectEndTime;\\n            bool isCloseEtfClosureEnd = block.timestamp >= closureEndTime;\\n            require(isCloseEtfCollectEndWithFailure || isCloseEtfClosureEnd, \\\"ERR_CLOSURE_TIME_NOT_ARRIVED!\\\");\\n        }\\n        fundAmount = _fundAmount;\\n        etfAmount = _etfAmount;\\n        if (bools && block.timestamp <= collectEndTime) {\\n            fundAmount = DesynSafeMath.bmul(DesynSafeMath.bdiv(DesynSafeMath.bsub(_etfAmount, poolAmountIn), _etfAmount), _fundAmount);\\n            etfAmount = DesynSafeMath.bsub(_etfAmount, poolAmountIn);\\n        }\\n    }\\n\\n    function joinPoolHandle(\\n        bool canWhitelistLPs,\\n        bool isList,\\n        bool bools,\\n        uint collectEndTime\\n    ) external view {\\n        require(!canWhitelistLPs || isList, \\\"ERR_NOT_ON_WHITELIST\\\");\\n\\n        if (bools) {\\n            require(block.timestamp <= collectEndTime, \\\"ERR_COLLECT_PERIOD_FINISHED!\\\");\\n        }\\n    }\\n\\n    function rebalanceHandle(\\n        bool bools,\\n        uint collectEndTime,\\n        uint closureEndTime,\\n        bool canChangeWeights,\\n        address tokenA,\\n        address tokenB\\n    ) external view {\\n        if (bools) {\\n            require(block.timestamp > collectEndTime && block.timestamp < closureEndTime, \\\"ERR_NOT_REBALANCE_PERIOD\\\");\\n        }\\n\\n        require(canChangeWeights, \\\"ERR_NOT_CONFIGURABLE_WEIGHTS\\\");\\n        require(tokenA != tokenB, \\\"ERR_TOKENS_SAME\\\");\\n    }\\n\\n    /**\\n     * @notice Join a pool\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param poolAmountOut - number of pool tokens to receive\\n     * @param maxAmountsIn - Max amount of asset tokens to spend\\n     * @return actualAmountsIn - calculated values of the tokens to pull in\\n     */\\n    function joinPool(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        uint poolAmountOut,\\n        uint[] calldata maxAmountsIn\\n    ) external view returns (uint[] memory actualAmountsIn) {\\n        address[] memory tokens = bPool.getCurrentTokens();\\n\\n        require(maxAmountsIn.length == tokens.length, \\\"ERR_AMOUNTS_MISMATCH\\\");\\n\\n        uint poolTotal = self.totalSupply();\\n        // Subtract  1 to ensure any rounding errors favor the pool\\n        uint ratio = DesynSafeMath.bdiv(poolAmountOut, DesynSafeMath.bsub(poolTotal, 1));\\n\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        // We know the length of the array; initialize it, and fill it below\\n        // Cannot do \\\"push\\\" in memory\\n        actualAmountsIn = new uint[](tokens.length);\\n\\n        // This loop contains external calls\\n        // External calls are to math libraries or the underlying pool, so low risk\\n        for (uint i = 0; i < tokens.length; i++) {\\n            address t = tokens[i];\\n            uint bal = bPool.getBalance(t);\\n            // Add 1 to ensure any rounding errors favor the pool\\n            uint tokenAmountIn = DesynSafeMath.bmul(ratio, DesynSafeMath.badd(bal, 1));\\n\\n            require(tokenAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountIn <= maxAmountsIn[i], \\\"ERR_LIMIT_IN\\\");\\n\\n            actualAmountsIn[i] = tokenAmountIn;\\n        }\\n    }\\n\\n    /**\\n     * @notice Exit a pool - redeem pool tokens for underlying assets\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param poolAmountIn - amount of pool tokens to redeem\\n     * @param minAmountsOut - minimum amount of asset tokens to receive\\n     * @return pAiAfterExitFee - final amount in (after accounting for exit fee)\\n     * @return actualAmountsOut - calculated amounts of each token to pull\\n     */\\n    function exitPool(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        uint poolAmountIn,\\n        uint[] calldata minAmountsOut\\n    ) external view returns (uint pAiAfterExitFee, uint[] memory actualAmountsOut) {\\n        address[] memory tokens = bPool.getCurrentTokens();\\n\\n        require(minAmountsOut.length == tokens.length, \\\"ERR_AMOUNTS_MISMATCH\\\");\\n\\n        uint poolTotal = self.totalSupply();\\n\\n        // Calculate exit fee and the final amount in\\n        pAiAfterExitFee = DesynSafeMath.bsub(poolAmountIn, 0);\\n\\n        uint ratio = DesynSafeMath.bdiv(pAiAfterExitFee, DesynSafeMath.badd(poolTotal, 1));\\n\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        actualAmountsOut = new uint[](tokens.length);\\n\\n        // This loop contains external calls\\n        // External calls are to math libraries or the underlying pool, so low risk\\n        for (uint i = 0; i < tokens.length; i++) {\\n            address t = tokens[i];\\n            uint bal = bPool.getBalance(t);\\n            // Subtract 1 to ensure any rounding errors favor the pool\\n            uint tokenAmountOut = DesynSafeMath.bmul(ratio, DesynSafeMath.bsub(bal, 1));\\n\\n            require(tokenAmountOut != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountOut >= minAmountsOut[i], \\\"ERR_LIMIT_OUT\\\");\\n\\n            actualAmountsOut[i] = tokenAmountOut;\\n        }\\n    }\\n\\n    // Internal functions\\n    // Check for zero transfer, and make sure it returns true to returnValue\\n    function verifyTokenComplianceInternal(address token) internal {\\n        bool returnValue = IERC20(token).transfer(msg.sender, 0);\\n        require(returnValue, \\\"ERR_NONCONFORMING_TOKEN\\\");\\n    }\\n\\n    function WhitelistHandle(\\n        bool bool1,\\n        bool bool2,\\n        address adr\\n    ) external pure {\\n        require(bool1, \\\"ERR_CANNOT_WHITELIST_LPS\\\");\\n        require(bool2, \\\"ERR_LP_NOT_WHITELISTED\\\");\\n        require(adr != address(0), \\\"ERR_INVALID_ADDRESS\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x661001d283d11be82aca3a46a41378006d086545f28fc7582b8fd26122f82c14\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/DesynOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract DesynOwnable {\\n    // State variables\\n\\n    address private _owner;\\n    mapping(address => bool) public adminList;\\n    address[] public owners;\\n    uint[] public ownerPercentage;\\n    uint public allOwnerPercentage;\\n    // Event declarations\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    event AddAdmin(address indexed newAdmin, uint indexed amount);\\n    event RemoveAdmin(address indexed oldAdmin, uint indexed amount);\\n\\n    // Modifiers\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"ERR_NOT_CONTROLLER\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(adminList[msg.sender] || msg.sender == _owner, \\\"onlyAdmin\\\");\\n        _;\\n    }\\n\\n    // Function declarations\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() internal {\\n        _owner = msg.sender;\\n    }\\n\\n    function initHandle(address[] memory _owners, uint[] memory _ownerPercentage) external onlyOwner {\\n        require(_owners.length == _ownerPercentage.length, \\\"ownerP\\\");\\n        for (uint i = 0; i < _owners.length; i++) {\\n            allOwnerPercentage += _ownerPercentage[i];\\n            adminList[_owners[i]] = true;\\n        }\\n        owners = _owners;\\n        ownerPercentage = _ownerPercentage;\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n     *         Can only be called by the current owner\\n     * @dev external for gas optimization\\n     * @param newOwner - address of new owner\\n     */\\n    function setController(address newOwner) external onlyOwner {\\n        require(newOwner != address(0), \\\"ERR_ZERO_ADDRESS\\\");\\n\\n        emit OwnershipTransferred(_owner, newOwner);\\n\\n        _owner = newOwner;\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n     *         Can only be called by the current owner\\n     * @dev external for gas optimization\\n     * @param newOwner - address of new owner\\n     */\\n    function setAddAdminList(address newOwner, uint _ownerPercentage) external onlyOwner {\\n        require(!adminList[newOwner], \\\"Address is Owner\\\");\\n\\n        adminList[newOwner] = true;\\n        owners.push(newOwner);\\n        ownerPercentage.push(_ownerPercentage);\\n        allOwnerPercentage += _ownerPercentage;\\n        emit AddAdmin(newOwner, _ownerPercentage);\\n    }\\n\\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\\n    /// @param owner Address of owner.\\n    function removeOwner(address owner) external onlyOwner {\\n        adminList[owner] = false;\\n        uint amount = 0;\\n        for (uint i = 0; i < owners.length; i++) {\\n            if (owners[i] == owner) {\\n                owners[i] = owners[owners.length - 1];\\n                amount = ownerPercentage[i];\\n                ownerPercentage[i] = ownerPercentage[ownerPercentage.length - 1];\\n                break;\\n            }\\n        }\\n        owners.pop();\\n        ownerPercentage.pop();\\n        allOwnerPercentage -= amount;\\n        emit RemoveAdmin(owner, amount);\\n    }\\n\\n    // @dev Returns list of owners.\\n    // @return List of owner addresses.\\n    function getOwners() public view returns (address[] memory) {\\n        return owners;\\n    }\\n\\n    // @dev Returns list of owners.\\n    // @return List of owner addresses.\\n    function getOwnerPercentage() public view returns (uint[] memory) {\\n        return ownerPercentage;\\n    }\\n\\n    /**\\n     * @notice Returns the address of the current owner\\n     * @dev external for gas optimization\\n     * @return address - of the owner (AKA controller)\\n     */\\n    function getController() external view returns (address) {\\n        return _owner;\\n    }\\n}\\n\",\"keccak256\":\"0xd7f4d3132bf1b6abb6d07d9caf29a083ddb5d4319b59b573bf6008f4aef289af\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60806040526064601e5534801561001557600080fd5b50600080546001600160a01b0319163317905561508a806100376000396000f3fe60806040526004361061033e5760003560e01c806379f66374116101b3578063c3e4d04f116100f3578063c3e4d04f146109b7578063c5318d0f146109d7578063c90361dd146109f7578063cf4fe63514610a17578063d29986c114610a44578063d6b485a514610a59578063d7256c7014610a79578063d832839014610a99578063de7f302214610ab9578063e0bea5ac14610ad9578063e65065d914610af9578063e9c6931914610b19578063ebef44d914610b39578063ec7a4b5214610b59578063ed6aa3af14610b79578063ed76f94914610b99578063edbfb5f514610bb9578063f36ed92814610bd957610345565b806379f66374146107a25780638da901ba146107c25780638f799e12146107e25780639155dae71461080257806392a0bb631461082257806392eefe9b14610842578063992f6ba514610862578063a0e67e2b14610882578063a5168ee214610897578063a97f9f33146108b7578063a9884df4146108d7578063bbb6e808146108f7578063bc15c84014610917578063bd0011c214610937578063bdac429814610957578063c0fcb16614610977578063c1e576221461099757610345565b8063334a5d961161027e578063334a5d96146105955780633eedcfa0146105b55780633ef14479146105d557806341c65e83146105f5578063430bf08a146106155780634660c5a51461062a57806346bead891461064a5780634b414ab51461066a5780634bbe2fca1461068a5780634da38416146106aa578063528b5853146106ca578063549d9f60146106ea57806358d2dbf01461071a57806368092bd91461073a5780636936674d1461075a57806378a619de1461077a57806378c32a4b1461078257610345565b8063025e7c271461034a57806303a68ecb146103805780630b83e629146103ad5780630e99089c146103da57806311e1532a146103fa5780631374aaf01461041a578063154726b21461042f5780631556523a1461044f578063173825d91461047c5780631a46506e1461049e5780631eae039c146104be57806327304dfd146104de5780632b5230a9146104fe5780632c0bdbcf1461051e5780632c7c1bb51461054b5780633018205f1461056b578063309a042c1461058057610345565b3661034557005b600080fd5b34801561035657600080fd5b5061036a610365366004614b19565b610bf9565b6040516103779190614bd1565b60405180910390f35b34801561038c57600080fd5b506103a061039b366004614793565b610c20565b6040516103779190614fe3565b3480156103b957600080fd5b506103cd6103c83660046146ca565b610c5b565b6040516103779190614cc5565b3480156103e657600080fd5b506103a06103f5366004614692565b610cd5565b34801561040657600080fd5b506103a0610415366004614692565b610e30565b34801561042657600080fd5b506103a0610e4d565b34801561043b57600080fd5b506103a061044a3660046146ca565b610e53565b34801561045b57600080fd5b5061046f61046a366004614692565b610e9c565b6040516103779190614cd8565b34801561048857600080fd5b5061049c610497366004614692565b610eb1565b005b3480156104aa57600080fd5b506103cd6104b9366004614692565b61109c565b3480156104ca57600080fd5b5061049c6104d9366004614793565b611108565b3480156104ea57600080fd5b5061046f6104f9366004614692565b6111b8565b34801561050a57600080fd5b506103cd610519366004614692565b6111cd565b34801561052a57600080fd5b5061053e610539366004614692565b611237565b6040516103779190614bfe565b34801561055757600080fd5b506103a06105663660046146ca565b6112ac565b34801561057757600080fd5b5061036a6112c9565b34801561058c57600080fd5b506103cd6112d8565b3480156105a157600080fd5b506103a06105b0366004614891565b611330565b3480156105c157600080fd5b506103a06105d03660046146ca565b61135e565b3480156105e157600080fd5b5061049c6105f0366004614999565b61137b565b34801561060157600080fd5b5061053e610610366004614692565b61146d565b34801561062157600080fd5b5061036a6114e1565b34801561063657600080fd5b5061049c610645366004614800565b6114f0565b34801561065657600080fd5b506103a06106653660046146ca565b611733565b34801561067657600080fd5b5061036a610685366004614891565b611930565b34801561069657600080fd5b506103a06106a5366004614891565b611965565b3480156106b657600080fd5b5061053e6106c5366004614692565b611982565b3480156106d657600080fd5b506103a06106e5366004614692565b6119f6565b3480156106f657600080fd5b5061070a610705366004614692565b611a08565b6040516103779493929190614faa565b34801561072657600080fd5b5061036a6107353660046146ca565b611bf0565b34801561074657600080fd5b5061049c6107553660046147d3565b611c1a565b34801561076657600080fd5b5061049c610775366004614692565b611c6f565b61049c612053565b34801561078e57600080fd5b5061036a61079d366004614891565b6120a9565b3480156107ae57600080fd5b5061036a6107bd3660046146ca565b6120c2565b3480156107ce57600080fd5b5061046f6107dd366004614692565b6120e8565b3480156107ee57600080fd5b506103a06107fd3660046146ca565b61216f565b34801561080e57600080fd5b5061049c61081d3660046148bc565b61218c565b34801561082e57600080fd5b5061046f61083d366004614692565b6122f9565b34801561084e57600080fd5b5061049c61085d366004614692565b61230e565b34801561086e57600080fd5b5061049c61087d366004614891565b6123b9565b34801561088e57600080fd5b5061053e6124e2565b3480156108a357600080fd5b506103cd6108b2366004614692565b612543565b3480156108c357600080fd5b506103cd6108d2366004614692565b6125ad565b3480156108e357600080fd5b506103a06108f2366004614891565b612617565b34801561090357600080fd5b5061036a610912366004614793565b612630565b34801561092357600080fd5b5061036a610932366004614891565b612677565b34801561094357600080fd5b5061046f610952366004614692565b612690565b34801561096357600080fd5b506103a0610972366004614891565b6126a5565b34801561098357600080fd5b5061046f610992366004614692565b6126be565b3480156109a357600080fd5b5061049c6109b2366004614692565b6126dc565b3480156109c357600080fd5b5061036a6109d2366004614692565b612728565b3480156109e357600080fd5b506103a06109f2366004614b19565b612743565b348015610a0357600080fd5b5061053e610a12366004614692565b612761565b348015610a2357600080fd5b50610a37610a323660046146ca565b612785565b6040516103779190614c4b565b348015610a5057600080fd5b506103a061286a565b348015610a6557600080fd5b5061049c610a74366004614692565b612870565b348015610a8557600080fd5b5061049c610a94366004614702565b61290d565b348015610aa557600080fd5b5061036a610ab4366004614891565b612e44565b348015610ac557600080fd5b5061053e610ad4366004614692565b612e5d565b348015610ae557600080fd5b5061036a610af4366004614891565b612ed1565b348015610b0557600080fd5b506103a0610b143660046146ca565b612eea565b348015610b2557600080fd5b506103a0610b34366004614793565b612fcd565b348015610b4557600080fd5b5061053e610b54366004614692565b613409565b348015610b6557600080fd5b506103a0610b743660046146ca565b61347d565b348015610b8557600080fd5b5061049c610b94366004614692565b6134ba565b348015610ba557600080fd5b506103a0610bb4366004614891565b6137d2565b348015610bc557600080fd5b506103a0610bd4366004614692565b6137eb565b348015610be557600080fd5b506103a0610bf4366004614692565b6137fd565b60028181548110610c0657fe5b6000918252602090912001546001600160a01b0316905081565b60186020528260005260406000206020528160005260406000208181548110610c4557fe5b9060005260206000200160009250925050505481565b6001600160a01b038083166000908152601860209081526040808320938516835292815290829020805483518184028101840190945280845260609392830182828015610cc757602002820191906000526020600020905b815481526020019060010190808311610cb3575b505050505090505b92915050565b6001600160a01b038116600090815260086020526040812054610cf9576000610d28565b6001600160a01b03821660009081526008602052604081208054909190610d1c57fe5b90600052602060002001545b6001600160a01b0383166000908152600a6020526040902054910190610d4f576000610d7e565b6001600160a01b0382166000908152600a602052604081208054909190610d7257fe5b90600052602060002001545b6001600160a01b0383166000908152600c6020526040902054910190610da5576000610dd4565b6001600160a01b0382166000908152600c602052604081208054909190610dc857fe5b90600052602060002001545b6001600160a01b0383166000908152600e6020526040902054910190610dfb576000610e2a565b6001600160a01b0382166000908152600e602052604081208054909190610e1e57fe5b90600052602060002001545b01919050565b6000610ccf610e3e836137fd565b610e4784610cd5565b9061384e565b601e5481565b600080610e608484612eea565b6001600160a01b03808616600090815260176020908152604080832093881683529290522054909150610e93828261384e565b95945050505050565b601c6020526000908152604090205460ff1681565b6000546001600160a01b03163314610ee45760405162461bcd60e51b8152600401610edb90614d36565b60405180910390fd5b6001600160a01b0381166000908152600160205260408120805460ff19169055805b60025481101561100857826001600160a01b031660028281548110610f2757fe5b6000918252602090912001546001600160a01b0316141561100057600280546000198101908110610f5457fe5b600091825260209091200154600280546001600160a01b039092169183908110610f7a57fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060038181548110610fb557fe5b90600052602060002001549150600360016003805490500381548110610fd757fe5b906000526020600020015460038281548110610fef57fe5b600091825260209091200155611008565b600101610f06565b50600280548061101457fe5b600082815260209020810160001990810180546001600160a01b0319169055019055600380548061104157fe5b600082815260208120820160001990810182905590910190915560048054839003905560405182916001600160a01b038516917f7b0884b4b6bb4e0c1385ad42168fa556c14d4d799c1bf22f081aff3efff6ea0c9190a35050565b6001600160a01b0381166000908152600e60209081526040918290208054835181840281018401909452808452606093928301828280156110fc57602002820191906000526020600020905b8154815260200190600101908083116110e8575b50505050509050919050565b6000546001600160a01b031633146111325760405162461bcd60e51b8152600401610edb90614d36565b60405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb906111609085908590600401614be5565b602060405180830381600087803b15801561117a57600080fd5b505af115801561118e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b29190614ade565b50505050565b60016020526000908152604090205460ff1681565b6001600160a01b0381166000908152600c60209081526040918290208054835181840281018401909452808452606093928301828280156110fc57602002820191906000526020600020908154815260200190600101908083116110e85750505050509050919050565b6001600160a01b0381166000908152600b60209081526040918290208054835181840281018401909452808452606093928301828280156110fc57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116112835750505050509050919050565b601960209081526000928352604080842090915290825290205481565b6000546001600160a01b031690565b6060600380548060200260200160405190810160405280929190818152602001828054801561132657602002820191906000526020600020905b815481526020019060010190808311611312575b5050505050905090565b6008602052816000526040600020818154811061134957fe5b90600052602060002001600091509150505481565b601760209081526000928352604080842090915290825290205481565b6000546001600160a01b031633146113a55760405162461bcd60e51b8152600401610edb90614d36565b80518251146113c65760405162461bcd60e51b8152600401610edb90614e37565b60005b8251811015611440578181815181106113de57fe5b6020026020010151600460008282540192505081905550600180600085848151811061140657fe5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790556001016113c9565b50815161145490600290602085019061437d565b5080516114689060039060208401906143e2565b505050565b6001600160a01b0381166000908152600d60209081526040918290208054835181840281018401909452808452606093928301828280156110fc576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116112835750505050509050919050565b601f546001600160a01b031681565b600554604051636e0cf42160e11b81526001600160a01b039091169063dc19e84290611520908590600401614bd1565b60206040518083038186803b15801561153857600080fd5b505afa15801561154c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115709190614ade565b61158c5760405162461bcd60e51b8152600401610edb90614e57565b6001600160a01b0382166000908152601c602052604090205460ff16156115c55760405162461bcd60e51b8152600401610edb90614ec1565b6001600160a01b039091166000908152601c60208181526040808420805460ff19166001908117909155601d808452948290208651805180518355850151928201929092558184015180516002830155840151600382015581830151805160048301558401516005820155606091820151805160068301558401516007820155868401518051805160088401558501516009830155808501518051600a840155850151600b830155808401518051600c840155850151600d8301558201518051600e830155840151600f8201558683015180518051601084015585015160118301558085015180516012840155850151601383015580840151805160148401558501516015830155820151805160168301558401516017820155958101518051805160188901558401516019880155808401518051601a890155840151601b8801559182015180519487019490945592820151938501939093559101518051601e8401550151601f90910155565b60008061173f84610e30565b90506060846001600160a01b031663a0e67e2b6040518163ffffffff1660e01b815260040160006040518083038186803b15801561177c57600080fd5b505afa158015611790573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526117b89190810190614901565b90506060856001600160a01b031663309a042c6040518163ffffffff1660e01b815260040160006040518083038186803b1580156117f557600080fd5b505afa158015611809573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118319190810190614a5b565b90506000866001600160a01b031663d29986c16040518163ffffffff1660e01b815260040160206040518083038186803b15801561186e57600080fd5b505afa158015611882573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a69190614b31565b905060005b8351811015611925578381815181106118c057fe5b60200260200101516001600160a01b0316876001600160a01b0316141561191d576119118261190b8584815181106118f457fe5b60200260200101518861389090919063ffffffff16565b906138ca565b95505050505050610ccf565b6001016118ab565b505050505092915050565b600b602052816000526040600020818154811061194957fe5b6000918252602090912001546001600160a01b03169150829050565b601260209081526000928352604080842090915290825290205481565b6001600160a01b0381166000908152601360209081526040918290208054835181840281018401909452808452606093928301828280156110fc576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116112835750505050509050919050565b60156020526000908152604090205481565b601d60208181526000928352604092839020835160c0808201865282546080808401918252600185015460a080860191909152918452875180890189526002860154815260038601548188015284870152875180890189526004860154815260058601548188015284890152875180890189526006860154815260078601548188015260608086019190915288518085018a52600887015481840190815260098801548286015281528951808b018b52600a8801548152600b880154818a0152818901528951808b018b52600c8801548152600d880154818a0152818b01528951808b018b52600e8801548152600f880154818a01528183015289518086018b52601088015481850190815260118901548287015281528a51808c018c52601289015481526013890154818b0152818a01528a51808c018c52601489015481526015890154818b0152818c01528a51808c018c52601689015481526017890154818b0152818401528a519586018b5260188801549386019384526019880154948601949094529184528851808a018a52601a8701548152601b87015481890152848801528851808a018a52601c87015481529786015488880152838901979097528751808901909852601e8501548852601f9094015494870194909452938401949094529184565b6001600160a01b039182166000908152601a60209081526040808320938516835292905220541690565b6000546001600160a01b03163314611c445760405162461bcd60e51b8152600401610edb90614d36565b6001600160a01b03919091166000908152601060205260409020805460ff1916911515919091179055565b601f5460405163edb12adf60e01b81526001600160a01b039091169063edb12adf90611c9f908490600401614bd1565b600060405180830381600087803b158015611cb957600080fd5b505af1925050508015611cca575060015b50611cd4816120e8565b1561205057600554604051636e0cf42160e11b81526001600160a01b039091169063dc19e84290611d09908490600401614bd1565b60206040518083038186803b158015611d2157600080fd5b505afa158015611d35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d599190614ade565b611d755760405162461bcd60e51b8152600401610edb90614e57565b806001600160a01b0316635468d6d76040518163ffffffff1660e01b815260040160206040518083038186803b158015611dae57600080fd5b505afa158015611dc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611de69190614ade565b611e025760405162461bcd60e51b8152600401610edb90614f4f565b6000611e0e8233610e53565b905060008111611e305760405162461bcd60e51b8152600401610edb90614f2b565b6001600160a01b0382166000908152601760209081526040808320338085529252909120805483019055611e6390613909565b15611f9e576001600160a01b03821660009081526013602052604081208054909190611e8b57fe5b9060005260206000200160009054906101000a90046001600160a01b03166001600160a01b031663a9059cbb336001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ef057600080fd5b505afa158015611f04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f2891906146ae565b836040518363ffffffff1660e01b8152600401611f46929190614be5565b602060405180830381600087803b158015611f6057600080fd5b505af1158015611f74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f989190614ade565b5061204e565b6001600160a01b03821660009081526013602052604081208054909190611fc157fe5b60009182526020909120015460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90611ffc9033908590600401614be5565b602060405180830381600087803b15801561201657600080fd5b505af115801561202a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114689190614ade565b505b50565b6000546001600160a01b0316331461207d5760405162461bcd60e51b8152600401610edb90614d36565b60405133904780156108fc02916000818181858888f19350505050158015612050573d6000803e3d6000fd5b6007602052816000526040600020818154811061194957fe5b601a6020908152600092835260408084209091529082529020546001600160a01b031681565b60006001826001600160a01b03166373a9855c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561212557600080fd5b505afa158015612139573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061215d9190614afa565b600181111561216857fe5b1492915050565b601660209081526000928352604080842090915290825290205481565b601f546001600160a01b031633146121b65760405162461bcd60e51b8152600401610edb90614d36565b8281146121d55760405162461bcd60e51b8152600401610edb90614e80565b6001600160a01b0386811660009081526006602052604090205416612297576000866001600160a01b0316633018205f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561222f57600080fd5b505afa158015612243573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061226791906146ae565b6001600160a01b0380891660009081526006602052604090208054919092166001600160a01b0319909116179055505b6060806122a48888613942565b915091506060806122ba888888888e8989613d0c565b915091506122ca8a8a8484613f70565b5050506001600160a01b039096166000908152600f60205260409020805460ff19166001179055505050505050565b600f6020526000908152604090205460ff1681565b6000546001600160a01b031633146123385760405162461bcd60e51b8152600401610edb90614d36565b6001600160a01b03811661235e5760405162461bcd60e51b8152600401610edb90614dea565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146123e35760405162461bcd60e51b8152600401610edb90614d36565b6001600160a01b03821660009081526001602052604090205460ff161561241c5760405162461bcd60e51b8152600401610edb90614dc0565b6001600160a01b0382166000818152600160208190526040808320805460ff191683179055600280548084019091557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319168517905560038054928301815583527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b9091018490556004805485019055518392917fbd5dcf0b25226117c4a68a0129ffdd4b0541ef5e482ad7de9a96ccb6d6a8ebde91a35050565b6060600280548060200260200160405190810160405280929190818152602001828054801561132657602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161251c575050505050905090565b6001600160a01b0381166000908152600a60209081526040918290208054835181840281018401909452808452606093928301828280156110fc57602002820191906000526020600020908154815260200190600101908083116110e85750505050509050919050565b6001600160a01b0381166000908152600860209081526040918290208054835181840281018401909452808452606093928301828280156110fc57602002820191906000526020600020908154815260200190600101908083116110e85750505050509050919050565b600a602052816000526040600020818154811061134957fe5b601b602052826000526040600020602052816000526040600020818154811061265557fe5b60009182526020909120600290910201546001600160a01b0316925083915050565b6009602052816000526040600020818154811061194957fe5b60106020526000908152604090205460ff1681565b600e602052816000526040600020818154811061134957fe5b6001600160a01b03166000908152600f602052604090205460ff1690565b6000546001600160a01b031633146127065760405162461bcd60e51b8152600401610edb90614d36565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6006602052600090815260409020546001600160a01b031681565b6003818154811061275057fe5b600091825260209091200154905081565b6001600160a01b0381166000908152601460205260409020606090610ccf906140e9565b6001600160a01b038083166000908152601b602090815260408083209385168352928152828220805484518184028101840190955280855260609493919290919084015b8282101561285e5760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561284657602002820191906000526020600020905b815481526020019060010190808311612832575b505050505081525050815260200190600101906127c9565b50505050905092915050565b60045481565b6000546001600160a01b0316331461289a5760405162461bcd60e51b8152600401610edb90614d36565b6001600160a01b0381166128c05760405162461bcd60e51b8152600401610edb90614d97565b601f80546001600160a01b0319166001600160a01b0383169081179091556040513391907ff5e71cc69e4610808e8e7c9099d63353897264c5dfc4da1a0320395866de497190600090a350565b82811461292c5760405162461bcd60e51b8152600401610edb90614e80565b600554604051636e0cf42160e11b81526001600160a01b039091169063dc19e8429061295c903390600401614bd1565b60206040518083038186803b15801561297457600080fd5b505afa158015612988573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129ac9190614ade565b6129c85760405162461bcd60e51b8152600401610edb90614e57565b336000908152601360205260409020546129f8573360009081526013602052604090206129f6908585614429565b505b336000908152601a602090815260408083206001600160a01b0389811685529252909120541680612a9157336000818152601a602090815260408083206001600160a01b038b8116855290835281842080546001600160a01b031916918d169190911790559282526014905220612a6f90886140f5565b612a8e57336000908152601460205260409020612a8c908861410a565b505b50855b6001600160a01b038116612ab75760405162461bcd60e51b8152600401610edb90614f7d565b612ae683836000818110612ac757fe5b336000908152601560209081526040909120549391020135905061411f565b336000908152601560205260409020556060846001600160401b0381118015612b0e57600080fd5b50604051908082528060200260200182016040528015612b38578160200160208202803683370190505b50905060005b85811015612c1f573360009081526018602090815260408083206001600160a01b0387168452909152902054612b9e57848482818110612b7a57fe5b90506020020135828281518110612b8d57fe5b602002602001018181525050612c17565b3360009081526018602090815260408083206001600160a01b038716845290915290208054612bfe919083908110612bd257fe5b9060005260206000200154868684818110612be957fe5b9050602002013561411f90919063ffffffff16565b828281518110612c0a57fe5b6020026020010181815250505b600101612b3e565b503360009081526018602090815260408083206001600160a01b038616845282529091208251612c51928401906143e2565b50336000818152601b602090815260408083206001600160a01b03878116855290835281842094845260198352818420908c16845290915290205480612d8257612c9961447c565b6001600160a01b038a1681526040805160208089028281018201909352888252909189918991829185019084908082843760009201829052506020868101958652885460018082018b558a845292829020885160029092020180546001600160a01b0319166001600160a01b039092169190911781559551805188979650612d289550928601935001906143e2565b505050828054905060196000336001600160a01b03166001600160a01b0316815260200190815260200160002060008c6001600160a01b03166001600160a01b031681526020019081526020016000208190555050612e38565b336000908152601b602090815260408083206001600160a01b0388168452909152812080546000198401908110612db557fe5b9060005260206000209060020201905060005b6001820154811015612e3557612e12888883818110612de357fe5b90506020020135836001018381548110612df957fe5b906000526020600020015461411f90919063ffffffff16565b826001018281548110612e2157fe5b600091825260209091200155600101612dc8565b50505b50505050505050505050565b600d602052816000526040600020818154811061194957fe5b6001600160a01b0381166000908152600960209081526040918290208054835181840281018401909452808452606093928301828280156110fc576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116112835750505050509050919050565b6013602052816000526040600020818154811061194957fe5b6001600160a01b0380831660009081526018602090815260408083209385168352929052908120548190612f1f579050610ccf565b612f35612f2e85856000612fcd565b829061411f565b9050612f46612f2e85856001612fcd565b9050612f57612f2e85856002612fcd565b9050612f68612f2e85856003612fcd565b6001600160a01b038086166000908152601560209081526040808320546018835281842094891684529390915281208054939450612fc59361190b9290612fab57fe5b90600052602060002001548461389090919063ffffffff16565b949350505050565b6001600160a01b0380841660009081526018602090815260408083209386168352929052908120548190613002576000613040565b6001600160a01b0380861660009081526018602090815260408083209388168352929052908120805490919061303457fe5b90600052602060002001545b905061304a614494565b506001600160a01b0385166000908152601d602081815260408084208151610140810183528154610100820190815260018301546101208301526080808301918252845180860186526002850154815260038501548188015260a080850191909152855180870187526004860154815260058601548189015260c08086019190915286518088018852600687015481526007870154818a015260e0860152928452855180840187526008860154818401908152600987015482840152815286518088018852600a8701548152600b870154818a01528189015286518088018852600c8701548152600d870154818a01528188015286518088018852600e8701548152600f870154818a015260608281019190915285890191909152865180850188526010870154818501908152601188015482850152815287518089018952601288015481526013880154818b0152818a015287518089018952601488015481526015880154818b01528189015287518089018952601688015481526017880154818b0152818301528588015286519384018752601886015492840192835260198601549184019190915290825284518086018652601a8501548152601b850154818801528287015284518086018652601c85015481529684015487870152818501969096528351808501909452601e8301548452601f9092015493830193909352808401919091529181019190915290846132d9576001600160a01b038716600090815260086020526040902054156132d4576132d1601e5461190b613295868660000151614144565b6001600160a01b038b16600090815260086020526040812080549091906132b857fe5b906000526020600020015461389090919063ffffffff16565b90505b6133ff565b846001141561333a576001600160a01b0387166000908152600a6020526040902054156132d4576132d1601e5461190b613317868660200151614144565b6001600160a01b038b166000908152600a6020526040812080549091906132b857fe5b846002141561339b576001600160a01b0387166000908152600c6020526040902054156132d4576132d1601e5461190b613378868660400151614144565b6001600160a01b038b166000908152600c6020526040812080549091906132b857fe5b84600314156133ff576001600160a01b0387166000908152600e6020526040902054156133ff576133fc601e5461190b6133d9868660600151614144565b6001600160a01b038b166000908152600e6020526040812080549091906132b857fe5b90505b9695505050505050565b6001600160a01b0381166000908152600760209081526040918290208054835181840281018401909452808452606093928301828280156110fc576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116112835750505050509050919050565b6001600160a01b0380831660009081526016602090815260408083209385168352929052908120546134b390610e478585611733565b9392505050565b601f5460405163edb12adf60e01b81526001600160a01b039091169063edb12adf906134ea908490600401614bd1565b600060405180830381600087803b15801561350457600080fd5b505af1925050508015613515575060015b5061351f816120e8565b1561205057600554604051636e0cf42160e11b81526001600160a01b039091169063dc19e84290613554908490600401614bd1565b60206040518083038186803b15801561356c57600080fd5b505afa158015613580573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135a49190614ade565b6135c05760405162461bcd60e51b8152600401610edb90614e57565b806001600160a01b0316635468d6d76040518163ffffffff1660e01b815260040160206040518083038186803b1580156135f957600080fd5b505afa15801561360d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136319190614ade565b61364d5760405162461bcd60e51b8152600401610edb90614f4f565b6040516327304dfd60e01b81526001600160a01b038216906327304dfd90613679903390600401614bd1565b60206040518083038186803b15801561369157600080fd5b505afa1580156136a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136c99190614ade565b806137555750336001600160a01b0316816001600160a01b0316633018205f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561371257600080fd5b505afa158015613726573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061374a91906146ae565b6001600160a01b0316145b6137715760405162461bcd60e51b8152600401610edb90614e14565b600061377d823361347d565b90506000811161379f5760405162461bcd60e51b8152600401610edb90614f2b565b6001600160a01b0382166000908152601660209081526040808320338085529252909120805483019055611e6390613909565b600c602052816000526040600020818154811061134957fe5b60116020526000908152604090205481565b6001600160a01b03811660009081526014602052604081208161381f8261421f565b905060005b818110156138465761383a85610b14858461422a565b90930192600101613824565b505050919050565b60006134b383836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250614236565b60008261389f57506000610ccf565b828202828482816138ac57fe5b04146134b35760405162461bcd60e51b8152600401610edb90614eea565b60006134b383836040518060400160405280601a815260200179536166654d6174683a206469766973696f6e206279207a65726f60301b815250614262565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590612fc5575050151592915050565b60608082613a34576001600160a01b038416600090815260076020908152604091829020805483518184028101840190945280845290918301828280156139b257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613994575b5050505050915060086000856001600160a01b03166001600160a01b03168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015613a2857602002820191906000526020600020905b815481526020019060010190808311613a14575b50505050509050613d05565b8260011415613b25576001600160a01b03841660009081526009602090815260409182902080548351818402810184019094528084529091830182828015613aa557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613a87575b50505050509150600a6000856001600160a01b03166001600160a01b03168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015613a285760200282019190600052602060002090815481526020019060010190808311613a145750505050509050613d05565b8260021415613c16576001600160a01b0384166000908152600b602090815260409182902080548351818402810184019094528084529091830182828015613b9657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613b78575b50505050509150600c6000856001600160a01b03166001600160a01b03168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015613a285760200282019190600052602060002090815481526020019060010190808311613a145750505050509050613d05565b8260031415613d05576001600160a01b0384166000908152600d602090815260409182902080548351818402810184019094528084529091830182828015613c8757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613c69575b50505050509150600e6000856001600160a01b03166001600160a01b03168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015613cfd57602002820191906000526020600020905b815481526020019060010190808311613ce9575b505050505090505b9250929050565b606080876001600160401b0381118015613d2557600080fd5b50604051908082528060200260200182016040528015613d4f578160200160208202803683370190505b509150876001600160401b0381118015613d6857600080fd5b50604051908082528060200260200182016040528015613d92578160200160208202803683370190505b50905082518451148015613da557508351155b80613dc957506001600160a01b0385166000908152600f602052604090205460ff16155b15613e5e5760005b88811015613e5857898982818110613de557fe5b9050602002016020810190613dfa9190614692565b838281518110613e0657fe5b60200260200101906001600160a01b031690816001600160a01b031681525050878782818110613e3257fe5b90506020020135828281518110613e4557fe5b6020908102919091010152600101613dd1565b50613f64565b60005b88811015613f6257898982818110613e7557fe5b9050602002016020810190613e8a9190614692565b6001600160a01b0316858281518110613e9f57fe5b60200260200101516001600160a01b03161415613f5a576000888883818110613ec457fe5b9050602002013590508a8a83818110613ed957fe5b9050602002016020810190613eee9190614692565b848381518110613efa57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050613f4081868481518110613f2a57fe5b602002602001015161411f90919063ffffffff16565b838381518110613f4c57fe5b602002602001018181525050505b600101613e61565b505b97509795505050505050565b82613fce576001600160a01b03841660009081526007602090815260409091208351613f9e9285019061437d565b506001600160a01b03841660009081526008602090815260409091208251613fc8928401906143e2565b506111b2565b826001141561402a576001600160a01b038416600090815260096020908152604090912083516140009285019061437d565b506001600160a01b0384166000908152600a602090815260409091208251613fc8928401906143e2565b8260021415614086576001600160a01b0384166000908152600b60209081526040909120835161405c9285019061437d565b506001600160a01b0384166000908152600c602090815260409091208251613fc8928401906143e2565b82600314156111b2576001600160a01b0384166000908152600d6020908152604090912083516140b89285019061437d565b506001600160a01b0384166000908152600e6020908152604090912082516140e2928401906143e2565b5050505050565b6060806134b383614299565b60006134b3836001600160a01b0384166142f3565b60006134b3836001600160a01b03841661430b565b6000828201838110156134b35760405162461bcd60e51b8152600401610edb90614d62565b6000805b6004811015614218578061417e57825151841080159061416c575060208301515184105b1561417e575050805160200151610ccf565b80600114156141b45760208301515184108015906141a0575060408301515184105b156141b45750506020808201510151610ccf565b80600214156141eb5760408301515184108015906141d6575060608301515184105b156141eb575050604081015160200151610ccf565b8060031415614210576060830151518410614210575050606081015160200151610ccf565b600101614148565b5092915050565b6000610ccf82614355565b60006134b38383614359565b6000818484111561425a5760405162461bcd60e51b8152600401610edb9190614ce3565b505050900390565b600081836142835760405162461bcd60e51b8152600401610edb9190614ce3565b50600083858161428f57fe5b0495945050505050565b6060816000018054806020026020016040519081016040528092919081815260200182805480156110fc57602002820191906000526020600020908154815260200190600101908083116110e85750505050509050919050565b60009081526001919091016020526040902054151590565b600061431783836142f3565b61434d57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610ccf565b506000610ccf565b5490565b600082600001828154811061436a57fe5b9060005260206000200154905092915050565b8280548282559060005260206000209081019282156143d2579160200282015b828111156143d257825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019061439d565b506143de9291506144d3565b5090565b82805482825590600052602060002090810192821561441d579160200282015b8281111561441d578251825591602001919060010190614402565b506143de9291506144f2565b8280548282559060005260206000209081019282156143d2579160200282015b828111156143d25781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190614449565b60408051808201909152600081526060602082015290565b60405180608001604052806144a7614507565b81526020016144b4614507565b81526020016144c1614507565b81526020016144ce614507565b905290565b5b808211156143de5780546001600160a01b03191681556001016144d4565b5b808211156143de57600081556001016144f3565b604051806080016040528061451a61453d565b815260200161452761453d565b815260200161453461453d565b81526020016144ce5b604051806040016040528060008152602001600081525090565b60008083601f840112614568578182fd5b5081356001600160401b0381111561457e578182fd5b6020830191508360208083028501011115613d0557600080fd5b600082601f8301126145a8578081fd5b81356145bb6145b682615012565b614fec565b8181529150602080830190848101818402860182018710156145dc57600080fd5b60005b84811015611925578135845292820192908201906001016145df565b6000610100828403121561460d578081fd5b6146176080614fec565b90506146238383614661565b81526146328360408401614661565b60208201526146448360808401614661565b60408201526146568360c08401614661565b606082015292915050565b600060408284031215614672578081fd5b61467c6040614fec565b9050813581526020820135602082015292915050565b6000602082840312156146a3578081fd5b81356134b381615031565b6000602082840312156146bf578081fd5b81516134b381615031565b600080604083850312156146dc578081fd5b82356146e781615031565b915060208301356146f781615031565b809150509250929050565b6000806000806000806080878903121561471a578182fd5b863561472581615031565b9550602087013561473581615031565b945060408701356001600160401b0380821115614750578384fd5b61475c8a838b01614557565b90965094506060890135915080821115614774578384fd5b5061478189828a01614557565b979a9699509497509295939492505050565b6000806000606084860312156147a7578283fd5b83356147b281615031565b925060208401356147c281615031565b929592945050506040919091013590565b600080604083850312156147e5578081fd5b82356147f081615031565b915060208301356146f781615046565b600080828403610420811215614814578283fd5b833561481f81615031565b9250610400601f1982011215614833578182fd5b5061483e6080614fec565b61484b85602086016145fb565b815261485b8561012086016145fb565b602082015261486e8561022086016145fb565b60408201526148818561032086016145fb565b6060820152809150509250929050565b600080604083850312156148a3578182fd5b82356148ae81615031565b946020939093013593505050565b600080600080600080608087890312156148d4578384fd5b86356148df81615031565b95506020870135945060408701356001600160401b0380821115614750578586fd5b60006020808385031215614913578182fd5b82516001600160401b03811115614928578283fd5b8301601f81018513614938578283fd5b80516149466145b682615012565b8181528381019083850185840285018601891015614962578687fd5b8694505b8385101561498d57805161497981615031565b835260019490940193918501918501614966565b50979650505050505050565b600080604083850312156149ab578182fd5b82356001600160401b03808211156149c1578384fd5b818501915085601f8301126149d4578384fd5b81356149e26145b682615012565b80828252602080830192508086018a828387028901011115614a02578889fd5b8896505b84871015614a2d578035614a1981615031565b845260019690960195928101928101614a06565b509096508701359350505080821115614a44578283fd5b50614a5185828601614598565b9150509250929050565b60006020808385031215614a6d578182fd5b82516001600160401b03811115614a82578283fd5b8301601f81018513614a92578283fd5b8051614aa06145b682615012565b8181528381019083850185840285018601891015614abc578687fd5b8694505b8385101561498d578051835260019490940193918501918501614ac0565b600060208284031215614aef578081fd5b81516134b381615046565b600060208284031215614b0b578081fd5b8151600281106134b3578182fd5b600060208284031215614b2a578081fd5b5035919050565b600060208284031215614b42578081fd5b5051919050565b6000815180845260208085019450808401835b83811015614b7857815187529582019590820190600101614b5c565b509495945050505050565b614b8e828251614bc2565b6020810151614ba06040840182614bc2565b506040810151614bb36080840182614bc2565b50606081015161146860c08401825b80518252602090810151910152565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b81811015614c3f5783516001600160a01b031683529284019291840191600101614c1a565b50909695505050505050565b60208082528251828201819052600091906040908185019080840286018301878501865b83811015614cb757888303603f19018552815180516001600160a01b03168452870151878401879052614ca487850182614b49565b9588019593505090860190600101614c6f565b509098975050505050505050565b6000602082526134b36020830184614b49565b901515815260200190565b6000602080835283518082850152825b81811015614d0f57858101830151858201604001528201614cf3565b81811115614d205783604083870101525b50601f01601f1916929092016040019392505050565b60208082526012908201527122a9292fa727aa2fa1a7a72a2927a62622a960711b604082015260600190565b6020808252601b908201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604082015260600190565b6020808252600f908201526e41646472657373206973205a65726f60881b604082015260600190565b60208082526010908201526f20b2323932b9b99034b99027bbb732b960811b604082015260600190565b60208082526010908201526f4552525f5a45524f5f4144445245535360801b604082015260600190565b6020808252600990820152682737ba1027bbb732b960b91b604082015260600190565b60208082526006908201526506f776e6572560d41b604082015260600190565b6020808252600f908201526e696e76616c6964206164647265737360881b604082015260600190565b60208082526021908201527f546f6b656e206c697374206c656e677468206973206e6f742065657175616c716040820152607560f81b606082015260800190565b6020808252600f908201526e14185c985b5cc81a5cc81cd95d1959608a1b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252600a9082015269139bdd0814995dd85c9960b21b604082015260600190565b602080825260149082015273139bdd0810dbdb5c1b195d195910dbdb1b1958dd60621b604082015260600190565b6020808252601390820152726b6f6c2061646472657373206973207a6f726560681b604082015260600190565b6104008101614fb98287614b83565b614fc7610100830186614b83565b614fd5610200830185614b83565b610e93610300830184614b83565b90815260200190565b6040518181016001600160401b038111828210171561500a57600080fd5b604052919050565b60006001600160401b03821115615027578081fd5b5060209081020190565b6001600160a01b038116811461205057600080fd5b801515811461205057600080fdfea264697066735822122033e3b6fc53bcfe533607f3d5a6826643102102512b48fadfeabdcf822035f5ef64736f6c634300060c0033",
  "deployedBytecode": "0x60806040526004361061033e5760003560e01c806379f66374116101b3578063c3e4d04f116100f3578063c3e4d04f146109b7578063c5318d0f146109d7578063c90361dd146109f7578063cf4fe63514610a17578063d29986c114610a44578063d6b485a514610a59578063d7256c7014610a79578063d832839014610a99578063de7f302214610ab9578063e0bea5ac14610ad9578063e65065d914610af9578063e9c6931914610b19578063ebef44d914610b39578063ec7a4b5214610b59578063ed6aa3af14610b79578063ed76f94914610b99578063edbfb5f514610bb9578063f36ed92814610bd957610345565b806379f66374146107a25780638da901ba146107c25780638f799e12146107e25780639155dae71461080257806392a0bb631461082257806392eefe9b14610842578063992f6ba514610862578063a0e67e2b14610882578063a5168ee214610897578063a97f9f33146108b7578063a9884df4146108d7578063bbb6e808146108f7578063bc15c84014610917578063bd0011c214610937578063bdac429814610957578063c0fcb16614610977578063c1e576221461099757610345565b8063334a5d961161027e578063334a5d96146105955780633eedcfa0146105b55780633ef14479146105d557806341c65e83146105f5578063430bf08a146106155780634660c5a51461062a57806346bead891461064a5780634b414ab51461066a5780634bbe2fca1461068a5780634da38416146106aa578063528b5853146106ca578063549d9f60146106ea57806358d2dbf01461071a57806368092bd91461073a5780636936674d1461075a57806378a619de1461077a57806378c32a4b1461078257610345565b8063025e7c271461034a57806303a68ecb146103805780630b83e629146103ad5780630e99089c146103da57806311e1532a146103fa5780631374aaf01461041a578063154726b21461042f5780631556523a1461044f578063173825d91461047c5780631a46506e1461049e5780631eae039c146104be57806327304dfd146104de5780632b5230a9146104fe5780632c0bdbcf1461051e5780632c7c1bb51461054b5780633018205f1461056b578063309a042c1461058057610345565b3661034557005b600080fd5b34801561035657600080fd5b5061036a610365366004614b19565b610bf9565b6040516103779190614bd1565b60405180910390f35b34801561038c57600080fd5b506103a061039b366004614793565b610c20565b6040516103779190614fe3565b3480156103b957600080fd5b506103cd6103c83660046146ca565b610c5b565b6040516103779190614cc5565b3480156103e657600080fd5b506103a06103f5366004614692565b610cd5565b34801561040657600080fd5b506103a0610415366004614692565b610e30565b34801561042657600080fd5b506103a0610e4d565b34801561043b57600080fd5b506103a061044a3660046146ca565b610e53565b34801561045b57600080fd5b5061046f61046a366004614692565b610e9c565b6040516103779190614cd8565b34801561048857600080fd5b5061049c610497366004614692565b610eb1565b005b3480156104aa57600080fd5b506103cd6104b9366004614692565b61109c565b3480156104ca57600080fd5b5061049c6104d9366004614793565b611108565b3480156104ea57600080fd5b5061046f6104f9366004614692565b6111b8565b34801561050a57600080fd5b506103cd610519366004614692565b6111cd565b34801561052a57600080fd5b5061053e610539366004614692565b611237565b6040516103779190614bfe565b34801561055757600080fd5b506103a06105663660046146ca565b6112ac565b34801561057757600080fd5b5061036a6112c9565b34801561058c57600080fd5b506103cd6112d8565b3480156105a157600080fd5b506103a06105b0366004614891565b611330565b3480156105c157600080fd5b506103a06105d03660046146ca565b61135e565b3480156105e157600080fd5b5061049c6105f0366004614999565b61137b565b34801561060157600080fd5b5061053e610610366004614692565b61146d565b34801561062157600080fd5b5061036a6114e1565b34801561063657600080fd5b5061049c610645366004614800565b6114f0565b34801561065657600080fd5b506103a06106653660046146ca565b611733565b34801561067657600080fd5b5061036a610685366004614891565b611930565b34801561069657600080fd5b506103a06106a5366004614891565b611965565b3480156106b657600080fd5b5061053e6106c5366004614692565b611982565b3480156106d657600080fd5b506103a06106e5366004614692565b6119f6565b3480156106f657600080fd5b5061070a610705366004614692565b611a08565b6040516103779493929190614faa565b34801561072657600080fd5b5061036a6107353660046146ca565b611bf0565b34801561074657600080fd5b5061049c6107553660046147d3565b611c1a565b34801561076657600080fd5b5061049c610775366004614692565b611c6f565b61049c612053565b34801561078e57600080fd5b5061036a61079d366004614891565b6120a9565b3480156107ae57600080fd5b5061036a6107bd3660046146ca565b6120c2565b3480156107ce57600080fd5b5061046f6107dd366004614692565b6120e8565b3480156107ee57600080fd5b506103a06107fd3660046146ca565b61216f565b34801561080e57600080fd5b5061049c61081d3660046148bc565b61218c565b34801561082e57600080fd5b5061046f61083d366004614692565b6122f9565b34801561084e57600080fd5b5061049c61085d366004614692565b61230e565b34801561086e57600080fd5b5061049c61087d366004614891565b6123b9565b34801561088e57600080fd5b5061053e6124e2565b3480156108a357600080fd5b506103cd6108b2366004614692565b612543565b3480156108c357600080fd5b506103cd6108d2366004614692565b6125ad565b3480156108e357600080fd5b506103a06108f2366004614891565b612617565b34801561090357600080fd5b5061036a610912366004614793565b612630565b34801561092357600080fd5b5061036a610932366004614891565b612677565b34801561094357600080fd5b5061046f610952366004614692565b612690565b34801561096357600080fd5b506103a0610972366004614891565b6126a5565b34801561098357600080fd5b5061046f610992366004614692565b6126be565b3480156109a357600080fd5b5061049c6109b2366004614692565b6126dc565b3480156109c357600080fd5b5061036a6109d2366004614692565b612728565b3480156109e357600080fd5b506103a06109f2366004614b19565b612743565b348015610a0357600080fd5b5061053e610a12366004614692565b612761565b348015610a2357600080fd5b50610a37610a323660046146ca565b612785565b6040516103779190614c4b565b348015610a5057600080fd5b506103a061286a565b348015610a6557600080fd5b5061049c610a74366004614692565b612870565b348015610a8557600080fd5b5061049c610a94366004614702565b61290d565b348015610aa557600080fd5b5061036a610ab4366004614891565b612e44565b348015610ac557600080fd5b5061053e610ad4366004614692565b612e5d565b348015610ae557600080fd5b5061036a610af4366004614891565b612ed1565b348015610b0557600080fd5b506103a0610b143660046146ca565b612eea565b348015610b2557600080fd5b506103a0610b34366004614793565b612fcd565b348015610b4557600080fd5b5061053e610b54366004614692565b613409565b348015610b6557600080fd5b506103a0610b743660046146ca565b61347d565b348015610b8557600080fd5b5061049c610b94366004614692565b6134ba565b348015610ba557600080fd5b506103a0610bb4366004614891565b6137d2565b348015610bc557600080fd5b506103a0610bd4366004614692565b6137eb565b348015610be557600080fd5b506103a0610bf4366004614692565b6137fd565b60028181548110610c0657fe5b6000918252602090912001546001600160a01b0316905081565b60186020528260005260406000206020528160005260406000208181548110610c4557fe5b9060005260206000200160009250925050505481565b6001600160a01b038083166000908152601860209081526040808320938516835292815290829020805483518184028101840190945280845260609392830182828015610cc757602002820191906000526020600020905b815481526020019060010190808311610cb3575b505050505090505b92915050565b6001600160a01b038116600090815260086020526040812054610cf9576000610d28565b6001600160a01b03821660009081526008602052604081208054909190610d1c57fe5b90600052602060002001545b6001600160a01b0383166000908152600a6020526040902054910190610d4f576000610d7e565b6001600160a01b0382166000908152600a602052604081208054909190610d7257fe5b90600052602060002001545b6001600160a01b0383166000908152600c6020526040902054910190610da5576000610dd4565b6001600160a01b0382166000908152600c602052604081208054909190610dc857fe5b90600052602060002001545b6001600160a01b0383166000908152600e6020526040902054910190610dfb576000610e2a565b6001600160a01b0382166000908152600e602052604081208054909190610e1e57fe5b90600052602060002001545b01919050565b6000610ccf610e3e836137fd565b610e4784610cd5565b9061384e565b601e5481565b600080610e608484612eea565b6001600160a01b03808616600090815260176020908152604080832093881683529290522054909150610e93828261384e565b95945050505050565b601c6020526000908152604090205460ff1681565b6000546001600160a01b03163314610ee45760405162461bcd60e51b8152600401610edb90614d36565b60405180910390fd5b6001600160a01b0381166000908152600160205260408120805460ff19169055805b60025481101561100857826001600160a01b031660028281548110610f2757fe5b6000918252602090912001546001600160a01b0316141561100057600280546000198101908110610f5457fe5b600091825260209091200154600280546001600160a01b039092169183908110610f7a57fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060038181548110610fb557fe5b90600052602060002001549150600360016003805490500381548110610fd757fe5b906000526020600020015460038281548110610fef57fe5b600091825260209091200155611008565b600101610f06565b50600280548061101457fe5b600082815260209020810160001990810180546001600160a01b0319169055019055600380548061104157fe5b600082815260208120820160001990810182905590910190915560048054839003905560405182916001600160a01b038516917f7b0884b4b6bb4e0c1385ad42168fa556c14d4d799c1bf22f081aff3efff6ea0c9190a35050565b6001600160a01b0381166000908152600e60209081526040918290208054835181840281018401909452808452606093928301828280156110fc57602002820191906000526020600020905b8154815260200190600101908083116110e8575b50505050509050919050565b6000546001600160a01b031633146111325760405162461bcd60e51b8152600401610edb90614d36565b60405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb906111609085908590600401614be5565b602060405180830381600087803b15801561117a57600080fd5b505af115801561118e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b29190614ade565b50505050565b60016020526000908152604090205460ff1681565b6001600160a01b0381166000908152600c60209081526040918290208054835181840281018401909452808452606093928301828280156110fc57602002820191906000526020600020908154815260200190600101908083116110e85750505050509050919050565b6001600160a01b0381166000908152600b60209081526040918290208054835181840281018401909452808452606093928301828280156110fc57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116112835750505050509050919050565b601960209081526000928352604080842090915290825290205481565b6000546001600160a01b031690565b6060600380548060200260200160405190810160405280929190818152602001828054801561132657602002820191906000526020600020905b815481526020019060010190808311611312575b5050505050905090565b6008602052816000526040600020818154811061134957fe5b90600052602060002001600091509150505481565b601760209081526000928352604080842090915290825290205481565b6000546001600160a01b031633146113a55760405162461bcd60e51b8152600401610edb90614d36565b80518251146113c65760405162461bcd60e51b8152600401610edb90614e37565b60005b8251811015611440578181815181106113de57fe5b6020026020010151600460008282540192505081905550600180600085848151811061140657fe5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790556001016113c9565b50815161145490600290602085019061437d565b5080516114689060039060208401906143e2565b505050565b6001600160a01b0381166000908152600d60209081526040918290208054835181840281018401909452808452606093928301828280156110fc576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116112835750505050509050919050565b601f546001600160a01b031681565b600554604051636e0cf42160e11b81526001600160a01b039091169063dc19e84290611520908590600401614bd1565b60206040518083038186803b15801561153857600080fd5b505afa15801561154c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115709190614ade565b61158c5760405162461bcd60e51b8152600401610edb90614e57565b6001600160a01b0382166000908152601c602052604090205460ff16156115c55760405162461bcd60e51b8152600401610edb90614ec1565b6001600160a01b039091166000908152601c60208181526040808420805460ff19166001908117909155601d808452948290208651805180518355850151928201929092558184015180516002830155840151600382015581830151805160048301558401516005820155606091820151805160068301558401516007820155868401518051805160088401558501516009830155808501518051600a840155850151600b830155808401518051600c840155850151600d8301558201518051600e830155840151600f8201558683015180518051601084015585015160118301558085015180516012840155850151601383015580840151805160148401558501516015830155820151805160168301558401516017820155958101518051805160188901558401516019880155808401518051601a890155840151601b8801559182015180519487019490945592820151938501939093559101518051601e8401550151601f90910155565b60008061173f84610e30565b90506060846001600160a01b031663a0e67e2b6040518163ffffffff1660e01b815260040160006040518083038186803b15801561177c57600080fd5b505afa158015611790573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526117b89190810190614901565b90506060856001600160a01b031663309a042c6040518163ffffffff1660e01b815260040160006040518083038186803b1580156117f557600080fd5b505afa158015611809573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118319190810190614a5b565b90506000866001600160a01b031663d29986c16040518163ffffffff1660e01b815260040160206040518083038186803b15801561186e57600080fd5b505afa158015611882573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a69190614b31565b905060005b8351811015611925578381815181106118c057fe5b60200260200101516001600160a01b0316876001600160a01b0316141561191d576119118261190b8584815181106118f457fe5b60200260200101518861389090919063ffffffff16565b906138ca565b95505050505050610ccf565b6001016118ab565b505050505092915050565b600b602052816000526040600020818154811061194957fe5b6000918252602090912001546001600160a01b03169150829050565b601260209081526000928352604080842090915290825290205481565b6001600160a01b0381166000908152601360209081526040918290208054835181840281018401909452808452606093928301828280156110fc576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116112835750505050509050919050565b60156020526000908152604090205481565b601d60208181526000928352604092839020835160c0808201865282546080808401918252600185015460a080860191909152918452875180890189526002860154815260038601548188015284870152875180890189526004860154815260058601548188015284890152875180890189526006860154815260078601548188015260608086019190915288518085018a52600887015481840190815260098801548286015281528951808b018b52600a8801548152600b880154818a0152818901528951808b018b52600c8801548152600d880154818a0152818b01528951808b018b52600e8801548152600f880154818a01528183015289518086018b52601088015481850190815260118901548287015281528a51808c018c52601289015481526013890154818b0152818a01528a51808c018c52601489015481526015890154818b0152818c01528a51808c018c52601689015481526017890154818b0152818401528a519586018b5260188801549386019384526019880154948601949094529184528851808a018a52601a8701548152601b87015481890152848801528851808a018a52601c87015481529786015488880152838901979097528751808901909852601e8501548852601f9094015494870194909452938401949094529184565b6001600160a01b039182166000908152601a60209081526040808320938516835292905220541690565b6000546001600160a01b03163314611c445760405162461bcd60e51b8152600401610edb90614d36565b6001600160a01b03919091166000908152601060205260409020805460ff1916911515919091179055565b601f5460405163edb12adf60e01b81526001600160a01b039091169063edb12adf90611c9f908490600401614bd1565b600060405180830381600087803b158015611cb957600080fd5b505af1925050508015611cca575060015b50611cd4816120e8565b1561205057600554604051636e0cf42160e11b81526001600160a01b039091169063dc19e84290611d09908490600401614bd1565b60206040518083038186803b158015611d2157600080fd5b505afa158015611d35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d599190614ade565b611d755760405162461bcd60e51b8152600401610edb90614e57565b806001600160a01b0316635468d6d76040518163ffffffff1660e01b815260040160206040518083038186803b158015611dae57600080fd5b505afa158015611dc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611de69190614ade565b611e025760405162461bcd60e51b8152600401610edb90614f4f565b6000611e0e8233610e53565b905060008111611e305760405162461bcd60e51b8152600401610edb90614f2b565b6001600160a01b0382166000908152601760209081526040808320338085529252909120805483019055611e6390613909565b15611f9e576001600160a01b03821660009081526013602052604081208054909190611e8b57fe5b9060005260206000200160009054906101000a90046001600160a01b03166001600160a01b031663a9059cbb336001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ef057600080fd5b505afa158015611f04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f2891906146ae565b836040518363ffffffff1660e01b8152600401611f46929190614be5565b602060405180830381600087803b158015611f6057600080fd5b505af1158015611f74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f989190614ade565b5061204e565b6001600160a01b03821660009081526013602052604081208054909190611fc157fe5b60009182526020909120015460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90611ffc9033908590600401614be5565b602060405180830381600087803b15801561201657600080fd5b505af115801561202a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114689190614ade565b505b50565b6000546001600160a01b0316331461207d5760405162461bcd60e51b8152600401610edb90614d36565b60405133904780156108fc02916000818181858888f19350505050158015612050573d6000803e3d6000fd5b6007602052816000526040600020818154811061194957fe5b601a6020908152600092835260408084209091529082529020546001600160a01b031681565b60006001826001600160a01b03166373a9855c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561212557600080fd5b505afa158015612139573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061215d9190614afa565b600181111561216857fe5b1492915050565b601660209081526000928352604080842090915290825290205481565b601f546001600160a01b031633146121b65760405162461bcd60e51b8152600401610edb90614d36565b8281146121d55760405162461bcd60e51b8152600401610edb90614e80565b6001600160a01b0386811660009081526006602052604090205416612297576000866001600160a01b0316633018205f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561222f57600080fd5b505afa158015612243573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061226791906146ae565b6001600160a01b0380891660009081526006602052604090208054919092166001600160a01b0319909116179055505b6060806122a48888613942565b915091506060806122ba888888888e8989613d0c565b915091506122ca8a8a8484613f70565b5050506001600160a01b039096166000908152600f60205260409020805460ff19166001179055505050505050565b600f6020526000908152604090205460ff1681565b6000546001600160a01b031633146123385760405162461bcd60e51b8152600401610edb90614d36565b6001600160a01b03811661235e5760405162461bcd60e51b8152600401610edb90614dea565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146123e35760405162461bcd60e51b8152600401610edb90614d36565b6001600160a01b03821660009081526001602052604090205460ff161561241c5760405162461bcd60e51b8152600401610edb90614dc0565b6001600160a01b0382166000818152600160208190526040808320805460ff191683179055600280548084019091557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319168517905560038054928301815583527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b9091018490556004805485019055518392917fbd5dcf0b25226117c4a68a0129ffdd4b0541ef5e482ad7de9a96ccb6d6a8ebde91a35050565b6060600280548060200260200160405190810160405280929190818152602001828054801561132657602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161251c575050505050905090565b6001600160a01b0381166000908152600a60209081526040918290208054835181840281018401909452808452606093928301828280156110fc57602002820191906000526020600020908154815260200190600101908083116110e85750505050509050919050565b6001600160a01b0381166000908152600860209081526040918290208054835181840281018401909452808452606093928301828280156110fc57602002820191906000526020600020908154815260200190600101908083116110e85750505050509050919050565b600a602052816000526040600020818154811061134957fe5b601b602052826000526040600020602052816000526040600020818154811061265557fe5b60009182526020909120600290910201546001600160a01b0316925083915050565b6009602052816000526040600020818154811061194957fe5b60106020526000908152604090205460ff1681565b600e602052816000526040600020818154811061134957fe5b6001600160a01b03166000908152600f602052604090205460ff1690565b6000546001600160a01b031633146127065760405162461bcd60e51b8152600401610edb90614d36565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6006602052600090815260409020546001600160a01b031681565b6003818154811061275057fe5b600091825260209091200154905081565b6001600160a01b0381166000908152601460205260409020606090610ccf906140e9565b6001600160a01b038083166000908152601b602090815260408083209385168352928152828220805484518184028101840190955280855260609493919290919084015b8282101561285e5760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561284657602002820191906000526020600020905b815481526020019060010190808311612832575b505050505081525050815260200190600101906127c9565b50505050905092915050565b60045481565b6000546001600160a01b0316331461289a5760405162461bcd60e51b8152600401610edb90614d36565b6001600160a01b0381166128c05760405162461bcd60e51b8152600401610edb90614d97565b601f80546001600160a01b0319166001600160a01b0383169081179091556040513391907ff5e71cc69e4610808e8e7c9099d63353897264c5dfc4da1a0320395866de497190600090a350565b82811461292c5760405162461bcd60e51b8152600401610edb90614e80565b600554604051636e0cf42160e11b81526001600160a01b039091169063dc19e8429061295c903390600401614bd1565b60206040518083038186803b15801561297457600080fd5b505afa158015612988573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129ac9190614ade565b6129c85760405162461bcd60e51b8152600401610edb90614e57565b336000908152601360205260409020546129f8573360009081526013602052604090206129f6908585614429565b505b336000908152601a602090815260408083206001600160a01b0389811685529252909120541680612a9157336000818152601a602090815260408083206001600160a01b038b8116855290835281842080546001600160a01b031916918d169190911790559282526014905220612a6f90886140f5565b612a8e57336000908152601460205260409020612a8c908861410a565b505b50855b6001600160a01b038116612ab75760405162461bcd60e51b8152600401610edb90614f7d565b612ae683836000818110612ac757fe5b336000908152601560209081526040909120549391020135905061411f565b336000908152601560205260409020556060846001600160401b0381118015612b0e57600080fd5b50604051908082528060200260200182016040528015612b38578160200160208202803683370190505b50905060005b85811015612c1f573360009081526018602090815260408083206001600160a01b0387168452909152902054612b9e57848482818110612b7a57fe5b90506020020135828281518110612b8d57fe5b602002602001018181525050612c17565b3360009081526018602090815260408083206001600160a01b038716845290915290208054612bfe919083908110612bd257fe5b9060005260206000200154868684818110612be957fe5b9050602002013561411f90919063ffffffff16565b828281518110612c0a57fe5b6020026020010181815250505b600101612b3e565b503360009081526018602090815260408083206001600160a01b038616845282529091208251612c51928401906143e2565b50336000818152601b602090815260408083206001600160a01b03878116855290835281842094845260198352818420908c16845290915290205480612d8257612c9961447c565b6001600160a01b038a1681526040805160208089028281018201909352888252909189918991829185019084908082843760009201829052506020868101958652885460018082018b558a845292829020885160029092020180546001600160a01b0319166001600160a01b039092169190911781559551805188979650612d289550928601935001906143e2565b505050828054905060196000336001600160a01b03166001600160a01b0316815260200190815260200160002060008c6001600160a01b03166001600160a01b031681526020019081526020016000208190555050612e38565b336000908152601b602090815260408083206001600160a01b0388168452909152812080546000198401908110612db557fe5b9060005260206000209060020201905060005b6001820154811015612e3557612e12888883818110612de357fe5b90506020020135836001018381548110612df957fe5b906000526020600020015461411f90919063ffffffff16565b826001018281548110612e2157fe5b600091825260209091200155600101612dc8565b50505b50505050505050505050565b600d602052816000526040600020818154811061194957fe5b6001600160a01b0381166000908152600960209081526040918290208054835181840281018401909452808452606093928301828280156110fc576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116112835750505050509050919050565b6013602052816000526040600020818154811061194957fe5b6001600160a01b0380831660009081526018602090815260408083209385168352929052908120548190612f1f579050610ccf565b612f35612f2e85856000612fcd565b829061411f565b9050612f46612f2e85856001612fcd565b9050612f57612f2e85856002612fcd565b9050612f68612f2e85856003612fcd565b6001600160a01b038086166000908152601560209081526040808320546018835281842094891684529390915281208054939450612fc59361190b9290612fab57fe5b90600052602060002001548461389090919063ffffffff16565b949350505050565b6001600160a01b0380841660009081526018602090815260408083209386168352929052908120548190613002576000613040565b6001600160a01b0380861660009081526018602090815260408083209388168352929052908120805490919061303457fe5b90600052602060002001545b905061304a614494565b506001600160a01b0385166000908152601d602081815260408084208151610140810183528154610100820190815260018301546101208301526080808301918252845180860186526002850154815260038501548188015260a080850191909152855180870187526004860154815260058601548189015260c08086019190915286518088018852600687015481526007870154818a015260e0860152928452855180840187526008860154818401908152600987015482840152815286518088018852600a8701548152600b870154818a01528189015286518088018852600c8701548152600d870154818a01528188015286518088018852600e8701548152600f870154818a015260608281019190915285890191909152865180850188526010870154818501908152601188015482850152815287518089018952601288015481526013880154818b0152818a015287518089018952601488015481526015880154818b01528189015287518089018952601688015481526017880154818b0152818301528588015286519384018752601886015492840192835260198601549184019190915290825284518086018652601a8501548152601b850154818801528287015284518086018652601c85015481529684015487870152818501969096528351808501909452601e8301548452601f9092015493830193909352808401919091529181019190915290846132d9576001600160a01b038716600090815260086020526040902054156132d4576132d1601e5461190b613295868660000151614144565b6001600160a01b038b16600090815260086020526040812080549091906132b857fe5b906000526020600020015461389090919063ffffffff16565b90505b6133ff565b846001141561333a576001600160a01b0387166000908152600a6020526040902054156132d4576132d1601e5461190b613317868660200151614144565b6001600160a01b038b166000908152600a6020526040812080549091906132b857fe5b846002141561339b576001600160a01b0387166000908152600c6020526040902054156132d4576132d1601e5461190b613378868660400151614144565b6001600160a01b038b166000908152600c6020526040812080549091906132b857fe5b84600314156133ff576001600160a01b0387166000908152600e6020526040902054156133ff576133fc601e5461190b6133d9868660600151614144565b6001600160a01b038b166000908152600e6020526040812080549091906132b857fe5b90505b9695505050505050565b6001600160a01b0381166000908152600760209081526040918290208054835181840281018401909452808452606093928301828280156110fc576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116112835750505050509050919050565b6001600160a01b0380831660009081526016602090815260408083209385168352929052908120546134b390610e478585611733565b9392505050565b601f5460405163edb12adf60e01b81526001600160a01b039091169063edb12adf906134ea908490600401614bd1565b600060405180830381600087803b15801561350457600080fd5b505af1925050508015613515575060015b5061351f816120e8565b1561205057600554604051636e0cf42160e11b81526001600160a01b039091169063dc19e84290613554908490600401614bd1565b60206040518083038186803b15801561356c57600080fd5b505afa158015613580573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135a49190614ade565b6135c05760405162461bcd60e51b8152600401610edb90614e57565b806001600160a01b0316635468d6d76040518163ffffffff1660e01b815260040160206040518083038186803b1580156135f957600080fd5b505afa15801561360d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136319190614ade565b61364d5760405162461bcd60e51b8152600401610edb90614f4f565b6040516327304dfd60e01b81526001600160a01b038216906327304dfd90613679903390600401614bd1565b60206040518083038186803b15801561369157600080fd5b505afa1580156136a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136c99190614ade565b806137555750336001600160a01b0316816001600160a01b0316633018205f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561371257600080fd5b505afa158015613726573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061374a91906146ae565b6001600160a01b0316145b6137715760405162461bcd60e51b8152600401610edb90614e14565b600061377d823361347d565b90506000811161379f5760405162461bcd60e51b8152600401610edb90614f2b565b6001600160a01b0382166000908152601660209081526040808320338085529252909120805483019055611e6390613909565b600c602052816000526040600020818154811061134957fe5b60116020526000908152604090205481565b6001600160a01b03811660009081526014602052604081208161381f8261421f565b905060005b818110156138465761383a85610b14858461422a565b90930192600101613824565b505050919050565b60006134b383836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250614236565b60008261389f57506000610ccf565b828202828482816138ac57fe5b04146134b35760405162461bcd60e51b8152600401610edb90614eea565b60006134b383836040518060400160405280601a815260200179536166654d6174683a206469766973696f6e206279207a65726f60301b815250614262565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590612fc5575050151592915050565b60608082613a34576001600160a01b038416600090815260076020908152604091829020805483518184028101840190945280845290918301828280156139b257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613994575b5050505050915060086000856001600160a01b03166001600160a01b03168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015613a2857602002820191906000526020600020905b815481526020019060010190808311613a14575b50505050509050613d05565b8260011415613b25576001600160a01b03841660009081526009602090815260409182902080548351818402810184019094528084529091830182828015613aa557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613a87575b50505050509150600a6000856001600160a01b03166001600160a01b03168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015613a285760200282019190600052602060002090815481526020019060010190808311613a145750505050509050613d05565b8260021415613c16576001600160a01b0384166000908152600b602090815260409182902080548351818402810184019094528084529091830182828015613b9657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613b78575b50505050509150600c6000856001600160a01b03166001600160a01b03168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015613a285760200282019190600052602060002090815481526020019060010190808311613a145750505050509050613d05565b8260031415613d05576001600160a01b0384166000908152600d602090815260409182902080548351818402810184019094528084529091830182828015613c8757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613c69575b50505050509150600e6000856001600160a01b03166001600160a01b03168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015613cfd57602002820191906000526020600020905b815481526020019060010190808311613ce9575b505050505090505b9250929050565b606080876001600160401b0381118015613d2557600080fd5b50604051908082528060200260200182016040528015613d4f578160200160208202803683370190505b509150876001600160401b0381118015613d6857600080fd5b50604051908082528060200260200182016040528015613d92578160200160208202803683370190505b50905082518451148015613da557508351155b80613dc957506001600160a01b0385166000908152600f602052604090205460ff16155b15613e5e5760005b88811015613e5857898982818110613de557fe5b9050602002016020810190613dfa9190614692565b838281518110613e0657fe5b60200260200101906001600160a01b031690816001600160a01b031681525050878782818110613e3257fe5b90506020020135828281518110613e4557fe5b6020908102919091010152600101613dd1565b50613f64565b60005b88811015613f6257898982818110613e7557fe5b9050602002016020810190613e8a9190614692565b6001600160a01b0316858281518110613e9f57fe5b60200260200101516001600160a01b03161415613f5a576000888883818110613ec457fe5b9050602002013590508a8a83818110613ed957fe5b9050602002016020810190613eee9190614692565b848381518110613efa57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050613f4081868481518110613f2a57fe5b602002602001015161411f90919063ffffffff16565b838381518110613f4c57fe5b602002602001018181525050505b600101613e61565b505b97509795505050505050565b82613fce576001600160a01b03841660009081526007602090815260409091208351613f9e9285019061437d565b506001600160a01b03841660009081526008602090815260409091208251613fc8928401906143e2565b506111b2565b826001141561402a576001600160a01b038416600090815260096020908152604090912083516140009285019061437d565b506001600160a01b0384166000908152600a602090815260409091208251613fc8928401906143e2565b8260021415614086576001600160a01b0384166000908152600b60209081526040909120835161405c9285019061437d565b506001600160a01b0384166000908152600c602090815260409091208251613fc8928401906143e2565b82600314156111b2576001600160a01b0384166000908152600d6020908152604090912083516140b89285019061437d565b506001600160a01b0384166000908152600e6020908152604090912082516140e2928401906143e2565b5050505050565b6060806134b383614299565b60006134b3836001600160a01b0384166142f3565b60006134b3836001600160a01b03841661430b565b6000828201838110156134b35760405162461bcd60e51b8152600401610edb90614d62565b6000805b6004811015614218578061417e57825151841080159061416c575060208301515184105b1561417e575050805160200151610ccf565b80600114156141b45760208301515184108015906141a0575060408301515184105b156141b45750506020808201510151610ccf565b80600214156141eb5760408301515184108015906141d6575060608301515184105b156141eb575050604081015160200151610ccf565b8060031415614210576060830151518410614210575050606081015160200151610ccf565b600101614148565b5092915050565b6000610ccf82614355565b60006134b38383614359565b6000818484111561425a5760405162461bcd60e51b8152600401610edb9190614ce3565b505050900390565b600081836142835760405162461bcd60e51b8152600401610edb9190614ce3565b50600083858161428f57fe5b0495945050505050565b6060816000018054806020026020016040519081016040528092919081815260200182805480156110fc57602002820191906000526020600020908154815260200190600101908083116110e85750505050509050919050565b60009081526001919091016020526040902054151590565b600061431783836142f3565b61434d57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610ccf565b506000610ccf565b5490565b600082600001828154811061436a57fe5b9060005260206000200154905092915050565b8280548282559060005260206000209081019282156143d2579160200282015b828111156143d257825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019061439d565b506143de9291506144d3565b5090565b82805482825590600052602060002090810192821561441d579160200282015b8281111561441d578251825591602001919060010190614402565b506143de9291506144f2565b8280548282559060005260206000209081019282156143d2579160200282015b828111156143d25781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190614449565b60408051808201909152600081526060602082015290565b60405180608001604052806144a7614507565b81526020016144b4614507565b81526020016144c1614507565b81526020016144ce614507565b905290565b5b808211156143de5780546001600160a01b03191681556001016144d4565b5b808211156143de57600081556001016144f3565b604051806080016040528061451a61453d565b815260200161452761453d565b815260200161453461453d565b81526020016144ce5b604051806040016040528060008152602001600081525090565b60008083601f840112614568578182fd5b5081356001600160401b0381111561457e578182fd5b6020830191508360208083028501011115613d0557600080fd5b600082601f8301126145a8578081fd5b81356145bb6145b682615012565b614fec565b8181529150602080830190848101818402860182018710156145dc57600080fd5b60005b84811015611925578135845292820192908201906001016145df565b6000610100828403121561460d578081fd5b6146176080614fec565b90506146238383614661565b81526146328360408401614661565b60208201526146448360808401614661565b60408201526146568360c08401614661565b606082015292915050565b600060408284031215614672578081fd5b61467c6040614fec565b9050813581526020820135602082015292915050565b6000602082840312156146a3578081fd5b81356134b381615031565b6000602082840312156146bf578081fd5b81516134b381615031565b600080604083850312156146dc578081fd5b82356146e781615031565b915060208301356146f781615031565b809150509250929050565b6000806000806000806080878903121561471a578182fd5b863561472581615031565b9550602087013561473581615031565b945060408701356001600160401b0380821115614750578384fd5b61475c8a838b01614557565b90965094506060890135915080821115614774578384fd5b5061478189828a01614557565b979a9699509497509295939492505050565b6000806000606084860312156147a7578283fd5b83356147b281615031565b925060208401356147c281615031565b929592945050506040919091013590565b600080604083850312156147e5578081fd5b82356147f081615031565b915060208301356146f781615046565b600080828403610420811215614814578283fd5b833561481f81615031565b9250610400601f1982011215614833578182fd5b5061483e6080614fec565b61484b85602086016145fb565b815261485b8561012086016145fb565b602082015261486e8561022086016145fb565b60408201526148818561032086016145fb565b6060820152809150509250929050565b600080604083850312156148a3578182fd5b82356148ae81615031565b946020939093013593505050565b600080600080600080608087890312156148d4578384fd5b86356148df81615031565b95506020870135945060408701356001600160401b0380821115614750578586fd5b60006020808385031215614913578182fd5b82516001600160401b03811115614928578283fd5b8301601f81018513614938578283fd5b80516149466145b682615012565b8181528381019083850185840285018601891015614962578687fd5b8694505b8385101561498d57805161497981615031565b835260019490940193918501918501614966565b50979650505050505050565b600080604083850312156149ab578182fd5b82356001600160401b03808211156149c1578384fd5b818501915085601f8301126149d4578384fd5b81356149e26145b682615012565b80828252602080830192508086018a828387028901011115614a02578889fd5b8896505b84871015614a2d578035614a1981615031565b845260019690960195928101928101614a06565b509096508701359350505080821115614a44578283fd5b50614a5185828601614598565b9150509250929050565b60006020808385031215614a6d578182fd5b82516001600160401b03811115614a82578283fd5b8301601f81018513614a92578283fd5b8051614aa06145b682615012565b8181528381019083850185840285018601891015614abc578687fd5b8694505b8385101561498d578051835260019490940193918501918501614ac0565b600060208284031215614aef578081fd5b81516134b381615046565b600060208284031215614b0b578081fd5b8151600281106134b3578182fd5b600060208284031215614b2a578081fd5b5035919050565b600060208284031215614b42578081fd5b5051919050565b6000815180845260208085019450808401835b83811015614b7857815187529582019590820190600101614b5c565b509495945050505050565b614b8e828251614bc2565b6020810151614ba06040840182614bc2565b506040810151614bb36080840182614bc2565b50606081015161146860c08401825b80518252602090810151910152565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b81811015614c3f5783516001600160a01b031683529284019291840191600101614c1a565b50909695505050505050565b60208082528251828201819052600091906040908185019080840286018301878501865b83811015614cb757888303603f19018552815180516001600160a01b03168452870151878401879052614ca487850182614b49565b9588019593505090860190600101614c6f565b509098975050505050505050565b6000602082526134b36020830184614b49565b901515815260200190565b6000602080835283518082850152825b81811015614d0f57858101830151858201604001528201614cf3565b81811115614d205783604083870101525b50601f01601f1916929092016040019392505050565b60208082526012908201527122a9292fa727aa2fa1a7a72a2927a62622a960711b604082015260600190565b6020808252601b908201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604082015260600190565b6020808252600f908201526e41646472657373206973205a65726f60881b604082015260600190565b60208082526010908201526f20b2323932b9b99034b99027bbb732b960811b604082015260600190565b60208082526010908201526f4552525f5a45524f5f4144445245535360801b604082015260600190565b6020808252600990820152682737ba1027bbb732b960b91b604082015260600190565b60208082526006908201526506f776e6572560d41b604082015260600190565b6020808252600f908201526e696e76616c6964206164647265737360881b604082015260600190565b60208082526021908201527f546f6b656e206c697374206c656e677468206973206e6f742065657175616c716040820152607560f81b606082015260800190565b6020808252600f908201526e14185c985b5cc81a5cc81cd95d1959608a1b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252600a9082015269139bdd0814995dd85c9960b21b604082015260600190565b602080825260149082015273139bdd0810dbdb5c1b195d195910dbdb1b1958dd60621b604082015260600190565b6020808252601390820152726b6f6c2061646472657373206973207a6f726560681b604082015260600190565b6104008101614fb98287614b83565b614fc7610100830186614b83565b614fd5610200830185614b83565b610e93610300830184614b83565b90815260200190565b6040518181016001600160401b038111828210171561500a57600080fd5b604052919050565b60006001600160401b03821115615027578081fd5b5060209081020190565b6001600160a01b038116811461205057600080fd5b801515811461205057600080fdfea264697066735822122033e3b6fc53bcfe533607f3d5a6826643102102512b48fadfeabdcf822035f5ef64736f6c634300060c0033",
  "devdoc": {
    "author": "Desyn Labs",
    "kind": "dev",
    "methods": {
      "getController()": {
        "details": "external for gas optimization",
        "returns": {
          "_0": "address - of the owner (AKA controller)"
        }
      },
      "removeOwner(address)": {
        "details": "Allows to remove an owner. Transaction has to be sent by wallet.",
        "params": {
          "owner": "Address of owner."
        }
      },
      "setAddAdminList(address,uint256)": {
        "details": "external for gas optimization",
        "params": {
          "newOwner": "- address of new owner"
        }
      },
      "setController(address)": {
        "details": "external for gas optimization",
        "params": {
          "newOwner": "- address of new owner"
        }
      }
    },
    "title": "Vault managerFee",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getController()": {
        "notice": "Returns the address of the current owner"
      },
      "setAddAdminList(address,uint256)": {
        "notice": "Transfers ownership of the contract to a new account (`newOwner`).         Can only be called by the current owner"
      },
      "setController(address)": {
        "notice": "Transfers ownership of the contract to a new account (`newOwner`).         Can only be called by the current owner"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 17857,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 17861,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "adminList",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 17864,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "owners",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 17867,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "ownerPercentage",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 17869,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "allOwnerPercentage",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 10153,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "crpFactory",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ICRPFactory)10108"
      },
      {
        "astId": 10157,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "pool_manager",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 10162,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "pool_manager_tokenList",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 10167,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "pool_manager_tokenAmount",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 10172,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "pool_issue_tokenList",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 10177,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "pool_issue_tokenAmount",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 10182,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "pool_redeem_tokenList",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 10187,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "pool_redeem_tokenAmount",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 10192,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "pool_perfermance_tokenList",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 10197,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "pool_perfermance_tokenAmount",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 10201,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "pool_manager_isClaim",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 10205,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "black_list",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 10209,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "record_number",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10215,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "record_List",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(claimRecordInfo)10151_storage))"
      },
      {
        "astId": 10226,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "kol_token_list",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 10230,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "kols_list",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_struct(AddressSet)9886_storage)"
      },
      {
        "astId": 10234,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "init_totalAmount_list",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10240,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "manager_claimed_list",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 10246,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "kol_claimed_list",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 10253,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "kol_totalAmount_list",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_address,t_mapping(t_address,t_array(t_uint256)dyn_storage))"
      },
      {
        "astId": 10259,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "user_index_list",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 10265,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "user_kol_list",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 10272,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "kol_user_info",
        "offset": 0,
        "slot": "27",
        "type": "t_mapping(t_address,t_mapping(t_address,t_array(t_struct(kolUserInfo)10221_storage)dyn_storage))"
      },
      {
        "astId": 10276,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "is_set_params",
        "offset": 0,
        "slot": "28",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 10280,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "kol_pool_params",
        "offset": 0,
        "slot": "29",
        "type": "t_mapping(t_address,t_struct(KolPoolParams)16838_storage)"
      },
      {
        "astId": 10283,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "total_ratio",
        "offset": 0,
        "slot": "30",
        "type": "t_uint256"
      },
      {
        "astId": 10285,
        "contract": "contracts/deploy/UserVault.sol:UserVault",
        "label": "vaultAddress",
        "offset": 0,
        "slot": "31",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(claimTokenInfo)10127_storage)dyn_storage": {
        "base": "t_struct(claimTokenInfo)10127_storage",
        "encoding": "dynamic_array",
        "label": "struct UserVault.claimTokenInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(kolUserInfo)10221_storage)dyn_storage": {
        "base": "t_struct(kolUserInfo)10221_storage",
        "encoding": "dynamic_array",
        "label": "struct UserVault.kolUserInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ICRPFactory)10108": {
        "encoding": "inplace",
        "label": "contract ICRPFactory",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_struct(kolUserInfo)10221_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct UserVault.kolUserInfo[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(kolUserInfo)10221_storage)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_array(t_struct(kolUserInfo)10221_storage)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct UserVault.kolUserInfo[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_struct(kolUserInfo)10221_storage)dyn_storage)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_array(t_uint256)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(claimRecordInfo)10151_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct UserVault.claimRecordInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(claimRecordInfo)10151_storage)"
      },
      "t_mapping(t_address,t_struct(AddressSet)9886_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)9886_storage"
      },
      "t_mapping(t_address,t_struct(KolPoolParams)16838_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SmartPoolManager.KolPoolParams)",
        "numberOfBytes": "32",
        "value": "t_struct(KolPoolParams)16838_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(claimRecordInfo)10151_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct UserVault.claimRecordInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(claimRecordInfo)10151_storage"
      },
      "t_struct(AddressSet)9886_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 9885,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)9699_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(KolPoolParams)16838_storage": {
        "encoding": "inplace",
        "label": "struct SmartPoolManager.KolPoolParams",
        "members": [
          {
            "astId": 16831,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "managerFee",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(feeParams)16829_storage"
          },
          {
            "astId": 16833,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "issueFee",
            "offset": 0,
            "slot": "8",
            "type": "t_struct(feeParams)16829_storage"
          },
          {
            "astId": 16835,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "redeemFee",
            "offset": 0,
            "slot": "16",
            "type": "t_struct(feeParams)16829_storage"
          },
          {
            "astId": 16837,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "perfermanceFee",
            "offset": 0,
            "slot": "24",
            "type": "t_struct(feeParams)16829_storage"
          }
        ],
        "numberOfBytes": "1024"
      },
      "t_struct(Set)9699_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 9694,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 9698,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(claimRecordInfo)10151_storage": {
        "encoding": "inplace",
        "label": "struct UserVault.claimRecordInfo",
        "members": [
          {
            "astId": 10147,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "time",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10150,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "tokens",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_struct(claimTokenInfo)10127_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(claimTokenInfo)10127_storage": {
        "encoding": "inplace",
        "label": "struct UserVault.claimTokenInfo",
        "members": [
          {
            "astId": 10122,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 10124,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "decimals",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10126,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(feeParams)16829_storage": {
        "encoding": "inplace",
        "label": "struct SmartPoolManager.feeParams",
        "members": [
          {
            "astId": 16822,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "firstLevel",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(levelParams)16820_storage"
          },
          {
            "astId": 16824,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "secondLevel",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(levelParams)16820_storage"
          },
          {
            "astId": 16826,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "thirdLevel",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(levelParams)16820_storage"
          },
          {
            "astId": 16828,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "fourLevel",
            "offset": 0,
            "slot": "6",
            "type": "t_struct(levelParams)16820_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(kolUserInfo)10221_storage": {
        "encoding": "inplace",
        "label": "struct UserVault.kolUserInfo",
        "members": [
          {
            "astId": 10217,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "userAdr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 10220,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "userAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(levelParams)16820_storage": {
        "encoding": "inplace",
        "label": "struct SmartPoolManager.levelParams",
        "members": [
          {
            "astId": 16817,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "level",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 16819,
            "contract": "contracts/deploy/UserVault.sol:UserVault",
            "label": "ratio",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
