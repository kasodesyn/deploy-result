{
  "address": "0xC4Ea8F2fF0DeB713f4311AB0527C26D67B145f42",
  "abi": [
    {
      "anonymous": true,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes4",
          "name": "sig",
          "type": "bytes4"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "LOG_CALL",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "ManagerClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "ManagersClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "TOTAL_RATIO",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimEther",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "claimToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokensIn",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amountsIn",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokensAmountIR",
          "type": "uint256[]"
        },
        {
          "internalType": "bool",
          "name": "isPerfermance",
          "type": "bool"
        }
      ],
      "name": "depositIssueRedeemPToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokensIn",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amountsIn",
          "type": "uint256[]"
        }
      ],
      "name": "depositManagerToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getManagerClaimBool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getManagerFeeTypes",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "tokenList",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "managerAmount",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "issueAmount",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "redeemAmount",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "perfermanceAmount",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct Vault.PoolTokens",
          "name": "result",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getUnManagerReward",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokensList",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "issuance_portion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "management_portion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "managerClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "performance_portion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolsStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "couldManagerClaim",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isBlackList",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redemption_portion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "bools",
          "type": "bool"
        }
      ],
      "name": "setBlackList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adr",
          "type": "address"
        }
      ],
      "name": "setCrpFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setIssueRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setManagerRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setPerfermanceRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setRedeemRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adr",
          "type": "address"
        }
      ],
      "name": "setUserVaultAdr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "userVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xa63ed466e46de24d818048f0f0ac872beb9b6401585f64b828b0c364b8acec5f",
  "receipt": {
    "to": null,
    "from": "0x595b85b4A418e3B8df897D02F5BD49167D00862F",
    "contractAddress": "0xC4Ea8F2fF0DeB713f4311AB0527C26D67B145f42",
    "transactionIndex": 0,
    "gasUsed": "3597404",
    "logsBloom": "0x
    "blockHash": "0x20f461a19fb0ff2d841a580ba0f8cc794e216940dfab7845ea3cd003a2cb652d",
    "transactionHash": "0xa63ed466e46de24d818048f0f0ac872beb9b6401585f64b828b0c364b8acec5f",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 8173379,
        "transactionHash": "0xa63ed466e46de24d818048f0f0ac872beb9b6401585f64b828b0c364b8acec5f",
        "address": "0xC4Ea8F2fF0DeB713f4311AB0527C26D67B145f42",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000595b85b4a418e3b8df897d02f5bd49167d00862f"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x20f461a19fb0ff2d841a580ba0f8cc794e216940dfab7845ea3cd003a2cb652d"
      }
    ],
    "blockNumber": 8173379,
    "cumulativeGasUsed": "3597404",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9b5416e7767fff75ac6acc2d0c498232",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"LOG_CALL\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ManagerClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ManagersClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TOTAL_RATIO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimEther\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokensIn\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokensAmountIR\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"isPerfermance\",\"type\":\"bool\"}],\"name\":\"depositIssueRedeemPToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokensIn\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsIn\",\"type\":\"uint256[]\"}],\"name\":\"depositManagerToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getManagerClaimBool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getManagerFeeTypes\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"tokenList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"managerAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"issueAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"redeemAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"perfermanceAmount\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Vault.PoolTokens\",\"name\":\"result\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getUnManagerReward\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokensList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issuance_portion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"management_portion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"managerClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performance_portion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolsStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"couldManagerClaim\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isBlackList\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemption_portion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"bools\",\"type\":\"bool\"}],\"name\":\"setBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setCrpFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setIssueRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setManagerRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setPerfermanceRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setRedeemRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setUserVaultAdr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Desyn Labs\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Vault managerFee\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/deploy/Vault.sol\":\"Vault\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"contracts/base/Logs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\ncontract Logs {\\n    event LOG_CALL(bytes4 indexed sig, address indexed caller, bytes data) anonymous;\\n\\n    modifier _logs_() {\\n        emit LOG_CALL(msg.sig, msg.sender, msg.data);\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x942b3c172dd3f0910c3589d703b4f224c94c76a13cc84d7add6318206cff512e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/deploy/Vault.sol\":{\"content\":\"pragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../openzeppelin/Ownable.sol\\\";\\nimport \\\"../interfaces/IDSProxy.sol\\\";\\nimport \\\"../libraries/SafeMath.sol\\\";\\nimport \\\"../libraries/Address.sol\\\";\\nimport \\\"../libraries/SafeERC20.sol\\\";\\nimport \\\"../base/Logs.sol\\\";\\n\\ninterface ICRPPool {\\n    function getController() external view returns (address);\\n\\n    enum Etypes {\\n        OPENED,\\n        CLOSED\\n    }\\n\\n    function etype() external view returns (Etypes);\\n}\\n\\ninterface IDesynOwnable {\\n    function adminList(address adr) external view returns (bool);\\n    function getController() external view returns (address);\\n    function getOwners() external view returns (address[] memory);\\n    function getOwnerPercentage() external view returns (uint[] memory);\\n    function allOwnerPercentage() external view returns (uint);\\n}\\n\\ninterface IUserVault {\\n    function depositToken(\\n        address pool,\\n        uint types,\\n        address[] calldata poolTokens,\\n        uint[] calldata tokensAmount\\n    ) external;\\n}\\n\\ninterface ICRPFactory {\\n    function isCrp(address addr) external view returns (bool);\\n}\\n\\n/**\\n * @author Desyn Labs\\n * @title Vault managerFee\\n */\\ncontract Vault is Ownable, Logs {\\n    using SafeMath for uint;\\n    using Address for address;\\n    using SafeERC20 for IERC20;\\n\\n    ICRPFactory crpFactory;\\n    address public userVault;\\n\\n    event ManagersClaim(address indexed caller,address indexed pool, address token, uint amount, uint time);\\n    event ManagerClaim(address indexed caller,address indexed manager, address token, uint amount, uint time);\\n\\n    // pool of tokens\\n    struct PoolTokens {\\n        address[] tokenList;\\n        uint[] managerAmount;\\n        uint[] issueAmount;\\n        uint[] redeemAmount;\\n        uint[] perfermanceAmount;\\n    }\\n\\n    struct PoolStatus {\\n        bool couldManagerClaim;\\n        bool isBlackList;\\n    }\\n    \\n    struct ClaimTokens {\\n        address[] tokens;\\n        uint[] amounts;\\n    }\\n\\n    // pool tokens\\n    mapping(address => PoolTokens) poolsTokens;\\n    mapping(address => PoolStatus) public poolsStatus;\\n\\n    mapping (address => ClaimTokens) manageHasClaimed;\\n\\n    // default ratio config\\n    uint public TOTAL_RATIO = 1000;\\n    uint public management_portion = 800;\\n    uint public issuance_portion = 800;\\n    uint public redemption_portion = 800;\\n    uint public performance_portion = 800;\\n\\n    receive() external payable {}\\n\\n    function depositManagerToken(address[] calldata tokensIn, uint[] calldata amountsIn) external {\\n        address pool = msg.sender;\\n        require(crpFactory.isCrp(pool), \\\"ERR_INVALID_POOL_ADDRESS\\\");\\n        require(tokensIn.length == amountsIn.length, \\\"ERR_TOKEN_LENGTH_NOT_MATCH\\\");\\n        _depositTokenIM(0, pool, tokensIn, amountsIn);\\n\\n        poolsStatus[pool].couldManagerClaim = true;\\n        \\n        if (_isClosePool(pool)) this.managerClaim(pool);\\n    }\\n\\n    function depositIssueRedeemPToken(\\n        address[] calldata tokensIn,\\n        uint[] calldata amountsIn,\\n        uint[] calldata tokensAmountIR,\\n        bool isPerfermance\\n    ) external {\\n        address pool = msg.sender;\\n        require(crpFactory.isCrp(pool), \\\"ERR_INVALID_POOL_ADDRESS\\\");\\n        require(tokensIn.length == amountsIn.length, \\\"ERR_TOKEN_LENGTH_NOT_MATCH\\\");\\n\\n        isPerfermance\\n                // I-issuce\\uff1b M-mamager\\uff1b R-redeem\\uff1bp-performance\\n                ? _depositTokenRP(pool, tokensIn, amountsIn, tokensAmountIR)\\n                : _depositTokenIM(1, pool, tokensIn, amountsIn);\\n\\n        poolsStatus[pool].couldManagerClaim = true;\\n\\n        if (_isClosePool(pool)) this.managerClaim(pool);   \\n    }\\n\\n    function getManagerClaimBool(address pool) external view returns (bool) {\\n        return poolsStatus[pool].couldManagerClaim;\\n    }\\n\\n    function setBlackList(address pool, bool bools) external onlyOwner _logs_ {\\n        poolsStatus[pool].isBlackList = bools;\\n    }\\n\\n    function setUserVaultAdr(address adr) external onlyOwner _logs_ {\\n        require(adr != address(0), \\\"ERR_INVALID_USERVAULT_ADDRESS\\\");\\n        userVault = adr;\\n    }\\n\\n    function setCrpFactory(address adr) external onlyOwner _logs_ {\\n        crpFactory = ICRPFactory(adr);\\n    }\\n\\n    function claimToken(\\n        address token,\\n        address user,\\n        uint amount\\n    ) external onlyOwner {\\n        IERC20(token).safeTransfer(user, amount);\\n    }\\n\\n    function claimEther() external payable onlyOwner {\\n        msg.sender.transfer(address(this).balance);\\n    }\\n\\n    function setManagerRatio(uint amount) external onlyOwner _logs_ {\\n        require(amount <= TOTAL_RATIO, \\\"Maximum limit exceeded\\\");\\n        management_portion = amount;\\n    }\\n\\n    function setIssueRatio(uint amount) external onlyOwner _logs_ {\\n        require(amount <= TOTAL_RATIO, \\\"Maximum limit exceeded\\\");\\n        issuance_portion = amount;\\n    }\\n\\n    function setRedeemRatio(uint amount) external onlyOwner _logs_ {\\n        require(amount <= TOTAL_RATIO, \\\"Maximum limit exceeded\\\");\\n        redemption_portion = amount;\\n    }\\n\\n    function setPerfermanceRatio(uint amount) external onlyOwner _logs_{\\n        performance_portion = amount;\\n    }\\n\\n    function managerClaim(address pool) external {\\n        require(crpFactory.isCrp(pool), \\\"ERR_INVALID_POOL_ADDRESS\\\");\\n        address managerAddr = ICRPPool(pool).getController();\\n\\n        PoolTokens memory tokens = poolsTokens[pool];\\n        PoolStatus storage status = poolsStatus[pool];\\n        bool isCloseETF = _isClosePool(pool);\\n\\n        address[] memory poolManageTokens = tokens.tokenList;\\n        uint len = poolManageTokens.length;\\n        require(!status.isBlackList, \\\"ERR_POOL_IS_BLACKLIST\\\");\\n        require(len > 0, \\\"ERR_NOT_MANGER_FEE\\\");\\n        require(status.couldManagerClaim, \\\"ERR_MANAGER_COULD_NOT_CLAIM\\\");\\n        status.couldManagerClaim = false;\\n\\n        uint[] memory managerTokenAmount = new uint[](len);\\n        uint[] memory issueTokenAmount = new uint[](len);\\n        uint[] memory redeemTokenAmount = new uint[](len);\\n        uint[] memory perfermanceTokenAmount = new uint[](len);\\n\\n        for (uint i; i < len; i++) {\\n            address t = poolManageTokens[i];\\n            uint b;\\n            (b, managerTokenAmount[i], issueTokenAmount[i], redeemTokenAmount[i], perfermanceTokenAmount[i]) = _computeBalance(i, pool);\\n            if(!isCloseETF) b = b.sub(_getManagerHasClaimed(pool,t));\\n            if(b != 0) _transferHandle(pool, managerAddr, t, b);\\n        }\\n        \\n        if (isCloseETF) {\\n            _recordUserVault(pool, poolManageTokens, managerTokenAmount, issueTokenAmount, redeemTokenAmount, perfermanceTokenAmount);\\n            _clearPool(pool);\\n        }   \\n    }\\n\\n    function getManagerFeeTypes(address pool) external view returns(PoolTokens memory result){     \\n        PoolTokens memory tokens = poolsTokens[pool];\\n        address[] memory poolManageTokens = tokens.tokenList;\\n        uint len = poolManageTokens.length;\\n\\n        result.tokenList = tokens.tokenList;\\n        result.managerAmount = new uint[](len);\\n        result.issueAmount = new uint[](len);\\n        result.redeemAmount = new uint[](len);\\n        result.perfermanceAmount = new uint[](len);\\n\\n        for(uint i; i< len; i++){\\n            (,result.managerAmount[i],result.issueAmount[i],result.redeemAmount[i],result.perfermanceAmount[i]) = _computeBalance(i,pool);\\n        }\\n    }\\n\\n    function getUnManagerReward(address pool) external view returns (address[] memory tokensList, uint[] memory amounts) {\\n        PoolTokens memory tokens = poolsTokens[pool];\\n        address[] memory poolManageTokens = tokens.tokenList;\\n        uint len = poolManageTokens.length;\\n\\n        tokensList = new address[](len);\\n        amounts = new uint[](len);\\n\\n        for (uint i; i < len; i++) {\\n            address t = poolManageTokens[i];\\n            tokensList[i] = t;\\n            (amounts[i],,,,) = _computeBalance(i,pool);\\n            amounts[i] = amounts[i].sub(_getManagerHasClaimed(pool, t));\\n        }\\n    }\\n\\n    function _addTokenInPool(address pool, address tokenAddr) internal {\\n        PoolTokens storage tokens = poolsTokens[pool];\\n\\n        tokens.tokenList.push(tokenAddr);\\n        tokens.managerAmount.push(0);\\n        tokens.issueAmount.push(0);\\n        tokens.redeemAmount.push(0);\\n        tokens.perfermanceAmount.push(0);\\n    }\\n    // for old token\\n    function _updateTokenAmountInPool(uint types, address pool, uint tokenIndex, uint amount) internal {\\n        PoolTokens storage tokens = poolsTokens[pool];\\n\\n        if(types == 0) tokens.managerAmount[tokenIndex] = tokens.managerAmount[tokenIndex].add(amount);\\n        if(types == 1) tokens.issueAmount[tokenIndex] = tokens.issueAmount[tokenIndex].add(amount);\\n        if(types == 2) tokens.redeemAmount[tokenIndex] = tokens.redeemAmount[tokenIndex].add(amount);\\n        if(types == 3) tokens.perfermanceAmount[tokenIndex] = tokens.perfermanceAmount[tokenIndex].add(amount);\\n    }\\n    // for new token\\n    function _updateTokenAmountInPool(uint types, address pool, uint amount) internal {\\n        PoolTokens storage tokens = poolsTokens[pool];\\n        uint tokenIndex = tokens.tokenList.length - 1;\\n\\n        if(types == 0) tokens.managerAmount[tokenIndex] = amount;\\n        if(types == 1) tokens.issueAmount[tokenIndex] = amount;\\n        if(types == 2) tokens.redeemAmount[tokenIndex] = amount;\\n        if(types == 3) tokens.perfermanceAmount[tokenIndex] = amount;\\n    }\\n\\n    function _depositTokenIM(\\n        uint types,\\n        address pool,\\n        address[] memory tokensIn,\\n        uint[] memory amountsIn\\n    ) internal {\\n        PoolTokens memory tokens = poolsTokens[pool];\\n\\n        uint len = tokensIn.length;\\n        for (uint i; i < len; i++) {\\n            address t = tokensIn[i];\\n            uint b = amountsIn[i];\\n\\n            IERC20(t).safeTransferFrom(msg.sender, address(this), b);\\n            (bool isExit, uint index) = _arrIncludeAddr(tokens.tokenList,t);\\n            if (isExit) {\\n                _updateTokenAmountInPool(types,pool,index,b);\\n            } else { \\n                _addTokenInPool(pool,t); \\n                _updateTokenAmountInPool(types,pool,b);    \\n            }\\n        }\\n    }\\n\\n    function _arrIncludeAddr(address[] memory tokens, address target) internal pure returns(bool isInclude, uint index){\\n        for(uint i; i<tokens.length; i++){\\n            if(tokens[i] == target){ \\n                isInclude = true;\\n                index = i;\\n                break;\\n            }\\n        }\\n    }\\n\\n    function _depositTokenRP(\\n        address pool,\\n        address[] calldata tokenIns,\\n        uint[] calldata tokensAmount,\\n        uint[] calldata tokensAmountIR\\n    ) internal {\\n        address[] memory tokenList = poolsTokens[pool].tokenList;\\n\\n        uint len = tokensAmount.length;\\n        for (uint i; i < len; i++) {\\n            address t = tokenIns[i];\\n            uint b = tokensAmount[i];\\n            // uint bIR = tokensAmountIR[i];\\n            IERC20(t).safeTransferFrom(msg.sender, address(this), b);\\n\\n            (bool isExit,uint index) = _arrIncludeAddr(tokenList, t);\\n            if(isExit){\\n                _updateTokenAmountInPool(3, pool, index, tokensAmountIR[i]);\\n                _updateTokenAmountInPool(4, pool, index, b.sub(tokensAmountIR[i]));\\n            } else {\\n                _addTokenInPool(pool, t);\\n                _updateTokenAmountInPool(3,pool, tokensAmountIR[i]);\\n                _updateTokenAmountInPool(4, pool,b.sub(tokensAmountIR[i]));        \\n            }\\n        }\\n    }\\n\\n    function _isClosePool(address pool) internal view returns (bool) {\\n        return ICRPPool(pool).etype() == ICRPPool.Etypes.CLOSED;\\n    }\\n\\n    function _computeBalance(uint i, address pool)\\n        internal\\n        view\\n        returns (\\n            uint balance,\\n            uint bManagerAmount,\\n            uint bIssueAmount,\\n            uint bRedeemAmount,\\n            uint bPerfermanceAmount\\n        )\\n    {\\n        PoolTokens memory tokens = poolsTokens[pool];\\n\\n        if (tokens.managerAmount.length != 0) {\\n            bManagerAmount = tokens.managerAmount[i].mul(management_portion).div(TOTAL_RATIO);\\n            balance = balance.add(bManagerAmount);\\n        }\\n        if (tokens.issueAmount.length != 0) {\\n            bIssueAmount = tokens.issueAmount[i].mul(issuance_portion).div(TOTAL_RATIO);\\n            balance = balance.add(bIssueAmount);\\n        }\\n        if (tokens.redeemAmount.length != 0) {\\n            bRedeemAmount = tokens.redeemAmount[i].mul(redemption_portion).div(TOTAL_RATIO);\\n            balance = balance.add(bRedeemAmount);\\n        }\\n        if (tokens.perfermanceAmount.length != 0) {\\n            bPerfermanceAmount = tokens.perfermanceAmount[i].mul(performance_portion).div(TOTAL_RATIO);\\n            balance = balance.add(bPerfermanceAmount);\\n        }\\n    }\\n\\n    function _clearPool(address pool) internal {\\n        delete poolsTokens[pool];\\n    }\\n\\n    function _recordUserVault(\\n        address pool,\\n        address[] memory tokenList,\\n        uint[] memory managerTokenAmount,\\n        uint[] memory issueTokenAmount,\\n        uint[] memory redeemTokenAmount,\\n        uint[] memory perfermanceTokenAmount\\n    ) internal {\\n        PoolTokens memory tokens = poolsTokens[pool];\\n\\n        if (tokens.managerAmount.length != 0) \\n            IUserVault(userVault).depositToken(pool, 0, tokenList, managerTokenAmount);\\n        \\n        if (tokens.issueAmount.length != 0) \\n            IUserVault(userVault).depositToken(pool, 1, tokenList, issueTokenAmount);\\n        \\n        if (tokens.redeemAmount.length != 0) \\n            IUserVault(userVault).depositToken(pool, 2, tokenList, redeemTokenAmount);\\n        \\n        if (tokens.perfermanceAmount.length != 0) \\n            IUserVault(userVault).depositToken(pool, 3, tokenList, perfermanceTokenAmount);\\n        \\n    }\\n\\n    function _transferHandle(\\n        address pool,\\n        address managerAddr,\\n        address t,\\n        uint balance\\n    ) internal {\\n        require(balance != 0, \\\"ERR_ILLEGAL_BALANCE\\\");\\n        bool isCloseETF = _isClosePool(pool);\\n        bool isOpenETF = !isCloseETF;\\n        bool isContractManager = managerAddr.isContract();\\n\\n        if(isCloseETF){\\n            IERC20(t).safeTransfer(userVault, balance);\\n        }\\n\\n        if(isOpenETF && isContractManager){\\n            address[] memory managerAddressList = IDesynOwnable(pool).getOwners();\\n            uint[] memory ownerPercentage = IDesynOwnable(pool).getOwnerPercentage();\\n            uint allOwnerPercentage = IDesynOwnable(pool).allOwnerPercentage();\\n\\n            for (uint k; k < managerAddressList.length; k++) {\\n                address reciver = address(managerAddressList[k]).isContract()? IDSProxy(managerAddressList[k]).owner(): managerAddressList[k];\\n                uint b = balance.mul(ownerPercentage[k]).div(allOwnerPercentage);\\n                IERC20(t).safeTransfer(reciver, b);\\n                emit ManagerClaim(msg.sender,reciver,t,b,block.timestamp);\\n            }\\n            _updateManageHasClaimed(pool,t,balance);\\n            emit ManagersClaim(msg.sender, pool, t, balance, block.timestamp);\\n        }\\n\\n        if(isOpenETF && !isContractManager){\\n            IERC20(t).safeTransfer(managerAddr, balance);\\n        }\\n    }\\n\\n    function _updateManageHasClaimed(address pool, address token, uint amount) internal {\\n        ClaimTokens storage claimInfo = manageHasClaimed[pool];\\n        (bool isExit, uint index) = _arrIncludeAddr(claimInfo.tokens, token);\\n\\n        if(isExit){\\n            claimInfo.amounts[index] = claimInfo.amounts[index].add(amount);\\n        } else{\\n            claimInfo.tokens.push(token);\\n            claimInfo.amounts.push(amount);\\n        }\\n    }\\n\\n    function _getManagerHasClaimed(address pool, address token) internal view returns(uint){\\n        require(!_isClosePool(pool),\\\"ERR_NOT_OPEN_POOL\\\");\\n\\n        ClaimTokens memory claimInfo = manageHasClaimed[pool];\\n        (bool isExit,uint index) = _arrIncludeAddr(claimInfo.tokens, token);\\n\\n        if(isExit) return claimInfo.amounts[index];\\n        if(!isExit) return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x93f7af0daee933f29be501b8e57db27369be7f9f5e9dcac64a249e01ed7c378a\"},\"contracts/interfaces/IDSProxy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\ninterface IDSProxy {\\n    function owner() external view returns(address);\\n}\",\"keccak256\":\"0xe330359819e40d60365ba92005c9b8b1eccdf18ae583352a0cff0a2a4cf7ff14\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Interface declarations\\n\\n/* solhint-disable func-order */\\n\\ninterface IERC20 {\\n    // Emitted when the allowance of a spender for an owner is set by a call to approve.\\n    // Value is the new allowance\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n\\n    // Emitted when value tokens are moved from one account (from) to another (to).\\n    // Note that value may be zero\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    // Returns the amount of tokens in existence\\n    function totalSupply() external view returns (uint);\\n\\n    // Returns the amount of tokens owned by account\\n    function balanceOf(address account) external view returns (uint);\\n\\n    // Returns the decimals of tokens\\n    function decimals() external view returns (uint8);\\n\\n    function symbol() external view returns (string memory);\\n\\n    // Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner\\n    // through transferFrom. This is zero by default\\n    // This value changes when approve or transferFrom are called\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    // Sets amount as the allowance of spender over the caller\\u2019s tokens\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits an Approval event.\\n    function approve(address spender, uint amount) external returns (bool);\\n\\n    // Moves amount tokens from the caller\\u2019s account to recipient\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits a Transfer event.\\n    function transfer(address recipient, uint amount) external returns (bool);\\n\\n    // Moves amount tokens from sender to recipient using the allowance mechanism\\n    // Amount is then deducted from the caller\\u2019s allowance\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits a Transfer event\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xfe22b6d6029b400b9cce7f9b39c546f99cd6922b2fd926e480e2b4d476ab26f8\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            codehash := extcodehash(account)\\n        }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint weiValue,\\n        string memory errorMessage\\n    ) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2f31de87a6037a6a1ab4cefb32f22352df92b082dde0c182801bf421bacc303c\",\"license\":\"agpl-3.0\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\nimport {SafeMath} from \\\"./SafeMath.sol\\\";\\nimport {Address} from \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint value\\n    ) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint value\\n    ) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint value\\n    ) internal {\\n        require((value == 0) || (token.allowance(address(this), spender) == 0), \\\"SafeERC20: approve from non-zero to non-zero allowance\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdb66e9e24513d153d62e792a46c723eeff7ad7c93215a56aa3a27f1143d95ae9\",\"license\":\"MIT\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint a, uint b) internal pure returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint a, uint b) internal pure returns (uint) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint a,\\n        uint b,\\n        string memory errorMessage\\n    ) internal pure returns (uint) {\\n        require(b <= a, errorMessage);\\n        uint c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint a, uint b) internal pure returns (uint) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint a, uint b) internal pure returns (uint) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint a,\\n        uint b,\\n        string memory errorMessage\\n    ) internal pure returns (uint) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint a, uint b) internal pure returns (uint) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint a,\\n        uint b,\\n        string memory errorMessage\\n    ) internal pure returns (uint) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x7ce3fd7d17047f684821e1a20b4f5989630f6755a377b12c087dfde359f710d6\",\"license\":\"agpl-3.0\"},\"contracts/openzeppelin/Ownable.sol\":{\"content\":\"pragma solidity >=0.6.0 <0.8.0;\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\",\"keccak256\":\"0x8e1e573ff7c1a90087b58f618ae87f33f04616ec7f959f73db4a3b73ff1ee939\"}},\"version\":1}",
  "bytecode": "0x60806040526103e8600655610320600755610320600855610320600955610320600a553480156200002f57600080fd5b5060006200003c6200008c565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35062000090565b3390565b613da380620000a06000396000f3fe60806040526004361061012a5760003560e01c80630417c5f5146101365780630922f29d146101615780630b6b3b2a146101835780630bac7b81146101a3578063125bfb66146101c35780631483d99d146101e357806336e4c87f1461020357806337dfe11414610231578063483e194814610246578063545274ea1461026657806355291dbd1461027b578063598797ad1461028357806368092bd9146102b05780636fd4ba9c146102d0578063715018a6146102fe57806371bb41a91461031357806389a612e5146103335780638da5cb5b1461035357806393782db0146103755780639daafec71461038a578063c0fcb1661461039f578063c1e57622146103cc578063d89b1681146103ec578063edb12adf14610401578063f2fde38b1461042157610131565b3661013157005b600080fd5b34801561014257600080fd5b5061014b610441565b6040516101589190613cd0565b60405180910390f35b34801561016d57600080fd5b5061018161017c3660046133a5565b610447565b005b34801561018f57600080fd5b5061018161019e3660046136c1565b610511565b3480156101af57600080fd5b506101816101be366004613455565b61058f565b3480156101cf57600080fd5b506101816101de3660046133dd565b610748565b3480156101ef57600080fd5b506101816101fe3660046134bd565b6107a0565b34801561020f57600080fd5b5061022361021e3660046133a5565b610975565b60405161015892919061386e565b34801561023d57600080fd5b5061014b610993565b34801561025257600080fd5b506101816102613660046136c1565b610999565b34801561027257600080fd5b5061014b610a39565b610181610a3f565b34801561028f57600080fd5b506102a361029e3660046133a5565b610aad565b6040516101589190613c3e565b3480156102bc57600080fd5b506101816102cb36600461341d565b610e55565b3480156102dc57600080fd5b506102f06102eb3660046133a5565b610eff565b604051610158929190613835565b34801561030a57600080fd5b50610181611247565b34801561031f57600080fd5b5061018161032e3660046136c1565b6112d0565b34801561033f57600080fd5b5061018161034e3660046136c1565b611370565b34801561035f57600080fd5b50610368611410565b604051610158919061377f565b34801561038157600080fd5b5061014b61141f565b34801561039657600080fd5b50610368611425565b3480156103ab57600080fd5b506103bf6103ba3660046133a5565b611434565b6040516101589190613863565b3480156103d857600080fd5b506101816103e73660046133a5565b611452565b3480156103f857600080fd5b5061014b6114ed565b34801561040d57600080fd5b5061018161041c3660046133a5565b6114f3565b34801561042d57600080fd5b5061018161043c3660046133a5565b611a8a565b60065481565b61044f611b4a565b6001600160a01b0316610460611410565b6001600160a01b03161461048f5760405162461bcd60e51b815260040161048690613b24565b60405180910390fd5b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516104c1929190613880565b60405180910390a26001600160a01b0381166104ef5760405162461bcd60e51b815260040161048690613958565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b610519611b4a565b6001600160a01b031661052a611410565b6001600160a01b0316146105505760405162461bcd60e51b815260040161048690613b24565b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051610582929190613880565b60405180910390a2600a55565b600154604051636e0cf42160e11b815233916001600160a01b03169063dc19e842906105bf90849060040161377f565b60206040518083038186803b1580156105d757600080fd5b505afa1580156105eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060f9190613686565b61062b5760405162461bcd60e51b815260040161048690613a86565b83821461064a5760405162461bcd60e51b8152600401610486906139f1565b6106ba60008287878080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808b0282810182019093528a82529093508a925089918291850190849080828437600092019190915250611b4e92505050565b6001600160a01b0381166000908152600460205260409020805460ff191660011790556106e681611de8565b156107415760405163edb12adf60e01b8152309063edb12adf9061070e90849060040161377f565b600060405180830381600087803b15801561072857600080fd5b505af115801561073c573d6000803e3d6000fd5b505050505b5050505050565b610750611b4a565b6001600160a01b0316610761611410565b6001600160a01b0316146107875760405162461bcd60e51b815260040161048690613b24565b61079b6001600160a01b0384168383611e6f565b505050565b600154604051636e0cf42160e11b815233916001600160a01b03169063dc19e842906107d090849060040161377f565b60206040518083038186803b1580156107e857600080fd5b505afa1580156107fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108209190613686565b61083c5760405162461bcd60e51b815260040161048690613a86565b86851461085b5760405162461bcd60e51b8152600401610486906139f1565b816108d5576108d06001828a8a8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808e0282810182019093528d82529093508d92508c918291850190849080828437600092019190915250611b4e92505050565b6108e4565b6108e481898989898989611ec5565b6001600160a01b0381166000908152600460205260409020805460ff1916600117905561091081611de8565b1561096b5760405163edb12adf60e01b8152309063edb12adf9061093890849060040161377f565b600060405180830381600087803b15801561095257600080fd5b505af1158015610966573d6000803e3d6000fd5b505050505b5050505050505050565b60046020526000908152604090205460ff8082169161010090041682565b60095481565b6109a1611b4a565b6001600160a01b03166109b2611410565b6001600160a01b0316146109d85760405162461bcd60e51b815260040161048690613b24565b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051610a0a929190613880565b60405180910390a2600654811115610a345760405162461bcd60e51b815260040161048690613928565b600955565b600a5481565b610a47611b4a565b6001600160a01b0316610a58611410565b6001600160a01b031614610a7e5760405162461bcd60e51b815260040161048690613b24565b60405133904780156108fc02916000818181858888f19350505050158015610aaa573d6000803e3d6000fd5b50565b610ab56132e2565b610abd6132e2565b6001600160a01b0383166000908152600360209081526040918290208251815460c09381028201840190945260a081018481529093919284928491840182828015610b3157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610b13575b5050505050815260200160018201805480602002602001604051908101604052809291908181526020018280548015610b8957602002820191906000526020600020905b815481526020019060010190808311610b75575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015610be157602002820191906000526020600020905b815481526020019060010190808311610bcd575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015610c3957602002820191906000526020600020905b815481526020019060010190808311610c25575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015610c9157602002820191906000526020600020905b815481526020019060010190808311610c7d575b50505091909252505081518051818652929350919050806001600160401b0381118015610cbd57600080fd5b50604051908082528060200260200182016040528015610ce7578160200160208202803683370190505b506020850152806001600160401b0381118015610d0357600080fd5b50604051908082528060200260200182016040528015610d2d578160200160208202803683370190505b506040850152806001600160401b0381118015610d4957600080fd5b50604051908082528060200260200182016040528015610d73578160200160208202803683370190505b506060850152806001600160401b0381118015610d8f57600080fd5b50604051908082528060200260200182016040528015610db9578160200160208202803683370190505b50608085015260005b81811015610e4c57610dd48187612079565b909192935088602001518581518110610de957fe5b6020026020010189604001518681518110610e0057fe5b602002602001018a606001518781518110610e1757fe5b602002602001018b608001518881518110610e2e57fe5b60209081029190910101939093529290915291905252600101610dc2565b50505050919050565b610e5d611b4a565b6001600160a01b0316610e6e611410565b6001600160a01b031614610e945760405162461bcd60e51b815260040161048690613b24565b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051610ec6929190613880565b60405180910390a26001600160a01b03909116600090815260046020526040902080549115156101000261ff0019909216919091179055565b606080610f0a6132e2565b6001600160a01b0384166000908152600360209081526040918290208251815460c09381028201840190945260a081018481529093919284928491840182828015610f7e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610f60575b5050505050815260200160018201805480602002602001604051908101604052809291908181526020018280548015610fd657602002820191906000526020600020905b815481526020019060010190808311610fc2575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561102e57602002820191906000526020600020905b81548152602001906001019080831161101a575b505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561108657602002820191906000526020600020905b815481526020019060010190808311611072575b50505050508152602001600482018054806020026020016040519081016040528092919081815260200182805480156110de57602002820191906000526020600020905b8154815260200190600101908083116110ca575b50505091909252505081518051929350919050806001600160401b038111801561110757600080fd5b50604051908082528060200260200182016040528015611131578160200160208202803683370190505b509450806001600160401b038111801561114a57600080fd5b50604051908082528060200260200182016040528015611174578160200160208202803683370190505b50935060005b8181101561123e57600083828151811061119057fe5b60200260200101519050808783815181106111a757fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506111d18289612079565b5050885189925085915081106111e357fe5b60200260200101818152505061121e6111fc8983612369565b87848151811061120857fe5b60200260200101516124c690919063ffffffff16565b86838151811061122a57fe5b60209081029190910101525060010161117a565b50505050915091565b61124f611b4a565b6001600160a01b0316611260611410565b6001600160a01b0316146112865760405162461bcd60e51b815260040161048690613b24565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6112d8611b4a565b6001600160a01b03166112e9611410565b6001600160a01b03161461130f5760405162461bcd60e51b815260040161048690613b24565b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051611341929190613880565b60405180910390a260065481111561136b5760405162461bcd60e51b815260040161048690613928565b600855565b611378611b4a565b6001600160a01b0316611389611410565b6001600160a01b0316146113af5760405162461bcd60e51b815260040161048690613b24565b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516113e1929190613880565b60405180910390a260065481111561140b5760405162461bcd60e51b815260040161048690613928565b600755565b6000546001600160a01b031690565b60075481565b6002546001600160a01b031681565b6001600160a01b031660009081526004602052604090205460ff1690565b61145a611b4a565b6001600160a01b031661146b611410565b6001600160a01b0316146114915760405162461bcd60e51b815260040161048690613b24565b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516114c3929190613880565b60405180910390a2600180546001600160a01b0319166001600160a01b0392909216919091179055565b60085481565b600154604051636e0cf42160e11b81526001600160a01b039091169063dc19e8429061152390849060040161377f565b60206040518083038186803b15801561153b57600080fd5b505afa15801561154f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115739190613686565b61158f5760405162461bcd60e51b815260040161048690613a86565b6000816001600160a01b0316633018205f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156115ca57600080fd5b505afa1580156115de573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061160291906133c1565b905061160c6132e2565b6001600160a01b0383166000908152600360209081526040918290208251815460c09381028201840190945260a08101848152909391928492849184018282801561168057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611662575b50505050508152602001600182018054806020026020016040519081016040528092919081815260200182805480156116d857602002820191906000526020600020905b8154815260200190600101908083116116c4575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561173057602002820191906000526020600020905b81548152602001906001019080831161171c575b505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561178857602002820191906000526020600020905b815481526020019060010190808311611774575b50505050508152602001600482018054806020026020016040519081016040528092919081815260200182805480156117e057602002820191906000526020600020905b8154815260200190600101908083116117cc575b505050919092525050506001600160a01b038416600090815260046020526040812091925061180e85611de8565b8351805184549293509091610100900460ff161561183e5760405162461bcd60e51b815260040161048690613b8e565b6000811161185e5760405162461bcd60e51b815260040161048690613a5a565b835460ff1661187f5760405162461bcd60e51b815260040161048690613b59565b835460ff191684556060816001600160401b038111801561189f57600080fd5b506040519080825280602002602001820160405280156118c9578160200160208202803683370190505b5090506060826001600160401b03811180156118e457600080fd5b5060405190808252806020026020018201604052801561190e578160200160208202803683370190505b5090506060836001600160401b038111801561192957600080fd5b50604051908082528060200260200182016040528015611953578160200160208202803683370190505b5090506060846001600160401b038111801561196e57600080fd5b50604051908082528060200260200182016040528015611998578160200160208202803683370190505b50905060005b85811015611a5f5760008782815181106119b457fe5b6020026020010151905060006119ca838f612079565b8b88815181106119d657fe5b602002602001018b89815181106119e957fe5b602002602001018b8a815181106119fc57fe5b602002602001018b8b81518110611a0f57fe5b60209081029190910101939093529290915291905252905089611a4357611a40611a398f84612369565b82906124c6565b90505b8015611a5557611a558e8e848461250f565b505060010161199e565b508615611a7d57611a748b87868686866128db565b611a7d8b612c91565b5050505050505050505050565b611a92611b4a565b6001600160a01b0316611aa3611410565b6001600160a01b031614611ac95760405162461bcd60e51b815260040161048690613b24565b6001600160a01b038116611aef5760405162461bcd60e51b8152600401610486906138e2565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b611b566132e2565b6001600160a01b0384166000908152600360209081526040918290208251815460c09381028201840190945260a081018481529093919284928491840182828015611bca57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611bac575b5050505050815260200160018201805480602002602001604051908101604052809291908181526020018280548015611c2257602002820191906000526020600020905b815481526020019060010190808311611c0e575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015611c7a57602002820191906000526020600020905b815481526020019060010190808311611c66575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015611cd257602002820191906000526020600020905b815481526020019060010190808311611cbe575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015611d2a57602002820191906000526020600020905b815481526020019060010190808311611d16575b505050505081525050905060008351905060005b81811015611ddf576000858281518110611d5457fe5b602002602001015190506000858381518110611d6c57fe5b60209081029190910101519050611d8e6001600160a01b038316333084612cec565b600080611d9f876000015185612d13565b915091508115611dba57611db58b8b8386612d6b565b611dcf565b611dc48a85612e7e565b611dcf8b8b85612f14565b505060019092019150611d3e9050565b50505050505050565b60006001826001600160a01b03166373a9855c6040518163ffffffff1660e01b815260040160206040518083038186803b158015611e2557600080fd5b505afa158015611e39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5d91906136a2565b6001811115611e6857fe5b1492915050565b61079b8363a9059cbb60e01b8484604051602401611e8e9291906137fb565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612fb9565b6001600160a01b038716600090815260036020908152604091829020805483518184028101840190945280845260609392830182828015611f2f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611f11575b509394508793506000925050505b8181101561206d576000898983818110611f5357fe5b9050602002016020810190611f6891906133a5565b90506000888884818110611f7857fe5b60200291909101359150611f9990506001600160a01b038316333084612cec565b600080611fa68785612d13565b91509150811561200557611fcf60038f838c8c8a818110611fc357fe5b90506020020135612d6b565b61200060048f83611ffb8d8d8b818110611fe557fe5b90506020020135886124c690919063ffffffff16565b612d6b565b61205d565b61200f8e85612e7e565b61202d60038f8b8b8981811061202157fe5b90506020020135612f14565b61205d60048f6120588c8c8a81811061204257fe5b90506020020135876124c690919063ffffffff16565b612f14565b505060019092019150611f3d9050565b50505050505050505050565b60008060008060006120896132e2565b6001600160a01b0387166000908152600360209081526040918290208251815460c09381028201840190945260a0810184815290939192849284918401828280156120fd57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116120df575b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561215557602002820191906000526020600020905b815481526020019060010190808311612141575b50505050508152602001600282018054806020026020016040519081016040528092919081815260200182805480156121ad57602002820191906000526020600020905b815481526020019060010190808311612199575b505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561220557602002820191906000526020600020905b8154815260200190600101908083116121f1575b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561225d57602002820191906000526020600020905b815481526020019060010190808311612249575b50505050508152505090508060200151516000146122bc576122ad6006546122a760075484602001518c8151811061229157fe5b602002602001015161309e90919063ffffffff16565b906130d8565b94506122b98686613117565b95505b604081015151156122f2576122e36006546122a760085484604001518c8151811061229157fe5b93506122ef8685613117565b95505b60608101515115612328576123196006546122a760095484606001518c8151811061229157fe5b92506123258684613117565b95505b6080810151511561235e5761234f6006546122a7600a5484608001518c8151811061229157fe5b915061235b8683613117565b95505b509295509295909350565b600061237483611de8565b156123915760405162461bcd60e51b815260040161048690613ab8565b612399613311565b6001600160a01b038416600090815260056020908152604091829020825181546060938102820184018552938101848152909391928492849184018282801561240b57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116123ed575b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561246357602002820191906000526020600020905b81548152602001906001019080831161244f575b505050505081525050905060008061247f836000015186612d13565b9150915081156124ab578260200151818151811061249957fe5b602002602001015193505050506124c0565b816124bc57600093505050506124c0565b5050505b92915050565b600061250883836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061313c565b9392505050565b8061252c5760405162461bcd60e51b8152600401610486906139c4565b600061253785611de8565b90508015600061254f6001600160a01b038716613168565b9050821561257157600254612571906001600160a01b03878116911686611e6f565b81801561257b5750805b156128b7576060876001600160a01b031663a0e67e2b6040518163ffffffff1660e01b815260040160006040518083038186803b1580156125bb57600080fd5b505afa1580156125cf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526125f79190810190613566565b90506060886001600160a01b031663309a042c6040518163ffffffff1660e01b815260040160006040518083038186803b15801561263457600080fd5b505afa158015612648573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526126709190810190613603565b90506000896001600160a01b031663d29986c16040518163ffffffff1660e01b815260040160206040518083038186803b1580156126ad57600080fd5b505afa1580156126c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126e591906136d9565b905060005b835181101561285857600061271a85838151811061270457fe5b60200260200101516001600160a01b0316613168565b6127375784828151811061272a57fe5b60200260200101516127bb565b84828151811061274357fe5b60200260200101516001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561278357600080fd5b505afa158015612797573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127bb91906133c1565b905060006127e9846122a78786815181106127d257fe5b60200260200101518d61309e90919063ffffffff16565b90506127ff6001600160a01b038c168383611e6f565b816001600160a01b0316336001600160a01b03167f749a9ef4b9bff1f02a1a1d45429a3949e524fd93e3948001eab8dca05f1fcd6d8d844260405161284693929190613814565b60405180910390a350506001016126ea565b506128648a89896131a4565b896001600160a01b0316336001600160a01b03167f1bf0129823b56213a46996bc874ce50b318995cae2bbdcd2000933d36012547d8a8a426040516128ab93929190613814565b60405180910390a35050505b8180156128c2575080155b15611ddf57611ddf6001600160a01b0386168786611e6f565b6128e36132e2565b6001600160a01b0387166000908152600360209081526040918290208251815460c09381028201840190945260a08101848152909391928492849184018282801561295757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612939575b50505050508152602001600182018054806020026020016040519081016040528092919081815260200182805480156129af57602002820191906000526020600020905b81548152602001906001019080831161299b575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015612a0757602002820191906000526020600020905b8154815260200190600101908083116129f3575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015612a5f57602002820191906000526020600020905b815481526020019060010190808311612a4b575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015612ab757602002820191906000526020600020905b815481526020019060010190808311612aa3575b5050505050815250509050806020015151600014612b3957600254604051639155dae760e01b81526001600160a01b0390911690639155dae790612b06908a906000908b908b906004016137b7565b600060405180830381600087803b158015612b2057600080fd5b505af1158015612b34573d6000803e3d6000fd5b505050505b60408101515115612bae57600254604051639155dae760e01b81526001600160a01b0390911690639155dae790612b7b908a906001908b908a906004016137b7565b600060405180830381600087803b158015612b9557600080fd5b505af1158015612ba9573d6000803e3d6000fd5b505050505b60608101515115612c215760028054604051639155dae760e01b81526001600160a01b0390911691639155dae791612bee918b918b9089906004016137b7565b600060405180830381600087803b158015612c0857600080fd5b505af1158015612c1c573d6000803e3d6000fd5b505050505b60808101515115611ddf57600254604051639155dae760e01b81526001600160a01b0390911690639155dae790612c63908a906003908b9088906004016137b7565b600060405180830381600087803b158015612c7d57600080fd5b505af1158015611a7d573d6000803e3d6000fd5b6001600160a01b038116600090815260036020526040812090612cb4828261332b565b612cc260018301600061332b565b612cd060028301600061332b565b612cde60038301600061332b565b61079b60048301600061332b565b612d0d846323b872dd60e01b858585604051602401611e8e93929190613793565b50505050565b60008060005b8451811015612d6357836001600160a01b0316858281518110612d3857fe5b60200260200101516001600160a01b03161415612d5b5760019250809150612d63565b600101612d19565b509250929050565b6001600160a01b038316600090815260036020526040902084612dd057612db482826001018581548110612d9b57fe5b906000526020600020015461311790919063ffffffff16565b816001018481548110612dc357fe5b6000918252602090912001555b8460011415612e0857612dec82826002018581548110612d9b57fe5b816002018481548110612dfb57fe5b6000918252602090912001555b8460021415612e4057612e2482826003018581548110612d9b57fe5b816003018481548110612e3357fe5b6000918252602090912001555b846003141561074157612e5c82826004018581548110612d9b57fe5b816004018481548110612e6b57fe5b6000918252602090912001555050505050565b6001600160a01b039182166000908152600360208181526040832080546001808201835582865283862090910180546001600160a01b03191696909716959095179095558385018054808601825590845281842001839055600285018054808601825590845281842001839055908401805480850182559083528183200182905560049093018054928301815581529182200155565b6001600160a01b038216600090815260036020526040902080546000190184612f545782826001018281548110612f4757fe5b6000918252602090912001555b8460011415612f7a5782826002018281548110612f6d57fe5b6000918252602090912001555b8460021415612fa05782826003018281548110612f9357fe5b6000918252602090912001555b84600314156107415782826004018281548110612e6b57fe5b612fcb826001600160a01b0316613168565b612fe75760405162461bcd60e51b815260040161048690613c07565b60006060836001600160a01b0316836040516130039190613763565b6000604051808303816000865af19150503d8060008114613040576040519150601f19603f3d011682016040523d82523d6000602084013e613045565b606091505b5091509150816130675760405162461bcd60e51b815260040161048690613a25565b805115612d0d57808060200190518101906130829190613686565b612d0d5760405162461bcd60e51b815260040161048690613bbd565b6000826130ad575060006124c0565b828202828482816130ba57fe5b04146125085760405162461bcd60e51b815260040161048690613ae3565b600061250883836040518060400160405280601a815260200179536166654d6174683a206469766973696f6e206279207a65726f60301b8152506132ab565b6000828201838110156125085760405162461bcd60e51b81526004016104869061398f565b600081848411156131605760405162461bcd60e51b815260040161048691906138af565b505050900390565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081811480159061319c57508115155b949350505050565b6001600160a01b03831660009081526005602090815260408083208054825181850281018501909352808352909392839261322292909186919083018282801561321757602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116131f9575b505050505086612d13565b91509150811561325f5761323f84846001018381548110612d9b57fe5b83600101828154811061324e57fe5b6000918252602090912001556132a3565b8254600180820185556000858152602080822090930180546001600160a01b0319166001600160a01b038a1617905581860180549283018155815291909120018490555b505050505050565b600081836132cc5760405162461bcd60e51b815260040161048691906138af565b5060008385816132d857fe5b0495945050505050565b6040518060a0016040528060608152602001606081526020016060815260200160608152602001606081525090565b604051806040016040528060608152602001606081525090565b5080546000825590600052602060002090810190610aaa91905b808211156133595760008155600101613345565b5090565b60008083601f84011261336e578182fd5b5081356001600160401b03811115613384578182fd5b602083019150836020808302850101111561339e57600080fd5b9250929050565b6000602082840312156133b6578081fd5b813561250881613d4a565b6000602082840312156133d2578081fd5b815161250881613d4a565b6000806000606084860312156133f1578182fd5b83356133fc81613d4a565b9250602084013561340c81613d4a565b929592945050506040919091013590565b6000806040838503121561342f578182fd5b823561343a81613d4a565b9150602083013561344a81613d5f565b809150509250929050565b6000806000806040858703121561346a578081fd5b84356001600160401b0380821115613480578283fd5b61348c8883890161335d565b909650945060208701359150808211156134a4578283fd5b506134b18782880161335d565b95989497509550505050565b60008060008060008060006080888a0312156134d7578283fd5b87356001600160401b03808211156134ed578485fd5b6134f98b838c0161335d565b909950975060208a0135915080821115613511578485fd5b61351d8b838c0161335d565b909750955060408a0135915080821115613535578485fd5b506135428a828b0161335d565b909450925050606088013561355681613d5f565b8091505092959891949750929550565b60006020808385031215613578578182fd5b82516001600160401b0381111561358d578283fd5b8301601f8101851361359d578283fd5b80516135b06135ab82613cff565b613cd9565b81815283810190838501858402850186018910156135cc578687fd5b8694505b838510156135f75780516135e381613d4a565b8352600194909401939185019185016135d0565b50979650505050505050565b60006020808385031215613615578182fd5b82516001600160401b0381111561362a578283fd5b8301601f8101851361363a578283fd5b80516136486135ab82613cff565b8181528381019083850185840285018601891015613664578687fd5b8694505b838510156135f7578051835260019490940193918501918501613668565b600060208284031215613697578081fd5b815161250881613d5f565b6000602082840312156136b3578081fd5b815160028110612508578182fd5b6000602082840312156136d2578081fd5b5035919050565b6000602082840312156136ea578081fd5b5051919050565b6000815180845260208085019450808401835b838110156137295781516001600160a01b031687529582019590820190600101613704565b509495945050505050565b6000815180845260208085019450808401835b8381101561372957815187529582019590820190600101613747565b60008251613775818460208701613d1e565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060018060a01b0386168252846020830152608060408301526137de60808301856136f1565b82810360608401526137f08185613734565b979650505050505050565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b60006040825261384860408301856136f1565b828103602084015261385a8185613734565b95945050505050565b901515815260200190565b91151582521515602082015260400190565b60006020825282602083015282846040840137818301604090810191909152601f909201601f19160101919050565b60006020825282518060208401526138ce816040850160208701613d1e565b601f01601f19169190910160400192915050565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526016908201527513585e1a5b5d5b481b1a5b5a5d08195e18d95959195960521b604082015260600190565b6020808252601d908201527f4552525f494e56414c49445f555345525641554c545f41444452455353000000604082015260600190565b6020808252601b908201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604082015260600190565b6020808252601390820152724552525f494c4c4547414c5f42414c414e434560681b604082015260600190565b6020808252601a908201527908aa4a4bea89e968a9cbe988a9c8ea890be9c9ea8be9a82a886960331b604082015260600190565b6020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b6020808252601290820152714552525f4e4f545f4d414e4745525f46454560701b604082015260600190565b6020808252601890820152774552525f494e56414c49445f504f4f4c5f4144445245535360401b604082015260600190565b60208082526011908201527011549497d393d517d3d4115397d413d3d3607a1b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601b908201527a4552525f4d414e414745525f434f554c445f4e4f545f434c41494d60281b604082015260600190565b60208082526015908201527411549497d413d3d317d254d7d0931050d2d31254d5605a1b604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b6020808252601f908201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604082015260600190565b600060208252825160a06020840152613c5a60c08401826136f1565b90506020840151601f1980858403016040860152613c788383613734565b92506040860151915080858403016060860152613c958383613734565b92506060860151915080858403016080860152613cb28383613734565b925060808601519150808584030160a08601525061385a8282613734565b90815260200190565b6040518181016001600160401b0381118282101715613cf757600080fd5b604052919050565b60006001600160401b03821115613d14578081fd5b5060209081020190565b60005b83811015613d39578181015183820152602001613d21565b83811115612d0d5750506000910152565b6001600160a01b0381168114610aaa57600080fd5b8015158114610aaa57600080fdfea264697066735822122046af578f6cd1e07c06c983717826559917d25f16b2a0b3f498693de06ab03ddf64736f6c634300060c0033",
  "deployedBytecode": "",
  "libraries": {},
  "devdoc": {
    "author": "Desyn Labs",
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Vault managerFee",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 18202,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 12595,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "crpFactory",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ICRPFactory)12579"
      },
      {
        "astId": 12597,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "userVault",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 12653,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "poolsTokens",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(PoolTokens)12637_storage)"
      },
      {
        "astId": 12657,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "poolsStatus",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(PoolStatus)12642_storage)"
      },
      {
        "astId": 12661,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "manageHasClaimed",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(ClaimTokens)12649_storage)"
      },
      {
        "astId": 12664,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "TOTAL_RATIO",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 12667,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "management_portion",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 12670,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "issuance_portion",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 12673,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "redemption_portion",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 12676,
        "contract": "contracts/deploy/Vault.sol:Vault",
        "label": "performance_portion",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ICRPFactory)12579": {
        "encoding": "inplace",
        "label": "contract ICRPFactory",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(ClaimTokens)12649_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Vault.ClaimTokens)",
        "numberOfBytes": "32",
        "value": "t_struct(ClaimTokens)12649_storage"
      },
      "t_mapping(t_address,t_struct(PoolStatus)12642_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Vault.PoolStatus)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolStatus)12642_storage"
      },
      "t_mapping(t_address,t_struct(PoolTokens)12637_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Vault.PoolTokens)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolTokens)12637_storage"
      },
      "t_struct(ClaimTokens)12649_storage": {
        "encoding": "inplace",
        "label": "struct Vault.ClaimTokens",
        "members": [
          {
            "astId": 12645,
            "contract": "contracts/deploy/Vault.sol:Vault",
            "label": "tokens",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 12648,
            "contract": "contracts/deploy/Vault.sol:Vault",
            "label": "amounts",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PoolStatus)12642_storage": {
        "encoding": "inplace",
        "label": "struct Vault.PoolStatus",
        "members": [
          {
            "astId": 12639,
            "contract": "contracts/deploy/Vault.sol:Vault",
            "label": "couldManagerClaim",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 12641,
            "contract": "contracts/deploy/Vault.sol:Vault",
            "label": "isBlackList",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(PoolTokens)12637_storage": {
        "encoding": "inplace",
        "label": "struct Vault.PoolTokens",
        "members": [
          {
            "astId": 12624,
            "contract": "contracts/deploy/Vault.sol:Vault",
            "label": "tokenList",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 12627,
            "contract": "contracts/deploy/Vault.sol:Vault",
            "label": "managerAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 12630,
            "contract": "contracts/deploy/Vault.sol:Vault",
            "label": "issueAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 12633,
            "contract": "contracts/deploy/Vault.sol:Vault",
            "label": "redeemAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 12636,
            "contract": "contracts/deploy/Vault.sol:Vault",
            "label": "perfermanceAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
