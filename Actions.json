{
  "address": "0xaEd29Ee80eD9c9D7e7692366614BB63c16D08cC9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IConfigurableRightsPool",
          "name": "crp",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "sort",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "token",
          "type": "address[]"
        }
      ],
      "name": "addTokenToWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userVault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "claimKolReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userVault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "claimManagersReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract FactoryActions",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "weights",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "swapFee",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "finalize",
          "type": "bool"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "contract LiquidityPoolActions",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICRPFactory",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "contract FactoryActions",
          "name": "coreFactory",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "poolTokenSymbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "poolTokenName",
              "type": "string"
            },
            {
              "internalType": "address[]",
              "name": "constituentTokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenBalances",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenWeights",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "swapFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "managerFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "redeemFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "issueFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "perfermanceFee",
              "type": "uint256"
            },
            {
              "internalType": "enum IConfigurableRightsPool.Etypes",
              "name": "etype",
              "type": "uint8"
            }
          ],
          "internalType": "struct IConfigurableRightsPool.PoolParams",
          "name": "poolParams",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "initialSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collectPeriod",
              "type": "uint256"
            },
            {
              "internalType": "enum IConfigurableRightsPool.Period",
              "name": "period",
              "type": "uint8"
            }
          ],
          "internalType": "struct IConfigurableRightsPool.CrpParams",
          "name": "crpParams",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "canPauseSwapping",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canChangeSwapFee",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canChangeWeights",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canAddRemoveTokens",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canWhitelistLPs",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canTokenWhiteLists",
              "type": "bool"
            }
          ],
          "internalType": "struct RightsManager.Rights",
          "name": "rights",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "firstLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "secondLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "thirdLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "fourLevel",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SmartPoolManager.feeParams",
              "name": "managerFee",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "firstLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "secondLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "thirdLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "fourLevel",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SmartPoolManager.feeParams",
              "name": "issueFee",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "firstLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "secondLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "thirdLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "fourLevel",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SmartPoolManager.feeParams",
              "name": "redeemFee",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "firstLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "secondLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "thirdLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "fourLevel",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SmartPoolManager.feeParams",
              "name": "perfermanceFee",
              "type": "tuple"
            }
          ],
          "internalType": "struct SmartPoolManager.KolPoolParams",
          "name": "kolPoolParams",
          "type": "tuple"
        },
        {
          "internalType": "address[]",
          "name": "owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ownerPercentage",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "bspFloor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bspCap",
              "type": "uint256"
            }
          ],
          "internalType": "struct IConfigurableRightsPool.PoolTokenRange",
          "name": "tokenRange",
          "type": "tuple"
        }
      ],
      "name": "createSmartPool",
      "outputs": [
        {
          "internalType": "contract IConfigurableRightsPool",
          "name": "crp",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IConfigurableRightsPool",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "poolAmountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "minAmountsOut",
          "type": "uint256[]"
        }
      ],
      "name": "exitPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract LiquidityPoolActions",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "finalize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract LiquidityPoolActions",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "poolAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "maxAmountsIn",
          "type": "uint256[]"
        }
      ],
      "name": "joinPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IConfigurableRightsPool",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "poolAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "maxAmountsIn",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "kol",
          "type": "address"
        }
      ],
      "name": "joinSmartPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IConfigurableRightsPool",
          "name": "crp",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deltaWeight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmountOut",
          "type": "uint256"
        }
      ],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AbstractPool",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "removeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IConfigurableRightsPool",
          "name": "crp",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        }
      ],
      "name": "removeWhitelistedLiquidityProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AbstractPool",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_ownerPercentage",
          "type": "uint256"
        }
      ],
      "name": "setAddAdminList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IConfigurableRightsPool",
          "name": "crp",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newCap",
          "type": "uint256"
        }
      ],
      "name": "setCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AbstractPool",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newController",
          "type": "address"
        }
      ],
      "name": "setController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AbstractPool",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "publicSwap",
          "type": "bool"
        }
      ],
      "name": "setPublicSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AbstractPool",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "setSwapFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract LiquidityPoolActions",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "denorms",
          "type": "uint256[]"
        }
      ],
      "name": "setTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IConfigurableRightsPool",
          "name": "crp",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        }
      ],
      "name": "whitelistLiquidityProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xde038209e87e9a2dc3a1734ebc7f574cbdd003cf91eef3a25956c7e8fb6b6633",
  "receipt": {
    "to": null,
    "from": "0x595b85b4A418e3B8df897D02F5BD49167D00862F",
    "contractAddress": "0xaEd29Ee80eD9c9D7e7692366614BB63c16D08cC9",
    "transactionIndex": 1,
    "gasUsed": "2801812",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xd2fc24bb1080aee9409f864f3b937b8fa47b3efdd3d9adb53beac4871b1a560d",
    "transactionHash": "0xde038209e87e9a2dc3a1734ebc7f574cbdd003cf91eef3a25956c7e8fb6b6633",
    "logs": [],
    "blockNumber": 8126937,
    "cumulativeGasUsed": "2882183",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0e997af3b88dbcb9772d4d5054dabb5f",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IConfigurableRightsPool\",\"name\":\"crp\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"sort\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"token\",\"type\":\"address[]\"}],\"name\":\"addTokenToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"claimKolReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"claimManagersReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FactoryActions\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"finalize\",\"type\":\"bool\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"contract LiquidityPoolActions\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICRPFactory\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"contract FactoryActions\",\"name\":\"coreFactory\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"poolTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"poolTokenName\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"constituentTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenBalances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenWeights\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"managerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"issueFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perfermanceFee\",\"type\":\"uint256\"},{\"internalType\":\"enum IConfigurableRightsPool.Etypes\",\"name\":\"etype\",\"type\":\"uint8\"}],\"internalType\":\"struct IConfigurableRightsPool.PoolParams\",\"name\":\"poolParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collectPeriod\",\"type\":\"uint256\"},{\"internalType\":\"enum IConfigurableRightsPool.Period\",\"name\":\"period\",\"type\":\"uint8\"}],\"internalType\":\"struct IConfigurableRightsPool.CrpParams\",\"name\":\"crpParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"canPauseSwapping\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canChangeSwapFee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canChangeWeights\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canAddRemoveTokens\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canWhitelistLPs\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canTokenWhiteLists\",\"type\":\"bool\"}],\"internalType\":\"struct RightsManager.Rights\",\"name\":\"rights\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"managerFee\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"issueFee\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"redeemFee\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"perfermanceFee\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.KolPoolParams\",\"name\":\"kolPoolParams\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ownerPercentage\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"bspFloor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bspCap\",\"type\":\"uint256\"}],\"internalType\":\"struct IConfigurableRightsPool.PoolTokenRange\",\"name\":\"tokenRange\",\"type\":\"tuple\"}],\"name\":\"createSmartPool\",\"outputs\":[{\"internalType\":\"contract IConfigurableRightsPool\",\"name\":\"crp\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConfigurableRightsPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsOut\",\"type\":\"uint256[]\"}],\"name\":\"exitPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract LiquidityPoolActions\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract LiquidityPoolActions\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"maxAmountsIn\",\"type\":\"uint256[]\"}],\"name\":\"joinPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConfigurableRightsPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"maxAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"kol\",\"type\":\"address\"}],\"name\":\"joinSmartPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConfigurableRightsPool\",\"name\":\"crp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deltaWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"}],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AbstractPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConfigurableRightsPool\",\"name\":\"crp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"removeWhitelistedLiquidityProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AbstractPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ownerPercentage\",\"type\":\"uint256\"}],\"name\":\"setAddAdminList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConfigurableRightsPool\",\"name\":\"crp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newCap\",\"type\":\"uint256\"}],\"name\":\"setCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AbstractPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AbstractPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"publicSwap\",\"type\":\"bool\"}],\"name\":\"setPublicSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AbstractPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setSwapFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract LiquidityPoolActions\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"denorms\",\"type\":\"uint256[]\"}],\"name\":\"setTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConfigurableRightsPool\",\"name\":\"crp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"whitelistLiquidityProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/deploy/Actions.sol\":\"Actions\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"contracts/deploy/Actions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\npragma experimental ABIEncoderV2;\\nimport {RightsManager} from \\\"../libraries/RightsManager.sol\\\";\\nimport {SmartPoolManager} from \\\"../libraries/SmartPoolManager.sol\\\";\\n\\nabstract contract ERC20 {\\n    function approve(address spender, uint amount) external virtual returns (bool);\\n\\n    function transfer(address dst, uint amt) external virtual returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint amount\\n    ) external virtual returns (bool);\\n\\n    function balanceOf(address whom) external view virtual returns (uint);\\n\\n    function allowance(address, address) external view virtual returns (uint);\\n}\\n\\nabstract contract DesynOwnable {\\n    function setController(address controller) external virtual;\\n    function setAddAdminList(address newOwner, uint _ownerPercentage) external virtual;\\n    function removeOwner(address owner) external virtual;\\n}\\n\\nabstract contract AbstractPool is ERC20, DesynOwnable {\\n    function setSwapFee(uint swapFee) external virtual;\\n\\n    function setPublicSwap(bool public_) external virtual;\\n\\n    function joinPool(\\n        uint poolAmountOut,\\n        uint[] calldata maxAmountsIn,\\n        address kol\\n    ) external virtual;\\n\\n    function exitPool(uint poolAmountIn, uint[] calldata minAmountsOut) external virtual;\\n}\\n\\nabstract contract LiquidityPoolActions is AbstractPool {\\n    function finalize() external virtual;\\n\\n    function bind(\\n        address token,\\n        uint balance,\\n        uint denorm\\n    ) external virtual;\\n\\n    function rebind(\\n        address token,\\n        uint balance,\\n        uint denorm\\n    ) external virtual;\\n\\n    function unbind(address token) external virtual;\\n\\n    function isBound(address t) external view virtual returns (bool);\\n\\n    function getCurrentTokens() external view virtual returns (address[] memory);\\n\\n    function getFinalTokens() external view virtual returns (address[] memory);\\n\\n    function getBalance(address token) external view virtual returns (uint);\\n}\\n\\nabstract contract FactoryActions {\\n    function newLiquidityPool() external virtual returns (LiquidityPoolActions);\\n}\\n\\nabstract contract IConfigurableRightsPool is AbstractPool {\\n    enum Etypes {\\n        OPENED,\\n        CLOSED\\n    }\\n    enum Period {\\n        HALF,\\n        ONE,\\n        TWO\\n    }\\n\\n    struct PoolTokenRange {\\n        uint bspFloor;\\n        uint bspCap;\\n    }\\n\\n    struct PoolParams {\\n        string poolTokenSymbol;\\n        string poolTokenName;\\n        address[] constituentTokens;\\n        uint[] tokenBalances;\\n        uint[] tokenWeights;\\n        uint swapFee;\\n        uint managerFee;\\n        uint redeemFee;\\n        uint issueFee;\\n        uint perfermanceFee;\\n        Etypes etype;\\n    }\\n\\n    struct CrpParams {\\n        uint initialSupply;\\n        uint collectPeriod;\\n        Period period;\\n    }\\n\\n    function createPool(\\n        uint initialSupply,\\n        uint collectPeriod,\\n        Period period,\\n        PoolTokenRange memory tokenRange\\n    ) external virtual;\\n\\n    function createPool(uint initialSupply) external virtual;\\n\\n    function setCap(uint newCap) external virtual;\\n\\n    function rebalance(\\n        address tokenA,\\n        address tokenB,\\n        uint deltaWeight,\\n        uint minAmountOut\\n    ) external virtual;\\n\\n    function commitAddToken(\\n        address token,\\n        uint balance,\\n        uint denormalizedWeight\\n    ) external virtual;\\n\\n    function applyAddToken() external virtual;\\n\\n    function whitelistLiquidityProvider(address provider) external virtual;\\n\\n    function removeWhitelistedLiquidityProvider(address provider) external virtual;\\n\\n    function bPool() external view virtual returns (LiquidityPoolActions);\\n\\n    function addTokenToWhitelist(uint[] memory sort, address[] memory token) external virtual;\\n}\\n\\nabstract contract ICRPFactory {\\n    function newCrp(\\n        address factoryAddress,\\n        IConfigurableRightsPool.PoolParams calldata params,\\n        RightsManager.Rights calldata rights,\\n        SmartPoolManager.KolPoolParams calldata kolPoolParams,\\n        address[] memory owners,\\n        uint[] memory ownerPercentage\\n    ) external virtual returns (IConfigurableRightsPool);\\n}\\n\\nabstract contract IUserVault {\\n    function claimKolReward(address pool) external virtual;\\n\\n    function managerClaim(address pool) external virtual;\\n}\\n\\n/********************************** WARNING **********************************/\\n//                                                                           //\\n// This contract is only meant to be used in conjunction with ds-proxy.      //\\n// Calling this contract directly will lead to loss of funds.                //\\n//                                                                           //\\n/********************************** WARNING **********************************/\\n\\ncontract Actions {\\n    // --- Pool Creation ---\\n\\n    function create(\\n        FactoryActions factory,\\n        address[] calldata tokens,\\n        uint[] calldata balances,\\n        uint[] calldata weights,\\n        uint swapFee,\\n        bool finalize\\n    ) external returns (LiquidityPoolActions pool) {\\n        require(tokens.length == balances.length, \\\"ERR_LENGTH_MISMATCH\\\");\\n        require(tokens.length == weights.length, \\\"ERR_LENGTH_MISMATCH\\\");\\n\\n        pool = factory.newLiquidityPool();\\n        pool.setSwapFee(swapFee);\\n\\n        for (uint i = 0; i < tokens.length; i++) {\\n            ERC20 token = ERC20(tokens[i]);\\n            require(token.transferFrom(msg.sender, address(this), balances[i]), \\\"ERR_TRANSFER_FAILED\\\");\\n            _safeApprove(token, address(pool), balances[i]);\\n            pool.bind(tokens[i], balances[i], weights[i]);\\n        }\\n\\n        if (finalize) {\\n            pool.finalize();\\n            require(pool.transfer(msg.sender, pool.balanceOf(address(this))), \\\"ERR_TRANSFER_FAILED\\\");\\n        } else {\\n            pool.setPublicSwap(true);\\n        }\\n    }\\n\\n    function createSmartPool(\\n        ICRPFactory factory,\\n        FactoryActions coreFactory,\\n        IConfigurableRightsPool.PoolParams calldata poolParams,\\n        IConfigurableRightsPool.CrpParams calldata crpParams,\\n        RightsManager.Rights calldata rights,\\n        SmartPoolManager.KolPoolParams calldata kolPoolParams,\\n        address[] memory owners,\\n        uint[] memory ownerPercentage,\\n        IConfigurableRightsPool.PoolTokenRange memory tokenRange\\n    ) external returns (IConfigurableRightsPool crp) {\\n        require(poolParams.constituentTokens.length == poolParams.tokenBalances.length, \\\"ERR_LENGTH_MISMATCH\\\");\\n        require(poolParams.constituentTokens.length == poolParams.tokenWeights.length, \\\"ERR_LENGTH_MISMATCH\\\");\\n\\n        crp = factory.newCrp(address(coreFactory), poolParams, rights, kolPoolParams, owners, ownerPercentage);\\n        for (uint i = 0; i < poolParams.constituentTokens.length; i++) {\\n            ERC20 token = ERC20(poolParams.constituentTokens[i]);\\n            require(token.transferFrom(msg.sender, address(this), poolParams.tokenBalances[i]), \\\"ERR_TRANSFER_FAILED\\\");\\n            _safeApprove(token, address(crp), poolParams.tokenBalances[i]);\\n        }\\n\\n        crp.createPool(crpParams.initialSupply, crpParams.collectPeriod, crpParams.period, tokenRange);\\n        require(crp.transfer(msg.sender, crpParams.initialSupply), \\\"ERR_TRANSFER_FAILED\\\");\\n        // DSProxy instance keeps pool ownership to enable management\\n    }\\n\\n    // --- Joins ---\\n\\n    function joinPool(\\n        LiquidityPoolActions pool,\\n        uint poolAmountOut,\\n        uint[] calldata maxAmountsIn\\n    ) external {\\n        address[] memory tokens = pool.getFinalTokens();\\n        _join(pool, tokens, poolAmountOut, maxAmountsIn, msg.sender);\\n    }\\n\\n    function joinSmartPool(\\n        IConfigurableRightsPool pool,\\n        uint poolAmountOut,\\n        uint[] calldata maxAmountsIn,\\n        address kol\\n    ) external {\\n        address[] memory tokens = pool.bPool().getCurrentTokens();\\n        _join(pool, tokens, poolAmountOut, maxAmountsIn, kol);\\n    }\\n\\n    function exitPool(\\n        IConfigurableRightsPool pool,\\n        uint poolAmountIn,\\n        uint[] memory minAmountsOut\\n    ) external {\\n        address[] memory tokens = pool.bPool().getCurrentTokens();\\n        _exit(pool, poolAmountIn, minAmountsOut, tokens);\\n    }\\n\\n    // --- Pool management (common) ---\\n\\n    function setPublicSwap(AbstractPool pool, bool publicSwap) external {\\n        pool.setPublicSwap(publicSwap);\\n    }\\n\\n    function setSwapFee(AbstractPool pool, uint newFee) external {\\n        pool.setSwapFee(newFee);\\n    }\\n\\n    function setController(AbstractPool pool, address newController) external {\\n        pool.setController(newController);\\n    }\\n\\n    function setAddAdminList(AbstractPool pool, address newOwner, uint _ownerPercentage) public {\\n        pool.setAddAdminList(newOwner, _ownerPercentage);\\n    }\\n\\n    function removeOwner(AbstractPool pool, address owner) public {\\n       pool.removeOwner(owner);\\n    }\\n\\n    // --- Private pool management ---\\n\\n    function setTokens(\\n        LiquidityPoolActions pool,\\n        address[] calldata tokens,\\n        uint[] calldata balances,\\n        uint[] calldata denorms\\n    ) external {\\n        require(tokens.length == balances.length, \\\"ERR_LENGTH_MISMATCH\\\");\\n        require(tokens.length == denorms.length, \\\"ERR_LENGTH_MISMATCH\\\");\\n\\n        for (uint i = 0; i < tokens.length; i++) {\\n            ERC20 token = ERC20(tokens[i]);\\n            if (pool.isBound(tokens[i])) {\\n                if (balances[i] > pool.getBalance(tokens[i])) {\\n                    require(token.transferFrom(msg.sender, address(this), balances[i] - pool.getBalance(tokens[i])), \\\"ERR_TRANSFER_FAILED\\\");\\n                    _safeApprove(token, address(pool), balances[i] - pool.getBalance(tokens[i]));\\n                }\\n                if (balances[i] > 10**6) {\\n                    pool.rebind(tokens[i], balances[i], denorms[i]);\\n                } else {\\n                    pool.unbind(tokens[i]);\\n                }\\n            } else {\\n                require(token.transferFrom(msg.sender, address(this), balances[i]), \\\"ERR_TRANSFER_FAILED\\\");\\n                _safeApprove(token, address(pool), balances[i]);\\n                pool.bind(tokens[i], balances[i], denorms[i]);\\n            }\\n\\n            if (token.balanceOf(address(this)) > 0) {\\n                require(token.transfer(msg.sender, token.balanceOf(address(this))), \\\"ERR_TRANSFER_FAILED\\\");\\n            }\\n        }\\n    }\\n\\n    function finalize(LiquidityPoolActions pool) external {\\n        pool.finalize();\\n        require(pool.transfer(msg.sender, pool.balanceOf(address(this))), \\\"ERR_TRANSFER_FAILED\\\");\\n    }\\n\\n    // --- Smart pool management ---\\n\\n    function rebalance(\\n        IConfigurableRightsPool crp,\\n        address tokenA,\\n        address tokenB,\\n        uint deltaWeight,\\n        uint minAmountOut\\n    ) external {\\n        crp.rebalance(tokenA, tokenB, deltaWeight, minAmountOut);\\n    }\\n\\n    function setCap(IConfigurableRightsPool crp, uint newCap) external {\\n        crp.setCap(newCap);\\n    }\\n\\n    function whitelistLiquidityProvider(IConfigurableRightsPool crp, address provider) external {\\n        crp.whitelistLiquidityProvider(provider);\\n    }\\n\\n    function removeWhitelistedLiquidityProvider(IConfigurableRightsPool crp, address provider) external {\\n        crp.removeWhitelistedLiquidityProvider(provider);\\n    }\\n\\n    function addTokenToWhitelist(IConfigurableRightsPool crp, uint[] memory sort, address[] memory token) public {\\n        crp.addTokenToWhitelist(sort, token);\\n    }\\n\\n    // --- Internals ---\\n\\n    function _safeApprove(\\n        ERC20 token,\\n        address spender,\\n        uint amount\\n    ) internal {\\n        if (token.allowance(address(this), spender) > 0) {\\n            token.approve(spender, 0);\\n        }\\n        token.approve(spender, amount);\\n    }\\n\\n    function _join(\\n        AbstractPool pool,\\n        address[] memory tokens,\\n        uint poolAmountOut,\\n        uint[] memory maxAmountsIn,\\n        address kol\\n    ) internal {\\n        require(maxAmountsIn.length == tokens.length, \\\"ERR_LENGTH_MISMATCH\\\");\\n\\n        for (uint i = 0; i < tokens.length; i++) {\\n            ERC20 token = ERC20(tokens[i]);\\n            require(token.transferFrom(msg.sender, address(this), maxAmountsIn[i]), \\\"ERR_TRANSFER_FAILED\\\");\\n            _safeApprove(token, address(pool), maxAmountsIn[i]);\\n        }\\n        pool.joinPool(poolAmountOut, maxAmountsIn, kol);\\n        for (uint i = 0; i < tokens.length; i++) {\\n            ERC20 token = ERC20(tokens[i]);\\n            if (token.balanceOf(address(this)) > 0) {\\n                require(token.transfer(msg.sender, token.balanceOf(address(this))), \\\"ERR_TRANSFER_FAILED\\\");\\n            }\\n        }\\n        require(pool.transfer(msg.sender, pool.balanceOf(address(this))), \\\"ERR_TRANSFER_FAILED\\\");\\n    }\\n\\n    function _exit(\\n        AbstractPool pool,\\n        uint poolAmountIn,\\n        uint[] memory minAmountsOut,\\n        address[] memory tokens\\n    ) internal {\\n        uint bal = pool.balanceOf(msg.sender);\\n        require(pool.transferFrom(msg.sender, address(this), bal), \\\"ERR_TRANSFER_FAILED\\\");\\n        _safeApprove(pool, address(pool), bal);\\n\\n        pool.exitPool(poolAmountIn, minAmountsOut);\\n\\n        for (uint i = 0; i < tokens.length; i++) {\\n            ERC20 token = ERC20(tokens[i]);\\n            if (token.balanceOf(address(this)) > 0) {\\n                require(token.transfer(msg.sender, token.balanceOf(address(this))), \\\"ERR_TRANSFER_FAILED\\\");\\n            }\\n        }\\n\\n        require(pool.transfer(msg.sender, pool.balanceOf(address(this))), \\\"ERR_TRANSFER_FAILED\\\");\\n    }\\n\\n    function claimKolReward(address _userVault, address pool) public {\\n        IUserVault(_userVault).claimKolReward(pool);\\n    }\\n\\n    function claimManagersReward(address _userVault, address pool) public {\\n        IUserVault(_userVault).managerClaim(pool);\\n    }\\n}\\n\",\"keccak256\":\"0x4828e65fccbba4684e8ba90e2ba965c7b95719616f581af0cd7060ef9cba3447\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IBFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\nimport \\\"../libraries/SmartPoolManager.sol\\\";\\n\\ninterface IBPool {\\n    function rebind(\\n        address token,\\n        uint balance,\\n        uint denorm\\n    ) external;\\n\\n    function rebindSmart(\\n        address tokenA,\\n        address tokenB,\\n        uint deltaWeight,\\n        uint deltaBalance,\\n        bool isSoldout,\\n        uint minAmountOut\\n    ) external;\\n\\n    function execute(\\n        address _target,\\n        uint _value,\\n        bytes calldata _data\\n    ) external returns (bytes memory _returnValue);\\n\\n    function bind(\\n        address token,\\n        uint balance,\\n        uint denorm\\n    ) external;\\n\\n    function unbind(address token) external;\\n\\n    function unbindPure(address token) external;\\n\\n    function isBound(address token) external view returns (bool);\\n\\n    function getBalance(address token) external view returns (uint);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function getSwapFee() external view returns (uint);\\n\\n    function isPublicSwap() external view returns (bool);\\n\\n    function getDenormalizedWeight(address token) external view returns (uint);\\n\\n    function getTotalDenormalizedWeight() external view returns (uint);\\n\\n    function EXIT_FEE() external view returns (uint);\\n\\n    function getCurrentTokens() external view returns (address[] memory tokens);\\n\\n    function setController(address owner) external;\\n}\\n\\ninterface IBFactory {\\n    function newLiquidityPool() external returns (IBPool);\\n\\n    function setBLabs(address b) external;\\n\\n    function collect(IBPool pool) external;\\n\\n    function isBPool(address b) external view returns (bool);\\n\\n    function getBLabs() external view returns (address);\\n\\n    function getSwapRouter() external view returns (address);\\n\\n    function getVault() external view returns (address);\\n\\n    function getUserVault() external view returns (address);\\n\\n    function getVaultAddress() external view returns (address);\\n\\n    function getOracleAddress() external view returns (address);\\n\\n    function getManagerOwner() external view returns (address);\\n\\n    function isTokenWhitelistedForVerify(uint sort, address token) external view returns (bool);\\n\\n    function isTokenWhitelistedForVerify(address token) external view returns (bool);\\n\\n    function getModuleStatus(address etf, address module) external view returns (bool);\\n\\n    function isPaused() external view returns (bool);\\n}\\n\\ninterface IVault {\\n    function depositManagerToken(address[] calldata poolTokens, uint[] calldata tokensAmount) external;\\n\\n    function depositIssueRedeemPToken(\\n        address[] calldata poolTokens,\\n        uint[] calldata tokensAmount,\\n        uint[] calldata tokensAmountP,\\n        bool isPerfermance\\n    ) external;\\n\\n    function managerClaim(address pool) external;\\n\\n    function getManagerClaimBool(address pool) external view returns (bool);\\n}\\n\\ninterface IUserVault {\\n    function recordTokenInfo(\\n        address kol,\\n        address user,\\n        address[] calldata poolTokens,\\n        uint[] calldata tokensAmount\\n    ) external;\\n}\\n\\ninterface Oracles {\\n    function getPrice(address tokenAddress) external returns (uint price);\\n\\n    function getAllPrice(address[] calldata poolTokens, uint[] calldata tokensAmount) external returns (uint);\\n}\",\"keccak256\":\"0xc2cc32bdf691ceddab7a647a98bd481adcf9ae8393d8663a916bf032ef0dbbc6\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IConfigurableRightsPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Interface declarations\\n\\n// Introduce to avoid circularity (otherwise, the CRP and SmartPoolManager include each other)\\n// Removing circularity allows flattener tools to work, which enables Etherscan verification\\ninterface IConfigurableRightsPool {\\n    function mintPoolShareFromLib(uint amount) external;\\n\\n    function pushPoolShareFromLib(address to, uint amount) external;\\n\\n    function pullPoolShareFromLib(address from, uint amount) external;\\n\\n    function burnPoolShareFromLib(uint amount) external;\\n\\n    function balanceOf(address account) external view returns (uint);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function getController() external view returns (address);\\n\\n    function vaultAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0x1326889b57f63cc031e7c9e383b0fd3b172a9b86eb623cf0faba32c0768c4ec4\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Interface declarations\\n\\n/* solhint-disable func-order */\\n\\ninterface IERC20 {\\n    // Emitted when the allowance of a spender for an owner is set by a call to approve.\\n    // Value is the new allowance\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n\\n    // Emitted when value tokens are moved from one account (from) to another (to).\\n    // Note that value may be zero\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    // Returns the amount of tokens in existence\\n    function totalSupply() external view returns (uint);\\n\\n    // Returns the amount of tokens owned by account\\n    function balanceOf(address account) external view returns (uint);\\n\\n    // Returns the decimals of tokens\\n    function decimals() external view returns (uint8);\\n\\n    function symbol() external view returns (string memory);\\n\\n    // Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner\\n    // through transferFrom. This is zero by default\\n    // This value changes when approve or transferFrom are called\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    // Sets amount as the allowance of spender over the caller\\u2019s tokens\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits an Approval event.\\n    function approve(address spender, uint amount) external returns (bool);\\n\\n    // Moves amount tokens from the caller\\u2019s account to recipient\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits a Transfer event.\\n    function transfer(address recipient, uint amount) external returns (bool);\\n\\n    // Moves amount tokens from sender to recipient using the allowance mechanism\\n    // Amount is then deducted from the caller\\u2019s allowance\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits a Transfer event\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xfe22b6d6029b400b9cce7f9b39c546f99cd6922b2fd926e480e2b4d476ab26f8\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/DesynConstants.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n/**\\n * @author Desyn Labs\\n * @title Put all the constants in one place\\n */\\n\\nlibrary DesynConstants {\\n    // State variables (must be constant in a library)\\n\\n    // B \\\"ONE\\\" - all math is in the \\\"realm\\\" of 10 ** 18;\\n    // where numeric 1 = 10 ** 18\\n    uint public constant BONE = 10**18;\\n    uint public constant MIN_WEIGHT = BONE;\\n    uint public constant MAX_WEIGHT = BONE * 50;\\n    uint public constant MAX_TOTAL_WEIGHT = BONE * 50;\\n    uint public constant MIN_BALANCE = 0;\\n    uint public constant MAX_BALANCE = BONE * 10**12;\\n    uint public constant MIN_POOL_SUPPLY = BONE * 100;\\n    uint public constant MAX_POOL_SUPPLY = BONE * 10**9;\\n    uint public constant MIN_FEE = BONE / 10**6;\\n    uint public constant MAX_FEE = BONE / 10;\\n    //Fee Set\\n    uint public constant MANAGER_MIN_FEE = 0;\\n    uint public constant MANAGER_MAX_FEE = BONE / 10;\\n    uint public constant ISSUE_MIN_FEE = BONE / 1000;\\n    uint public constant ISSUE_MAX_FEE = BONE / 10;\\n    uint public constant REDEEM_MIN_FEE = 0;\\n    uint public constant REDEEM_MAX_FEE = BONE / 10;\\n    uint public constant PERFERMANCE_MIN_FEE = 0;\\n    uint public constant PERFERMANCE_MAX_FEE = BONE / 2;\\n    // EXIT_FEE must always be zero, or ConfigurableRightsPool._pushUnderlying will fail\\n    uint public constant EXIT_FEE = 0;\\n    uint public constant MAX_IN_RATIO = BONE / 2;\\n    uint public constant MAX_OUT_RATIO = (BONE / 3) + 1 wei;\\n    // Must match BConst.MIN_BOUND_TOKENS and BConst.MAX_BOUND_TOKENS\\n    uint public constant MIN_ASSET_LIMIT = 1;\\n    uint public constant MAX_ASSET_LIMIT = 16;\\n    uint public constant MAX_UINT = uint(-1);\\n    uint public constant MAX_COLLECT_PERIOD = 60 days;\\n}\\n\",\"keccak256\":\"0xbc396253a5541cd3cc080ca207dfdd2d2bdf963de26e005db36bd752524c1d66\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/DesynSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Imports\\n\\nimport \\\"./DesynConstants.sol\\\";\\n\\n/**\\n * @author Desyn Labs\\n * @title SafeMath - wrap Solidity operators to prevent underflow/overflow\\n * @dev badd and bsub are basically identical to OpenZeppelin SafeMath; mul/div have extra checks\\n */\\nlibrary DesynSafeMath {\\n    /**\\n     * @notice Safe addition\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev if we are adding b to a, the resulting sum must be greater than a\\n     * @return - sum of operands; throws if overflow\\n     */\\n    function badd(uint a, uint b) internal pure returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, \\\"ERR_ADD_OVERFLOW\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned subtraction\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Do a signed subtraction, and check that it produces a positive value\\n     *      (i.e., a - b is valid if b <= a)\\n     * @return - a - b; throws if underflow\\n     */\\n    function bsub(uint a, uint b) internal pure returns (uint) {\\n        (uint c, bool negativeResult) = bsubSign(a, b);\\n        require(!negativeResult, \\\"ERR_SUB_UNDERFLOW\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Safe signed subtraction\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Do a signed subtraction\\n     * @return - difference between a and b, and a flag indicating a negative result\\n     *           (i.e., a - b if a is greater than or equal to b; otherwise b - a)\\n     */\\n    function bsubSign(uint a, uint b) internal pure returns (uint, bool) {\\n        if (b <= a) {\\n            return (a - b, false);\\n        } else {\\n            return (b - a, true);\\n        }\\n    }\\n\\n    /**\\n     * @notice Safe multiplication\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Multiply safely (and efficiently), rounding down\\n     * @return - product of operands; throws if overflow or rounding error\\n     */\\n    function bmul(uint a, uint b) internal pure returns (uint) {\\n        // Gas optimization (see github.com/OpenZeppelin/openzeppelin-contracts/pull/522)\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // Standard overflow check: a/a*b=b\\n        uint c0 = a * b;\\n        require(c0 / a == b, \\\"ERR_MUL_OVERFLOW\\\");\\n\\n        // Round to 0 if x*y < BONE/2?\\n        uint c1 = c0 + (DesynConstants.BONE / 2);\\n        require(c1 >= c0, \\\"ERR_MUL_OVERFLOW\\\");\\n        uint c2 = c1 / DesynConstants.BONE;\\n        return c2;\\n    }\\n\\n    /**\\n     * @notice Safe division\\n     * @param dividend - first operand\\n     * @param divisor - second operand\\n     * @dev Divide safely (and efficiently), rounding down\\n     * @return - quotient; throws if overflow or rounding error\\n     */\\n    function bdiv(uint dividend, uint divisor) internal pure returns (uint) {\\n        require(divisor != 0, \\\"ERR_DIV_ZERO\\\");\\n\\n        // Gas optimization\\n        if (dividend == 0) {\\n            return 0;\\n        }\\n\\n        uint c0 = dividend * DesynConstants.BONE;\\n        require(c0 / dividend == DesynConstants.BONE, \\\"ERR_DIV_INTERNAL\\\"); // bmul overflow\\n\\n        uint c1 = c0 + (divisor / 2);\\n        require(c1 >= c0, \\\"ERR_DIV_INTERNAL\\\"); //  badd require\\n\\n        uint c2 = c1 / divisor;\\n        return c2;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer modulo\\n     * @dev Returns the remainder of dividing two unsigned integers.\\n     *      Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * @param dividend - first operand\\n     * @param divisor - second operand -- cannot be zero\\n     * @return - quotient; throws if overflow or rounding error\\n     */\\n    function bmod(uint dividend, uint divisor) internal pure returns (uint) {\\n        require(divisor != 0, \\\"ERR_MODULO_BY_ZERO\\\");\\n\\n        return dividend % divisor;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer max\\n     * @dev Returns the greater of the two input values\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the maximum of a and b\\n     */\\n    function bmax(uint a, uint b) internal pure returns (uint) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer min\\n     * @dev returns b, if b < a; otherwise returns a\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the lesser of the two input values\\n     */\\n    function bmin(uint a, uint b) internal pure returns (uint) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer average\\n     * @dev Guard against (a+b) overflow by dividing each operand separately\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the average of the two values\\n     */\\n    function baverage(uint a, uint b) internal pure returns (uint) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\\n    }\\n\\n    /**\\n     * @notice Babylonian square root implementation\\n     * @dev (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n     * @param y - operand\\n     * @return z - the square root result\\n     */\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9baf30b98a5f3a8c13ac9c4d5d4b176eabfd936aba8f5172c95b7c568fba68f3\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/RightsManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Needed to handle structures externally\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @author Desyn Labs\\n * @title Manage Configurable Rights for the smart pool\\n *      canPauseSwapping - can setPublicSwap back to false after turning it on\\n *                         by default, it is off on initialization and can only be turned on\\n *      canChangeSwapFee - can setSwapFee after initialization (by default, it is fixed at create time)\\n *      canChangeWeights - can bind new token weights (allowed by default in base pool)\\n *      canAddRemoveTokens - can bind/unbind tokens (allowed by default in base pool)\\n *      canWhitelistLPs - can limit liquidity providers to a given set of addresses\\n *      canChangeCap - can change the BSP cap (max # of pool tokens)\\n *      canChangeFloor - can change the BSP floor for Closure ETF (min # of pool tokens)\\n */\\nlibrary RightsManager {\\n    // Type declarations\\n\\n    enum Permissions {\\n        PAUSE_SWAPPING,\\n        CHANGE_SWAP_FEE,\\n        CHANGE_WEIGHTS,\\n        ADD_REMOVE_TOKENS,\\n        WHITELIST_LPS,\\n        TOKEN_WHITELISTS\\n        // CHANGE_CAP,\\n        // CHANGE_FLOOR\\n    }\\n\\n    struct Rights {\\n        bool canPauseSwapping;\\n        bool canChangeSwapFee;\\n        bool canChangeWeights;\\n        bool canAddRemoveTokens;\\n        bool canWhitelistLPs;\\n        bool canTokenWhiteLists;\\n        // bool canChangeCap;\\n        // bool canChangeFloor;\\n    }\\n\\n    // State variables (can only be constants in a library)\\n    bool public constant DEFAULT_CAN_PAUSE_SWAPPING = false;\\n    bool public constant DEFAULT_CAN_CHANGE_SWAP_FEE = true;\\n    bool public constant DEFAULT_CAN_CHANGE_WEIGHTS = true;\\n    bool public constant DEFAULT_CAN_ADD_REMOVE_TOKENS = false;\\n    bool public constant DEFAULT_CAN_WHITELIST_LPS = false;\\n    bool public constant DEFAULT_CAN_TOKEN_WHITELISTS = false;\\n\\n    // bool public constant DEFAULT_CAN_CHANGE_CAP = false;\\n    // bool public constant DEFAULT_CAN_CHANGE_FLOOR = false;\\n\\n    // Functions\\n\\n    /**\\n     * @notice create a struct from an array (or return defaults)\\n     * @dev If you pass an empty array, it will construct it using the defaults\\n     * @param a - array input\\n     * @return Rights struct\\n     */\\n    function constructRights(bool[] calldata a) external pure returns (Rights memory) {\\n        if (a.length < 6) {\\n            return\\n                Rights(\\n                    DEFAULT_CAN_PAUSE_SWAPPING,\\n                    DEFAULT_CAN_CHANGE_SWAP_FEE,\\n                    DEFAULT_CAN_CHANGE_WEIGHTS,\\n                    DEFAULT_CAN_ADD_REMOVE_TOKENS,\\n                    DEFAULT_CAN_WHITELIST_LPS,\\n                    DEFAULT_CAN_TOKEN_WHITELISTS\\n                    // DEFAULT_CAN_CHANGE_CAP,\\n                    // DEFAULT_CAN_CHANGE_FLOOR\\n                );\\n        } else {\\n            // return Rights(a[0], a[1], a[2], a[3], a[4], a[5], a[6]);\\n            return Rights(a[0], a[1], a[2], a[3], a[4], a[5]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Convert rights struct to an array (e.g., for events, GUI)\\n     * @dev avoids multiple calls to hasPermission\\n     * @param rights - the rights struct to convert\\n     * @return boolean array containing the rights settings\\n     */\\n    function convertRights(Rights calldata rights) external pure returns (bool[] memory) {\\n        bool[] memory result = new bool[](6);\\n\\n        result[0] = rights.canPauseSwapping;\\n        result[1] = rights.canChangeSwapFee;\\n        result[2] = rights.canChangeWeights;\\n        result[3] = rights.canAddRemoveTokens;\\n        result[4] = rights.canWhitelistLPs;\\n        result[5] = rights.canTokenWhiteLists;\\n        // result[5] = rights.canChangeCap;\\n        // result[6] = rights.canChangeFloor;\\n\\n        return result;\\n    }\\n\\n    // Though it is actually simple, the number of branches triggers code-complexity\\n    /* solhint-disable code-complexity */\\n\\n    /**\\n     * @notice Externally check permissions using the Enum\\n     * @param self - Rights struct containing the permissions\\n     * @param permission - The permission to check\\n     * @return Boolean true if it has the permission\\n     */\\n    function hasPermission(Rights calldata self, Permissions permission) external pure returns (bool) {\\n        if (Permissions.PAUSE_SWAPPING == permission) {\\n            return self.canPauseSwapping;\\n        } else if (Permissions.CHANGE_SWAP_FEE == permission) {\\n            return self.canChangeSwapFee;\\n        } else if (Permissions.CHANGE_WEIGHTS == permission) {\\n            return self.canChangeWeights;\\n        } else if (Permissions.ADD_REMOVE_TOKENS == permission) {\\n            return self.canAddRemoveTokens;\\n        } else if (Permissions.WHITELIST_LPS == permission) {\\n            return self.canWhitelistLPs;\\n        } else if (Permissions.TOKEN_WHITELISTS == permission) {\\n            return self.canTokenWhiteLists;\\n        }\\n        // else if (Permissions.CHANGE_CAP == permission) {\\n        //     return self.canChangeCap;\\n        // } else if (Permissions.CHANGE_FLOOR == permission) {\\n        //     return self.canChangeFloor;\\n        // }\\n    }\\n\\n    /* solhint-enable code-complexity */\\n}\\n\",\"keccak256\":\"0x398bbfe72673fa1c42a7d59fb5f7b2a46332887e105bf6fdff234a9a83247d0e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/SafeApprove.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Imports\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n// Libraries\\n\\n/**\\n * @author PieDAO (ported to Desyn Labs)\\n * @title SafeApprove - set approval for tokens that require 0 prior approval\\n * @dev Perhaps to address the known ERC20 race condition issue\\n *      See https://github.com/crytic/not-so-smart-contracts/tree/master/race_condition\\n *      Some tokens - notably KNC - only allow approvals to be increased from 0\\n */\\nlibrary SafeApprove {\\n    /**\\n     * @notice handle approvals of tokens that require approving from a base of 0\\n     * @param token - the token we're approving\\n     * @param spender - entity the owner (sender) is approving to spend his tokens\\n     * @param amount - number of tokens being approved\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint amount\\n    ) internal returns (bool) {\\n        uint currentAllowance = token.allowance(address(this), spender);\\n\\n        // Do nothing if allowance is already set to this value\\n        if (currentAllowance == amount) {\\n            return true;\\n        }\\n\\n        // If approval is not zero reset it to zero first\\n        if (currentAllowance != 0) {\\n            token.approve(spender, 0);\\n        }\\n\\n        // do the actual approval\\n        return token.approve(spender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xa51ebf770f2676085b89b1636688cc086289cfe27f614dfd0c15142535c26752\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint a, uint b) internal pure returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint a, uint b) internal pure returns (uint) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint a,\\n        uint b,\\n        string memory errorMessage\\n    ) internal pure returns (uint) {\\n        require(b <= a, errorMessage);\\n        uint c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint a, uint b) internal pure returns (uint) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint a, uint b) internal pure returns (uint) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint a,\\n        uint b,\\n        string memory errorMessage\\n    ) internal pure returns (uint) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint a, uint b) internal pure returns (uint) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint a,\\n        uint b,\\n        string memory errorMessage\\n    ) internal pure returns (uint) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x7ce3fd7d17047f684821e1a20b4f5989630f6755a377b12c087dfde359f710d6\",\"license\":\"agpl-3.0\"},\"contracts/libraries/SmartPoolManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Needed to pass in structs\\npragma experimental ABIEncoderV2;\\n\\n// Imports\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IConfigurableRightsPool.sol\\\";\\nimport \\\"../interfaces/IBFactory.sol\\\"; // unused\\nimport \\\"./DesynSafeMath.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./SafeApprove.sol\\\";\\n\\n/**\\n * @author Desyn Labs\\n * @title Factor out the weight updates\\n */\\nlibrary SmartPoolManager {\\n    using SafeApprove for IERC20;\\n    using DesynSafeMath for uint;\\n    using SafeMath for uint;\\n\\n    //kol pool params\\n    struct levelParams {\\n        uint level;\\n        uint ratio;\\n    }\\n\\n    struct feeParams {\\n        levelParams firstLevel;\\n        levelParams secondLevel;\\n        levelParams thirdLevel;\\n        levelParams fourLevel;\\n    }\\n    struct KolPoolParams {\\n        feeParams managerFee;\\n        feeParams issueFee;\\n        feeParams redeemFee;\\n        feeParams perfermanceFee;\\n    }\\n\\n    // Type declarations\\n    enum Etypes {\\n        OPENED,\\n        CLOSED\\n    }\\n\\n    enum Period {\\n        HALF,\\n        ONE,\\n        TWO\\n    }\\n\\n    // updateWeight and pokeWeights are unavoidably long\\n    /* solhint-disable function-max-lines */\\n    struct Status {\\n        uint collectPeriod;\\n        uint collectEndTime;\\n        uint closurePeriod;\\n        uint closureEndTime;\\n        uint upperCap;\\n        uint floorCap;\\n        uint managerFee;\\n        uint redeemFee;\\n        uint issueFee;\\n        uint perfermanceFee;\\n        uint startClaimFeeTime;\\n    }\\n\\n    struct PoolParams {\\n        // Desyn Pool Token (representing shares of the pool)\\n        string poolTokenSymbol;\\n        string poolTokenName;\\n        // Tokens inside the Pool\\n        address[] constituentTokens;\\n        uint[] tokenBalances;\\n        uint[] tokenWeights;\\n        uint swapFee;\\n        uint managerFee;\\n        uint redeemFee;\\n        uint issueFee;\\n        uint perfermanceFee;\\n        Etypes etype;\\n    }\\n\\n    struct PoolTokenRange {\\n        uint bspFloor;\\n        uint bspCap;\\n    }\\n\\n    struct Fund {\\n        uint etfAmount;\\n        uint fundAmount;\\n    }\\n\\n    function initRequire(\\n        uint swapFee,\\n        uint managerFee,\\n        uint issueFee,\\n        uint redeemFee,\\n        uint perfermanceFee,\\n        uint tokenBalancesLength,\\n        uint tokenWeightsLength,\\n        uint constituentTokensLength,\\n        bool initBool\\n    ) external pure {\\n        // We don't have a pool yet; check now or it will fail later (in order of likelihood to fail)\\n        // (and be unrecoverable if they don't have permission set to change it)\\n        // Most likely to fail, so check first\\n        require(!initBool, \\\"Init fail\\\");\\n        require(swapFee >= DesynConstants.MIN_FEE, \\\"ERR_INVALID_SWAP_FEE\\\");\\n        require(swapFee <= DesynConstants.MAX_FEE, \\\"ERR_INVALID_SWAP_FEE\\\");\\n        require(managerFee >= DesynConstants.MANAGER_MIN_FEE, \\\"ERR_INVALID_MANAGER_FEE\\\");\\n        require(managerFee <= DesynConstants.MANAGER_MAX_FEE, \\\"ERR_INVALID_MANAGER_FEE\\\");\\n        require(issueFee >= DesynConstants.ISSUE_MIN_FEE, \\\"ERR_INVALID_ISSUE_MIN_FEE\\\");\\n        require(issueFee <= DesynConstants.ISSUE_MAX_FEE, \\\"ERR_INVALID_ISSUE_MAX_FEE\\\");\\n        require(redeemFee >= DesynConstants.REDEEM_MIN_FEE, \\\"ERR_INVALID_REDEEM_MIN_FEE\\\");\\n        require(redeemFee <= DesynConstants.REDEEM_MAX_FEE, \\\"ERR_INVALID_REDEEM_MAX_FEE\\\");\\n        require(perfermanceFee >= DesynConstants.PERFERMANCE_MIN_FEE, \\\"ERR_INVALID_PERFERMANCE_MIN_FEE\\\");\\n        require(perfermanceFee <= DesynConstants.PERFERMANCE_MAX_FEE, \\\"ERR_INVALID_PERFERMANCE_MAX_FEE\\\");\\n\\n        // Arrays must be parallel\\n        require(tokenBalancesLength == constituentTokensLength, \\\"ERR_START_BALANCES_MISMATCH\\\");\\n        require(tokenWeightsLength == constituentTokensLength, \\\"ERR_START_WEIGHTS_MISMATCH\\\");\\n        // Cannot have too many or too few - technically redundant, since BPool.bind() would fail later\\n        // But if we don't check now, we could have a useless contract with no way to create a pool\\n\\n        require(constituentTokensLength >= DesynConstants.MIN_ASSET_LIMIT, \\\"ERR_TOO_FEW_TOKENS\\\");\\n        require(constituentTokensLength <= DesynConstants.MAX_ASSET_LIMIT, \\\"ERR_TOO_MANY_TOKENS\\\");\\n        // There are further possible checks (e.g., if they use the same token twice), but\\n        // we can let bind() catch things like that (i.e., not things that might reasonably work)\\n    }\\n\\n    /**\\n     * @notice Update the weight of an existing token\\n     * @dev Refactored to library to make CRPFactory deployable\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param tokenA - token to sell\\n     * @param tokenB - token to buy\\n     */\\n    function rebalance(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address tokenA,\\n        address tokenB,\\n        uint deltaWeight,\\n        uint minAmountOut\\n    ) external {\\n        uint currentWeightA = bPool.getDenormalizedWeight(tokenA);\\n        uint currentBalanceA = bPool.getBalance(tokenA);\\n        // uint currentWeightB = bPool.getDenormalizedWeight(tokenB);\\n\\n        require(deltaWeight <= currentWeightA, \\\"ERR_DELTA_WEIGHT_TOO_BIG\\\");\\n\\n        // deltaBalance = currentBalance * (deltaWeight / currentWeight)\\n        uint deltaBalanceA = DesynSafeMath.bmul(currentBalanceA, DesynSafeMath.bdiv(deltaWeight, currentWeightA));\\n\\n        // uint currentBalanceB = bPool.getBalance(tokenB);\\n\\n        // uint deltaWeight = DesynSafeMath.bsub(newWeight, currentWeightA);\\n\\n        // uint newWeightB = DesynSafeMath.bsub(currentWeightB, deltaWeight);\\n        // require(newWeightB >= 0, \\\"ERR_INCORRECT_WEIGHT_B\\\");\\n        bool soldout;\\n        if (deltaWeight == currentWeightA) {\\n            // reduct token A\\n            bPool.unbindPure(tokenA);\\n            soldout = true;\\n        }\\n\\n        // Now with the tokens this contract can bind them to the pool it controls\\n        bPool.rebindSmart(tokenA, tokenB, deltaWeight, deltaBalanceA, soldout, minAmountOut);\\n    }\\n\\n    /**\\n     * @notice Non ERC20-conforming tokens are problematic; don't allow them in pools\\n     * @dev Will revert if invalid\\n     * @param token - The prospective token to verify\\n     */\\n    function verifyTokenCompliance(address token) external {\\n        verifyTokenComplianceInternal(token);\\n    }\\n\\n    /**\\n     * @notice Non ERC20-conforming tokens are problematic; don't allow them in pools\\n     * @dev Will revert if invalid - overloaded to save space in the main contract\\n     * @param tokens - The prospective tokens to verify\\n     */\\n    function verifyTokenCompliance(address[] calldata tokens) external {\\n        for (uint i = 0; i < tokens.length; i++) {\\n            verifyTokenComplianceInternal(tokens[i]);\\n        }\\n    }\\n\\n    function createPoolInternalHandle(IBPool bPool, uint initialSupply) external view {\\n        require(initialSupply >= DesynConstants.MIN_POOL_SUPPLY, \\\"ERR_INIT_SUPPLY_MIN\\\");\\n        require(initialSupply <= DesynConstants.MAX_POOL_SUPPLY, \\\"ERR_INIT_SUPPLY_MAX\\\");\\n        require(bPool.EXIT_FEE() == 0, \\\"ERR_NONZERO_EXIT_FEE\\\");\\n        // EXIT_FEE must always be zero, or ConfigurableRightsPool._pushUnderlying will fail\\n        require(DesynConstants.EXIT_FEE == 0, \\\"ERR_NONZERO_EXIT_FEE\\\");\\n    }\\n\\n    function createPoolHandle(\\n        uint collectPeriod,\\n        uint upperCap,\\n        uint initialSupply\\n    ) external pure {\\n        require(collectPeriod <= DesynConstants.MAX_COLLECT_PERIOD, \\\"ERR_EXCEEDS_FUND_RAISING_PERIOD\\\");\\n        require(upperCap >= initialSupply, \\\"ERR_CAP_BIGGER_THAN_INITSUPPLY\\\");\\n    }\\n\\n    function exitPoolHandle(\\n        uint _endEtfAmount,\\n        uint _endFundAmount,\\n        uint _beginEtfAmount,\\n        uint _beginFundAmount,\\n        uint poolAmountIn,\\n        uint totalEnd\\n    )\\n        external\\n        pure\\n        returns (\\n            uint endEtfAmount,\\n            uint endFundAmount,\\n            uint profitRate\\n        )\\n    {\\n        endEtfAmount = DesynSafeMath.badd(_endEtfAmount, poolAmountIn);\\n        endFundAmount = DesynSafeMath.badd(_endFundAmount, totalEnd);\\n        uint amount1 = DesynSafeMath.bdiv(endFundAmount, endEtfAmount);\\n        uint amount2 = DesynSafeMath.bdiv(_beginFundAmount, _beginEtfAmount);\\n        if (amount1 > amount2) {\\n            profitRate = DesynSafeMath.bdiv(\\n                DesynSafeMath.bmul(DesynSafeMath.bsub(DesynSafeMath.bdiv(endFundAmount, endEtfAmount), DesynSafeMath.bdiv(_beginFundAmount, _beginEtfAmount)), poolAmountIn),\\n                totalEnd\\n            );\\n        }\\n    }\\n\\n    function exitPoolHandleA(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address poolToken,\\n        uint _tokenAmountOut,\\n        uint redeemFee,\\n        uint profitRate,\\n        uint perfermanceFee\\n    )\\n        external\\n        returns (\\n            uint redeemAndPerformanceFeeReceived,\\n            uint finalAmountOut,\\n            uint redeemFeeReceived\\n        )\\n    {\\n        // redeem fee\\n        redeemFeeReceived = DesynSafeMath.bmul(_tokenAmountOut, redeemFee);\\n\\n        // performance fee\\n        uint performanceFeeReceived = DesynSafeMath.bmul(DesynSafeMath.bmul(_tokenAmountOut, profitRate), perfermanceFee);\\n        \\n        // redeem fee and performance fee\\n        redeemAndPerformanceFeeReceived = DesynSafeMath.badd(performanceFeeReceived, redeemFeeReceived);\\n\\n        // final amount the user got\\n        finalAmountOut = DesynSafeMath.bsub(_tokenAmountOut, redeemAndPerformanceFeeReceived);\\n\\n        _pushUnderlying(bPool, poolToken, msg.sender, finalAmountOut);\\n\\n        if (redeemFee != 0 || (profitRate > 0 && perfermanceFee != 0)) {\\n            _pushUnderlying(bPool, poolToken, address(this), redeemAndPerformanceFeeReceived);\\n            IERC20(poolToken).safeApprove(self.vaultAddress(), redeemAndPerformanceFeeReceived);\\n        }\\n    }\\n\\n    function exitPoolHandleB(\\n        IConfigurableRightsPool self,\\n        bool bools,\\n        bool isCompletedCollect,\\n        uint closureEndTime,\\n        uint collectEndTime,\\n        uint _etfAmount,\\n        uint _fundAmount,\\n        uint poolAmountIn\\n    ) external view returns (uint etfAmount, uint fundAmount, uint actualPoolAmountIn) {\\n        actualPoolAmountIn = poolAmountIn;\\n        if (bools) {\\n            bool isCloseEtfCollectEndWithFailure = isCompletedCollect == false && block.timestamp >= collectEndTime;\\n            bool isCloseEtfClosureEnd = block.timestamp >= closureEndTime;\\n            require(isCloseEtfCollectEndWithFailure || isCloseEtfClosureEnd, \\\"ERR_CLOSURE_TIME_NOT_ARRIVED!\\\");\\n\\n            actualPoolAmountIn = self.balanceOf(msg.sender);\\n        }\\n        fundAmount = _fundAmount;\\n        etfAmount = _etfAmount;\\n    }\\n\\n    function joinPoolHandle(\\n        bool canWhitelistLPs,\\n        bool isList,\\n        bool bools,\\n        uint collectEndTime\\n    ) external view {\\n        require(!canWhitelistLPs || isList, \\\"ERR_NOT_ON_WHITELIST\\\");\\n\\n        if (bools) {\\n            require(block.timestamp <= collectEndTime, \\\"ERR_COLLECT_PERIOD_FINISHED!\\\");\\n        }\\n    }\\n\\n    function rebalanceHandle(\\n        IBPool bPool,\\n        bool isCompletedCollect,\\n        bool bools,\\n        uint collectEndTime,\\n        uint closureEndTime,\\n        bool canChangeWeights,\\n        address tokenA,\\n        address tokenB\\n    ) external {\\n        require(bPool.isBound(tokenA), \\\"ERR_TOKEN_NOT_BOUND\\\");\\n        if (bools) {\\n            require(isCompletedCollect, \\\"ERROR_COLLECTION_FAILED\\\");\\n            require(block.timestamp > collectEndTime && block.timestamp < closureEndTime, \\\"ERR_NOT_REBALANCE_PERIOD\\\");\\n        }\\n\\n        if (!bPool.isBound(tokenB)) {\\n            bool returnValue = IERC20(tokenB).safeApprove(address(bPool), DesynConstants.MAX_UINT);\\n            require(returnValue, \\\"ERR_ERC20_FALSE\\\");\\n        }\\n\\n        require(canChangeWeights, \\\"ERR_NOT_CONFIGURABLE_WEIGHTS\\\");\\n        require(tokenA != tokenB, \\\"ERR_TOKENS_SAME\\\");\\n    }\\n\\n    /**\\n     * @notice Join a pool\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param poolAmountOut - number of pool tokens to receive\\n     * @param maxAmountsIn - Max amount of asset tokens to spend\\n     * @return actualAmountsIn - calculated values of the tokens to pull in\\n     */\\n    function joinPool(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        uint poolAmountOut,\\n        uint[] calldata maxAmountsIn,\\n        uint issueFee\\n    ) external view returns (uint[] memory actualAmountsIn) {\\n        address[] memory tokens = bPool.getCurrentTokens();\\n\\n        require(maxAmountsIn.length == tokens.length, \\\"ERR_AMOUNTS_MISMATCH\\\");\\n\\n        uint poolTotal = self.totalSupply();\\n        // Subtract  1 to ensure any rounding errors favor the pool\\n        uint ratio = DesynSafeMath.bdiv(poolAmountOut, DesynSafeMath.bsub(poolTotal, 1));\\n\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        // We know the length of the array; initialize it, and fill it below\\n        // Cannot do \\\"push\\\" in memory\\n        actualAmountsIn = new uint[](tokens.length);\\n\\n        // This loop contains external calls\\n        // External calls are to math libraries or the underlying pool, so low risk\\n        uint issueFeeRate = issueFee.bmul(1000);\\n        for (uint i = 0; i < tokens.length; i++) {\\n            address t = tokens[i];\\n            uint bal = bPool.getBalance(t);\\n            // Add 1 to ensure any rounding errors favor the pool\\n            uint base = bal.badd(1).bmul(poolAmountOut * uint(1000));\\n            uint tokenAmountIn = base.bdiv(poolTotal.bsub(1) * (uint(1000).bsub(issueFeeRate)));\\n\\n            require(tokenAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountIn <= maxAmountsIn[i], \\\"ERR_LIMIT_IN\\\");\\n\\n            actualAmountsIn[i] = tokenAmountIn;\\n        }\\n    }\\n\\n    /**\\n     * @notice Exit a pool - redeem pool tokens for underlying assets\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param poolAmountIn - amount of pool tokens to redeem\\n     * @param minAmountsOut - minimum amount of asset tokens to receive\\n     * @return actualAmountsOut - calculated amounts of each token to pull\\n     */\\n    function exitPool(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        uint poolAmountIn,\\n        uint[] calldata minAmountsOut\\n    ) external view returns (uint[] memory actualAmountsOut) {\\n        address[] memory tokens = bPool.getCurrentTokens();\\n\\n        require(minAmountsOut.length == tokens.length, \\\"ERR_AMOUNTS_MISMATCH\\\");\\n\\n        uint poolTotal = self.totalSupply();\\n\\n        uint ratio = DesynSafeMath.bdiv(poolAmountIn, DesynSafeMath.badd(poolTotal, 1));\\n\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        actualAmountsOut = new uint[](tokens.length);\\n\\n        // This loop contains external calls\\n        // External calls are to math libraries or the underlying pool, so low risk\\n        for (uint i = 0; i < tokens.length; i++) {\\n            address t = tokens[i];\\n            uint bal = bPool.getBalance(t);\\n            // Subtract 1 to ensure any rounding errors favor the pool\\n            uint tokenAmountOut = DesynSafeMath.bmul(ratio, DesynSafeMath.bsub(bal, 1));\\n\\n            require(tokenAmountOut != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountOut >= minAmountsOut[i], \\\"ERR_LIMIT_OUT\\\");\\n\\n            actualAmountsOut[i] = tokenAmountOut;\\n        }\\n    }\\n\\n    // Internal functions\\n    // Check for zero transfer, and make sure it returns true to returnValue\\n    function verifyTokenComplianceInternal(address token) internal {\\n        bool returnValue = IERC20(token).transfer(msg.sender, 0);\\n        require(returnValue, \\\"ERR_NONCONFORMING_TOKEN\\\");\\n    }\\n\\n    function handleTransferInTokens(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address poolToken,\\n        uint actualAmountIn,\\n        uint _actualIssueFee\\n    ) external returns (uint issueFeeReceived) {\\n        issueFeeReceived = DesynSafeMath.bmul(actualAmountIn, _actualIssueFee);\\n        uint amount = DesynSafeMath.bsub(actualAmountIn, issueFeeReceived);\\n\\n        _pullUnderlying(bPool, poolToken, msg.sender, amount);\\n\\n        if (_actualIssueFee != 0) {\\n            bool xfer = IERC20(poolToken).transferFrom(msg.sender, address(this), issueFeeReceived);\\n            require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n\\n            IERC20(poolToken).safeApprove(self.vaultAddress(), issueFeeReceived);\\n        }\\n    }\\n\\n    function handleClaim(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address[] calldata poolTokens,\\n        uint managerFee,\\n        uint timeElapsed,\\n        uint claimPeriod\\n    ) external returns (uint[] memory) {\\n        uint[] memory tokensAmount = new uint[](poolTokens.length);\\n        for (uint i = 0; i < poolTokens.length; i++) {\\n            address t = poolTokens[i];\\n            uint tokenBalance = bPool.getBalance(t);\\n            uint tokenAmountOut = tokenBalance.bmul(managerFee).mul(timeElapsed).div(claimPeriod).div(12);\\n            _pushUnderlying(bPool, t, address(this), tokenAmountOut);\\n\\n            IERC20(t).safeApprove(self.vaultAddress(), tokenAmountOut);\\n            tokensAmount[i] = tokenAmountOut;\\n        }\\n\\n        return tokensAmount;\\n    }\\n\\n    function handleCollectionCompleted(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address[] calldata poolTokens,\\n        uint issueFee\\n    ) external {\\n        if (issueFee != 0) {\\n            uint[] memory tokensAmount = new uint[](poolTokens.length);\\n\\n            for (uint i = 0; i < poolTokens.length; i++) {\\n                address t = poolTokens[i];\\n                uint currentAmount = bPool.getBalance(t);\\n                uint currentAmountFee = DesynSafeMath.bmul(currentAmount, issueFee);\\n\\n                _pushUnderlying(bPool, t, address(this), currentAmountFee);\\n                tokensAmount[i] = currentAmountFee;\\n                IERC20(t).safeApprove(self.vaultAddress(), currentAmountFee);\\n            }\\n\\n            IVault(self.vaultAddress()).depositIssueRedeemPToken(poolTokens, tokensAmount, tokensAmount, false);\\n        }\\n    }\\n\\n    function WhitelistHandle(\\n        bool bool1,\\n        bool bool2,\\n        address adr\\n    ) external pure {\\n        require(bool1, \\\"ERR_CANNOT_WHITELIST_LPS\\\");\\n        require(bool2, \\\"ERR_LP_NOT_WHITELISTED\\\");\\n        require(adr != address(0), \\\"ERR_INVALID_ADDRESS\\\");\\n    }\\n\\n    function _pullUnderlying(\\n        IBPool bPool,\\n        address erc20,\\n        address from,\\n        uint amount\\n    ) internal {\\n        uint tokenBalance = bPool.getBalance(erc20);\\n        uint tokenWeight = bPool.getDenormalizedWeight(erc20);\\n\\n        bool xfer = IERC20(erc20).transferFrom(from, address(this), amount);\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n        bPool.rebind(erc20, DesynSafeMath.badd(tokenBalance, amount), tokenWeight);\\n    }\\n\\n    function _pushUnderlying(\\n        IBPool bPool,\\n        address erc20,\\n        address to,\\n        uint amount\\n    ) internal {\\n        uint tokenBalance = bPool.getBalance(erc20);\\n        uint tokenWeight = bPool.getDenormalizedWeight(erc20);\\n        bPool.rebind(erc20, DesynSafeMath.bsub(tokenBalance, amount), tokenWeight);\\n\\n        bool xfer = IERC20(erc20).transfer(to, amount);\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x81470e3b0120ebd1472e032045904a32105bee68d76b178d272535f3c2f3133d\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506131b9806100206000396000f3fe608060405234801561001057600080fd5b50600436106100f15760003560e01c8063135b968d146100f65780631a78a2751461010b5780631eccc18514610134578063333fbeef146101475780634ef39b751461015a57806363ced0921461016d5780637840fb6c146101805780637b7d6c681461019357806380ad2cf3146101a65780638a5c57df146101b95780639589da76146101cc578063991991c7146101df578063a7f28da7146101f2578063affdd4ee14610205578063d46dadd114610218578063d94594071461022b578063e0d945bf1461023e578063e221e73a14610251578063fbe5ce0a14610264575b600080fd5b6101096101043660046128c3565b610277565b005b61011e610119366004612626565b6103a9565b60405161012b9190612ce2565b60405180910390f35b6101096101423660046125ce565b610853565b61010961015536600461257c565b6108ad565b61010961016836600461246d565b6108d9565b61010961017b366004612934565b610a40565b61010961018e366004612490565b610b3b565b6101096101a136600461257c565b610b67565b6101096101b43660046125fb565b610b93565b6101096101c7366004612a28565b610bbf565b6101096101da366004612851565b610c80565b6101096101ed3660046125fb565b610ce5565b61010961020036600461257c565b610d11565b6101096102133660046127f7565b610d3d565b61010961022636600461258e565b610da8565b61011e6102393660046126ea565b610dd6565b61010961024c366004612980565b611117565b61010961025f366004612490565b61193f565b61010961027236600461257c565b61196b565b6060856001600160a01b031663b64ef17b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156102b257600080fd5b505afa1580156102c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ea91906127db565b6001600160a01b031663cc77828d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561032257600080fd5b505afa158015610336573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261035e91908101906124c8565b90506103a1868287878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250899250611997915050565b505050505050565b60008786146103d35760405162461bcd60e51b81526004016103ca90612f4d565b60405180910390fd5b8784146103f25760405162461bcd60e51b81526004016103ca90612f4d565b896001600160a01b03166391cefde46040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561042d57600080fd5b505af1158015610441573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046591906127db565b6040516334e1990760e01b81529091506001600160a01b038216906334e1990790610494908690600401612fa7565b600060405180830381600087803b1580156104ae57600080fd5b505af11580156104c2573d6000803e3d6000fd5b5050505060005b888110156106765760008a8a838181106104df57fe5b90506020020160208101906104f4919061246d565b9050806001600160a01b03166323b872dd33308c8c8781811061051357fe5b905060200201356040518463ffffffff1660e01b815260040161053893929190612cf6565b602060405180830381600087803b15801561055257600080fd5b505af1158015610566573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058a9190612560565b6105a65760405162461bcd60e51b81526004016103ca90612f7a565b6105c381848b8b868181106105b757fe5b90506020020135611deb565b826001600160a01b031663e4e1e5388c8c858181106105de57fe5b90506020020160208101906105f3919061246d565b8b8b868181106105ff57fe5b905060200201358a8a8781811061061257fe5b905060200201356040518463ffffffff1660e01b815260040161063793929190612ef3565b600060405180830381600087803b15801561065157600080fd5b505af1158015610665573d6000803e3d6000fd5b5050600190930192506104c9915050565b5081156107e657806001600160a01b0316634bb278f36040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156106b857600080fd5b505af11580156106cc573d6000803e3d6000fd5b50506040516370a0823160e01b81526001600160a01b038416925063a9059cbb9150339083906370a0823190610706903090600401612ce2565b60206040518083038186803b15801561071e57600080fd5b505afa158015610732573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107569190612aa0565b6040518363ffffffff1660e01b8152600401610773929190612d1a565b602060405180830381600087803b15801561078d57600080fd5b505af11580156107a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c59190612560565b6107e15760405162461bcd60e51b81526004016103ca90612f7a565b610846565b6040516324dacaa960e11b81526001600160a01b038216906349b595529061081390600190600401612f42565b600060405180830381600087803b15801561082d57600080fd5b505af1158015610841573d6000803e3d6000fd5b505050505b9998505050505050505050565b6040516324dacaa960e11b81526001600160a01b038316906349b595529061087f908490600401612f42565b600060405180830381600087803b15801561089957600080fd5b505af11580156103a1573d6000803e3d6000fd5b60405163c83a1c2d60e01b81526001600160a01b0383169063c83a1c2d9061087f908490600401612ce2565b806001600160a01b0316634bb278f36040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561091457600080fd5b505af1158015610928573d6000803e3d6000fd5b50506040516370a0823160e01b81526001600160a01b038416925063a9059cbb9150339083906370a0823190610962903090600401612ce2565b60206040518083038186803b15801561097a57600080fd5b505afa15801561098e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b29190612aa0565b6040518363ffffffff1660e01b81526004016109cf929190612d1a565b602060405180830381600087803b1580156109e957600080fd5b505af11580156109fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a219190612560565b610a3d5760405162461bcd60e51b81526004016103ca90612f7a565b50565b6060836001600160a01b031663b64ef17b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a7b57600080fd5b505afa158015610a8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab391906127db565b6001600160a01b031663cc77828d6040518163ffffffff1660e01b815260040160006040518083038186803b158015610aeb57600080fd5b505afa158015610aff573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b2791908101906124c8565b9050610b3584848484611f75565b50505050565b604051636936674d60e01b81526001600160a01b03831690636936674d9061087f908490600401612ce2565b6040516392eefe9b60e01b81526001600160a01b038316906392eefe9b9061087f908490600401612ce2565b6040516347786d3760e01b81526001600160a01b038316906347786d379061087f908490600401612fa7565b6060846001600160a01b031663be3bbd2e6040518163ffffffff1660e01b815260040160006040518083038186803b158015610bfa57600080fd5b505afa158015610c0e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c3691908101906124c8565b9050610c79858286868680806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250339250611997915050565b5050505050565b6040516329b0917160e21b81526001600160a01b0384169063a6c245c490610cae9085908590600401612f14565b600060405180830381600087803b158015610cc857600080fd5b505af1158015610cdc573d6000803e3d6000fd5b50505050505050565b6040516334e1990760e01b81526001600160a01b038316906334e199079061087f908490600401612fa7565b60405163e2762d4b60e01b81526001600160a01b0383169063e2762d4b9061087f908490600401612ce2565b604051631b9276c760e21b81526001600160a01b03861690636e49db1c90610d6f908790879087908790600401612d4d565b600060405180830381600087803b158015610d8957600080fd5b505af1158015610d9d573d6000803e3d6000fd5b505050505050505050565b60405163992f6ba560e01b81526001600160a01b0384169063992f6ba590610cae9085908590600401612d1a565b6000610de5606089018961303a565b9050610df460408a018a61303a565b905014610e135760405162461bcd60e51b81526004016103ca90612f4d565b610e20608089018961303a565b9050610e2f60408a018a61303a565b905014610e4e5760405162461bcd60e51b81526004016103ca90612f4d565b60405163074aa1b960e51b81526001600160a01b038b169063e954372090610e84908c908c908b908b908b908b90600401612d76565b602060405180830381600087803b158015610e9e57600080fd5b505af1158015610eb2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed691906127db565b905060005b610ee860408a018a61303a565b9050811015611001576000610f0060408b018b61303a565b83818110610f0a57fe5b9050602002016020810190610f1f919061246d565b90506001600160a01b0381166323b872dd3330610f3f60608f018f61303a565b87818110610f4957fe5b905060200201356040518463ffffffff1660e01b8152600401610f6e93929190612cf6565b602060405180830381600087803b158015610f8857600080fd5b505af1158015610f9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc09190612560565b610fdc5760405162461bcd60e51b81526004016103ca90612f7a565b610ff88184610fee60608e018e61303a565b868181106105b757fe5b50600101610edb565b506001600160a01b038116630892b93d883560208a013561102860608c0160408d01612a81565b866040518563ffffffff1660e01b81526004016110489493929190613002565b600060405180830381600087803b15801561106257600080fd5b505af1158015611076573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038416925063a9059cbb91506110a99033908b3590600401612d1a565b602060405180830381600087803b1580156110c357600080fd5b505af11580156110d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110fb9190612560565b6108465760405162461bcd60e51b81526004016103ca90612f7a565b8483146111365760405162461bcd60e51b81526004016103ca90612f4d565b8481146111555760405162461bcd60e51b81526004016103ca90612f4d565b60005b8581101561193557600087878381811061116e57fe5b9050602002016020810190611183919061246d565b9050886001600160a01b0316632f37b6248989858181106111a057fe5b90506020020160208101906111b5919061246d565b6040518263ffffffff1660e01b81526004016111d19190612ce2565b60206040518083038186803b1580156111e957600080fd5b505afa1580156111fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112219190612560565b1561162e57886001600160a01b031663f8b2cb4f89898581811061124157fe5b9050602002016020810190611256919061246d565b6040518263ffffffff1660e01b81526004016112729190612ce2565b60206040518083038186803b15801561128a57600080fd5b505afa15801561129e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c29190612aa0565b8686848181106112ce57fe5b9050602002013511156114e257806001600160a01b03166323b872dd33308c6001600160a01b031663f8b2cb4f8d8d8981811061130757fe5b905060200201602081019061131c919061246d565b6040518263ffffffff1660e01b81526004016113389190612ce2565b60206040518083038186803b15801561135057600080fd5b505afa158015611364573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113889190612aa0565b8a8a8881811061139457fe5b90506020020135036040518463ffffffff1660e01b81526004016113ba93929190612cf6565b602060405180830381600087803b1580156113d457600080fd5b505af11580156113e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140c9190612560565b6114285760405162461bcd60e51b81526004016103ca90612f7a565b6114e2818a8b6001600160a01b031663f8b2cb4f8c8c8881811061144857fe5b905060200201602081019061145d919061246d565b6040518263ffffffff1660e01b81526004016114799190612ce2565b60206040518083038186803b15801561149157600080fd5b505afa1580156114a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c99190612aa0565b8989878181106114d557fe5b9050602002013503611deb565b620f42408686848181106114f257fe5b9050602002013511156115aa57886001600160a01b0316633fdddaa289898581811061151a57fe5b905060200201602081019061152f919061246d565b88888681811061153b57fe5b9050602002013587878781811061154e57fe5b905060200201356040518463ffffffff1660e01b815260040161157393929190612ef3565b600060405180830381600087803b15801561158d57600080fd5b505af11580156115a1573d6000803e3d6000fd5b50505050611629565b886001600160a01b031663cf5e7bd38989858181106115c557fe5b90506020020160208101906115da919061246d565b6040518263ffffffff1660e01b81526004016115f69190612ce2565b600060405180830381600087803b15801561161057600080fd5b505af1158015611624573d6000803e3d6000fd5b505050505b611796565b806001600160a01b03166323b872dd333089898781811061164b57fe5b905060200201356040518463ffffffff1660e01b815260040161167093929190612cf6565b602060405180830381600087803b15801561168a57600080fd5b505af115801561169e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c29190612560565b6116de5760405162461bcd60e51b81526004016103ca90612f7a565b6116ef818a8888868181106105b757fe5b886001600160a01b031663e4e1e53889898581811061170a57fe5b905060200201602081019061171f919061246d565b88888681811061172b57fe5b9050602002013587878781811061173e57fe5b905060200201356040518463ffffffff1660e01b815260040161176393929190612ef3565b600060405180830381600087803b15801561177d57600080fd5b505af1158015611791573d6000803e3d6000fd5b505050505b6040516370a0823160e01b81526000906001600160a01b038316906370a08231906117c5903090600401612ce2565b60206040518083038186803b1580156117dd57600080fd5b505afa1580156117f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118159190612aa0565b111561192c576040516370a0823160e01b81526001600160a01b0382169063a9059cbb90339083906370a0823190611851903090600401612ce2565b60206040518083038186803b15801561186957600080fd5b505afa15801561187d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a19190612aa0565b6040518363ffffffff1660e01b81526004016118be929190612d1a565b602060405180830381600087803b1580156118d857600080fd5b505af11580156118ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119109190612560565b61192c5760405162461bcd60e51b81526004016103ca90612f7a565b50600101611158565b5050505050505050565b60405163edb12adf60e01b81526001600160a01b0383169063edb12adf9061087f908490600401612ce2565b60405163173825d960e01b81526001600160a01b0383169063173825d99061087f908490600401612ce2565b83518251146119b85760405162461bcd60e51b81526004016103ca90612f4d565b60005b8451811015611ab45760008582815181106119d257fe5b60200260200101519050806001600160a01b03166323b872dd33308786815181106119f957fe5b60200260200101516040518463ffffffff1660e01b8152600401611a1f93929190612cf6565b602060405180830381600087803b158015611a3957600080fd5b505af1158015611a4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a719190612560565b611a8d5760405162461bcd60e51b81526004016103ca90612f7a565b611aab8188868581518110611a9e57fe5b6020026020010151611deb565b506001016119bb565b5060405163077df9bd60e31b81526001600160a01b03861690633befcde890611ae590869086908690600401612fd1565b600060405180830381600087803b158015611aff57600080fd5b505af1158015611b13573d6000803e3d6000fd5b5050505060005b8451811015611cd9576000858281518110611b3157fe5b602002602001015190506000816001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401611b699190612ce2565b60206040518083038186803b158015611b8157600080fd5b505afa158015611b95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb99190612aa0565b1115611cd0576040516370a0823160e01b81526001600160a01b0382169063a9059cbb90339083906370a0823190611bf5903090600401612ce2565b60206040518083038186803b158015611c0d57600080fd5b505afa158015611c21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c459190612aa0565b6040518363ffffffff1660e01b8152600401611c62929190612d1a565b602060405180830381600087803b158015611c7c57600080fd5b505af1158015611c90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb49190612560565b611cd05760405162461bcd60e51b81526004016103ca90612f7a565b50600101611b1a565b506040516370a0823160e01b81526001600160a01b0386169063a9059cbb90339083906370a0823190611d10903090600401612ce2565b60206040518083038186803b158015611d2857600080fd5b505afa158015611d3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d609190612aa0565b6040518363ffffffff1660e01b8152600401611d7d929190612d1a565b602060405180830381600087803b158015611d9757600080fd5b505af1158015611dab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dcf9190612560565b610c795760405162461bcd60e51b81526004016103ca90612f7a565b604051636eb1769f60e11b81526000906001600160a01b0385169063dd62ed3e90611e1c9030908790600401612d33565b60206040518083038186803b158015611e3457600080fd5b505afa158015611e48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e6c9190612aa0565b1115611ef55760405163095ea7b360e01b81526001600160a01b0384169063095ea7b390611ea1908590600090600401612d1a565b602060405180830381600087803b158015611ebb57600080fd5b505af1158015611ecf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ef39190612560565b505b60405163095ea7b360e01b81526001600160a01b0384169063095ea7b390611f239085908590600401612d1a565b602060405180830381600087803b158015611f3d57600080fd5b505af1158015611f51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b359190612560565b6040516370a0823160e01b81526000906001600160a01b038616906370a0823190611fa4903390600401612ce2565b60206040518083038186803b158015611fbc57600080fd5b505afa158015611fd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ff49190612aa0565b6040516323b872dd60e01b81529091506001600160a01b038616906323b872dd9061202790339030908690600401612cf6565b602060405180830381600087803b15801561204157600080fd5b505af1158015612055573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120799190612560565b6120955760405162461bcd60e51b81526004016103ca90612f7a565b6120a0858683611deb565b60405163b02f0b7360e01b81526001600160a01b0386169063b02f0b73906120ce9087908790600401612fb0565b600060405180830381600087803b1580156120e857600080fd5b505af11580156120fc573d6000803e3d6000fd5b5050505060005b8251811015611cd957600083828151811061211a57fe5b602002602001015190506000816001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016121529190612ce2565b60206040518083038186803b15801561216a57600080fd5b505afa15801561217e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121a29190612aa0565b11156122b9576040516370a0823160e01b81526001600160a01b0382169063a9059cbb90339083906370a08231906121de903090600401612ce2565b60206040518083038186803b1580156121f657600080fd5b505afa15801561220a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061222e9190612aa0565b6040518363ffffffff1660e01b815260040161224b929190612d1a565b602060405180830381600087803b15801561226557600080fd5b505af1158015612279573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061229d9190612560565b6122b95760405162461bcd60e51b81526004016103ca90612f7a565b50600101612103565b60008083601f8401126122d3578182fd5b5081356001600160401b038111156122e9578182fd5b602083019150836020808302850101111561230357600080fd5b9250929050565b600082601f83011261231a578081fd5b813561232d612328826130a6565b613080565b81815291506020808301908481018184028601820187101561234e57600080fd5b60005b8481101561237657813561236481613160565b84529282019290820190600101612351565b505050505092915050565b600082601f830112612391578081fd5b813561239f612328826130a6565b8181529150602080830190848101818402860182018710156123c057600080fd5b60005b84811015612376578135845292820192908201906001016123c3565b80356123ea81613160565b92915050565b600060608284031215612401578081fd5b50919050565b60006104008284031215612401578081fd5b60006101608284031215612401578081fd5b60006040828403121561243c578081fd5b6124466040613080565b9050813581526020820135602082015292915050565b600060c08284031215612401578081fd5b60006020828403121561247e578081fd5b813561248981613160565b9392505050565b600080604083850312156124a2578081fd5b82356124ad81613160565b915060208301356124bd81613160565b809150509250929050565b600060208083850312156124da578182fd5b82516001600160401b038111156124ef578283fd5b8301601f810185136124ff578283fd5b805161250d612328826130a6565b8181528381019083850185840285018601891015612529578687fd5b8694505b8385101561255457805161254081613160565b83526001949094019391850191850161252d565b50979650505050505050565b600060208284031215612571578081fd5b815161248981613175565b600080604083850312156124a2578182fd5b6000806000606084860312156125a2578081fd5b83356125ad81613160565b925060208401356125bd81613160565b929592945050506040919091013590565b600080604083850312156125e0578182fd5b82356125eb81613160565b915060208301356124bd81613175565b6000806040838503121561260d578182fd5b823561261881613160565b946020939093013593505050565b600080600080600080600080600060c08a8c031215612643578687fd5b893561264e81613160565b985060208a01356001600160401b0380821115612669578889fd5b6126758d838e016122c2565b909a50985060408c013591508082111561268d578687fd5b6126998d838e016122c2565b909850965060608c01359150808211156126b1578586fd5b506126be8c828d016122c2565b90955093505060808a0135915060a08a01356126d981613175565b809150509295985092959850929598565b60008060008060008060008060006106008a8c031215612708578283fd5b6127128b8b6123df565b98506127218b60208c016123df565b975060408a01356001600160401b038082111561273c578485fd5b6127488d838e01612419565b98506127578d60608e016123f0565b97506127668d60c08e0161245c565b96506127768d6101808e01612407565b95506105808c013591508082111561278c578485fd5b6127988d838e0161230a565b94506105a08c01359150808211156127ae578384fd5b506127bb8c828d01612381565b9250506127cc8b6105c08c0161242b565b90509295985092959850929598565b6000602082840312156127ec578081fd5b815161248981613160565b600080600080600060a0868803121561280e578283fd5b853561281981613160565b9450602086013561282981613160565b9350604086013561283981613160565b94979396509394606081013594506080013592915050565b600080600060608486031215612865578081fd5b833561287081613160565b925060208401356001600160401b038082111561288b578283fd5b61289787838801612381565b935060408601359150808211156128ac578283fd5b506128b98682870161230a565b9150509250925092565b6000806000806000608086880312156128da578283fd5b85356128e581613160565b94506020860135935060408601356001600160401b03811115612906578384fd5b612912888289016122c2565b909450925050606086013561292681613160565b809150509295509295909350565b600080600060608486031215612948578081fd5b833561295381613160565b92506020840135915060408401356001600160401b03811115612974578182fd5b6128b986828701612381565b60008060008060008060006080888a03121561299a578081fd5b87356129a581613160565b965060208801356001600160401b03808211156129c0578283fd5b6129cc8b838c016122c2565b909850965060408a01359150808211156129e4578283fd5b6129f08b838c016122c2565b909650945060608a0135915080821115612a08578283fd5b50612a158a828b016122c2565b989b979a50959850939692959293505050565b60008060008060608587031215612a3d578182fd5b8435612a4881613160565b93506020850135925060408501356001600160401b03811115612a69578283fd5b612a75878288016122c2565b95989497509550505050565b600060208284031215612a92578081fd5b813560038110612489578182fd5b600060208284031215612ab1578081fd5b5051919050565b60008284526020808501945082825b85811015612af5578135612ada81613160565b6001600160a01b031687529582019590820190600101612ac7565b509495945050505050565b6000815180845260208085019450808401835b83811015612af55781516001600160a01b031687529582019590820190600101612b13565b81835260006001600160fb1b03831115612b50578081fd5b6020830280836020870137939093016020019283525090919050565b6000815180845260208085019450808401835b83811015612af557815187529582019590820190600101612b7f565b60028110612ba557fe5b9052565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b612bdd8282612c95565b610100612bee818401828401612c95565b50610200612c00818401828401612c95565b50610300612c12818401828401612c95565b505050565b8035612c2281613175565b151582526020810135612c3481613175565b151560208301526040810135612c4981613175565b151560408301526060810135612c5e81613175565b151560608301526080810135612c7381613175565b1515608083015260a0810135612c8881613175565b80151560a0840152505050565b612c9f8282612cd3565b612caf6040830160408301612cd3565b612cbf6080830160808301612cd3565b612ccf60c0830160c08301612cd3565b5050565b80358252602090810135910152565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6001600160a01b038716815261054060208201819052600090612d99888061311c565b61016083860152612daf6106a086018284612ba9565b92505050612dc0602089018961311c565b61053f198086850301610560870152612dda848385612ba9565b9350612de960408c018c6130c5565b935091508086850301610580870152612e03848484612ab8565b9350612e1260608c018c6130c5565b9350915080868503016105a0870152612e2c848484612b38565b9350612e3b60808c018c6130c5565b9350915080868503016105c087015250612e56838383612b38565b9250505060a08801356105e084015260c088013561060084015260e088013561062084015261010080890135610640850152610120890135610660850152612ea26101408a018a61310c565b612eb0610680860182612b9b565b50612ebe6040850189612c17565b612eca81850188612bd3565b50828103610500840152612ede8186612b00565b90508281036105208401526108468185612b6c565b6001600160a01b039390931683526020830191909152604082015260600190565b600060408252612f276040830185612b6c565b8281036020840152612f398185612b00565b95945050505050565b901515815260200190565b60208082526013908201527208aa4a4be988a9c8ea890be9a92a69a82a8869606b1b604082015260600190565b60208082526013908201527211549497d514905394d1915497d19052531151606a1b604082015260600190565b90815260200190565b600083825260406020830152612fc96040830184612b6c565b949350505050565b600084825260606020830152612fea6060830185612b6c565b905060018060a01b0383166040830152949350505050565b8481526020810184905260a081016003841061301a57fe5b836040830152825160608301526020830151608083015295945050505050565b6000808335601e19843603018112613050578283fd5b8301803591506001600160401b03821115613069578283fd5b602090810192508102360382131561230357600080fd5b6040518181016001600160401b038111828210171561309e57600080fd5b604052919050565b60006001600160401b038211156130bb578081fd5b5060209081020190565b6000808335601e198436030181126130db578283fd5b83016020810192503590506001600160401b038111156130fa57600080fd5b60208102360383131561230357600080fd5b6000823560028110612489578182fd5b6000808335601e19843603018112613132578283fd5b83016020810192503590506001600160401b0381111561315157600080fd5b80360383131561230357600080fd5b6001600160a01b0381168114610a3d57600080fd5b8015158114610a3d57600080fdfea2646970667358221220f888ec3048cd5b90cbaa5d2c868bd757e99df34739bc21203c72b2cca4573e3664736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f15760003560e01c8063135b968d146100f65780631a78a2751461010b5780631eccc18514610134578063333fbeef146101475780634ef39b751461015a57806363ced0921461016d5780637840fb6c146101805780637b7d6c681461019357806380ad2cf3146101a65780638a5c57df146101b95780639589da76146101cc578063991991c7146101df578063a7f28da7146101f2578063affdd4ee14610205578063d46dadd114610218578063d94594071461022b578063e0d945bf1461023e578063e221e73a14610251578063fbe5ce0a14610264575b600080fd5b6101096101043660046128c3565b610277565b005b61011e610119366004612626565b6103a9565b60405161012b9190612ce2565b60405180910390f35b6101096101423660046125ce565b610853565b61010961015536600461257c565b6108ad565b61010961016836600461246d565b6108d9565b61010961017b366004612934565b610a40565b61010961018e366004612490565b610b3b565b6101096101a136600461257c565b610b67565b6101096101b43660046125fb565b610b93565b6101096101c7366004612a28565b610bbf565b6101096101da366004612851565b610c80565b6101096101ed3660046125fb565b610ce5565b61010961020036600461257c565b610d11565b6101096102133660046127f7565b610d3d565b61010961022636600461258e565b610da8565b61011e6102393660046126ea565b610dd6565b61010961024c366004612980565b611117565b61010961025f366004612490565b61193f565b61010961027236600461257c565b61196b565b6060856001600160a01b031663b64ef17b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156102b257600080fd5b505afa1580156102c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ea91906127db565b6001600160a01b031663cc77828d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561032257600080fd5b505afa158015610336573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261035e91908101906124c8565b90506103a1868287878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250899250611997915050565b505050505050565b60008786146103d35760405162461bcd60e51b81526004016103ca90612f4d565b60405180910390fd5b8784146103f25760405162461bcd60e51b81526004016103ca90612f4d565b896001600160a01b03166391cefde46040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561042d57600080fd5b505af1158015610441573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046591906127db565b6040516334e1990760e01b81529091506001600160a01b038216906334e1990790610494908690600401612fa7565b600060405180830381600087803b1580156104ae57600080fd5b505af11580156104c2573d6000803e3d6000fd5b5050505060005b888110156106765760008a8a838181106104df57fe5b90506020020160208101906104f4919061246d565b9050806001600160a01b03166323b872dd33308c8c8781811061051357fe5b905060200201356040518463ffffffff1660e01b815260040161053893929190612cf6565b602060405180830381600087803b15801561055257600080fd5b505af1158015610566573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058a9190612560565b6105a65760405162461bcd60e51b81526004016103ca90612f7a565b6105c381848b8b868181106105b757fe5b90506020020135611deb565b826001600160a01b031663e4e1e5388c8c858181106105de57fe5b90506020020160208101906105f3919061246d565b8b8b868181106105ff57fe5b905060200201358a8a8781811061061257fe5b905060200201356040518463ffffffff1660e01b815260040161063793929190612ef3565b600060405180830381600087803b15801561065157600080fd5b505af1158015610665573d6000803e3d6000fd5b5050600190930192506104c9915050565b5081156107e657806001600160a01b0316634bb278f36040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156106b857600080fd5b505af11580156106cc573d6000803e3d6000fd5b50506040516370a0823160e01b81526001600160a01b038416925063a9059cbb9150339083906370a0823190610706903090600401612ce2565b60206040518083038186803b15801561071e57600080fd5b505afa158015610732573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107569190612aa0565b6040518363ffffffff1660e01b8152600401610773929190612d1a565b602060405180830381600087803b15801561078d57600080fd5b505af11580156107a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c59190612560565b6107e15760405162461bcd60e51b81526004016103ca90612f7a565b610846565b6040516324dacaa960e11b81526001600160a01b038216906349b595529061081390600190600401612f42565b600060405180830381600087803b15801561082d57600080fd5b505af1158015610841573d6000803e3d6000fd5b505050505b9998505050505050505050565b6040516324dacaa960e11b81526001600160a01b038316906349b595529061087f908490600401612f42565b600060405180830381600087803b15801561089957600080fd5b505af11580156103a1573d6000803e3d6000fd5b60405163c83a1c2d60e01b81526001600160a01b0383169063c83a1c2d9061087f908490600401612ce2565b806001600160a01b0316634bb278f36040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561091457600080fd5b505af1158015610928573d6000803e3d6000fd5b50506040516370a0823160e01b81526001600160a01b038416925063a9059cbb9150339083906370a0823190610962903090600401612ce2565b60206040518083038186803b15801561097a57600080fd5b505afa15801561098e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b29190612aa0565b6040518363ffffffff1660e01b81526004016109cf929190612d1a565b602060405180830381600087803b1580156109e957600080fd5b505af11580156109fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a219190612560565b610a3d5760405162461bcd60e51b81526004016103ca90612f7a565b50565b6060836001600160a01b031663b64ef17b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a7b57600080fd5b505afa158015610a8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab391906127db565b6001600160a01b031663cc77828d6040518163ffffffff1660e01b815260040160006040518083038186803b158015610aeb57600080fd5b505afa158015610aff573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b2791908101906124c8565b9050610b3584848484611f75565b50505050565b604051636936674d60e01b81526001600160a01b03831690636936674d9061087f908490600401612ce2565b6040516392eefe9b60e01b81526001600160a01b038316906392eefe9b9061087f908490600401612ce2565b6040516347786d3760e01b81526001600160a01b038316906347786d379061087f908490600401612fa7565b6060846001600160a01b031663be3bbd2e6040518163ffffffff1660e01b815260040160006040518083038186803b158015610bfa57600080fd5b505afa158015610c0e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c3691908101906124c8565b9050610c79858286868680806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250339250611997915050565b5050505050565b6040516329b0917160e21b81526001600160a01b0384169063a6c245c490610cae9085908590600401612f14565b600060405180830381600087803b158015610cc857600080fd5b505af1158015610cdc573d6000803e3d6000fd5b50505050505050565b6040516334e1990760e01b81526001600160a01b038316906334e199079061087f908490600401612fa7565b60405163e2762d4b60e01b81526001600160a01b0383169063e2762d4b9061087f908490600401612ce2565b604051631b9276c760e21b81526001600160a01b03861690636e49db1c90610d6f908790879087908790600401612d4d565b600060405180830381600087803b158015610d8957600080fd5b505af1158015610d9d573d6000803e3d6000fd5b505050505050505050565b60405163992f6ba560e01b81526001600160a01b0384169063992f6ba590610cae9085908590600401612d1a565b6000610de5606089018961303a565b9050610df460408a018a61303a565b905014610e135760405162461bcd60e51b81526004016103ca90612f4d565b610e20608089018961303a565b9050610e2f60408a018a61303a565b905014610e4e5760405162461bcd60e51b81526004016103ca90612f4d565b60405163074aa1b960e51b81526001600160a01b038b169063e954372090610e84908c908c908b908b908b908b90600401612d76565b602060405180830381600087803b158015610e9e57600080fd5b505af1158015610eb2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed691906127db565b905060005b610ee860408a018a61303a565b9050811015611001576000610f0060408b018b61303a565b83818110610f0a57fe5b9050602002016020810190610f1f919061246d565b90506001600160a01b0381166323b872dd3330610f3f60608f018f61303a565b87818110610f4957fe5b905060200201356040518463ffffffff1660e01b8152600401610f6e93929190612cf6565b602060405180830381600087803b158015610f8857600080fd5b505af1158015610f9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc09190612560565b610fdc5760405162461bcd60e51b81526004016103ca90612f7a565b610ff88184610fee60608e018e61303a565b868181106105b757fe5b50600101610edb565b506001600160a01b038116630892b93d883560208a013561102860608c0160408d01612a81565b866040518563ffffffff1660e01b81526004016110489493929190613002565b600060405180830381600087803b15801561106257600080fd5b505af1158015611076573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038416925063a9059cbb91506110a99033908b3590600401612d1a565b602060405180830381600087803b1580156110c357600080fd5b505af11580156110d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110fb9190612560565b6108465760405162461bcd60e51b81526004016103ca90612f7a565b8483146111365760405162461bcd60e51b81526004016103ca90612f4d565b8481146111555760405162461bcd60e51b81526004016103ca90612f4d565b60005b8581101561193557600087878381811061116e57fe5b9050602002016020810190611183919061246d565b9050886001600160a01b0316632f37b6248989858181106111a057fe5b90506020020160208101906111b5919061246d565b6040518263ffffffff1660e01b81526004016111d19190612ce2565b60206040518083038186803b1580156111e957600080fd5b505afa1580156111fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112219190612560565b1561162e57886001600160a01b031663f8b2cb4f89898581811061124157fe5b9050602002016020810190611256919061246d565b6040518263ffffffff1660e01b81526004016112729190612ce2565b60206040518083038186803b15801561128a57600080fd5b505afa15801561129e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c29190612aa0565b8686848181106112ce57fe5b9050602002013511156114e257806001600160a01b03166323b872dd33308c6001600160a01b031663f8b2cb4f8d8d8981811061130757fe5b905060200201602081019061131c919061246d565b6040518263ffffffff1660e01b81526004016113389190612ce2565b60206040518083038186803b15801561135057600080fd5b505afa158015611364573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113889190612aa0565b8a8a8881811061139457fe5b90506020020135036040518463ffffffff1660e01b81526004016113ba93929190612cf6565b602060405180830381600087803b1580156113d457600080fd5b505af11580156113e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140c9190612560565b6114285760405162461bcd60e51b81526004016103ca90612f7a565b6114e2818a8b6001600160a01b031663f8b2cb4f8c8c8881811061144857fe5b905060200201602081019061145d919061246d565b6040518263ffffffff1660e01b81526004016114799190612ce2565b60206040518083038186803b15801561149157600080fd5b505afa1580156114a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c99190612aa0565b8989878181106114d557fe5b9050602002013503611deb565b620f42408686848181106114f257fe5b9050602002013511156115aa57886001600160a01b0316633fdddaa289898581811061151a57fe5b905060200201602081019061152f919061246d565b88888681811061153b57fe5b9050602002013587878781811061154e57fe5b905060200201356040518463ffffffff1660e01b815260040161157393929190612ef3565b600060405180830381600087803b15801561158d57600080fd5b505af11580156115a1573d6000803e3d6000fd5b50505050611629565b886001600160a01b031663cf5e7bd38989858181106115c557fe5b90506020020160208101906115da919061246d565b6040518263ffffffff1660e01b81526004016115f69190612ce2565b600060405180830381600087803b15801561161057600080fd5b505af1158015611624573d6000803e3d6000fd5b505050505b611796565b806001600160a01b03166323b872dd333089898781811061164b57fe5b905060200201356040518463ffffffff1660e01b815260040161167093929190612cf6565b602060405180830381600087803b15801561168a57600080fd5b505af115801561169e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c29190612560565b6116de5760405162461bcd60e51b81526004016103ca90612f7a565b6116ef818a8888868181106105b757fe5b886001600160a01b031663e4e1e53889898581811061170a57fe5b905060200201602081019061171f919061246d565b88888681811061172b57fe5b9050602002013587878781811061173e57fe5b905060200201356040518463ffffffff1660e01b815260040161176393929190612ef3565b600060405180830381600087803b15801561177d57600080fd5b505af1158015611791573d6000803e3d6000fd5b505050505b6040516370a0823160e01b81526000906001600160a01b038316906370a08231906117c5903090600401612ce2565b60206040518083038186803b1580156117dd57600080fd5b505afa1580156117f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118159190612aa0565b111561192c576040516370a0823160e01b81526001600160a01b0382169063a9059cbb90339083906370a0823190611851903090600401612ce2565b60206040518083038186803b15801561186957600080fd5b505afa15801561187d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a19190612aa0565b6040518363ffffffff1660e01b81526004016118be929190612d1a565b602060405180830381600087803b1580156118d857600080fd5b505af11580156118ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119109190612560565b61192c5760405162461bcd60e51b81526004016103ca90612f7a565b50600101611158565b5050505050505050565b60405163edb12adf60e01b81526001600160a01b0383169063edb12adf9061087f908490600401612ce2565b60405163173825d960e01b81526001600160a01b0383169063173825d99061087f908490600401612ce2565b83518251146119b85760405162461bcd60e51b81526004016103ca90612f4d565b60005b8451811015611ab45760008582815181106119d257fe5b60200260200101519050806001600160a01b03166323b872dd33308786815181106119f957fe5b60200260200101516040518463ffffffff1660e01b8152600401611a1f93929190612cf6565b602060405180830381600087803b158015611a3957600080fd5b505af1158015611a4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a719190612560565b611a8d5760405162461bcd60e51b81526004016103ca90612f7a565b611aab8188868581518110611a9e57fe5b6020026020010151611deb565b506001016119bb565b5060405163077df9bd60e31b81526001600160a01b03861690633befcde890611ae590869086908690600401612fd1565b600060405180830381600087803b158015611aff57600080fd5b505af1158015611b13573d6000803e3d6000fd5b5050505060005b8451811015611cd9576000858281518110611b3157fe5b602002602001015190506000816001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401611b699190612ce2565b60206040518083038186803b158015611b8157600080fd5b505afa158015611b95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb99190612aa0565b1115611cd0576040516370a0823160e01b81526001600160a01b0382169063a9059cbb90339083906370a0823190611bf5903090600401612ce2565b60206040518083038186803b158015611c0d57600080fd5b505afa158015611c21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c459190612aa0565b6040518363ffffffff1660e01b8152600401611c62929190612d1a565b602060405180830381600087803b158015611c7c57600080fd5b505af1158015611c90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb49190612560565b611cd05760405162461bcd60e51b81526004016103ca90612f7a565b50600101611b1a565b506040516370a0823160e01b81526001600160a01b0386169063a9059cbb90339083906370a0823190611d10903090600401612ce2565b60206040518083038186803b158015611d2857600080fd5b505afa158015611d3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d609190612aa0565b6040518363ffffffff1660e01b8152600401611d7d929190612d1a565b602060405180830381600087803b158015611d9757600080fd5b505af1158015611dab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dcf9190612560565b610c795760405162461bcd60e51b81526004016103ca90612f7a565b604051636eb1769f60e11b81526000906001600160a01b0385169063dd62ed3e90611e1c9030908790600401612d33565b60206040518083038186803b158015611e3457600080fd5b505afa158015611e48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e6c9190612aa0565b1115611ef55760405163095ea7b360e01b81526001600160a01b0384169063095ea7b390611ea1908590600090600401612d1a565b602060405180830381600087803b158015611ebb57600080fd5b505af1158015611ecf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ef39190612560565b505b60405163095ea7b360e01b81526001600160a01b0384169063095ea7b390611f239085908590600401612d1a565b602060405180830381600087803b158015611f3d57600080fd5b505af1158015611f51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b359190612560565b6040516370a0823160e01b81526000906001600160a01b038616906370a0823190611fa4903390600401612ce2565b60206040518083038186803b158015611fbc57600080fd5b505afa158015611fd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ff49190612aa0565b6040516323b872dd60e01b81529091506001600160a01b038616906323b872dd9061202790339030908690600401612cf6565b602060405180830381600087803b15801561204157600080fd5b505af1158015612055573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120799190612560565b6120955760405162461bcd60e51b81526004016103ca90612f7a565b6120a0858683611deb565b60405163b02f0b7360e01b81526001600160a01b0386169063b02f0b73906120ce9087908790600401612fb0565b600060405180830381600087803b1580156120e857600080fd5b505af11580156120fc573d6000803e3d6000fd5b5050505060005b8251811015611cd957600083828151811061211a57fe5b602002602001015190506000816001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016121529190612ce2565b60206040518083038186803b15801561216a57600080fd5b505afa15801561217e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121a29190612aa0565b11156122b9576040516370a0823160e01b81526001600160a01b0382169063a9059cbb90339083906370a08231906121de903090600401612ce2565b60206040518083038186803b1580156121f657600080fd5b505afa15801561220a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061222e9190612aa0565b6040518363ffffffff1660e01b815260040161224b929190612d1a565b602060405180830381600087803b15801561226557600080fd5b505af1158015612279573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061229d9190612560565b6122b95760405162461bcd60e51b81526004016103ca90612f7a565b50600101612103565b60008083601f8401126122d3578182fd5b5081356001600160401b038111156122e9578182fd5b602083019150836020808302850101111561230357600080fd5b9250929050565b600082601f83011261231a578081fd5b813561232d612328826130a6565b613080565b81815291506020808301908481018184028601820187101561234e57600080fd5b60005b8481101561237657813561236481613160565b84529282019290820190600101612351565b505050505092915050565b600082601f830112612391578081fd5b813561239f612328826130a6565b8181529150602080830190848101818402860182018710156123c057600080fd5b60005b84811015612376578135845292820192908201906001016123c3565b80356123ea81613160565b92915050565b600060608284031215612401578081fd5b50919050565b60006104008284031215612401578081fd5b60006101608284031215612401578081fd5b60006040828403121561243c578081fd5b6124466040613080565b9050813581526020820135602082015292915050565b600060c08284031215612401578081fd5b60006020828403121561247e578081fd5b813561248981613160565b9392505050565b600080604083850312156124a2578081fd5b82356124ad81613160565b915060208301356124bd81613160565b809150509250929050565b600060208083850312156124da578182fd5b82516001600160401b038111156124ef578283fd5b8301601f810185136124ff578283fd5b805161250d612328826130a6565b8181528381019083850185840285018601891015612529578687fd5b8694505b8385101561255457805161254081613160565b83526001949094019391850191850161252d565b50979650505050505050565b600060208284031215612571578081fd5b815161248981613175565b600080604083850312156124a2578182fd5b6000806000606084860312156125a2578081fd5b83356125ad81613160565b925060208401356125bd81613160565b929592945050506040919091013590565b600080604083850312156125e0578182fd5b82356125eb81613160565b915060208301356124bd81613175565b6000806040838503121561260d578182fd5b823561261881613160565b946020939093013593505050565b600080600080600080600080600060c08a8c031215612643578687fd5b893561264e81613160565b985060208a01356001600160401b0380821115612669578889fd5b6126758d838e016122c2565b909a50985060408c013591508082111561268d578687fd5b6126998d838e016122c2565b909850965060608c01359150808211156126b1578586fd5b506126be8c828d016122c2565b90955093505060808a0135915060a08a01356126d981613175565b809150509295985092959850929598565b60008060008060008060008060006106008a8c031215612708578283fd5b6127128b8b6123df565b98506127218b60208c016123df565b975060408a01356001600160401b038082111561273c578485fd5b6127488d838e01612419565b98506127578d60608e016123f0565b97506127668d60c08e0161245c565b96506127768d6101808e01612407565b95506105808c013591508082111561278c578485fd5b6127988d838e0161230a565b94506105a08c01359150808211156127ae578384fd5b506127bb8c828d01612381565b9250506127cc8b6105c08c0161242b565b90509295985092959850929598565b6000602082840312156127ec578081fd5b815161248981613160565b600080600080600060a0868803121561280e578283fd5b853561281981613160565b9450602086013561282981613160565b9350604086013561283981613160565b94979396509394606081013594506080013592915050565b600080600060608486031215612865578081fd5b833561287081613160565b925060208401356001600160401b038082111561288b578283fd5b61289787838801612381565b935060408601359150808211156128ac578283fd5b506128b98682870161230a565b9150509250925092565b6000806000806000608086880312156128da578283fd5b85356128e581613160565b94506020860135935060408601356001600160401b03811115612906578384fd5b612912888289016122c2565b909450925050606086013561292681613160565b809150509295509295909350565b600080600060608486031215612948578081fd5b833561295381613160565b92506020840135915060408401356001600160401b03811115612974578182fd5b6128b986828701612381565b60008060008060008060006080888a03121561299a578081fd5b87356129a581613160565b965060208801356001600160401b03808211156129c0578283fd5b6129cc8b838c016122c2565b909850965060408a01359150808211156129e4578283fd5b6129f08b838c016122c2565b909650945060608a0135915080821115612a08578283fd5b50612a158a828b016122c2565b989b979a50959850939692959293505050565b60008060008060608587031215612a3d578182fd5b8435612a4881613160565b93506020850135925060408501356001600160401b03811115612a69578283fd5b612a75878288016122c2565b95989497509550505050565b600060208284031215612a92578081fd5b813560038110612489578182fd5b600060208284031215612ab1578081fd5b5051919050565b60008284526020808501945082825b85811015612af5578135612ada81613160565b6001600160a01b031687529582019590820190600101612ac7565b509495945050505050565b6000815180845260208085019450808401835b83811015612af55781516001600160a01b031687529582019590820190600101612b13565b81835260006001600160fb1b03831115612b50578081fd5b6020830280836020870137939093016020019283525090919050565b6000815180845260208085019450808401835b83811015612af557815187529582019590820190600101612b7f565b60028110612ba557fe5b9052565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b612bdd8282612c95565b610100612bee818401828401612c95565b50610200612c00818401828401612c95565b50610300612c12818401828401612c95565b505050565b8035612c2281613175565b151582526020810135612c3481613175565b151560208301526040810135612c4981613175565b151560408301526060810135612c5e81613175565b151560608301526080810135612c7381613175565b1515608083015260a0810135612c8881613175565b80151560a0840152505050565b612c9f8282612cd3565b612caf6040830160408301612cd3565b612cbf6080830160808301612cd3565b612ccf60c0830160c08301612cd3565b5050565b80358252602090810135910152565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6001600160a01b038716815261054060208201819052600090612d99888061311c565b61016083860152612daf6106a086018284612ba9565b92505050612dc0602089018961311c565b61053f198086850301610560870152612dda848385612ba9565b9350612de960408c018c6130c5565b935091508086850301610580870152612e03848484612ab8565b9350612e1260608c018c6130c5565b9350915080868503016105a0870152612e2c848484612b38565b9350612e3b60808c018c6130c5565b9350915080868503016105c087015250612e56838383612b38565b9250505060a08801356105e084015260c088013561060084015260e088013561062084015261010080890135610640850152610120890135610660850152612ea26101408a018a61310c565b612eb0610680860182612b9b565b50612ebe6040850189612c17565b612eca81850188612bd3565b50828103610500840152612ede8186612b00565b90508281036105208401526108468185612b6c565b6001600160a01b039390931683526020830191909152604082015260600190565b600060408252612f276040830185612b6c565b8281036020840152612f398185612b00565b95945050505050565b901515815260200190565b60208082526013908201527208aa4a4be988a9c8ea890be9a92a69a82a8869606b1b604082015260600190565b60208082526013908201527211549497d514905394d1915497d19052531151606a1b604082015260600190565b90815260200190565b600083825260406020830152612fc96040830184612b6c565b949350505050565b600084825260606020830152612fea6060830185612b6c565b905060018060a01b0383166040830152949350505050565b8481526020810184905260a081016003841061301a57fe5b836040830152825160608301526020830151608083015295945050505050565b6000808335601e19843603018112613050578283fd5b8301803591506001600160401b03821115613069578283fd5b602090810192508102360382131561230357600080fd5b6040518181016001600160401b038111828210171561309e57600080fd5b604052919050565b60006001600160401b038211156130bb578081fd5b5060209081020190565b6000808335601e198436030181126130db578283fd5b83016020810192503590506001600160401b038111156130fa57600080fd5b60208102360383131561230357600080fd5b6000823560028110612489578182fd5b6000808335601e19843603018112613132578283fd5b83016020810192503590506001600160401b0381111561315157600080fd5b80360383131561230357600080fd5b6001600160a01b0381168114610a3d57600080fd5b8015158114610a3d57600080fdfea2646970667358221220f888ec3048cd5b90cbaa5d2c868bd757e99df34739bc21203c72b2cca4573e3664736f6c634300060c0033",
  "libraries": {},
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
