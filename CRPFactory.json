{
  "address": "0x4b78489b4c68020a8456f86207B6Ffcfd9224c55",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_bytecode",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": true,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes4",
          "name": "sig",
          "type": "bytes4"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "LOG_CALL",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "middleware",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "LOG_MIDDLEWARE",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "LOG_USER_VAULT",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "LogNewCrp",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "bytecodes",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "isCrp",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factoryAddress",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "poolTokenSymbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "poolTokenName",
              "type": "string"
            },
            {
              "internalType": "address[]",
              "name": "constituentTokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenBalances",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenWeights",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "swapFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "managerFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "redeemFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "issueFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "perfermanceFee",
              "type": "uint256"
            },
            {
              "internalType": "enum IConfigurableRightsPool.Etypes",
              "name": "etype",
              "type": "uint8"
            }
          ],
          "internalType": "struct IConfigurableRightsPool.PoolParams",
          "name": "poolParams",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "canPauseSwapping",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canChangeSwapFee",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canChangeWeights",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canAddRemoveTokens",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canWhitelistLPs",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canTokenWhiteLists",
              "type": "bool"
            }
          ],
          "internalType": "struct RightsManager.Rights",
          "name": "rights",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "firstLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "secondLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "thirdLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "fourLevel",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SmartPoolManager.feeParams",
              "name": "managerFee",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "firstLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "secondLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "thirdLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "fourLevel",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SmartPoolManager.feeParams",
              "name": "issueFee",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "firstLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "secondLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "thirdLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "fourLevel",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SmartPoolManager.feeParams",
              "name": "redeemFee",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "firstLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "secondLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "thirdLevel",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "level",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ratio",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SmartPoolManager.levelParams",
                  "name": "fourLevel",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SmartPoolManager.feeParams",
              "name": "perfermanceFee",
              "type": "tuple"
            }
          ],
          "internalType": "struct SmartPoolManager.KolPoolParams",
          "name": "kolPoolParams",
          "type": "tuple"
        },
        {
          "internalType": "address[]",
          "name": "owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ownerPercentage",
          "type": "uint256[]"
        }
      ],
      "name": "newCrp",
      "outputs": [
        {
          "internalType": "contract IConfigurableRightsPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_bytecodes",
          "type": "bytes"
        }
      ],
      "name": "setByteCodes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newVault",
          "type": "address"
        }
      ],
      "name": "setUserVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "userVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa5f81c47a27638644c366c4e3921e21bf630724a265e6a1c263194625ad7a6e2",
  "receipt": {
    "to": null,
    "from": "0x595b85b4A418e3B8df897D02F5BD49167D00862F",
    "contractAddress": "0x4b78489b4c68020a8456f86207B6Ffcfd9224c55",
    "transactionIndex": 0,
    "gasUsed": "18308288",
    "logsBloom": "0x
    "blockHash": "0x4b44365433a1f50e5907720f2747b62a4103cd3740ee1827036cb280839b6a21",
    "transactionHash": "0xa5f81c47a27638644c366c4e3921e21bf630724a265e6a1c263194625ad7a6e2",
    "logs": [],
    "blockNumber": 8248462,
    "cumulativeGasUsed": "18308288",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x60806040526127106006556103846022553480156200001d57600080fd5b5060405162005f2338038062005f238339810160408190526200004091620001d4565b8151829082906200005990600390602085019062000091565b5080516200006f90600490602084019062000091565b5050600780546001600160a01b0319163317905550506001600b55506200023b565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620000d457805160ff191683800117855562000104565b8280016001018555821562000104579182015b8281111562000104578251825591602001919060010190620000e7565b506200011292915062000116565b5090565b5b8082111562000112576000815560010162000117565b600082601f8301126200013e578081fd5b81516001600160401b038082111562000155578283fd5b6040516020601f8401601f191682018101838111838210171562000177578586fd5b806040525081945083825286818588010111156200019457600080fd5b600092505b83831015620001b8578583018101518284018201529182019162000199565b83831115620001ca5760008185840101525b5050505092915050565b60008060408385031215620001e7578182fd5b82516001600160401b0380821115620001fe578384fd5b6200020c868387016200012d565b9350602085015191508082111562000222578283fd5b5062000231858286016200012d565b9150509250929050565b615cd8806200024b6000396000f3fe608060405234801561001057600080fd5b50600436106102775760003560e01c80637228c87b116101585780637228c87b1461045557806372ba9acd1461047457806373a9855c1461049557806374983a0d146104aa5780637dc2cd98146104b2578063806c6f87146104ba57806391a806c9146104cd57806392eefe9b146104e057806395d89b41146104f3578063980e8db6146104fb5780639d829c2b14610515578063a0e67e2b1461051d578063a3f4df7e14610532578063a6c245c41461053a578063a89ae4ba1461054d578063a9059cbb14610555578063b02f0b7314610568578063b61d27f61461057b578063b64ef17b1461058e578063c83a1c2d14610596578063d29986c1146105a9578063d2fed42e146105b1578063d73dd623146105b9578063dd62ed3e146105cc578063e2762d4b146105df578063f054fbc0146105f2578063f3b085721461060557610277565b806306fdde031461027c5780630892b93d1461029a578063095dcccc146102af578063095ea7b3146102c25780630a165940146102e257806318160ddd146102f7578063220eb7601461030c57806323b872dd1461031f57806327304dfd146103325780632e0f2625146103455780633018205f1461035a578063309a042c14610362578063313ce5671461037757806337c6f4d91461037f5780633befcde8146103925780633ef14479146103a5578063430bf08a146103b857806347786d37146103c05780634ba57882146103d35780635468d6d7146103e657806355b19055146103ee57806355c32a231461040157806356fb3bd614610414578063661884631461041c5780636e49db1c1461042f57806370a0823114610442575b600080fd5b61028461060d565b6040516102919190615230565b60405180910390f35b6102ad6102a8366004614d43565b6106a3565b005b6102ad6102bd36600461494b565b610bd5565b6102d56102d036600461494b565b610c02565b6040516102919190615199565b6102ea610c5b565b6040516102919190614f6e565b6102ff610c6a565b6040516102919190615a74565b6102ad61031a366004614c6e565b610c70565b6102d561032d36600461475b565b610c9b565b6102d56103403660046146eb565b610dc5565b61034d610dda565b6040516102919190615b6f565b6102ea610ddf565b61036a610dee565b6040516102919190615186565b61034d610e45565b6102d561038d366004614c4f565b610e4a565b6102ad6103a0366004614ce7565b610edf565b6102ad6103b3366004614a91565b6117fa565b6102ea611884565b6102ad6103ce366004614c6e565b611893565b6102ad6103e1366004614c6e565b6119c1565b6102d56119e9565b6102ad6103fc3660046147e0565b6119f9565b6102ad61040f36600461494b565b611dec565b6102d5611e15565b6102d561042a36600461494b565b611e25565b6102ad61043d36600461479b565b611eff565b6102ff6104503660046146eb565b6122a9565b61045d6122c4565b6040516102919b9a99989796959493929190615b21565b6104876104823660046146eb565b6122e8565b604051610291929190615a94565b61049d612301565b604051610291919061547f565b6102ea61230a565b6102ff612322565b6102d56104c83660046146eb565b612328565b6104876104db3660046146eb565b6123fe565b6102ad6104ee3660046146eb565b612417565b61028461257d565b6105036125de565b604051610291969594939291906151c5565b6102ea612617565b61052561262f565b60405161029191906150dc565b610284612690565b6102ad610548366004614b74565b6126bc565b6102ea61286f565b6102d561056336600461494b565b61287e565b6102ad610576366004614c9e565b6128ba565b610284610589366004614976565b61307a565b6102ea61323e565b6102ad6105a43660046146eb565b61324d565b6102ff613369565b6102ad61336f565b6102d56105c736600461494b565b613665565b6102ff6105da366004614723565b6136d9565b6102ad6105ed3660046146eb565b613704565b6102ad610600366004614a91565b613839565b6102ea6138a4565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156106995780601f1061066e57610100808354040283529160200191610699565b820191906000526020600020905b81548152906001019060200180831161067c57829003601f168201915b5050505050905090565b6007546001600160a01b031633146106d65760405162461bcd60e51b81526004016106cd906154e2565b60405180910390fd5b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051610708929190615214565b60405180910390a26002600b5414156107335760405162461bcd60e51b81526004016106cd90615709565b6002600b55600f54604080516358c3de9360e11b815290516001600160a01b039092169163b187bd2691600480820192602092909190829003018186803b15801561077d57600080fd5b505afa158015610791573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b59190614bca565b156107d25760405162461bcd60e51b81526004016106cd906156be565b600160275460ff1660018111156107e557fe5b1415610bc157601654604051633e9fc0bd60e01b8152730314725E3312e6453f745467572283E617881A8991633e9fc0bd916108279187918990600401615aa2565b60006040518083038186803b15801561083f57600080fd5b505af4158015610853573d6000803e3d6000fd5b5050601654601754601f805492945090925061089a9160009061087257fe5b90600052602060002001546108948560200151896138bc90919063ffffffff16565b90613939565b601655601f80546108c891906000906108af57fe5b60009182526020909120015484516108949089906138bc565b601755601e805433917f8e15e99837ccd5505c7306f1c665c90b4710600100e4720421a8b2c3e86f4ff4913091906000906108ff57fe5b6000918252602082200154601f80546001600160a01b0390921692909161092257fe5b90600052602060002001548a60405161093e9493929190615047565b60405180910390a260405161095290614f4c565b60405190819003812060165490913391600080516020615c438339815191529161097d918791615a94565b60405180910390a360405161099190614f5d565b60405190819003812060175490913391600080516020615c43833981519152916109bc918691615a94565b60405180910390a36000428601818660028111156109d657fe5b14156109e6576107089150610a0d565b60018660028111156109f457fe5b1415610a055762ed4e009150610a0d565b6301da9c0091505b601287905560138190556014829055808201601581905560245460405163108ad9bd60e21b81526000916001600160a01b03169063422b66f490610a5990601e90601f90600401615161565b602060405180830381600087803b158015610a7357600080fd5b505af1158015610a87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aab9190614c86565b9050600f60009054906101000a90046001600160a01b03166001600160a01b031663703a9ec96040518163ffffffff1660e01b815260040160206040518083038186803b158015610afb57600080fd5b505afa158015610b0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b339190614707565b6001600160a01b031663d7256c703333601e601f6040518563ffffffff1660e01b8152600401610b669493929190614f82565b600060405180830381600087803b158015610b8057600080fd5b505af1158015610b94573d6000803e3d6000fd5b505050506000811115610bba573360009081526025602052604090208a81556001018190555b5050505050505b610bca846139ca565b50506001600b555050565b333014610bf45760405162461bcd60e51b81526004016106cd906154e2565b610bfe8282613cfe565b5050565b3360008181526002602090815260408083206001600160a01b03871680855292528083208590555191929091600080516020615c8383398151915290610c49908690615a74565b60405180910390a35060015b92915050565b600f546001600160a01b031681565b60005490565b333014610c8f5760405162461bcd60e51b81526004016106cd906154e2565b610c9881613d09565b50565b60006001600160a01b038316610cc35760405162461bcd60e51b81526004016106cd906155f0565b336001600160a01b0385161480610cfd57506001600160a01b03841660009081526002602090815260408083203384529091529020548211155b610d195760405162461bcd60e51b81526004016106cd9061585c565b610d24848484613d71565b6001600160a01b0384166000818152600260209081526040808320338085529252909120549114801590610d5a57506000198114155b15610db857610d698184613e10565b6001600160a01b03861660008181526002602090815260408083203380855292529182902084905590519092600080516020615c8383398151915291610daf9190615a74565b60405180910390a35b60019150505b9392505050565b60056020526000908152604090205460ff1681565b601281565b6007546001600160a01b031690565b6060600980548060200260200160405190810160405280929190818152602001828054801561069957602002820191906000526020600020905b815481526020019060010190808311610e28575050505050905090565b601290565b6040516322c1aa2560e11b81526000907311D61d0855aCfB43b3C9275b70403EcCC721253690634583544a90610e879060119086906004016159fe565b60206040518083038186803b158015610e9f57600080fd5b505af4158015610eb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed79190614bca565b90505b919050565b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051610f11929190615214565b60405180910390a26002600b541415610f3c5760405162461bcd60e51b81526004016106cd90615709565b6002600b556010546001600160a01b0316610f695760405162461bcd60e51b81526004016106cd9061564d565b600f60009054906101000a90046001600160a01b03166001600160a01b031663b187bd266040518163ffffffff1660e01b815260040160206040518083038186803b158015610fb757600080fd5b505afa158015610fcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fef9190614bca565b1561100c5760405162461bcd60e51b81526004016106cd906156be565b60115460405163806c6f8760e01b8152730314725E3312e6453f745467572283E617881A899163dba4989a91600160201b90910460ff1690309063806c6f879061105a903390600401614f6e565b60206040518083038186803b15801561107257600080fd5b505afa158015611086573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110aa9190614bca565b600160275460ff1660018111156110bd57fe5b146012600101546040518563ffffffff1660e01b81526004016110e394939291906151f5565b60006040518083038186803b1580156110fb57600080fd5b505af415801561110f573d6000803e3d6000fd5b5050601154600160281b900460ff1615915061114b90505761112f613e49565b61114b5760405162461bcd60e51b81526004016106cd906159a0565b601054601a5460405163b78e0bc960e01b8152606092730314725E3312e6453f745467572283E617881A899263b78e0bc99261119e9230926001600160a01b03909116918b918b918b9190600401615438565b60006040518083038186803b1580156111b657600080fd5b505af41580156111ca573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111f29190810190614af1565b90506060601060009054906101000a90046001600160a01b03166001600160a01b031663cc77828d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561124457600080fd5b505afa158015611258573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261128091908101906149f9565b9050606081516001600160401b038111801561129b57600080fd5b506040519080825280602002602001820160405280156112c5578160200160208202803683370190505b50601a54909150600090600160275460ff1660018111156112e257fe5b14156114705760245460405163108ad9bd60e21b81526001600160a01b039091169063422b66f49061131a90879089906004016150ef565b602060405180830381600087803b15801561133457600080fd5b505af1158015611348573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061136c9190614c86565b9150600f60009054906101000a90046001600160a01b03166001600160a01b031663703a9ec96040518163ffffffff1660e01b815260040160206040518083038186803b1580156113bc57600080fd5b505afa1580156113d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f49190614707565b6001600160a01b031663d7256c70873387896040518563ffffffff1660e01b81526004016114259493929190615009565b600060405180830381600087803b15801561143f57600080fd5b505af1158015611453573d6000803e3d6000fd5b5050602454600160b01b900460ff16151591506114709050575060005b60005b84518110156115dc576000730314725E3312e6453f745467572283E617881A8963d378778c30601060009054906101000a90046001600160a01b03168986815181106114bb57fe5b60200260200101518b87815181106114cf57fe5b6020026020010151886040518663ffffffff1660e01b81526004016114f8959493929190615308565b60206040518083038186803b15801561151057600080fd5b505af4158015611524573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115489190614c86565b905085828151811061155657fe5b60200260200101516001600160a01b0316336001600160a01b03167fea39e3b35c5cd8937999ed5f7fbab30acd562a931fc4a887fed2a47c3074aa7289858151811061159e57fe5b60200260200101516040516115b39190615a74565b60405180910390a3808583815181106115c857fe5b602090810291909101015250600101611473565b50801561164d57602354604051631483d99d60e01b81526001600160a01b0390911690631483d99d9061161a90879087908190600090600401615114565b600060405180830381600087803b15801561163457600080fd5b505af1158015611648573d6000803e3d6000fd5b505050505b611656896119e0565b611660338a610bf4565b81156116a7573360009081526025602052604090208054611681908b613e64565b8155336000908152602560205260409020600101546116a09084613e64565b6001909101555b6000600160275460ff1660018111156116bc57fe5b14801561173e5750601260050154306001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561170357600080fd5b505afa158015611717573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173b9190614c86565b10155b80156117545750602454600160b01b900460ff16155b905080156117e9576024805460ff60b01b1916600160b01b179055601054601a54604051630ff4d58d60e01b8152730314725E3312e6453f745467572283E617881A8992630ff4d58d926117b89230926001600160a01b0316918b9160040161537d565b60006040518083038186803b1580156117d057600080fd5b505af41580156117e4573d6000803e3d6000fd5b505050505b50506001600b555050505050505050565b805182511461181b5760405162461bcd60e51b81526004016106cd9061569e565b600a5460ff161561183e5760405162461bcd60e51b81526004016106cd90615535565b61184782613e89565b815161185a906008906020850190614409565b50805161186e90600990602084019061446e565b50600a805460ff19166001179055610bfe613f34565b6023546001600160a01b031681565b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516118c5929190615214565b60405180910390a26002600b5414156118f05760405162461bcd60e51b81526004016106cd90615709565b6002600b556010546001600160a01b031661191d5760405162461bcd60e51b81526004016106cd9061564d565b6007546001600160a01b031633146119475760405162461bcd60e51b81526004016106cd906154e2565b600060275460ff16600181111561195a57fe5b146119775760405162461bcd60e51b81526004016106cd906159d3565b60405161198390614f4c565b60405190819003812060165490913391600080516020615c43833981519152916119af91908690615a94565b60405180910390a36016556001600b55565b3330146119e05760405162461bcd60e51b81526004016106cd906154e2565b610c9881613f8a565b602454600160b01b900460ff1681565b730314725E3312e6453f745467572283E617881A896380681cab8360a001518460c001518561010001518660e001518761012001518860600151518960800151518a6040015151602460159054906101000a900460ff166040518a63ffffffff1660e01b8152600401611a7499989796959493929190615ae0565b60006040518083038186803b158015611a8c57600080fd5b505af4158015611aa0573d6000803e3d6000fd5b50506024805460ff60a81b1916600160a81b17905550508051601180546020808501516040808701516060880151608089015160a08a01511515600160281b0260ff60281b19911515600160201b0260ff60201b1993151563010000000263ff00000019951515620100000262ff0000199815156101000261ff00199d151560ff19909c169b909b179c909c169990991796909616999099179290921695909517949094169190911792909216939093179091558301518051611b6792601e920190614409565b5060608201518051611b8191601f9160209091019061446e565b5060808201518051611b99916020919082019061446e565b506040805161016081018252600080825260208201819052918101829052606081018290526000196080820181905260a0820183905260c08581015190830181905260e0808701519084018190526101008088015190850181905261012080890151908601819052426101409687018190526012889055601388905560148890556015889055601695909555601796909655601892909255601955601a55601b92909255601c919091558201516027805460ff191660018381811115611c5b57fe5b0217905550600f80546001600160a01b0319166001600160a01b0385811691909117918290556040805163b18b78dd60e01b81529051929091169163b18b78dd91600480820192602092909190829003018186803b158015611cbc57600080fd5b505afa158015611cd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf49190614707565b602480546001600160a01b0319166001600160a01b03928316179055600f54604080516311b2515f60e31b815290519190921691638d928af8916004808301926020929190829003018186803b158015611d4d57600080fd5b505afa158015611d61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d859190614707565b602380546001600160a01b0319166001600160a01b0392909216919091179055601954601a54601854601b546040517f3d6667963e842e2b5ff1d4feab2c9b92f17c9003592e2ad229952eeb9a293fd091611ddf91615a74565b60405180910390a4505050565b333014611e0b5760405162461bcd60e51b81526004016106cd906154e2565b610bfe8282613fb7565b602454600160a81b900460ff1681565b3360009081526002602090815260408083206001600160a01b0386168452909152812054808310611e79573360009081526002602090815260408083206001600160a01b0388168452909152812055611ea8565b611e838184613e10565b3360009081526002602090815260408083206001600160a01b03891684529091529020555b3360008181526002602090815260408083206001600160a01b038916808552925291829020549151909291600080516020615c8383398151915291611eed9190615a74565b60405180910390a35060019392505050565b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051611f31929190615214565b60405180910390a26002600b541415611f5c5760405162461bcd60e51b81526004016106cd90615709565b6002600b553360009081526005602052604090205460ff1680611f8957506007546001600160a01b031633145b611fa55760405162461bcd60e51b81526004016106cd906154bf565b6010546001600160a01b0316611fcd5760405162461bcd60e51b81526004016106cd9061564d565b600f60009054906101000a90046001600160a01b03166001600160a01b031663b187bd266040518163ffffffff1660e01b815260040160206040518083038186803b15801561201b57600080fd5b505afa15801561202f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120539190614bca565b156120705760405162461bcd60e51b81526004016106cd906156be565b601054602454730314725E3312e6453f745467572283E617881A899163a782948d916001600160a01b0390911690600160b01b900460ff16600160275460ff1660018111156120bb57fe5b60135460155460115460405160e089901b6001600160e01b03191681526120fa97969594909414936201000090910460ff16908d908d90600401615243565b60006040518083038186803b15801561211257600080fd5b505af4158015612126573d6000803e3d6000fd5b5050505061213383613fc2565b60235460405163607e58b360e11b81526000916001600160a01b03169063c0fcb16690612164903090600401614f6e565b60206040518083038186803b15801561217c57600080fd5b505afa158015612190573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121b49190614bca565b9050801561221f5760235460405163edb12adf60e01b81526001600160a01b039091169063edb12adf906121ec903090600401614f6e565b600060405180830381600087803b15801561220657600080fd5b505af115801561221a573d6000803e3d6000fd5b505050505b6010546040516350884c9160e01b8152730314725E3312e6453f745467572283E617881A89916350884c919161226d9130916001600160a01b03909116908a908a908a908a906004016152ce565b60006040518083038186803b15801561228557600080fd5b505af4158015612299573d6000803e3d6000fd5b50506001600b5550505050505050565b6001600160a01b031660009081526001602052604090205490565b601254601354601454601554601654601754601854601954601a54601b54601c548b565b6026602052600090815260409020805460019091015482565b60275460ff1681565b7311D61d0855aCfB43b3C9275b70403EcCC721253690565b60225481565b601154600090600160201b900460ff16156123ec576001600160a01b03821660009081526021602052604090205460ff16806123e55750306001600160a01b0316633018205f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561239857600080fd5b505afa1580156123ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123d09190614707565b6001600160a01b0316826001600160a01b0316145b9050610eda565b506001600160a01b0381161515610eda565b6025602052600090815260409020805460019091015482565b6007546001600160a01b031633146124415760405162461bcd60e51b81526004016106cd906154e2565b6001600160a01b0381166124675760405162461bcd60e51b81526004016106cd906155f0565b6007546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360005b60085481101561252b57600754600880546001600160a01b0390921691839081106124cb57fe5b6000918252602090912001546001600160a01b031614156125235781600882815481106124f457fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b6001016124a4565b50600780546001600160a01b03908116600090815260056020526040808220805460ff1990811690915594909216808252919020805490931660011790925580546001600160a01b0319169091179055565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156106995780601f1061066e57610100808354040283529160200191610699565b60115460ff80821691610100810482169162010000820481169163010000008104821691600160201b8204811691600160281b90041686565b730314725E3312e6453f745467572283E617881A8990565b6060600880548060200260200160405190810160405280929190818152602001828054801561069957602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612669575050505050905090565b6040518060400160405280601081526020016f11195cde5b8814db585c9d08141bdbdb60821b81525081565b6007546001600160a01b031633146126e65760405162461bcd60e51b81526004016106cd906154e2565b601154600160281b900460ff1680156127095750602454600160a01b900460ff16155b6127255760405162461bcd60e51b81526004016106cd9061550e565b80518251146127465760405162461bcd60e51b81526004016106cd9061588c565b60005b815181101561285757600f5483516000916001600160a01b031690638f49f44d9086908590811061277657fe5b602002602001015185858151811061278a57fe5b60200260200101516040518363ffffffff1660e01b81526004016127af929190615a7d565b60206040518083038186803b1580156127c757600080fd5b505afa1580156127db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127ff9190614bca565b90508061281e5760405162461bcd60e51b81526004016106cd9061561a565b61284e84838151811061282d57fe5b602002602001015184848151811061284157fe5b6020026020010151614095565b50600101612749565b50506024805460ff60a01b1916600160a01b17905550565b6024546001600160a01b031681565b60006001600160a01b0383166128a65760405162461bcd60e51b81526004016106cd906155f0565b6128b1338484613d71565b50600192915050565b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516128ec929190615214565b60405180910390a26002600b5414156129175760405162461bcd60e51b81526004016106cd90615709565b6002600b556010546001600160a01b03166129445760405162461bcd60e51b81526004016106cd9061564d565b600f60009054906101000a90046001600160a01b03166001600160a01b031663b187bd266040518163ffffffff1660e01b815260040160206040518083038186803b15801561299257600080fd5b505afa1580156129a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129ca9190614bca565b156129e75760405162461bcd60e51b81526004016106cd906156be565b6000730314725E3312e6453f745467572283E617881A8963c026fa3d30600160275460ff166001811115612a1757fe5b60245460155460135433600090815260256020526040908190208054600190910154915160e08a901b6001600160e01b0319168152612a6f98979690961495600160b01b90950460ff16949091908e9060040161528d565b60606040518083038186803b158015612a8757600080fd5b505af4158015612a9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612abf9190614db0565b3360009081526025602052604090819020600181019390935592909155601054915163151c70f960e21b8152909250606091730314725E3312e6453f745467572283E617881A8991635471c3e491612b2b9130916001600160a01b03169087908a908a90600401615404565b60006040518083038186803b158015612b4357600080fd5b505af4158015612b57573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612b7f9190810190614af1565b9050612b8b3383611e0b565b612b9482610c8f565b6010546040805163cc77828d60e01b815290516060926001600160a01b03169163cc77828d916004808301926000929190829003018186803b158015612bd957600080fd5b505afa158015612bed573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612c1591908101906149f9565b9050606081516001600160401b0381118015612c3057600080fd5b50604051908082528060200260200182016040528015612c5a578160200160208202803683370190505b506019549091506000908190600160275460ff166001811115612c7957fe5b1415612d3857602454600090600160b01b900460ff16158015612c9e57506013544210155b90508015612caf5760009150612d36565b60245460405163108ad9bd60e21b81526001600160a01b039091169063422b66f490612ce19089908b906004016150ef565b602060405180830381600087803b158015612cfb57600080fd5b505af1158015612d0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d339190614c86565b93505b505b8215612e1357336000908152602660209081526040808320805460019182015460259094529382902080549101549151633796ed7f60e21b81528b94730314725E3312e6453f745467572283E617881A899463de5bb5fc94612da594929391929188908c90600401615ab8565b60606040518083038186803b158015612dbd57600080fd5b505af4158015612dd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612df59190614db0565b33600090815260266020526040902060018101929092559190559250505b606085516001600160401b0381118015612e2c57600080fd5b50604051908082528060200260200182016040528015612e56578160200160208202803683370190505b50905060005b8651811015612fde576000806000730314725E3312e6453f745467572283E617881A8963e844db6f30601060009054906101000a90046001600160a01b03168d8881518110612ea757fe5b60200260200101518f8981518110612ebb57fe5b60200260200101518b8d6012600901546040518863ffffffff1660e01b8152600401612eed979695949392919061533c565b60606040518083038186803b158015612f0557600080fd5b505af4158015612f19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f3d9190614db0565b92509250925080858581518110612f5057fe5b60200260200101818152505082898581518110612f6957fe5b602002602001018181525050898481518110612f8157fe5b60200260200101516001600160a01b0316336001600160a01b03167fc62fc35ac75e3bff532648e2859a3e1694002cfa357614ae8e034df7f83db5e984604051612fcb9190615a74565b60405180910390a3505050600101612e5c565b5081151580612ff95750600083118015612ff95750601b5415155b1561306857602354604051631483d99d60e01b81526001600160a01b0390911690631483d99d9061303590899089908690600190600401615114565b600060405180830381600087803b15801561304f57600080fd5b505af1158015613063573d6000803e3d6000fd5b505050505b50506001600b55505050505050505050565b6060336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516130ae929190615214565b60405180910390a26002600b5414156130d95760405162461bcd60e51b81526004016106cd90615709565b6002600b556010546001600160a01b03166131065760405162461bcd60e51b81526004016106cd9061564d565b600f546040516338f0d24560e01b81526001600160a01b03909116906338f0d245906131389030903390600401614fef565b60206040518083038186803b15801561315057600080fd5b505afa158015613164573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131889190614bca565b6131a45760405162461bcd60e51b81526004016106cd9061558b565b601054604051635b0e93fb60e11b81526001600160a01b039091169063b61d27f6906131da908890889088908890600401615089565b600060405180830381600087803b1580156131f457600080fd5b505af1158015613208573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526132309190810190614be6565b6001600b5595945050505050565b6010546001600160a01b031681565b6007546001600160a01b031633146132775760405162461bcd60e51b81526004016106cd906154e2565b6002600b54141561329a5760405162461bcd60e51b81526004016106cd90615709565b6002600b556040513390600080356001600160e01b031916916132bf91903690615214565b60405180910390a2601154604051630d3aa47160e41b8152730314725E3312e6453f745467572283E617881A899163d3aa47109161330f91600160201b900460ff169060019086906004016151a4565b60006040518083038186803b15801561332757600080fd5b505af415801561333b573d6000803e3d6000fd5b505050506001600160a01b03166000908152602160205260409020805460ff19166001908117909155600b55565b60065481565b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516133a1929190615214565b60405180910390a26002600b5414156133cc5760405162461bcd60e51b81526004016106cd90615709565b6002600b553360009081526005602052604090205460ff16806133f957506007546001600160a01b031633145b6134155760405162461bcd60e51b81526004016106cd906154bf565b6010546001600160a01b031661343d5760405162461bcd60e51b81526004016106cd9061564d565b42600160275460ff16600181111561345157fe5b141561348f57602454600160b01b900460ff166134805760405162461bcd60e51b81526004016106cd90615493565b60155442111561348f57506015545b60006134a0826012600a0154613e10565b90506022548110156134c45760405162461bcd60e51b81526004016106cd9061572e565b6010546040805163cc77828d60e01b815290516060926001600160a01b03169163cc77828d916004808301926000929190829003018186803b15801561350957600080fd5b505afa15801561351d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261354591908101906149f9565b601054601854602254604051631abc9a6960e11b8152939450606093730314725E3312e6453f745467572283E617881A899363357934d29361359c9330936001600160a01b03909316928992918b916004016153ba565b60006040518083038186803b1580156135b457600080fd5b505af41580156135c8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526135f09190810190614af1565b602354604051630bac7b8160e01b81529192506001600160a01b031690630bac7b819061362390859085906004016150ef565b600060405180830381600087803b15801561363d57600080fd5b505af1158015613651573d6000803e3d6000fd5b505050601c9490945550506001600b555050565b3360009081526002602090815260408083206001600160a01b03861684529091528120546136939083613e64565b3360008181526002602090815260408083206001600160a01b03891680855292529182902084905590519092600080516020615c8383398151915291610c499190615a74565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b6007546001600160a01b0316331461372e5760405162461bcd60e51b81526004016106cd906154e2565b6002600b5414156137515760405162461bcd60e51b81526004016106cd90615709565b6002600b556040513390600080356001600160e01b0319169161377691903690615214565b60405180910390a26011546001600160a01b03821660009081526021602052604090819020549051630d3aa47160e41b8152730314725E3312e6453f745467572283E617881A899263d3aa4710926137e392600160201b90920460ff9081169291169086906004016151a4565b60006040518083038186803b1580156137fb57600080fd5b505af415801561380f573d6000803e3d6000fd5b505050506001600160a01b03166000908152602160205260409020805460ff191690556001600b55565b6007546001600160a01b031633146138635760405162461bcd60e51b81526004016106cd906154e2565b61386b61416f565b61387482613e89565b8151613887906008906020850190614409565b50805161389b90600990602084019061446e565b50610bfe613f34565b734E9FA6fE9C793CC0864AB331b2c13EEAeAcd467990565b6000826138cb57506000610c55565b828202828482816138d857fe5b04146138f65760405162461bcd60e51b81526004016106cd906157a6565b6706f05b59d3b200008101818110156139215760405162461bcd60e51b81526004016106cd906157a6565b6000670de0b6b3a7640000825b049695505050505050565b6000816139585760405162461bcd60e51b81526004016106cd90615807565b8261396557506000610c55565b670de0b6b3a76400008381029084828161397b57fe5b04146139995760405162461bcd60e51b81526004016106cd906156df565b600283048101818110156139bf5760405162461bcd60e51b81526004016106cd906156df565b600084828161392e57fe5b6010546001600160a01b0316156139f35760405162461bcd60e51b81526004016106cd90615676565b6139fc816119e0565b613a063382610bf4565b600f60009054906101000a90046001600160a01b03166001600160a01b03166391cefde46040518163ffffffff1660e01b8152600401602060405180830381600087803b158015613a5657600080fd5b505af1158015613a6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a8e9190614707565b601080546001600160a01b0319166001600160a01b03928316179081905560405163d03f2a0f60e01b8152730314725E3312e6453f745467572283E617881A899263d03f2a0f92613ae6929116908590600401615070565b60006040518083038186803b158015613afe57600080fd5b505af4158015613b12573d6000803e3d6000fd5b5050505060005b601e54811015613cc2576000601e8281548110613b3257fe5b6000918252602082200154601f80546001600160a01b0390921693509084908110613b5957fe5b90600052602060002001549050600060208481548110613b7557fe5b90600052602060002001549050613b8b83613fc2565b6040516323b872dd60e01b81526000906001600160a01b038516906323b872dd90613bbe90339030908890600401614fcb565b602060405180830381600087803b158015613bd857600080fd5b505af1158015613bec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c109190614bca565b905080613c2f5760405162461bcd60e51b81526004016106cd906158bd565b601054613c4b906001600160a01b0386811691166000196141c1565b50601054604051631c9c3ca760e31b81526001600160a01b039091169063e4e1e53890613c80908790879087906004016150bb565b600060405180830381600087803b158015613c9a57600080fd5b505af1158015613cae573d6000803e3d6000fd5b505060019096019550613b19945050505050565b505b601e5415610c9857601e805480613cd757fe5b600082815260209020810160001990810180546001600160a01b0319169055019055613cc4565b610bfe308383613d71565b30600090815260016020526040902054613d239082613e10565b3060009081526001602052604081209190915554613d419082613e10565b60009081556040513090600080516020615c6383398151915290613d66908590615a74565b60405180910390a350565b6001600160a01b038316600090815260016020526040902054613d949082613e10565b6001600160a01b038085166000908152600160205260408082209390935590841681522054613dc39082613e64565b6001600160a01b038084166000818152600160205260409081902093909355915190851690600080516020615c6383398151915290613e03908590615a74565b60405180910390a3505050565b6000806000613e1f8585614368565b915091508015613e415760405162461bcd60e51b81526004016106cd9061594b565b509392505050565b6000600c54600014613e5c576001613e5f565b60005b905090565b600082820183811015610dbe5760405162461bcd60e51b81526004016106cd90615976565b6000805b8251811015613f1657600160056000858481518110613ea857fe5b6020908102919091018101516001600160a01b03908116835290820192909252604001600020805460ff1916921515929092179091556007548451911690849083908110613ef257fe5b60200260200101516001600160a01b03161415613f0e57600191505b600101613e8d565b5080610bfe5760405162461bcd60e51b81526004016106cd90615771565b6000805b600954811015613f685760098181548110613f4f57fe5b6000918252602090912001549190910190600101613f38565b508061271014610c985760405162461bcd60e51b81526004016106cd9061555b565b613f938161438d565b6016546000541115610c985760405162461bcd60e51b81526004016106cd9061582d565b610bfe823083613d71565b600f5460405163db7ca46b60e01b81526001600160a01b039091169063db7ca46b90613ff2908490600401614f6e565b60206040518083038186803b15801561400a57600080fd5b505afa15801561401e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140429190614bca565b61405e5760405162461bcd60e51b81526004016106cd906157d0565b602454600160a01b900460ff1615610c9857614079816143eb565b610c985760405162461bcd60e51b81526004016106cd906155bb565b6001600160a01b0381166140bb5760405162461bcd60e51b81526004016106cd906158e6565b6140c4816143eb565b156140e15760405162461bcd60e51b81526004016106cd90615919565b6000828152600e602090815260408083206001600160a01b038516845282528083208054600160ff199182168117909255600d9093529281902080549092168317909155600c8054909201909155513390839030907f5ab6a0d7af8e86f78c34acea4f8aff1be027227ce1bc29e03f57f39b788f4b0490614163908690614f6e565b60405180910390a45050565b60005b600854811015610c9857600560006008838154811061418d57fe5b60009182526020808320909101546001600160a01b031683528201929092526040019020805460ff19169055600101614172565b600080846001600160a01b031663dd62ed3e30866040518363ffffffff1660e01b81526004016141f2929190614fef565b60206040518083038186803b15801561420a57600080fd5b505afa15801561421e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142429190614c86565b905082811415614256576001915050610dbe565b80156142df5760405163095ea7b360e01b81526001600160a01b0386169063095ea7b39061428b908790600090600401615070565b602060405180830381600087803b1580156142a557600080fd5b505af11580156142b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142dd9190614bca565b505b60405163095ea7b360e01b81526001600160a01b0386169063095ea7b39061430d9087908790600401615070565b602060405180830381600087803b15801561432757600080fd5b505af115801561433b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061435f9190614bca565b95945050505050565b60008083831161437e5750508082036000614386565b505081810360015b9250929050565b306000908152600160205260409020546143a79082613e64565b30600090815260016020526040812091909155546143c59082613e64565b6000908155604051309190600080516020615c6383398151915290613d66908590615a74565b6001600160a01b03166000908152600d602052604090205460ff1690565b82805482825590600052602060002090810192821561445e579160200282015b8281111561445e57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190614429565b5061446a9291506144b5565b5090565b8280548282559060005260206000209081019282156144a9579160200282015b828111156144a957825182559160200191906001019061448e565b5061446a9291506144d4565b5b8082111561446a5780546001600160a01b03191681556001016144b6565b5b8082111561446a57600081556001016144d5565b600082601f8301126144f9578081fd5b813561450c61450782615ba3565b615b7d565b81815291506020808301908481018184028601820187101561452d57600080fd5b60005b8481101561455557813561454381615c1f565b84529282019290820190600101614530565b505050505092915050565b60008083601f840112614571578182fd5b5081356001600160401b03811115614587578182fd5b602083019150836020808302850101111561438657600080fd5b600082601f8301126145b1578081fd5b81356145bf61450782615ba3565b8181529150602080830190848101818402860182018710156145e057600080fd5b60005b84811015614555578135845292820192908201906001016145e3565b803560028110610c5557600080fd5b600082601f83011261461e578081fd5b813561462c61450782615bc2565b915080825283602082850101111561464357600080fd5b8060208401602084013760009082016020015292915050565b600060c0828403121561466d578081fd5b61467760c0615b7d565b9050813561468481615c34565b8152602082013561469481615c34565b602082015260408201356146a781615c34565b604082015260608201356146ba81615c34565b606082015260808201356146cd81615c34565b608082015260a08201356146e081615c34565b60a082015292915050565b6000602082840312156146fc578081fd5b8135610dbe81615c1f565b600060208284031215614718578081fd5b8151610dbe81615c1f565b60008060408385031215614735578081fd5b823561474081615c1f565b9150602083013561475081615c1f565b809150509250929050565b60008060006060848603121561476f578081fd5b833561477a81615c1f565b9250602084013561478a81615c1f565b929592945050506040919091013590565b600080600080608085870312156147b0578182fd5b84356147bb81615c1f565b935060208501356147cb81615c1f565b93969395505050506040820135916060013590565b60008060006101008085870312156147f6578182fd5b843561480181615c1f565b935060208501356001600160401b038082111561481c578384fd5b818701915061016080838a031215614832578485fd5b61483b81615b7d565b905082358281111561484b578586fd5b6148578a82860161460e565b82525060208301358281111561486b578586fd5b6148778a82860161460e565b60208301525060408301358281111561488e578586fd5b61489a8a8286016144e9565b6040830152506060830135828111156148b1578586fd5b6148bd8a8286016145a1565b6060830152506080830135828111156148d4578586fd5b6148e08a8286016145a1565b60808301525060a083013560a082015260c083013560c082015260e083013560e0820152838301358482015261012093508383013584820152610140935061492a898585016145ff565b8482015280955050505050614942856040860161465c565b90509250925092565b6000806040838503121561495d578182fd5b823561496881615c1f565b946020939093013593505050565b6000806000806060858703121561498b578182fd5b843561499681615c1f565b93506020850135925060408501356001600160401b03808211156149b8578384fd5b818701915087601f8301126149cb578384fd5b8135818111156149d9578485fd5b8860208285010111156149ea578485fd5b95989497505060200194505050565b60006020808385031215614a0b578182fd5b82516001600160401b03811115614a20578283fd5b8301601f81018513614a30578283fd5b8051614a3e61450782615ba3565b8181528381019083850185840285018601891015614a5a578687fd5b8694505b83851015614a85578051614a7181615c1f565b835260019490940193918501918501614a5e565b50979650505050505050565b60008060408385031215614aa3578182fd5b82356001600160401b0380821115614ab9578384fd5b614ac5868387016144e9565b93506020850135915080821115614ada578283fd5b50614ae7858286016145a1565b9150509250929050565b60006020808385031215614b03578182fd5b82516001600160401b03811115614b18578283fd5b8301601f81018513614b28578283fd5b8051614b3661450782615ba3565b8181528381019083850185840285018601891015614b52578687fd5b8694505b83851015614a85578051835260019490940193918501918501614b56565b60008060408385031215614b86578182fd5b82356001600160401b0380821115614b9c578384fd5b614ba8868387016145a1565b93506020850135915080821115614bbd578283fd5b50614ae7858286016144e9565b600060208284031215614bdb578081fd5b8151610dbe81615c34565b600060208284031215614bf7578081fd5b81516001600160401b03811115614c0c578182fd5b8201601f81018413614c1c578182fd5b8051614c2a61450782615bc2565b818152856020838501011115614c3e578384fd5b61435f826020830160208601615be5565b600060208284031215614c60578081fd5b813560068110610dbe578182fd5b600060208284031215614c7f578081fd5b5035919050565b600060208284031215614c97578081fd5b5051919050565b600080600060408486031215614cb2578081fd5b8335925060208401356001600160401b03811115614cce578182fd5b614cda86828701614560565b9497909650939450505050565b60008060008060608587031215614cfc578182fd5b8435935060208501356001600160401b03811115614d18578283fd5b614d2487828801614560565b9094509250506040850135614d3881615c1f565b939692955090935050565b60008060008084860360a0811215614d59578283fd5b8535945060208601359350604086013560038110614d75578384fd5b92506040605f1982011215614d88578182fd5b50614d936040615b7d565b606086013581526080909501356020860152509194909350909190565b600080600060608486031215614dc4578081fd5b8351925060208401519150604084015190509250925092565b6000815180845260208085019450808401835b83811015614e155781516001600160a01b031687529582019590820190600101614df0565b509495945050505050565b6000815480845260208085019450838352808320835b83811015614e155781546001600160a01b031687529582019560019182019101614e36565b81835260006001600160fb1b03831115614e73578081fd5b6020830280836020870137939093016020019283525090919050565b6000815180845260208085019450808401835b83811015614e1557815187529582019590820190600101614ea2565b6000815480845260208085019450838352808320835b83811015614e1557815487529582019560019182019101614ed4565b15159052565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008151808452614f38816020860160208601615be5565b601f01601f19169290920160200192915050565b642aa82822a960d91b815260050190565b64232627a7a960d91b815260050190565b6001600160a01b0391909116815260200190565b6001600160a01b03858116825284166020820152608060408201819052600090614fae90830185614e20565b8281036060840152614fc08185614ebe565b979650505050505050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b0385811682528416602082015260806040820181905260009061503590830185614ddd565b8281036060840152614fc08185614e8f565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6001600160a01b03929092168252602082015260400190565b600060018060a01b0386168252846020830152606060408301526150b1606083018486614ef6565b9695505050505050565b6001600160a01b039390931683526020830191909152604082015260600190565b600060208252610dbe6020830184614ddd565b6000604082526151026040830185614ddd565b828103602084015261435f8185614e8f565b6000608082526151276080830187614ddd565b82810360208401526151398187614e8f565b9050828103604084015261514d8186614e8f565b915050821515606083015295945050505050565b6000604082526151746040830185614e20565b828103602084015261435f8185614ebe565b600060208252610dbe6020830184614e8f565b901515815260200190565b921515835290151560208301526001600160a01b0316604082015260600190565b9515158652931515602086015291151560408501521515606084015215156080830152151560a082015260c00190565b9315158452911515602084015215156040830152606082015260800190565b600060208252615228602083018486614ef6565b949350505050565b600060208252610dbe6020830184614f20565b6001600160a01b0398891681529615156020880152941515604087015260608601939093526080850191909152151560a0840152831660c083015290911660e08201526101000190565b6001600160a01b03989098168852951515602088015293151560408701526060860192909252608085015260a084015260c083015260e08201526101000190565b6001600160a01b0396871681529486166020860152928516604085015293166060830152608082019290925260a081019190915260c00190565b6001600160a01b03958616815293851660208501529190931660408301526060820192909252608081019190915260a00190565b6001600160a01b03978816815295871660208701529390951660408501526060840191909152608083015260a082019290925260c081019190915260e00190565b6001600160a01b038581168252841660208201526080604082018190526000906153a990830185614ddd565b905082606083015295945050505050565b6001600160a01b0387811682528616602082015260c0604082018190526000906153e690830187614ddd565b606083019590955250608081019290925260a0909101529392505050565b6001600160a01b0386811682528516602082015260408101849052608060608201819052600090614fc09083018486614e5b565b6001600160a01b038781168252861660208201526040810185905260a06060820181905260009061546c9083018587614e5b565b9050826080830152979650505050505050565b602081016002831061548d57fe5b91905290565b602080825260129082015271436f6c6c656374696f6e206661696c65642160701b604082015260600190565b60208082526009908201526837b7363ca0b236b4b760b91b604082015260600190565b60208082526012908201527122a9292fa727aa2fa1a7a72a2927a62622a960711b604082015260600190565b6020808252600d908201526c4552525f4e4f5f52494748545360981b604082015260600190565b6020808252600c908201526b696e697469616c697a65642160a01b604082015260600190565b6020808252601690820152754552525f494c4c4547414c5f50455243454e5441474560501b604082015260600190565b60208082526016908201527526a7a22aa6229024a9902727aa102922a3a4a9aa22a960511b604082015260600190565b6020808252601b908201527a11549497d393d517d5d212551157d513d2d15397d25397d413d3d3602a1b604082015260600190565b60208082526010908201526f4552525f5a45524f5f4144445245535360801b604082015260600190565b602080825260199082015278544f4b454e5f4d5553545f494e5f57484954455f4c4953545360381b604082015260600190565b6020808252600f908201526e11549497d393d517d0d49150551151608a1b604082015260600190565b6020808252600e908201526d11549497d254d7d0d4915055115160921b604082015260600190565b60208082526006908201526506f776e6572560d41b604082015260600190565b602080825260079082015266085c185d5cd95960ca1b604082015260600190565b60208082526010908201526f11549497d1125597d25395115493905360821b604082015260600190565b6020808252600b908201526a4552525f5245454e54525960a81b604082015260600190565b60208082526023908201527f54686520636f6c6c656374696f6e206379636c65206973206e6f7420726561636040820152621a195960ea1b606082015260800190565b6020808252601b908201527a22a9292fa722abafa0a226a4a729afa420a9afa727afa7aba722a960291b604082015260600190565b60208082526010908201526f4552525f4d554c5f4f564552464c4f5760801b604082015260600190565b6020808252601e908201527f4552525f4e4f545f57484954455f544f4b454e5f494e5f464143544f52590000604082015260600190565b6020808252600c908201526b4552525f4449565f5a45524f60a01b604082015260600190565b60208082526015908201527411549497d0d05417d31253525517d4915050d21151605a1b604082015260600190565b60208082526016908201527522a9292fa821aa27a5a2a72fa120a22fa1a0a62622a960511b604082015260600190565b60208082526017908201527608aa4a4bea69ea4a8bea89e968a9cbe9a92a69a82a8869604b1b604082015260600190565b6020808252600f908201526e4552525f45524332305f46414c534560881b604082015260600190565b6020808252601990820152784552525f494e56414c49445f544f4b454e5f4144445245535360381b604082015260600190565b6020808252601890820152774552525f4841535f4245454e5f41444445445f574849544560401b604082015260600190565b6020808252601190820152704552525f5355425f554e444552464c4f5760781b604082015260600190565b60208082526010908201526f4552525f4144445f4f564552464c4f5760801b604082015260600190565b60208082526019908201527822a9292fa9a427aaa6222fa9a2aa2faba424aa22aa27a5a2a760391b604082015260600190565b60208082526011908201527022a9292fa6aaa9aa2fa7a822a72fa2aa2360791b604082015260600190565b600060e082019050835460ff80821615158452808260081c1615156020850152808260101c1615156040850152808260181c1615156060850152615a4a60808501828460201c16614ef0565b615a5c60a08501828460281c16614ef0565b5050615a6783615c15565b8260c08301529392505050565b90815260200190565b9182526001600160a01b0316602082015260400190565b918252602082015260400190565b9283526020830191909152604082015260600190565b958652602086019490945260408501929092526060840152608083015260a082015260c00190565b988952602089019790975260408801959095526060870193909352608086019190915260a085015260c084015260e083015215156101008201526101200190565b9a8b5260208b019990995260408a01979097526060890195909552608088019390935260a087019190915260c086015260e08501526101008401526101208301526101408201526101600190565b60ff91909116815260200190565b6040518181016001600160401b0381118282101715615b9b57600080fd5b604052919050565b60006001600160401b03821115615bb8578081fd5b5060209081020190565b60006001600160401b03821115615bd7578081fd5b50601f01601f191660200190565b60005b83811015615c00578181015183820152602001615be8565b83811115615c0f576000848401525b50505050565b60068110610c9857fe5b6001600160a01b0381168114610c9857600080fd5b8015158114610c9857600080fdfecc86385c52bf4aeaa8583735b29e4a0abc0c5489fae93dbaef02bd838c2d297dddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925a2646970667358221220e7983e2434c5544db79f36cfea9bfd5f5d3e8660bd47f38ccfb12cfce72f5bd864736f6c634300060c0033"
  ],
  "numDeployments": 1,
  "solcInputHash": "db1bbd35822d98d7e95e73010e06935d",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytecode\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"LOG_CALL\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"middleware\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"LOG_MIDDLEWARE\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"LOG_USER_VAULT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"LogNewCrp\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bytecodes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isCrp\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factoryAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"poolTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"poolTokenName\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"constituentTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenBalances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenWeights\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"managerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"issueFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perfermanceFee\",\"type\":\"uint256\"},{\"internalType\":\"enum IConfigurableRightsPool.Etypes\",\"name\":\"etype\",\"type\":\"uint8\"}],\"internalType\":\"struct IConfigurableRightsPool.PoolParams\",\"name\":\"poolParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"canPauseSwapping\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canChangeSwapFee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canChangeWeights\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canAddRemoveTokens\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canWhitelistLPs\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canTokenWhiteLists\",\"type\":\"bool\"}],\"internalType\":\"struct RightsManager.Rights\",\"name\":\"rights\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"managerFee\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"issueFee\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"redeemFee\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"firstLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"secondLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"thirdLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolManager.levelParams\",\"name\":\"fourLevel\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.feeParams\",\"name\":\"perfermanceFee\",\"type\":\"tuple\"}],\"internalType\":\"struct SmartPoolManager.KolPoolParams\",\"name\":\"kolPoolParams\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ownerPercentage\",\"type\":\"uint256[]\"}],\"name\":\"newCrp\",\"outputs\":[{\"internalType\":\"contract IConfigurableRightsPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytecodes\",\"type\":\"bytes\"}],\"name\":\"setByteCodes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newVault\",\"type\":\"address\"}],\"name\":\"setUserVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Desyn Labs\",\"details\":\"Rights are held in a corresponding struct in ConfigurableRightsPool      Index values are as follows:      0: canPauseSwapping - can setPublicSwap back to false after turning it on                            by default, it is off on initialization and can only be turned on      1: canChangeSwapFee - can setSwapFee after initialization (by default, it is fixed at create time)      2: canChangeWeights - can bind new token weights (allowed by default in base pool)      3: canAddRemoveTokens - can bind/unbind tokens (allowed by default in base pool)      4: canWhitelistLPs - if set, only whitelisted addresses can join pools                           (enables private pools with more than one LP)      5: canChangeCap - can change the BSP cap (max # of pool tokens)\",\"kind\":\"dev\",\"methods\":{\"isCrp(address)\":{\"params\":{\"addr\":\"- address to check\"},\"returns\":{\"_0\":\"boolean indicating whether it is a CRP\"}},\"newCrp(address,(string,string,address[],uint256[],uint256[],uint256,uint256,uint256,uint256,uint256,uint8),(bool,bool,bool,bool,bool,bool),(((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256)),((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256)),((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256)),((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256))),address[],uint256[])\":{\"details\":\"emits a LogNewCRP event\",\"params\":{\"factoryAddress\":\"- the BFactory instance used to create the underlying pool\",\"poolParams\":\"- struct containing the names, tokens, weights, balances, and swap fee\",\"rights\":\"- struct of permissions, configuring this CRP instance (see above for definitions)\"}}},\"title\":\"Configurable Rights Pool Factory - create parameterized smart pools\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isCrp(address)\":{\"notice\":\"Check to see if a given address is a CRP\"},\"newCrp(address,(string,string,address[],uint256[],uint256[],uint256,uint256,uint256,uint256,uint256,uint8),(bool,bool,bool,bool,bool,bool),(((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256)),((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256)),((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256)),((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256))),address[],uint256[])\":{\"notice\":\"Create a new CRP\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/deploy/CRPFactory.sol\":\"CRPFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"contracts/base/Logs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\ncontract Logs {\\n    event LOG_CALL(bytes4 indexed sig, address indexed caller, bytes data) anonymous;\\n\\n    modifier _logs_() {\\n        emit LOG_CALL(msg.sig, msg.sender, msg.data);\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x942b3c172dd3f0910c3589d703b4f224c94c76a13cc84d7add6318206cff512e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/deploy/CRPFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\nimport {RightsManager} from \\\"../libraries/RightsManager.sol\\\";\\nimport {SmartPoolManager} from \\\"../libraries/SmartPoolManager.sol\\\";\\nimport \\\"../base/Logs.sol\\\";\\n\\n// Needed to handle structures externally\\npragma experimental ABIEncoderV2;\\n\\n// Imports\\nabstract contract IConfigurableRightsPool {\\n    enum Etypes {\\n        OPENED,\\n        CLOSED\\n    }\\n    enum Period {\\n        HALF,\\n        ONE,\\n        TWO\\n    }\\n\\n    struct PoolParams {\\n        string poolTokenSymbol;\\n        string poolTokenName;\\n        address[] constituentTokens;\\n        uint[] tokenBalances;\\n        uint[] tokenWeights;\\n        uint swapFee;\\n        uint managerFee;\\n        uint redeemFee;\\n        uint issueFee;\\n        uint perfermanceFee;\\n        Etypes etype;\\n    }\\n\\n    struct CrpParams {\\n        uint initialSupply;\\n        uint collectPeriod;\\n        Period period;\\n    }\\n\\n    function setController(address owner) external virtual;\\n\\n    function init(\\n        address factoryAddress,\\n        IConfigurableRightsPool.PoolParams calldata poolParams,\\n        RightsManager.Rights calldata rights\\n    ) external virtual;\\n\\n    function initHandle(address[] memory owners, uint[] memory ownerPercentage) external virtual;\\n}\\n\\ninterface IUserVault {\\n    function setPoolParams(address pool, SmartPoolManager.KolPoolParams memory kolPoolParams) external;\\n}\\n\\n// Contracts\\n\\n/**\\n * @author Desyn Labs\\n * @title Configurable Rights Pool Factory - create parameterized smart pools\\n * @dev Rights are held in a corresponding struct in ConfigurableRightsPool\\n *      Index values are as follows:\\n *      0: canPauseSwapping - can setPublicSwap back to false after turning it on\\n *                            by default, it is off on initialization and can only be turned on\\n *      1: canChangeSwapFee - can setSwapFee after initialization (by default, it is fixed at create time)\\n *      2: canChangeWeights - can bind new token weights (allowed by default in base pool)\\n *      3: canAddRemoveTokens - can bind/unbind tokens (allowed by default in base pool)\\n *      4: canWhitelistLPs - if set, only whitelisted addresses can join pools\\n *                           (enables private pools with more than one LP)\\n *      5: canChangeCap - can change the BSP cap (max # of pool tokens)\\n */\\ncontract CRPFactory is Logs {\\n    // State variables\\n\\n    // Keep a list of all Configurable Rights Pools\\n    mapping(address => bool) private _isCrp;\\n\\n    // Event declarations\\n\\n    // Log the address of each new smart pool, and its creator\\n    event LogNewCrp(address indexed caller, address indexed pool);\\n    event LOG_USER_VAULT(address indexed vault, address indexed caller);\\n    event LOG_MIDDLEWARE(address indexed middleware, address indexed caller);\\n    uint private counters;\\n\\n    bytes public bytecodes;\\n    address private _blabs;\\n    address public userVault;\\n\\n    constructor(bytes memory _bytecode) public {\\n        bytecodes = _bytecode;\\n        _blabs = msg.sender;\\n    }\\n\\n    function createPool(IConfigurableRightsPool.PoolParams calldata poolParams) internal returns (address base) {\\n        bytes memory bytecode = bytecodes;\\n        bytes memory deploymentData = abi.encodePacked(bytecode, abi.encode(poolParams.poolTokenSymbol, poolParams.poolTokenName));\\n        bytes32 salt = keccak256(abi.encodePacked(counters++));\\n        assembly {\\n            base := create2(0, add(deploymentData, 32), mload(deploymentData), salt)\\n            if iszero(extcodesize(base)) {\\n                revert(0, 0)\\n            }\\n        }\\n    }\\n\\n    // Function declarations\\n    /**\\n     * @notice Create a new CRP\\n     * @dev emits a LogNewCRP event\\n     * @param factoryAddress - the BFactory instance used to create the underlying pool\\n     * @param poolParams - struct containing the names, tokens, weights, balances, and swap fee\\n     * @param rights - struct of permissions, configuring this CRP instance (see above for definitions)\\n     */\\n    function newCrp(\\n        address factoryAddress,\\n        IConfigurableRightsPool.PoolParams calldata poolParams,\\n        RightsManager.Rights calldata rights,\\n        SmartPoolManager.KolPoolParams calldata kolPoolParams,\\n        address[] memory owners,\\n        uint[] memory ownerPercentage\\n    ) external returns (IConfigurableRightsPool) {\\n        // require(poolParams.constituentTokens.length >= DesynConstants.MIN_ASSET_LIMIT, \\\"ERR_TOO_FEW_TOKENS\\\");\\n\\n        // Arrays must be parallel\\n        // require(poolParams.tokenBalances.length == poolParams.constituentTokens.length, \\\"ERR_START_BALANCES_MISMATCH\\\");\\n        // require(poolParams.tokenWeights.length == poolParams.constituentTokens.length, \\\"ERR_START_WEIGHTS_MISMATCH\\\");\\n\\n        address crp = createPool(poolParams);\\n        emit LogNewCrp(msg.sender, crp);\\n\\n        _isCrp[crp] = true;\\n        IConfigurableRightsPool(crp).init(factoryAddress, poolParams, rights);\\n        IUserVault(userVault).setPoolParams(crp, kolPoolParams);\\n        // The caller is the controller of the CRP\\n        // The CRP will be the controller of the underlying Core BPool\\n        IConfigurableRightsPool(crp).setController(msg.sender);\\n        IConfigurableRightsPool(crp).initHandle(owners, ownerPercentage);\\n\\n        return IConfigurableRightsPool(crp);\\n    }\\n\\n    modifier onlyBlabs() {\\n        require(msg.sender == _blabs, \\\"ERR_NOT_BLABS\\\");\\n        _;\\n    }\\n\\n    function setUserVault(address newVault) external onlyBlabs {\\n        userVault = newVault;\\n        emit LOG_USER_VAULT(newVault, msg.sender);\\n    }\\n\\n    function setByteCodes(bytes memory _bytecodes) external onlyBlabs _logs_ {\\n        bytecodes = _bytecodes;\\n    }\\n\\n    /**\\n     * @notice Check to see if a given address is a CRP\\n     * @param addr - address to check\\n     * @return boolean indicating whether it is a CRP\\n     */\\n    function isCrp(address addr) external view returns (bool) {\\n        return _isCrp[addr];\\n    }\\n}\\n\",\"keccak256\":\"0xed1dc347e06927e3e496618ae3ba99f39f7f64336c41ef7412777ea17dc06817\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IBFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\nimport \\\"../libraries/SmartPoolManager.sol\\\";\\n\\ninterface IBPool {\\n    function rebind(\\n        address token,\\n        uint balance,\\n        uint denorm\\n    ) external;\\n\\n    function rebindSmart(\\n        address tokenA,\\n        address tokenB,\\n        uint deltaWeight,\\n        uint deltaBalance,\\n        bool isSoldout,\\n        uint minAmountOut\\n    ) external;\\n\\n    function execute(\\n        address _target,\\n        uint _value,\\n        bytes calldata _data\\n    ) external returns (bytes memory _returnValue);\\n\\n    function bind(\\n        address token,\\n        uint balance,\\n        uint denorm\\n    ) external;\\n\\n    function unbind(address token) external;\\n\\n    function unbindPure(address token) external;\\n\\n    function isBound(address token) external view returns (bool);\\n\\n    function getBalance(address token) external view returns (uint);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function getSwapFee() external view returns (uint);\\n\\n    function isPublicSwap() external view returns (bool);\\n\\n    function getDenormalizedWeight(address token) external view returns (uint);\\n\\n    function getTotalDenormalizedWeight() external view returns (uint);\\n\\n    function EXIT_FEE() external view returns (uint);\\n\\n    function getCurrentTokens() external view returns (address[] memory tokens);\\n\\n    function setController(address owner) external;\\n}\\n\\ninterface IBFactory {\\n    function newLiquidityPool() external returns (IBPool);\\n\\n    function setBLabs(address b) external;\\n\\n    function collect(IBPool pool) external;\\n\\n    function isBPool(address b) external view returns (bool);\\n\\n    function getBLabs() external view returns (address);\\n\\n    function getSwapRouter() external view returns (address);\\n\\n    function getVault() external view returns (address);\\n\\n    function getUserVault() external view returns (address);\\n\\n    function getVaultAddress() external view returns (address);\\n\\n    function getOracleAddress() external view returns (address);\\n\\n    function getManagerOwner() external view returns (address);\\n\\n    function isTokenWhitelistedForVerify(uint sort, address token) external view returns (bool);\\n\\n    function isTokenWhitelistedForVerify(address token) external view returns (bool);\\n\\n    function getModuleStatus(address etf, address module) external view returns (bool);\\n\\n    function isPaused() external view returns (bool);\\n}\\n\\ninterface IVault {\\n    function depositManagerToken(address[] calldata poolTokens, uint[] calldata tokensAmount) external;\\n\\n    function depositIssueRedeemPToken(\\n        address[] calldata poolTokens,\\n        uint[] calldata tokensAmount,\\n        uint[] calldata tokensAmountP,\\n        bool isPerfermance\\n    ) external;\\n\\n    function managerClaim(address pool) external;\\n\\n    function getManagerClaimBool(address pool) external view returns (bool);\\n}\\n\\ninterface IUserVault {\\n    function recordTokenInfo(\\n        address kol,\\n        address user,\\n        address[] calldata poolTokens,\\n        uint[] calldata tokensAmount\\n    ) external;\\n}\\n\\ninterface Oracles {\\n    function getPrice(address tokenAddress) external returns (uint price);\\n\\n    function getAllPrice(address[] calldata poolTokens, uint[] calldata tokensAmount) external returns (uint);\\n}\",\"keccak256\":\"0xc2cc32bdf691ceddab7a647a98bd481adcf9ae8393d8663a916bf032ef0dbbc6\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IConfigurableRightsPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Interface declarations\\n\\n// Introduce to avoid circularity (otherwise, the CRP and SmartPoolManager include each other)\\n// Removing circularity allows flattener tools to work, which enables Etherscan verification\\ninterface IConfigurableRightsPool {\\n    function mintPoolShareFromLib(uint amount) external;\\n\\n    function pushPoolShareFromLib(address to, uint amount) external;\\n\\n    function pullPoolShareFromLib(address from, uint amount) external;\\n\\n    function burnPoolShareFromLib(uint amount) external;\\n\\n    function balanceOf(address account) external view returns (uint);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function getController() external view returns (address);\\n\\n    function vaultAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0x1326889b57f63cc031e7c9e383b0fd3b172a9b86eb623cf0faba32c0768c4ec4\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Interface declarations\\n\\n/* solhint-disable func-order */\\n\\ninterface IERC20 {\\n    // Emitted when the allowance of a spender for an owner is set by a call to approve.\\n    // Value is the new allowance\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n\\n    // Emitted when value tokens are moved from one account (from) to another (to).\\n    // Note that value may be zero\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    // Returns the amount of tokens in existence\\n    function totalSupply() external view returns (uint);\\n\\n    // Returns the amount of tokens owned by account\\n    function balanceOf(address account) external view returns (uint);\\n\\n    // Returns the decimals of tokens\\n    function decimals() external view returns (uint8);\\n\\n    function symbol() external view returns (string memory);\\n\\n    // Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner\\n    // through transferFrom. This is zero by default\\n    // This value changes when approve or transferFrom are called\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    // Sets amount as the allowance of spender over the caller\\u2019s tokens\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits an Approval event.\\n    function approve(address spender, uint amount) external returns (bool);\\n\\n    // Moves amount tokens from the caller\\u2019s account to recipient\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits a Transfer event.\\n    function transfer(address recipient, uint amount) external returns (bool);\\n\\n    // Moves amount tokens from sender to recipient using the allowance mechanism\\n    // Amount is then deducted from the caller\\u2019s allowance\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits a Transfer event\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xfe22b6d6029b400b9cce7f9b39c546f99cd6922b2fd926e480e2b4d476ab26f8\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/DesynConstants.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n/**\\n * @author Desyn Labs\\n * @title Put all the constants in one place\\n */\\n\\nlibrary DesynConstants {\\n    // State variables (must be constant in a library)\\n\\n    // B \\\"ONE\\\" - all math is in the \\\"realm\\\" of 10 ** 18;\\n    // where numeric 1 = 10 ** 18\\n    uint public constant BONE = 10**18;\\n    uint public constant MIN_WEIGHT = BONE;\\n    uint public constant MAX_WEIGHT = BONE * 50;\\n    uint public constant MAX_TOTAL_WEIGHT = BONE * 50;\\n    uint public constant MIN_BALANCE = 0;\\n    uint public constant MAX_BALANCE = BONE * 10**12;\\n    uint public constant MIN_POOL_SUPPLY = BONE * 100;\\n    uint public constant MAX_POOL_SUPPLY = BONE * 10**9;\\n    uint public constant MIN_FEE = BONE / 10**6;\\n    uint public constant MAX_FEE = BONE / 10;\\n    //Fee Set\\n    uint public constant MANAGER_MIN_FEE = 0;\\n    uint public constant MANAGER_MAX_FEE = BONE / 10;\\n    uint public constant ISSUE_MIN_FEE = BONE / 1000;\\n    uint public constant ISSUE_MAX_FEE = BONE / 10;\\n    uint public constant REDEEM_MIN_FEE = 0;\\n    uint public constant REDEEM_MAX_FEE = BONE / 10;\\n    uint public constant PERFERMANCE_MIN_FEE = 0;\\n    uint public constant PERFERMANCE_MAX_FEE = BONE / 2;\\n    // EXIT_FEE must always be zero, or ConfigurableRightsPool._pushUnderlying will fail\\n    uint public constant EXIT_FEE = 0;\\n    uint public constant MAX_IN_RATIO = BONE / 2;\\n    uint public constant MAX_OUT_RATIO = (BONE / 3) + 1 wei;\\n    // Must match BConst.MIN_BOUND_TOKENS and BConst.MAX_BOUND_TOKENS\\n    uint public constant MIN_ASSET_LIMIT = 1;\\n    uint public constant MAX_ASSET_LIMIT = 16;\\n    uint public constant MAX_UINT = uint(-1);\\n    uint public constant MAX_COLLECT_PERIOD = 60 days;\\n}\\n\",\"keccak256\":\"0xbc396253a5541cd3cc080ca207dfdd2d2bdf963de26e005db36bd752524c1d66\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/DesynSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Imports\\n\\nimport \\\"./DesynConstants.sol\\\";\\n\\n/**\\n * @author Desyn Labs\\n * @title SafeMath - wrap Solidity operators to prevent underflow/overflow\\n * @dev badd and bsub are basically identical to OpenZeppelin SafeMath; mul/div have extra checks\\n */\\nlibrary DesynSafeMath {\\n    /**\\n     * @notice Safe addition\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev if we are adding b to a, the resulting sum must be greater than a\\n     * @return - sum of operands; throws if overflow\\n     */\\n    function badd(uint a, uint b) internal pure returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, \\\"ERR_ADD_OVERFLOW\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned subtraction\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Do a signed subtraction, and check that it produces a positive value\\n     *      (i.e., a - b is valid if b <= a)\\n     * @return - a - b; throws if underflow\\n     */\\n    function bsub(uint a, uint b) internal pure returns (uint) {\\n        (uint c, bool negativeResult) = bsubSign(a, b);\\n        require(!negativeResult, \\\"ERR_SUB_UNDERFLOW\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Safe signed subtraction\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Do a signed subtraction\\n     * @return - difference between a and b, and a flag indicating a negative result\\n     *           (i.e., a - b if a is greater than or equal to b; otherwise b - a)\\n     */\\n    function bsubSign(uint a, uint b) internal pure returns (uint, bool) {\\n        if (b <= a) {\\n            return (a - b, false);\\n        } else {\\n            return (b - a, true);\\n        }\\n    }\\n\\n    /**\\n     * @notice Safe multiplication\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Multiply safely (and efficiently), rounding down\\n     * @return - product of operands; throws if overflow or rounding error\\n     */\\n    function bmul(uint a, uint b) internal pure returns (uint) {\\n        // Gas optimization (see github.com/OpenZeppelin/openzeppelin-contracts/pull/522)\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // Standard overflow check: a/a*b=b\\n        uint c0 = a * b;\\n        require(c0 / a == b, \\\"ERR_MUL_OVERFLOW\\\");\\n\\n        // Round to 0 if x*y < BONE/2?\\n        uint c1 = c0 + (DesynConstants.BONE / 2);\\n        require(c1 >= c0, \\\"ERR_MUL_OVERFLOW\\\");\\n        uint c2 = c1 / DesynConstants.BONE;\\n        return c2;\\n    }\\n\\n    /**\\n     * @notice Safe division\\n     * @param dividend - first operand\\n     * @param divisor - second operand\\n     * @dev Divide safely (and efficiently), rounding down\\n     * @return - quotient; throws if overflow or rounding error\\n     */\\n    function bdiv(uint dividend, uint divisor) internal pure returns (uint) {\\n        require(divisor != 0, \\\"ERR_DIV_ZERO\\\");\\n\\n        // Gas optimization\\n        if (dividend == 0) {\\n            return 0;\\n        }\\n\\n        uint c0 = dividend * DesynConstants.BONE;\\n        require(c0 / dividend == DesynConstants.BONE, \\\"ERR_DIV_INTERNAL\\\"); // bmul overflow\\n\\n        uint c1 = c0 + (divisor / 2);\\n        require(c1 >= c0, \\\"ERR_DIV_INTERNAL\\\"); //  badd require\\n\\n        uint c2 = c1 / divisor;\\n        return c2;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer modulo\\n     * @dev Returns the remainder of dividing two unsigned integers.\\n     *      Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * @param dividend - first operand\\n     * @param divisor - second operand -- cannot be zero\\n     * @return - quotient; throws if overflow or rounding error\\n     */\\n    function bmod(uint dividend, uint divisor) internal pure returns (uint) {\\n        require(divisor != 0, \\\"ERR_MODULO_BY_ZERO\\\");\\n\\n        return dividend % divisor;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer max\\n     * @dev Returns the greater of the two input values\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the maximum of a and b\\n     */\\n    function bmax(uint a, uint b) internal pure returns (uint) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer min\\n     * @dev returns b, if b < a; otherwise returns a\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the lesser of the two input values\\n     */\\n    function bmin(uint a, uint b) internal pure returns (uint) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer average\\n     * @dev Guard against (a+b) overflow by dividing each operand separately\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the average of the two values\\n     */\\n    function baverage(uint a, uint b) internal pure returns (uint) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\\n    }\\n\\n    /**\\n     * @notice Babylonian square root implementation\\n     * @dev (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n     * @param y - operand\\n     * @return z - the square root result\\n     */\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9baf30b98a5f3a8c13ac9c4d5d4b176eabfd936aba8f5172c95b7c568fba68f3\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/RightsManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Needed to handle structures externally\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @author Desyn Labs\\n * @title Manage Configurable Rights for the smart pool\\n *      canPauseSwapping - can setPublicSwap back to false after turning it on\\n *                         by default, it is off on initialization and can only be turned on\\n *      canChangeSwapFee - can setSwapFee after initialization (by default, it is fixed at create time)\\n *      canChangeWeights - can bind new token weights (allowed by default in base pool)\\n *      canAddRemoveTokens - can bind/unbind tokens (allowed by default in base pool)\\n *      canWhitelistLPs - can limit liquidity providers to a given set of addresses\\n *      canChangeCap - can change the BSP cap (max # of pool tokens)\\n *      canChangeFloor - can change the BSP floor for Closure ETF (min # of pool tokens)\\n */\\nlibrary RightsManager {\\n    // Type declarations\\n\\n    enum Permissions {\\n        PAUSE_SWAPPING,\\n        CHANGE_SWAP_FEE,\\n        CHANGE_WEIGHTS,\\n        ADD_REMOVE_TOKENS,\\n        WHITELIST_LPS,\\n        TOKEN_WHITELISTS\\n        // CHANGE_CAP,\\n        // CHANGE_FLOOR\\n    }\\n\\n    struct Rights {\\n        bool canPauseSwapping;\\n        bool canChangeSwapFee;\\n        bool canChangeWeights;\\n        bool canAddRemoveTokens;\\n        bool canWhitelistLPs;\\n        bool canTokenWhiteLists;\\n        // bool canChangeCap;\\n        // bool canChangeFloor;\\n    }\\n\\n    // State variables (can only be constants in a library)\\n    bool public constant DEFAULT_CAN_PAUSE_SWAPPING = false;\\n    bool public constant DEFAULT_CAN_CHANGE_SWAP_FEE = true;\\n    bool public constant DEFAULT_CAN_CHANGE_WEIGHTS = true;\\n    bool public constant DEFAULT_CAN_ADD_REMOVE_TOKENS = false;\\n    bool public constant DEFAULT_CAN_WHITELIST_LPS = false;\\n    bool public constant DEFAULT_CAN_TOKEN_WHITELISTS = false;\\n\\n    // bool public constant DEFAULT_CAN_CHANGE_CAP = false;\\n    // bool public constant DEFAULT_CAN_CHANGE_FLOOR = false;\\n\\n    // Functions\\n\\n    /**\\n     * @notice create a struct from an array (or return defaults)\\n     * @dev If you pass an empty array, it will construct it using the defaults\\n     * @param a - array input\\n     * @return Rights struct\\n     */\\n    function constructRights(bool[] calldata a) external pure returns (Rights memory) {\\n        if (a.length < 6) {\\n            return\\n                Rights(\\n                    DEFAULT_CAN_PAUSE_SWAPPING,\\n                    DEFAULT_CAN_CHANGE_SWAP_FEE,\\n                    DEFAULT_CAN_CHANGE_WEIGHTS,\\n                    DEFAULT_CAN_ADD_REMOVE_TOKENS,\\n                    DEFAULT_CAN_WHITELIST_LPS,\\n                    DEFAULT_CAN_TOKEN_WHITELISTS\\n                    // DEFAULT_CAN_CHANGE_CAP,\\n                    // DEFAULT_CAN_CHANGE_FLOOR\\n                );\\n        } else {\\n            // return Rights(a[0], a[1], a[2], a[3], a[4], a[5], a[6]);\\n            return Rights(a[0], a[1], a[2], a[3], a[4], a[5]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Convert rights struct to an array (e.g., for events, GUI)\\n     * @dev avoids multiple calls to hasPermission\\n     * @param rights - the rights struct to convert\\n     * @return boolean array containing the rights settings\\n     */\\n    function convertRights(Rights calldata rights) external pure returns (bool[] memory) {\\n        bool[] memory result = new bool[](6);\\n\\n        result[0] = rights.canPauseSwapping;\\n        result[1] = rights.canChangeSwapFee;\\n        result[2] = rights.canChangeWeights;\\n        result[3] = rights.canAddRemoveTokens;\\n        result[4] = rights.canWhitelistLPs;\\n        result[5] = rights.canTokenWhiteLists;\\n        // result[5] = rights.canChangeCap;\\n        // result[6] = rights.canChangeFloor;\\n\\n        return result;\\n    }\\n\\n    // Though it is actually simple, the number of branches triggers code-complexity\\n    /* solhint-disable code-complexity */\\n\\n    /**\\n     * @notice Externally check permissions using the Enum\\n     * @param self - Rights struct containing the permissions\\n     * @param permission - The permission to check\\n     * @return Boolean true if it has the permission\\n     */\\n    function hasPermission(Rights calldata self, Permissions permission) external pure returns (bool) {\\n        if (Permissions.PAUSE_SWAPPING == permission) {\\n            return self.canPauseSwapping;\\n        } else if (Permissions.CHANGE_SWAP_FEE == permission) {\\n            return self.canChangeSwapFee;\\n        } else if (Permissions.CHANGE_WEIGHTS == permission) {\\n            return self.canChangeWeights;\\n        } else if (Permissions.ADD_REMOVE_TOKENS == permission) {\\n            return self.canAddRemoveTokens;\\n        } else if (Permissions.WHITELIST_LPS == permission) {\\n            return self.canWhitelistLPs;\\n        } else if (Permissions.TOKEN_WHITELISTS == permission) {\\n            return self.canTokenWhiteLists;\\n        }\\n        // else if (Permissions.CHANGE_CAP == permission) {\\n        //     return self.canChangeCap;\\n        // } else if (Permissions.CHANGE_FLOOR == permission) {\\n        //     return self.canChangeFloor;\\n        // }\\n    }\\n\\n    /* solhint-enable code-complexity */\\n}\\n\",\"keccak256\":\"0x398bbfe72673fa1c42a7d59fb5f7b2a46332887e105bf6fdff234a9a83247d0e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/SafeApprove.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Imports\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n// Libraries\\n\\n/**\\n * @author PieDAO (ported to Desyn Labs)\\n * @title SafeApprove - set approval for tokens that require 0 prior approval\\n * @dev Perhaps to address the known ERC20 race condition issue\\n *      See https://github.com/crytic/not-so-smart-contracts/tree/master/race_condition\\n *      Some tokens - notably KNC - only allow approvals to be increased from 0\\n */\\nlibrary SafeApprove {\\n    /**\\n     * @notice handle approvals of tokens that require approving from a base of 0\\n     * @param token - the token we're approving\\n     * @param spender - entity the owner (sender) is approving to spend his tokens\\n     * @param amount - number of tokens being approved\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint amount\\n    ) internal returns (bool) {\\n        uint currentAllowance = token.allowance(address(this), spender);\\n\\n        // Do nothing if allowance is already set to this value\\n        if (currentAllowance == amount) {\\n            return true;\\n        }\\n\\n        // If approval is not zero reset it to zero first\\n        if (currentAllowance != 0) {\\n            token.approve(spender, 0);\\n        }\\n\\n        // do the actual approval\\n        return token.approve(spender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xa51ebf770f2676085b89b1636688cc086289cfe27f614dfd0c15142535c26752\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint a, uint b) internal pure returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint a, uint b) internal pure returns (uint) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint a,\\n        uint b,\\n        string memory errorMessage\\n    ) internal pure returns (uint) {\\n        require(b <= a, errorMessage);\\n        uint c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint a, uint b) internal pure returns (uint) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint a, uint b) internal pure returns (uint) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint a,\\n        uint b,\\n        string memory errorMessage\\n    ) internal pure returns (uint) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint a, uint b) internal pure returns (uint) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint a,\\n        uint b,\\n        string memory errorMessage\\n    ) internal pure returns (uint) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x7ce3fd7d17047f684821e1a20b4f5989630f6755a377b12c087dfde359f710d6\",\"license\":\"agpl-3.0\"},\"contracts/libraries/SmartPoolManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Needed to pass in structs\\npragma experimental ABIEncoderV2;\\n\\n// Imports\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IConfigurableRightsPool.sol\\\";\\nimport \\\"../interfaces/IBFactory.sol\\\"; // unused\\nimport \\\"./DesynSafeMath.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./SafeApprove.sol\\\";\\n\\n/**\\n * @author Desyn Labs\\n * @title Factor out the weight updates\\n */\\nlibrary SmartPoolManager {\\n    using SafeApprove for IERC20;\\n    using DesynSafeMath for uint;\\n    using SafeMath for uint;\\n\\n    //kol pool params\\n    struct levelParams {\\n        uint level;\\n        uint ratio;\\n    }\\n\\n    struct feeParams {\\n        levelParams firstLevel;\\n        levelParams secondLevel;\\n        levelParams thirdLevel;\\n        levelParams fourLevel;\\n    }\\n    \\n    struct KolPoolParams {\\n        feeParams managerFee;\\n        feeParams issueFee;\\n        feeParams redeemFee;\\n        feeParams perfermanceFee;\\n    }\\n\\n    // Type declarations\\n    enum Etypes {\\n        OPENED,\\n        CLOSED\\n    }\\n\\n    enum Period {\\n        HALF,\\n        ONE,\\n        TWO\\n    }\\n\\n    // updateWeight and pokeWeights are unavoidably long\\n    /* solhint-disable function-max-lines */\\n    struct Status {\\n        uint collectPeriod;\\n        uint collectEndTime;\\n        uint closurePeriod;\\n        uint closureEndTime;\\n        uint upperCap;\\n        uint floorCap;\\n        uint managerFee;\\n        uint redeemFee;\\n        uint issueFee;\\n        uint perfermanceFee;\\n        uint startClaimFeeTime;\\n    }\\n\\n    struct PoolParams {\\n        // Desyn Pool Token (representing shares of the pool)\\n        string poolTokenSymbol;\\n        string poolTokenName;\\n        // Tokens inside the Pool\\n        address[] constituentTokens;\\n        uint[] tokenBalances;\\n        uint[] tokenWeights;\\n        uint swapFee;\\n        uint managerFee;\\n        uint redeemFee;\\n        uint issueFee;\\n        uint perfermanceFee;\\n        Etypes etype;\\n    }\\n\\n    struct PoolTokenRange {\\n        uint bspFloor;\\n        uint bspCap;\\n    }\\n\\n    struct Fund {\\n        uint etfAmount;\\n        uint fundAmount;\\n    }\\n\\n    function initRequire(\\n        uint swapFee,\\n        uint managerFee,\\n        uint issueFee,\\n        uint redeemFee,\\n        uint perfermanceFee,\\n        uint tokenBalancesLength,\\n        uint tokenWeightsLength,\\n        uint constituentTokensLength,\\n        bool initBool\\n    ) external pure {\\n        // We don't have a pool yet; check now or it will fail later (in order of likelihood to fail)\\n        // (and be unrecoverable if they don't have permission set to change it)\\n        // Most likely to fail, so check first\\n        require(!initBool, \\\"Init fail\\\");\\n        require(swapFee >= DesynConstants.MIN_FEE, \\\"ERR_INVALID_SWAP_FEE\\\");\\n        require(swapFee <= DesynConstants.MAX_FEE, \\\"ERR_INVALID_SWAP_FEE\\\");\\n        require(managerFee >= DesynConstants.MANAGER_MIN_FEE, \\\"ERR_INVALID_MANAGER_FEE\\\");\\n        require(managerFee <= DesynConstants.MANAGER_MAX_FEE, \\\"ERR_INVALID_MANAGER_FEE\\\");\\n        require(issueFee >= DesynConstants.ISSUE_MIN_FEE, \\\"ERR_INVALID_ISSUE_MIN_FEE\\\");\\n        require(issueFee <= DesynConstants.ISSUE_MAX_FEE, \\\"ERR_INVALID_ISSUE_MAX_FEE\\\");\\n        require(redeemFee >= DesynConstants.REDEEM_MIN_FEE, \\\"ERR_INVALID_REDEEM_MIN_FEE\\\");\\n        require(redeemFee <= DesynConstants.REDEEM_MAX_FEE, \\\"ERR_INVALID_REDEEM_MAX_FEE\\\");\\n        require(perfermanceFee >= DesynConstants.PERFERMANCE_MIN_FEE, \\\"ERR_INVALID_PERFERMANCE_MIN_FEE\\\");\\n        require(perfermanceFee <= DesynConstants.PERFERMANCE_MAX_FEE, \\\"ERR_INVALID_PERFERMANCE_MAX_FEE\\\");\\n\\n        // Arrays must be parallel\\n        require(tokenBalancesLength == constituentTokensLength, \\\"ERR_START_BALANCES_MISMATCH\\\");\\n        require(tokenWeightsLength == constituentTokensLength, \\\"ERR_START_WEIGHTS_MISMATCH\\\");\\n        // Cannot have too many or too few - technically redundant, since BPool.bind() would fail later\\n        // But if we don't check now, we could have a useless contract with no way to create a pool\\n\\n        require(constituentTokensLength >= DesynConstants.MIN_ASSET_LIMIT, \\\"ERR_TOO_FEW_TOKENS\\\");\\n        require(constituentTokensLength <= DesynConstants.MAX_ASSET_LIMIT, \\\"ERR_TOO_MANY_TOKENS\\\");\\n        // There are further possible checks (e.g., if they use the same token twice), but\\n        // we can let bind() catch things like that (i.e., not things that might reasonably work)\\n    }\\n\\n    /**\\n     * @notice Update the weight of an existing token\\n     * @dev Refactored to library to make CRPFactory deployable\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param tokenA - token to sell\\n     * @param tokenB - token to buy\\n     */\\n    function rebalance(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address tokenA,\\n        address tokenB,\\n        uint deltaWeight,\\n        uint minAmountOut\\n    ) external {\\n        uint currentWeightA = bPool.getDenormalizedWeight(tokenA);\\n        uint currentBalanceA = bPool.getBalance(tokenA);\\n        // uint currentWeightB = bPool.getDenormalizedWeight(tokenB);\\n\\n        require(deltaWeight <= currentWeightA, \\\"ERR_DELTA_WEIGHT_TOO_BIG\\\");\\n\\n        // deltaBalance = currentBalance * (deltaWeight / currentWeight)\\n        uint deltaBalanceA = DesynSafeMath.bmul(currentBalanceA, DesynSafeMath.bdiv(deltaWeight, currentWeightA));\\n\\n        // uint currentBalanceB = bPool.getBalance(tokenB);\\n\\n        // uint deltaWeight = DesynSafeMath.bsub(newWeight, currentWeightA);\\n\\n        // uint newWeightB = DesynSafeMath.bsub(currentWeightB, deltaWeight);\\n        // require(newWeightB >= 0, \\\"ERR_INCORRECT_WEIGHT_B\\\");\\n        bool soldout;\\n        if (deltaWeight == currentWeightA) {\\n            // reduct token A\\n            bPool.unbindPure(tokenA);\\n            soldout = true;\\n        }\\n\\n        // Now with the tokens this contract can bind them to the pool it controls\\n        bPool.rebindSmart(tokenA, tokenB, deltaWeight, deltaBalanceA, soldout, minAmountOut);\\n    }\\n\\n    /**\\n     * @notice Non ERC20-conforming tokens are problematic; don't allow them in pools\\n     * @dev Will revert if invalid\\n     * @param token - The prospective token to verify\\n     */\\n    function verifyTokenCompliance(address token) external {\\n        verifyTokenComplianceInternal(token);\\n    }\\n\\n    /**\\n     * @notice Non ERC20-conforming tokens are problematic; don't allow them in pools\\n     * @dev Will revert if invalid - overloaded to save space in the main contract\\n     * @param tokens - The prospective tokens to verify\\n     */\\n    function verifyTokenCompliance(address[] calldata tokens) external {\\n        for (uint i = 0; i < tokens.length; i++) {\\n            verifyTokenComplianceInternal(tokens[i]);\\n        }\\n    }\\n\\n    function createPoolInternalHandle(IBPool bPool, uint initialSupply) external view {\\n        require(initialSupply >= DesynConstants.MIN_POOL_SUPPLY, \\\"ERR_INIT_SUPPLY_MIN\\\");\\n        require(initialSupply <= DesynConstants.MAX_POOL_SUPPLY, \\\"ERR_INIT_SUPPLY_MAX\\\");\\n        require(bPool.EXIT_FEE() == 0, \\\"ERR_NONZERO_EXIT_FEE\\\");\\n        // EXIT_FEE must always be zero, or ConfigurableRightsPool._pushUnderlying will fail\\n        require(DesynConstants.EXIT_FEE == 0, \\\"ERR_NONZERO_EXIT_FEE\\\");\\n    }\\n\\n    function createPoolHandle(\\n        uint collectPeriod,\\n        uint upperCap,\\n        uint initialSupply\\n    ) external pure {\\n        require(collectPeriod <= DesynConstants.MAX_COLLECT_PERIOD, \\\"ERR_EXCEEDS_FUND_RAISING_PERIOD\\\");\\n        require(upperCap >= initialSupply, \\\"ERR_CAP_BIGGER_THAN_INITSUPPLY\\\");\\n    }\\n\\n    function exitPoolHandle(\\n        uint _endEtfAmount,\\n        uint _endFundAmount,\\n        uint _beginEtfAmount,\\n        uint _beginFundAmount,\\n        uint poolAmountIn,\\n        uint totalEnd\\n    )\\n        external\\n        pure\\n        returns (\\n            uint endEtfAmount,\\n            uint endFundAmount,\\n            uint profitRate\\n        )\\n    {\\n        endEtfAmount = DesynSafeMath.badd(_endEtfAmount, poolAmountIn);\\n        endFundAmount = DesynSafeMath.badd(_endFundAmount, totalEnd);\\n        uint amount1 = DesynSafeMath.bdiv(endFundAmount, endEtfAmount);\\n        uint amount2 = DesynSafeMath.bdiv(_beginFundAmount, _beginEtfAmount);\\n        if (amount1 > amount2) {\\n            profitRate = DesynSafeMath.bdiv(\\n                DesynSafeMath.bmul(DesynSafeMath.bsub(DesynSafeMath.bdiv(endFundAmount, endEtfAmount), DesynSafeMath.bdiv(_beginFundAmount, _beginEtfAmount)), poolAmountIn),\\n                totalEnd\\n            );\\n        }\\n    }\\n\\n    function exitPoolHandleA(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address poolToken,\\n        uint _tokenAmountOut,\\n        uint redeemFee,\\n        uint profitRate,\\n        uint perfermanceFee\\n    )\\n        external\\n        returns (\\n            uint redeemAndPerformanceFeeReceived,\\n            uint finalAmountOut,\\n            uint redeemFeeReceived\\n        )\\n    {\\n        // redeem fee\\n        redeemFeeReceived = DesynSafeMath.bmul(_tokenAmountOut, redeemFee);\\n\\n        // performance fee\\n        uint performanceFeeReceived = DesynSafeMath.bmul(DesynSafeMath.bmul(_tokenAmountOut, profitRate), perfermanceFee);\\n        \\n        // redeem fee and performance fee\\n        redeemAndPerformanceFeeReceived = DesynSafeMath.badd(performanceFeeReceived, redeemFeeReceived);\\n\\n        // final amount the user got\\n        finalAmountOut = DesynSafeMath.bsub(_tokenAmountOut, redeemAndPerformanceFeeReceived);\\n\\n        _pushUnderlying(bPool, poolToken, msg.sender, finalAmountOut);\\n\\n        if (redeemFee != 0 || (profitRate > 0 && perfermanceFee != 0)) {\\n            _pushUnderlying(bPool, poolToken, address(this), redeemAndPerformanceFeeReceived);\\n            IERC20(poolToken).safeApprove(self.vaultAddress(), redeemAndPerformanceFeeReceived);\\n        }\\n    }\\n\\n    function exitPoolHandleB(\\n        IConfigurableRightsPool self,\\n        bool bools,\\n        bool isCompletedCollect,\\n        uint closureEndTime,\\n        uint collectEndTime,\\n        uint _etfAmount,\\n        uint _fundAmount,\\n        uint poolAmountIn\\n    ) external view returns (uint etfAmount, uint fundAmount, uint actualPoolAmountIn) {\\n        actualPoolAmountIn = poolAmountIn;\\n        if (bools) {\\n            bool isCloseEtfCollectEndWithFailure = isCompletedCollect == false && block.timestamp >= collectEndTime;\\n            bool isCloseEtfClosureEnd = block.timestamp >= closureEndTime;\\n            require(isCloseEtfCollectEndWithFailure || isCloseEtfClosureEnd, \\\"ERR_CLOSURE_TIME_NOT_ARRIVED!\\\");\\n\\n            actualPoolAmountIn = self.balanceOf(msg.sender);\\n        }\\n        fundAmount = _fundAmount;\\n        etfAmount = _etfAmount;\\n    }\\n\\n    function joinPoolHandle(\\n        bool canWhitelistLPs,\\n        bool isList,\\n        bool bools,\\n        uint collectEndTime\\n    ) external view {\\n        require(!canWhitelistLPs || isList, \\\"ERR_NOT_ON_WHITELIST\\\");\\n\\n        if (bools) {\\n            require(block.timestamp <= collectEndTime, \\\"ERR_COLLECT_PERIOD_FINISHED!\\\");\\n        }\\n    }\\n\\n    function rebalanceHandle(\\n        IBPool bPool,\\n        bool isCompletedCollect,\\n        bool bools,\\n        uint collectEndTime,\\n        uint closureEndTime,\\n        bool canChangeWeights,\\n        address tokenA,\\n        address tokenB\\n    ) external {\\n        require(bPool.isBound(tokenA), \\\"ERR_TOKEN_NOT_BOUND\\\");\\n        if (bools) {\\n            require(isCompletedCollect, \\\"ERROR_COLLECTION_FAILED\\\");\\n            require(block.timestamp > collectEndTime && block.timestamp < closureEndTime, \\\"ERR_NOT_REBALANCE_PERIOD\\\");\\n        }\\n\\n        if (!bPool.isBound(tokenB)) {\\n            bool returnValue = IERC20(tokenB).safeApprove(address(bPool), DesynConstants.MAX_UINT);\\n            require(returnValue, \\\"ERR_ERC20_FALSE\\\");\\n        }\\n\\n        require(canChangeWeights, \\\"ERR_NOT_CONFIGURABLE_WEIGHTS\\\");\\n        require(tokenA != tokenB, \\\"ERR_TOKENS_SAME\\\");\\n    }\\n\\n    /**\\n     * @notice Join a pool\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param poolAmountOut - number of pool tokens to receive\\n     * @param maxAmountsIn - Max amount of asset tokens to spend\\n     * @return actualAmountsIn - calculated values of the tokens to pull in\\n     */\\n    function joinPool(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        uint poolAmountOut,\\n        uint[] calldata maxAmountsIn,\\n        uint issueFee\\n    ) external view returns (uint[] memory actualAmountsIn) {\\n        address[] memory tokens = bPool.getCurrentTokens();\\n\\n        require(maxAmountsIn.length == tokens.length, \\\"ERR_AMOUNTS_MISMATCH\\\");\\n\\n        uint poolTotal = self.totalSupply();\\n        // Subtract  1 to ensure any rounding errors favor the pool\\n        uint ratio = DesynSafeMath.bdiv(poolAmountOut, DesynSafeMath.bsub(poolTotal, 1));\\n\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        // We know the length of the array; initialize it, and fill it below\\n        // Cannot do \\\"push\\\" in memory\\n        actualAmountsIn = new uint[](tokens.length);\\n\\n        // This loop contains external calls\\n        // External calls are to math libraries or the underlying pool, so low risk\\n        uint issueFeeRate = issueFee.bmul(1000);\\n        for (uint i = 0; i < tokens.length; i++) {\\n            address t = tokens[i];\\n            uint bal = bPool.getBalance(t);\\n            // Add 1 to ensure any rounding errors favor the pool\\n            uint base = bal.badd(1).bmul(poolAmountOut * uint(1000));\\n            uint tokenAmountIn = base.bdiv(poolTotal.bsub(1) * (uint(1000).bsub(issueFeeRate)));\\n\\n            require(tokenAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountIn <= maxAmountsIn[i], \\\"ERR_LIMIT_IN\\\");\\n\\n            actualAmountsIn[i] = tokenAmountIn;\\n        }\\n    }\\n\\n    /**\\n     * @notice Exit a pool - redeem pool tokens for underlying assets\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param poolAmountIn - amount of pool tokens to redeem\\n     * @param minAmountsOut - minimum amount of asset tokens to receive\\n     * @return actualAmountsOut - calculated amounts of each token to pull\\n     */\\n    function exitPool(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        uint poolAmountIn,\\n        uint[] calldata minAmountsOut\\n    ) external view returns (uint[] memory actualAmountsOut) {\\n        address[] memory tokens = bPool.getCurrentTokens();\\n\\n        require(minAmountsOut.length == tokens.length, \\\"ERR_AMOUNTS_MISMATCH\\\");\\n\\n        uint poolTotal = self.totalSupply();\\n\\n        uint ratio = DesynSafeMath.bdiv(poolAmountIn, DesynSafeMath.badd(poolTotal, 1));\\n\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        actualAmountsOut = new uint[](tokens.length);\\n\\n        // This loop contains external calls\\n        // External calls are to math libraries or the underlying pool, so low risk\\n        for (uint i = 0; i < tokens.length; i++) {\\n            address t = tokens[i];\\n            uint bal = bPool.getBalance(t);\\n            // Subtract 1 to ensure any rounding errors favor the pool\\n            uint tokenAmountOut = DesynSafeMath.bmul(ratio, DesynSafeMath.bsub(bal, 1));\\n\\n            require(tokenAmountOut != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountOut >= minAmountsOut[i], \\\"ERR_LIMIT_OUT\\\");\\n\\n            actualAmountsOut[i] = tokenAmountOut;\\n        }\\n    }\\n\\n    // Internal functions\\n    // Check for zero transfer, and make sure it returns true to returnValue\\n    function verifyTokenComplianceInternal(address token) internal {\\n        bool returnValue = IERC20(token).transfer(msg.sender, 0);\\n        require(returnValue, \\\"ERR_NONCONFORMING_TOKEN\\\");\\n    }\\n\\n    function handleTransferInTokens(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address poolToken,\\n        uint actualAmountIn,\\n        uint _actualIssueFee\\n    ) external returns (uint issueFeeReceived) {\\n        issueFeeReceived = DesynSafeMath.bmul(actualAmountIn, _actualIssueFee);\\n        uint amount = DesynSafeMath.bsub(actualAmountIn, issueFeeReceived);\\n\\n        _pullUnderlying(bPool, poolToken, msg.sender, amount);\\n\\n        if (_actualIssueFee != 0) {\\n            bool xfer = IERC20(poolToken).transferFrom(msg.sender, address(this), issueFeeReceived);\\n            require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n\\n            IERC20(poolToken).safeApprove(self.vaultAddress(), issueFeeReceived);\\n        }\\n    }\\n\\n    function handleClaim(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address[] calldata poolTokens,\\n        uint managerFee,\\n        uint timeElapsed,\\n        uint claimPeriod\\n    ) external returns (uint[] memory) {\\n        uint[] memory tokensAmount = new uint[](poolTokens.length);\\n        \\n        for (uint i = 0; i < poolTokens.length; i++) {\\n            address t = poolTokens[i];\\n            uint tokenBalance = bPool.getBalance(t);\\n            uint tokenAmountOut = tokenBalance.bmul(managerFee).mul(timeElapsed).div(claimPeriod).div(12);    \\n            _pushUnderlying(bPool, t, address(this), tokenAmountOut);\\n            IERC20(t).safeApprove(self.vaultAddress(), tokenAmountOut);\\n            tokensAmount[i] = tokenAmountOut;\\n        }\\n        \\n        return tokensAmount;\\n    }\\n\\n    function handleCollectionCompleted(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address[] calldata poolTokens,\\n        uint issueFee\\n    ) external {\\n        if (issueFee != 0) {\\n            uint[] memory tokensAmount = new uint[](poolTokens.length);\\n\\n            for (uint i = 0; i < poolTokens.length; i++) {\\n                address t = poolTokens[i];\\n                uint currentAmount = bPool.getBalance(t);\\n                uint currentAmountFee = DesynSafeMath.bmul(currentAmount, issueFee);\\n\\n                _pushUnderlying(bPool, t, address(this), currentAmountFee);\\n                tokensAmount[i] = currentAmountFee;\\n                IERC20(t).safeApprove(self.vaultAddress(), currentAmountFee);\\n            }\\n\\n            IVault(self.vaultAddress()).depositIssueRedeemPToken(poolTokens, tokensAmount, tokensAmount, false);\\n        }\\n    }\\n\\n    function WhitelistHandle(\\n        bool bool1,\\n        bool bool2,\\n        address adr\\n    ) external pure {\\n        require(bool1, \\\"ERR_CANNOT_WHITELIST_LPS\\\");\\n        require(bool2, \\\"ERR_LP_NOT_WHITELISTED\\\");\\n        require(adr != address(0), \\\"ERR_INVALID_ADDRESS\\\");\\n    }\\n\\n    function _pullUnderlying(\\n        IBPool bPool,\\n        address erc20,\\n        address from,\\n        uint amount\\n    ) internal {\\n        uint tokenBalance = bPool.getBalance(erc20);\\n        uint tokenWeight = bPool.getDenormalizedWeight(erc20);\\n\\n        bool xfer = IERC20(erc20).transferFrom(from, address(this), amount);\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n        bPool.rebind(erc20, DesynSafeMath.badd(tokenBalance, amount), tokenWeight);\\n    }\\n\\n    function _pushUnderlying(\\n        IBPool bPool,\\n        address erc20,\\n        address to,\\n        uint amount\\n    ) internal {\\n        uint tokenBalance = bPool.getBalance(erc20);\\n        uint tokenWeight = bPool.getDenormalizedWeight(erc20);\\n        bPool.rebind(erc20, DesynSafeMath.bsub(tokenBalance, amount), tokenWeight);\\n        bool xfer = IERC20(erc20).transfer(to, amount);\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x62bd628970414fbf121773bb89be6651a477ea2e80f51e040cefd3a678e2c42c\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001137380380620011378339810160408190526200003491620000ff565b80516200004990600290602084019062000063565b5050600380546001600160a01b03191633179055620001c2565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620000a657805160ff1916838001178555620000d6565b82800160010185558215620000d6579182015b82811115620000d6578251825591602001919060010190620000b9565b50620000e4929150620000e8565b5090565b5b80821115620000e45760008155600101620000e9565b6000602080838503121562000112578182fd5b82516001600160401b038082111562000129578384fd5b818501915085601f8301126200013d578384fd5b8151818111156200014c578485fd5b604051601f8201601f19168101850183811182821017156200016c578687fd5b604052818152838201850188101562000183578586fd5b8592505b81831015620001a6578383018501518184018601529184019162000187565b81831115620001b757858583830101525b979650505050505050565b610f6580620001d26000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806308463965146100675780638b0e8e67146100855780639daafec71461009a578063b2ebfea5146100af578063dc19e842146100c2578063e9543720146100e2575b600080fd5b61006f6100f5565b60405161007c9190610d22565b60405180910390f35b610098610093366004610789565b610180565b005b6100a2610200565b60405161007c9190610abc565b6100986100bd366004610870565b61020f565b6100d56100d0366004610789565b61028a565b60405161007c9190610d03565b6100a26100f03660046107ab565b6102a8565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156101785780601f1061014d57610100808354040283529160200191610178565b820191906000526020600020905b81548152906001019060200180831161015b57829003601f168201915b505050505081565b6003546001600160a01b031633146101b35760405162461bcd60e51b81526004016101aa90610d87565b60405180910390fd5b600480546001600160a01b0319166001600160a01b0383169081179091556040513391907fbe29361fcb0d6d7a528b06b7e3c978b225c152a431ac559470986926fe26692590600090a350565b6004546001600160a01b031681565b6003546001600160a01b031633146102395760405162461bcd60e51b81526004016101aa90610d87565b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405161026b929190610d0e565b60405180910390a280516102869060029060208401906105dc565b5050565b6001600160a01b031660009081526020819052604090205460ff1690565b6000806102b487610494565b6040519091506001600160a01b0382169033907f8aaa45dbe91f274e1c80489691f3d62dbf595d587fcc6a989fa27696e7c2a23290600090a36001600160a01b03811660008181526020819052604090819020805460ff19166001179055516355b1905560e01b81526355b1905590610335908b908b908b90600401610b24565b600060405180830381600087803b15801561034f57600080fd5b505af1158015610363573d6000803e3d6000fd5b505060048054604051634660c5a560e01b81526001600160a01b039091169350634660c5a592506103989185918a9101610ad0565b600060405180830381600087803b1580156103b257600080fd5b505af11580156103c6573d6000803e3d6000fd5b50506040516392eefe9b60e01b81526001600160a01b03841692506392eefe9b91506103f6903390600401610abc565b600060405180830381600087803b15801561041057600080fd5b505af1158015610424573d6000803e3d6000fd5b5050604051633ef1447960e01b81526001600160a01b0384169250633ef1447991506104569087908790600401610c75565b600060405180830381600087803b15801561047057600080fd5b505af1158015610484573d6000803e3d6000fd5b50929a9950505050505050505050565b6002805460408051602060018416156101000260001901909316849004601f81018490048402820184019092528181526000936060939192909183018282801561051f5780601f106104f45761010080835404028352916020019161051f565b820191906000526020600020905b81548152906001019060200180831161050257829003601f168201915b505050505090506060818480600001906105399190610dae565b6105466020880188610dae565b6040516020016105599493929190610d55565b60408051601f19818403018152908290526105779291602001610a84565b60408051601f1981840301815290829052600180548082019091559092506000916105a59190602001610ab3565b604051602081830303815290604052805190602001209050808251602084016000f59350833b6105d457600080fd5b505050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061061d57805160ff191683800117855561064a565b8280016001018555821561064a579182015b8281111561064a57825182559160200191906001019061062f565b5061065692915061065a565b5090565b5b80821115610656576000815560010161065b565b80356001600160a01b038116811461068657600080fd5b92915050565b600082601f83011261069c578081fd5b81356106af6106aa82610e1f565b610df9565b8181529150602080830190848101818402860182018710156106d057600080fd5b60005b848110156106f7576106e5888361066f565b845292820192908201906001016106d3565b505050505092915050565b600082601f830112610712578081fd5b81356107206106aa82610e1f565b81815291506020808301908481018184028601820187101561074157600080fd5b60005b848110156106f757813584529282019290820190600101610744565b60006104008284031215610772578081fd5b50919050565b600060c08284031215610772578081fd5b60006020828403121561079a578081fd5b6107a4838361066f565b9392505050565b60008060008060008061054087890312156107c4578182fd5b86356107cf81610f09565b955060208701356001600160401b03808211156107ea578384fd5b90880190610160828b0312156107fe578384fd5b81965061080e8a60408b01610778565b955061081e8a6101008b01610760565b9450610500890135915080821115610834578384fd5b6108408a838b0161068c565b9350610520890135915080821115610856578283fd5b5061086389828a01610702565b9150509295509295509295565b60006020808385031215610882578182fd5b82356001600160401b0380821115610898578384fd5b818501915085601f8301126108ab578384fd5b8135818111156108b9578485fd5b6108cb601f8201601f19168501610df9565b915080825286848285010111156108e0578485fd5b80848401858401378101909201929092529392505050565b815260200190565b6001600160a01b03169052565b60008284526020808501945082825b8581101561094a578183016001600160a01b03610939828561066f565b16885296830196915060010161091c565b509495945050505050565b81835260006001600160fb1b0383111561096d578081fd5b6020830280836020870137939093016020019283525090919050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b600281106109bd57fe5b9052565b80356109cc81610f21565b1515825260208101356109de81610f21565b1515602083015260408101356109f381610f21565b151560408301526060810135610a0881610f21565b151560608301526080810135610a1d81610f21565b1515608083015260a0810135610a3281610f21565b80151560a0840152505050565b610a498282610a75565b610a596040830160408301610a75565b610a696080830160808301610a75565b61028660c0830160c083015b80358252602090810135910152565b60008351610a96818460208801610ed9565b835190830190610aaa818360208801610ed9565b01949350505050565b90815260200190565b6001600160a01b0391909116815260200190565b6001600160a01b03831681526104208101610aee6020830184610a3f565b610b0061012083016101008501610a3f565b610b1261022083016102008501610a3f565b6107a461032083016103008501610a3f565b6001600160a01b038416815261010060208201819052600090610b478580610e95565b6101608084870152610b5e61026087018385610989565b9250610b6d6020890189610e95565b925060ff196101208189870301818a0152610b89868685610989565b9550610b9860408c018c610e3e565b95509250610140828a880301818b0152610bb387878661090d565b9650610bc260608d018d610e3e565b96509350828a880301858b0152610bda878786610955565b9650610be960808d018d610e3e565b96509450828a8803016101808b0152610c03878787610955565b965060a08c01356101a08b015260c08c01356101c08b015260e08c01356101e08b0152878c01356102008b0152818c01356102208b0152610c46818d018d610e85565b9750505050505050610c5c6102408501836109b3565b9150610c6d905060408301846109c1565b949350505050565b604080825283519082018190526000906020906060840190828701845b82811015610cb557610ca5848351610900565b9284019290840190600101610c92565b50505083810382850152808551610ccc8184610ab3565b91508387019250845b81811015610cf657610ce88385516108f8565b938501939250600101610cd5565b5090979650505050505050565b901515815260200190565b600060208252610c6d602083018486610989565b6000602082528251806020840152610d41816040850160208701610ed9565b601f01601f19169190910160400192915050565b600060408252610d69604083018688610989565b8281036020840152610d7c818587610989565b979650505050505050565b6020808252600d908201526c4552525f4e4f545f424c41425360981b604082015260600190565b6000808335601e19843603018112610dc4578283fd5b8301803591506001600160401b03821115610ddd578283fd5b602001915036819003821315610df257600080fd5b9250929050565b6040518181016001600160401b0381118282101715610e1757600080fd5b604052919050565b60006001600160401b03821115610e34578081fd5b5060209081020190565b6000808335601e19843603018112610e54578283fd5b83016020810192503590506001600160401b03811115610e7357600080fd5b602081023603831315610df257600080fd5b60008235600281106107a4578182fd5b6000808335601e19843603018112610eab578283fd5b83016020810192503590506001600160401b03811115610eca57600080fd5b803603831315610df257600080fd5b60005b83811015610ef4578181015183820152602001610edc565b83811115610f03576000848401525b50505050565b6001600160a01b0381168114610f1e57600080fd5b50565b8015158114610f1e57600080fdfea2646970667358221220c71a04d2ad4f44a8168f2f7b550895d93bdeeeea1e339a2885a3cabe5b3c03c164736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c806308463965146100675780638b0e8e67146100855780639daafec71461009a578063b2ebfea5146100af578063dc19e842146100c2578063e9543720146100e2575b600080fd5b61006f6100f5565b60405161007c9190610d22565b60405180910390f35b610098610093366004610789565b610180565b005b6100a2610200565b60405161007c9190610abc565b6100986100bd366004610870565b61020f565b6100d56100d0366004610789565b61028a565b60405161007c9190610d03565b6100a26100f03660046107ab565b6102a8565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156101785780601f1061014d57610100808354040283529160200191610178565b820191906000526020600020905b81548152906001019060200180831161015b57829003601f168201915b505050505081565b6003546001600160a01b031633146101b35760405162461bcd60e51b81526004016101aa90610d87565b60405180910390fd5b600480546001600160a01b0319166001600160a01b0383169081179091556040513391907fbe29361fcb0d6d7a528b06b7e3c978b225c152a431ac559470986926fe26692590600090a350565b6004546001600160a01b031681565b6003546001600160a01b031633146102395760405162461bcd60e51b81526004016101aa90610d87565b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405161026b929190610d0e565b60405180910390a280516102869060029060208401906105dc565b5050565b6001600160a01b031660009081526020819052604090205460ff1690565b6000806102b487610494565b6040519091506001600160a01b0382169033907f8aaa45dbe91f274e1c80489691f3d62dbf595d587fcc6a989fa27696e7c2a23290600090a36001600160a01b03811660008181526020819052604090819020805460ff19166001179055516355b1905560e01b81526355b1905590610335908b908b908b90600401610b24565b600060405180830381600087803b15801561034f57600080fd5b505af1158015610363573d6000803e3d6000fd5b505060048054604051634660c5a560e01b81526001600160a01b039091169350634660c5a592506103989185918a9101610ad0565b600060405180830381600087803b1580156103b257600080fd5b505af11580156103c6573d6000803e3d6000fd5b50506040516392eefe9b60e01b81526001600160a01b03841692506392eefe9b91506103f6903390600401610abc565b600060405180830381600087803b15801561041057600080fd5b505af1158015610424573d6000803e3d6000fd5b5050604051633ef1447960e01b81526001600160a01b0384169250633ef1447991506104569087908790600401610c75565b600060405180830381600087803b15801561047057600080fd5b505af1158015610484573d6000803e3d6000fd5b50929a9950505050505050505050565b6002805460408051602060018416156101000260001901909316849004601f81018490048402820184019092528181526000936060939192909183018282801561051f5780601f106104f45761010080835404028352916020019161051f565b820191906000526020600020905b81548152906001019060200180831161050257829003601f168201915b505050505090506060818480600001906105399190610dae565b6105466020880188610dae565b6040516020016105599493929190610d55565b60408051601f19818403018152908290526105779291602001610a84565b60408051601f1981840301815290829052600180548082019091559092506000916105a59190602001610ab3565b604051602081830303815290604052805190602001209050808251602084016000f59350833b6105d457600080fd5b505050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061061d57805160ff191683800117855561064a565b8280016001018555821561064a579182015b8281111561064a57825182559160200191906001019061062f565b5061065692915061065a565b5090565b5b80821115610656576000815560010161065b565b80356001600160a01b038116811461068657600080fd5b92915050565b600082601f83011261069c578081fd5b81356106af6106aa82610e1f565b610df9565b8181529150602080830190848101818402860182018710156106d057600080fd5b60005b848110156106f7576106e5888361066f565b845292820192908201906001016106d3565b505050505092915050565b600082601f830112610712578081fd5b81356107206106aa82610e1f565b81815291506020808301908481018184028601820187101561074157600080fd5b60005b848110156106f757813584529282019290820190600101610744565b60006104008284031215610772578081fd5b50919050565b600060c08284031215610772578081fd5b60006020828403121561079a578081fd5b6107a4838361066f565b9392505050565b60008060008060008061054087890312156107c4578182fd5b86356107cf81610f09565b955060208701356001600160401b03808211156107ea578384fd5b90880190610160828b0312156107fe578384fd5b81965061080e8a60408b01610778565b955061081e8a6101008b01610760565b9450610500890135915080821115610834578384fd5b6108408a838b0161068c565b9350610520890135915080821115610856578283fd5b5061086389828a01610702565b9150509295509295509295565b60006020808385031215610882578182fd5b82356001600160401b0380821115610898578384fd5b818501915085601f8301126108ab578384fd5b8135818111156108b9578485fd5b6108cb601f8201601f19168501610df9565b915080825286848285010111156108e0578485fd5b80848401858401378101909201929092529392505050565b815260200190565b6001600160a01b03169052565b60008284526020808501945082825b8581101561094a578183016001600160a01b03610939828561066f565b16885296830196915060010161091c565b509495945050505050565b81835260006001600160fb1b0383111561096d578081fd5b6020830280836020870137939093016020019283525090919050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b600281106109bd57fe5b9052565b80356109cc81610f21565b1515825260208101356109de81610f21565b1515602083015260408101356109f381610f21565b151560408301526060810135610a0881610f21565b151560608301526080810135610a1d81610f21565b1515608083015260a0810135610a3281610f21565b80151560a0840152505050565b610a498282610a75565b610a596040830160408301610a75565b610a696080830160808301610a75565b61028660c0830160c083015b80358252602090810135910152565b60008351610a96818460208801610ed9565b835190830190610aaa818360208801610ed9565b01949350505050565b90815260200190565b6001600160a01b0391909116815260200190565b6001600160a01b03831681526104208101610aee6020830184610a3f565b610b0061012083016101008501610a3f565b610b1261022083016102008501610a3f565b6107a461032083016103008501610a3f565b6001600160a01b038416815261010060208201819052600090610b478580610e95565b6101608084870152610b5e61026087018385610989565b9250610b6d6020890189610e95565b925060ff196101208189870301818a0152610b89868685610989565b9550610b9860408c018c610e3e565b95509250610140828a880301818b0152610bb387878661090d565b9650610bc260608d018d610e3e565b96509350828a880301858b0152610bda878786610955565b9650610be960808d018d610e3e565b96509450828a8803016101808b0152610c03878787610955565b965060a08c01356101a08b015260c08c01356101c08b015260e08c01356101e08b0152878c01356102008b0152818c01356102208b0152610c46818d018d610e85565b9750505050505050610c5c6102408501836109b3565b9150610c6d905060408301846109c1565b949350505050565b604080825283519082018190526000906020906060840190828701845b82811015610cb557610ca5848351610900565b9284019290840190600101610c92565b50505083810382850152808551610ccc8184610ab3565b91508387019250845b81811015610cf657610ce88385516108f8565b938501939250600101610cd5565b5090979650505050505050565b901515815260200190565b600060208252610c6d602083018486610989565b6000602082528251806020840152610d41816040850160208701610ed9565b601f01601f19169190910160400192915050565b600060408252610d69604083018688610989565b8281036020840152610d7c818587610989565b979650505050505050565b6020808252600d908201526c4552525f4e4f545f424c41425360981b604082015260600190565b6000808335601e19843603018112610dc4578283fd5b8301803591506001600160401b03821115610ddd578283fd5b602001915036819003821315610df257600080fd5b9250929050565b6040518181016001600160401b0381118282101715610e1757600080fd5b604052919050565b60006001600160401b03821115610e34578081fd5b5060209081020190565b6000808335601e19843603018112610e54578283fd5b83016020810192503590506001600160401b03811115610e7357600080fd5b602081023603831315610df257600080fd5b60008235600281106107a4578182fd5b6000808335601e19843603018112610eab578283fd5b83016020810192503590506001600160401b03811115610eca57600080fd5b803603831315610df257600080fd5b60005b83811015610ef4578181015183820152602001610edc565b83811115610f03576000848401525b50505050565b6001600160a01b0381168114610f1e57600080fd5b50565b8015158114610f1e57600080fdfea2646970667358221220c71a04d2ad4f44a8168f2f7b550895d93bdeeeea1e339a2885a3cabe5b3c03c164736f6c634300060c0033",
  "libraries": {
    "DesynSafeMath": "0x4E9FA6fE9C793CC0864AB331b2c13EEAeAcd4679",
    "RightsManager": "0x11D61d0855aCfB43b3C9275b70403EcCC7212536",
    "SmartPoolManager": "0x0314725E3312e6453f745467572283E617881A89"
  },
  "devdoc": {
    "author": "Desyn Labs",
    "details": "Rights are held in a corresponding struct in ConfigurableRightsPool      Index values are as follows:      0: canPauseSwapping - can setPublicSwap back to false after turning it on                            by default, it is off on initialization and can only be turned on      1: canChangeSwapFee - can setSwapFee after initialization (by default, it is fixed at create time)      2: canChangeWeights - can bind new token weights (allowed by default in base pool)      3: canAddRemoveTokens - can bind/unbind tokens (allowed by default in base pool)      4: canWhitelistLPs - if set, only whitelisted addresses can join pools                           (enables private pools with more than one LP)      5: canChangeCap - can change the BSP cap (max # of pool tokens)",
    "kind": "dev",
    "methods": {
      "isCrp(address)": {
        "params": {
          "addr": "- address to check"
        },
        "returns": {
          "_0": "boolean indicating whether it is a CRP"
        }
      },
      "newCrp(address,(string,string,address[],uint256[],uint256[],uint256,uint256,uint256,uint256,uint256,uint8),(bool,bool,bool,bool,bool,bool),(((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256)),((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256)),((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256)),((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256))),address[],uint256[])": {
        "details": "emits a LogNewCRP event",
        "params": {
          "factoryAddress": "- the BFactory instance used to create the underlying pool",
          "poolParams": "- struct containing the names, tokens, weights, balances, and swap fee",
          "rights": "- struct of permissions, configuring this CRP instance (see above for definitions)"
        }
      }
    },
    "title": "Configurable Rights Pool Factory - create parameterized smart pools",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "isCrp(address)": {
        "notice": "Check to see if a given address is a CRP"
      },
      "newCrp(address,(string,string,address[],uint256[],uint256[],uint256,uint256,uint256,uint256,uint256,uint8),(bool,bool,bool,bool,bool,bool),(((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256)),((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256)),((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256)),((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256))),address[],uint256[])": {
        "notice": "Create a new CRP"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8039,
        "contract": "contracts/deploy/CRPFactory.sol:CRPFactory",
        "label": "_isCrp",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 8059,
        "contract": "contracts/deploy/CRPFactory.sol:CRPFactory",
        "label": "counters",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 8061,
        "contract": "contracts/deploy/CRPFactory.sol:CRPFactory",
        "label": "bytecodes",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes_storage"
      },
      {
        "astId": 8063,
        "contract": "contracts/deploy/CRPFactory.sol:CRPFactory",
        "label": "_blabs",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 8065,
        "contract": "contracts/deploy/CRPFactory.sol:CRPFactory",
        "label": "userVault",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}