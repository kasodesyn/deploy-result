{
  "address": "0xf2a0A4fCF770CaaDCcD786cE3C4F9c1FDE637487",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "consult",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price0Average",
      "outputs": [
        {
          "internalType": "uint224",
          "name": "_x",
          "type": "uint224"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price1Average",
      "outputs": [
        {
          "internalType": "uint224",
          "name": "_x",
          "type": "uint224"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "setNewTokenInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setPERIOD",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenInfoList",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Pair",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price0CumulativeLast",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price1CumulativeLast",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "blockTimestampLast",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "uint224",
              "name": "_x",
              "type": "uint224"
            }
          ],
          "internalType": "struct FixedPoint.uq112x112",
          "name": "price0Average",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint224",
              "name": "_x",
              "type": "uint224"
            }
          ],
          "internalType": "struct FixedPoint.uq112x112",
          "name": "price1Average",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "update",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x15d51cf21bcdda9cba2c406fed2a873d38598aec92831143b0c12b65be80cfc9",
  "receipt": {
    "to": null,
    "from": "0x595b85b4A418e3B8df897D02F5BD49167D00862F",
    "contractAddress": "0xf2a0A4fCF770CaaDCcD786cE3C4F9c1FDE637487",
    "transactionIndex": 37,
    "gasUsed": "1078487",
    "logsBloom": "0x
    "blockHash": "0x23ad3831abee8d8c6dce45b2dd5a96e6f895b7a72d8bbf04d9027f261ac53e13",
    "transactionHash": "0x15d51cf21bcdda9cba2c406fed2a873d38598aec92831143b0c12b65be80cfc9",
    "logs": [],
    "blockNumber": 7836340,
    "cumulativeGasUsed": "6255299",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "19336c6575a9c09dfa358ffd71432fe1",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"consult\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price0Average\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"_x\",\"type\":\"uint224\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price1Average\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"_x\",\"type\":\"uint224\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"setNewTokenInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setPERIOD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenInfoList\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price0CumulativeLast\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price1CumulativeLast\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"blockTimestampLast\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint224\",\"name\":\"_x\",\"type\":\"uint224\"}],\"internalType\":\"struct FixedPoint.uq112x112\",\"name\":\"price0Average\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint224\",\"name\":\"_x\",\"type\":\"uint224\"}],\"internalType\":\"struct FixedPoint.uq112x112\",\"name\":\"price1Average\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/deploy/Oracle.sol\":\"Oracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"contracts/deploy/Oracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n}\\npragma solidity 0.6.12;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function balanceOf(address owner) external view returns (uint);\\n\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n\\n    function transfer(address to, uint value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint value,\\n        uint deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(address indexed sender, uint amount0In, uint amount1In, uint amount0Out, uint amount1Out, address indexed to);\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint);\\n\\n    function price1CumulativeLast() external view returns (uint);\\n\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n\\n    function swap(\\n        uint amount0Out,\\n        uint amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\\npragma solidity 0.6.12;\\n\\nlibrary Babylonian {\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n        // else z = 0\\n    }\\n}\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint a, uint b) internal pure returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint a, uint b) internal pure returns (uint) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint a,\\n        uint b,\\n        string memory errorMessage\\n    ) internal pure returns (uint) {\\n        require(b <= a, errorMessage);\\n        uint c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint a, uint b) internal pure returns (uint) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint a, uint b) internal pure returns (uint) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint a,\\n        uint b,\\n        string memory errorMessage\\n    ) internal pure returns (uint) {\\n        require(b > 0, errorMessage);\\n        uint c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint a, uint b) internal pure returns (uint) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint a,\\n        uint b,\\n        string memory errorMessage\\n    ) internal pure returns (uint) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\npragma solidity 0.6.12;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\nlibrary FixedPoint {\\n    // range: [0, 2**112 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq112x112 {\\n        uint224 _x;\\n    }\\n\\n    // range: [0, 2**144 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq144x112 {\\n        uint _x;\\n    }\\n\\n    uint8 private constant RESOLUTION = 112;\\n    uint private constant Q112 = uint(1) << RESOLUTION;\\n    uint private constant Q224 = Q112 << RESOLUTION;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 x) internal pure returns (uq112x112 memory) {\\n        return uq112x112(uint224(x) << RESOLUTION);\\n    }\\n\\n    // encodes a uint144 as a UQ144x112\\n    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\\n        return uq144x112(uint(x) << RESOLUTION);\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function div(uq112x112 memory self, uint112 x) internal pure returns (uq112x112 memory) {\\n        require(x != 0, \\\"FixedPoint: DIV_BY_ZERO\\\");\\n        return uq112x112(self._x / uint224(x));\\n    }\\n\\n    // multiply a UQ112x112 by a uint, returning a UQ144x112\\n    // reverts on overflow\\n    function mul(uq112x112 memory self, uint y) internal pure returns (uq144x112 memory) {\\n        uint z;\\n        require(y == 0 || (z = uint(self._x) * y) / y == uint(self._x), \\\"FixedPoint: MULTIPLICATION_OVERFLOW\\\");\\n        return uq144x112(z);\\n    }\\n\\n    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\\n    // equivalent to encode(numerator).div(denominator)\\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\\n        require(denominator > 0, \\\"FixedPoint: DIV_BY_ZERO\\\");\\n        return uq112x112((uint224(numerator) << RESOLUTION) / denominator);\\n    }\\n\\n    // decode a UQ112x112 into a uint112 by truncating after the radix point\\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\\n        return uint112(self._x >> RESOLUTION);\\n    }\\n\\n    // decode a UQ144x112 into a uint144 by truncating after the radix point\\n    function decode144(uq144x112 memory self) internal pure returns (uint144) {\\n        return uint144(self._x >> RESOLUTION);\\n    }\\n\\n    // take the reciprocal of a UQ112x112\\n    function reciprocal(uq112x112 memory self) internal pure returns (uq112x112 memory) {\\n        require(self._x != 0, \\\"FixedPoint: ZERO_RECIPROCAL\\\");\\n        return uq112x112(uint224(Q224 / self._x));\\n    }\\n\\n    // square root of a UQ112x112\\n    function sqrt(uq112x112 memory self) internal pure returns (uq112x112 memory) {\\n        return uq112x112(uint224(Babylonian.sqrt(uint(self._x)) << 56));\\n    }\\n}\\npragma solidity >=0.5.0;\\n\\n// library with helper methods for oracles that are concerned with computing average prices\\nlibrary UniswapV2OracleLibrary {\\n    using FixedPoint for *;\\n\\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\\n    function currentBlockTimestamp() internal view returns (uint32) {\\n        return uint32(block.timestamp % 2**32);\\n    }\\n\\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\n    function currentCumulativePrices(address pair)\\n        internal\\n        view\\n        returns (\\n            uint price0Cumulative,\\n            uint price1Cumulative,\\n            uint32 blockTimestamp\\n        )\\n    {\\n        blockTimestamp = currentBlockTimestamp();\\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\\n\\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\\n        if (blockTimestampLast != blockTimestamp) {\\n            // subtraction overflow is desired\\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\n            // addition overflow is desired\\n            // counterfactual\\n            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\\n            // counterfactual\\n            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\\n        }\\n    }\\n}\\n\\npragma solidity 0.6.12;\\n\\nlibrary UniswapV2Library {\\n    using SafeMath for uint;\\n\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, \\\"UniswapV2Library: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"UniswapV2Library: ZERO_ADDRESS\\\");\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(\\n            uint(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex\\\"ff\\\",\\n                        factory,\\n                        keccak256(abi.encodePacked(token0, token1)),\\n                        hex\\\"96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f\\\" // init code hash\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal view returns (uint reserveA, uint reserveB) {\\n        (address token0, ) = sortTokens(tokenA, tokenB);\\n        (uint reserve0, uint reserve1, ) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(\\n        uint amountA,\\n        uint reserveA,\\n        uint reserveB\\n    ) internal pure returns (uint amountB) {\\n        require(amountA > 0, \\\"UniswapV2Library: INSUFFICIENT_AMOUNT\\\");\\n        require(reserveA > 0 && reserveB > 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n        amountB = amountA.mul(reserveB) / reserveA;\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(\\n        uint amountIn,\\n        uint reserveIn,\\n        uint reserveOut\\n    ) internal pure returns (uint amountOut) {\\n        require(amountIn > 0, \\\"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n        uint amountInWithFee = amountIn.mul(997);\\n        uint numerator = amountInWithFee.mul(reserveOut);\\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(\\n        uint amountOut,\\n        uint reserveIn,\\n        uint reserveOut\\n    ) internal pure returns (uint amountIn) {\\n        require(amountOut > 0, \\\"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\\n        uint denominator = reserveOut.sub(amountOut).mul(997);\\n        amountIn = (numerator / denominator).add(1);\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(\\n        address factory,\\n        uint amountIn,\\n        address[] memory path\\n    ) internal view returns (uint[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint i; i < path.length - 1; i++) {\\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function getAmountsIn(\\n        address factory,\\n        uint amountOut,\\n        address[] memory path\\n    ) internal view returns (uint[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint i = path.length - 1; i > 0; i--) {\\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n}\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n// fixed window oracle that recomputes the average price for the entire period once every period\\n// note that the price average is only guaranteed to be over at least 1 period, but may be over a longer period\\ncontract Oracle {\\n    using FixedPoint for *;\\n    address dev_address;\\n    uint public PERIOD = 60 seconds;\\n\\n    struct tokenInfo {\\n        IUniswapV2Pair pair;\\n        address token0;\\n        address token1;\\n        uint price0CumulativeLast;\\n        uint price1CumulativeLast;\\n        uint32 blockTimestampLast;\\n        FixedPoint.uq112x112 price0Average;\\n        FixedPoint.uq112x112 price1Average;\\n    }\\n    mapping(address => tokenInfo) public tokenInfoList;\\n    FixedPoint.uq112x112 public price0Average;\\n    FixedPoint.uq112x112 public price1Average;\\n    address public factory = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\\n\\n    constructor() public {\\n        dev_address = msg.sender;\\n    }\\n\\n    function setNewTokenInfo(address tokenA, address tokenB) public onlyOwner {\\n        IUniswapV2Pair _pair = IUniswapV2Pair(UniswapV2Library.pairFor(factory, tokenA, tokenB));\\n        //find tokenA price\\n        tokenInfo storage info = tokenInfoList[tokenA];\\n        info.pair = _pair;\\n        info.token0 = _pair.token0();\\n        info.token1 = _pair.token1();\\n        info.price0CumulativeLast = _pair.price0CumulativeLast();\\n        info.price1CumulativeLast = _pair.price1CumulativeLast();\\n        uint112 reserve0;\\n        uint112 reserve1;\\n        (reserve0, reserve1, info.blockTimestampLast) = _pair.getReserves();\\n        require(reserve0 != 0 && reserve1 != 0, \\\"ExampleOracleSimple: NO_RESERVES\\\");\\n    }\\n\\n    modifier onlyOwner() {\\n        require(dev_address == msg.sender, \\\"Ownable: caller is not the ererer\\\");\\n        _;\\n    }\\n\\n    function update(address token) external {\\n        tokenInfo storage info = tokenInfoList[token];\\n        require(address(info.pair) != address(0), \\\"token is not init success\\\");\\n        (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) = UniswapV2OracleLibrary.currentCumulativePrices(address(info.pair));\\n        uint32 timeElapsed = blockTimestamp - info.blockTimestampLast; // overflow is desired\\n\\n        // ensure that at least one full period has passed since the last update\\n        require(timeElapsed >= PERIOD, \\\"ExampleOracleSimple: PERIOD_NOT_ELAPSED\\\");\\n\\n        // overflow is desired, casting never truncates\\n        // cumulative price is in (uq112x112 price * seconds) units so we simply wrap it after division by time elapsed\\n        info.price0Average = FixedPoint.uq112x112(uint224((price0Cumulative - info.price0CumulativeLast) / timeElapsed));\\n        info.price1Average = FixedPoint.uq112x112(uint224((price1Cumulative - info.price1CumulativeLast) / timeElapsed));\\n\\n        info.price0CumulativeLast = price0Cumulative;\\n        info.price1CumulativeLast = price1Cumulative;\\n        info.blockTimestampLast = blockTimestamp;\\n    }\\n\\n    // note this will always return 0 before update has been called successfully for the first time.\\n    function consult(address token, uint amountIn) external view returns (uint amountOut) {\\n        tokenInfo memory info = tokenInfoList[token];\\n        require(address(info.pair) != address(0), \\\"token is not init success\\\");\\n        if (token == info.token0) {\\n            amountOut = info.price0Average.mul(amountIn).decode144();\\n        } else {\\n            require(token == info.token1, \\\"ExampleOracleSimple: INVALID_TOKEN\\\");\\n            amountOut = info.price1Average.mul(amountIn).decode144();\\n        }\\n    }\\n\\n    function setPERIOD(uint amount) public onlyOwner {\\n        PERIOD = (1 hours) * (amount);\\n    }\\n}\\n\",\"keccak256\":\"0x052a90950f035be7aa417029857ff580160a3e27c942b86c40cd01865f74f0d6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052603c600155600580546001600160a01b031916735c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f17905534801561003b57600080fd5b50600080546001600160a01b031916331790556111538061005d6000396000f3fe608060405234801561001057600080fd5b50600436106100835760003560e01c80630173d100146100885780630a109ec31461009d5780631c1b8772146100cd5780633ddac953146100e05780635e6aaf2c14610100578063a6bb453914610115578063b4d1d7951461011d578063c45a015514610125578063fa4277a81461013a575b600080fd5b61009b610096366004610cea565b61014d565b005b6100b06100ab366004610cab565b6104c3565b6040516100c4989796959493929190610e58565b60405180910390f35b61009b6100db366004610cab565b61053f565b6100f36100ee366004610d22565b610690565b6040516100c491906110e7565b6101086107fc565b6040516100c491906110d3565b61010861080b565b6100f361081a565b61012d610820565b6040516100c49190610e44565b61009b610148366004610da1565b61082f565b6000546001600160a01b031633146101805760405162461bcd60e51b815260040161017790610f2b565b60405180910390fd5b60055460009061019a906001600160a01b03168484610862565b6001600160a01b0384811660009081526002602090815260409182902080546001600160a01b03191693851693841781558251630dfe168160e01b8152925194955093630dfe1681926004808201939291829003018186803b1580156101ff57600080fd5b505afa158015610213573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102379190610cce565b8160010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550816001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561029857600080fd5b505afa1580156102ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d09190610cce565b8160020160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550816001600160a01b0316635909c0d56040518163ffffffff1660e01b815260040160206040518083038186803b15801561033157600080fd5b505afa158015610345573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103699190610db9565b8160030181905550816001600160a01b0316635a3d54936040518163ffffffff1660e01b815260040160206040518083038186803b1580156103aa57600080fd5b505afa1580156103be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e29190610db9565b8160040181905550600080836001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561042657600080fd5b505afa15801561043a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045e9190610d4d565b60058601805463ffffffff191663ffffffff9290921691909117905590925090506001600160701b0382161580159061049f57506001600160701b03811615155b6104bb5760405162461bcd60e51b815260040161017790610ef6565b505050505050565b600260208181526000928352604092839020805460018201549382015460038301546004840154600585015488518088018a5260068701546001600160e01b0390811682528a51988901909a5260079096015490981686526001600160a01b0393841697968416969290931694909363ffffffff909216919088565b6001600160a01b03808216600090815260026020526040902080549091166105795760405162461bcd60e51b815260040161017790611038565b805460009081908190610594906001600160a01b03166108d2565b6005870154600154939650919450925063ffffffff90811683039190821610156105d05760405162461bcd60e51b815260040161017790610fae565b60405180602001604052808263ffffffff1687600301548703816105f057fe5b046001600160e01b0390811690915290516006870180546001600160e01b0319169190921617905560408051602081019091526004860154819063ffffffff84169086038161063b57fe5b046001600160e01b0390811690915290516007870180546001600160e01b0319169190921617905550600384019290925560048301556005909101805463ffffffff191663ffffffff90921691909117905550565b600061069a610c15565b506001600160a01b038084166000908152600260208181526040928390208351610100810185528154861681526001820154861681840152928101548516838501526003810154606084015260048101546080840152600581015463ffffffff1660a08401528351808301855260068201546001600160e01b03908116825260c0850191909152845192830190945260070154909216825260e0810191909152805190911661075b5760405162461bcd60e51b815260040161017790611038565b80602001516001600160a01b0316846001600160a01b031614156107a15760c08101516107919061078c9085610aa7565b610b06565b6001600160901b031691506107f5565b80604001516001600160a01b0316846001600160a01b0316146107d65760405162461bcd60e51b815260040161017790610f6c565b60e08101516107e99061078c9085610aa7565b6001600160901b031691505b5092915050565b6004546001600160e01b031681565b6003546001600160e01b031681565b60015481565b6005546001600160a01b031681565b6000546001600160a01b031633146108595760405162461bcd60e51b815260040161017790610f2b565b610e1002600155565b60008060006108718585610b0d565b91509150858282604051602001610889929190610dd1565b604051602081830303815290604052805190602001206040516020016108b0929190610df3565b60408051601f1981840301815291905280516020909101209695505050505050565b60008060006108df610b97565b9050836001600160a01b0316635909c0d56040518163ffffffff1660e01b815260040160206040518083038186803b15801561091a57600080fd5b505afa15801561092e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109529190610db9565b9250836001600160a01b0316635a3d54936040518163ffffffff1660e01b815260040160206040518083038186803b15801561098d57600080fd5b505afa1580156109a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c59190610db9565b91506000806000866001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015610a0557600080fd5b505afa158015610a19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3d9190610d4d565b9250925092508363ffffffff168163ffffffff1614610a9d5780840363ffffffff8116610a6a8486610ba1565b516001600160e01b031602969096019563ffffffff8116610a8b8585610ba1565b516001600160e01b0316029590950194505b5050509193909250565b610aaf610c86565b6000821580610ad557505082516001600160e01b031682810290838281610ad257fe5b04145b610af15760405162461bcd60e51b815260040161017790610ff5565b60408051602081019091529081529392505050565b5160701c90565b600080826001600160a01b0316846001600160a01b03161415610b425760405162461bcd60e51b815260040161017790610eb1565b826001600160a01b0316846001600160a01b031610610b62578284610b65565b83835b90925090506001600160a01b038216610b905760405162461bcd60e51b81526004016101779061106b565b9250929050565b63ffffffff421690565b610ba9610c99565b6000826001600160701b031611610bd25760405162461bcd60e51b8152600401610177906110a2565b6040805160208101909152806001600160701b038416600160701b600160e01b03607087901b1681610c0057fe5b046001600160e01b0316815250905092915050565b60405180610100016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001600063ffffffff168152602001610c74610c99565b8152602001610c81610c99565b905290565b6040518060200160405280600081525090565b60408051602081019091526000815290565b600060208284031215610cbc578081fd5b8135610cc7816110f0565b9392505050565b600060208284031215610cdf578081fd5b8151610cc7816110f0565b60008060408385031215610cfc578081fd5b8235610d07816110f0565b91506020830135610d17816110f0565b809150509250929050565b60008060408385031215610d34578182fd5b8235610d3f816110f0565b946020939093013593505050565b600080600060608486031215610d61578081fd5b8351610d6c81611108565b6020850151909350610d7d81611108565b604085015190925063ffffffff81168114610d96578182fd5b809150509250925092565b600060208284031215610db2578081fd5b5035919050565b600060208284031215610dca578081fd5b5051919050565b6001600160601b0319606093841b811682529190921b16601482015260280190565b6001600160f81b0319815260609290921b6001600160601b031916600183015260158201527f96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f603582015260550190565b6001600160a01b0391909116815260200190565b6001600160a01b03988916815296881660208801529490961660408601526060850192909252608084015263ffffffff1660a083015291516001600160e01b0390811660c0830152915190911660e08201526101000190565b60208082526025908201527f556e697377617056324c6962726172793a204944454e544943414c5f41444452604082015264455353455360d81b606082015260800190565b6020808252818101527f4578616d706c654f7261636c6553696d706c653a204e4f5f5245534552564553604082015260600190565b60208082526021908201527f4f776e61626c653a2063616c6c6572206973206e6f74207468652065726572656040820152603960f91b606082015260800190565b60208082526022908201527f4578616d706c654f7261636c6553696d706c653a20494e56414c49445f544f4b60408201526122a760f11b606082015260800190565b60208082526027908201527f4578616d706c654f7261636c6553696d706c653a20504552494f445f4e4f545f6040820152661153105414d15160ca1b606082015260800190565b60208082526023908201527f4669786564506f696e743a204d554c5449504c49434154494f4e5f4f564552466040820152624c4f5760e81b606082015260800190565b602080825260199082015278746f6b656e206973206e6f7420696e6974207375636365737360381b604082015260600190565b6020808252601e908201527f556e697377617056324c6962726172793a205a45524f5f414444524553530000604082015260600190565b6020808252601790820152764669786564506f696e743a204449565f42595f5a45524f60481b604082015260600190565b6001600160e01b0391909116815260200190565b90815260200190565b6001600160a01b038116811461110557600080fd5b50565b6001600160701b038116811461110557600080fdfea264697066735822122067743cd71d3cb5d75457811acaaa560eb08381b0117f14cfaeff59a58348bdd564736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100835760003560e01c80630173d100146100885780630a109ec31461009d5780631c1b8772146100cd5780633ddac953146100e05780635e6aaf2c14610100578063a6bb453914610115578063b4d1d7951461011d578063c45a015514610125578063fa4277a81461013a575b600080fd5b61009b610096366004610cea565b61014d565b005b6100b06100ab366004610cab565b6104c3565b6040516100c4989796959493929190610e58565b60405180910390f35b61009b6100db366004610cab565b61053f565b6100f36100ee366004610d22565b610690565b6040516100c491906110e7565b6101086107fc565b6040516100c491906110d3565b61010861080b565b6100f361081a565b61012d610820565b6040516100c49190610e44565b61009b610148366004610da1565b61082f565b6000546001600160a01b031633146101805760405162461bcd60e51b815260040161017790610f2b565b60405180910390fd5b60055460009061019a906001600160a01b03168484610862565b6001600160a01b0384811660009081526002602090815260409182902080546001600160a01b03191693851693841781558251630dfe168160e01b8152925194955093630dfe1681926004808201939291829003018186803b1580156101ff57600080fd5b505afa158015610213573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102379190610cce565b8160010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550816001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561029857600080fd5b505afa1580156102ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d09190610cce565b8160020160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550816001600160a01b0316635909c0d56040518163ffffffff1660e01b815260040160206040518083038186803b15801561033157600080fd5b505afa158015610345573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103699190610db9565b8160030181905550816001600160a01b0316635a3d54936040518163ffffffff1660e01b815260040160206040518083038186803b1580156103aa57600080fd5b505afa1580156103be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e29190610db9565b8160040181905550600080836001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561042657600080fd5b505afa15801561043a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045e9190610d4d565b60058601805463ffffffff191663ffffffff9290921691909117905590925090506001600160701b0382161580159061049f57506001600160701b03811615155b6104bb5760405162461bcd60e51b815260040161017790610ef6565b505050505050565b600260208181526000928352604092839020805460018201549382015460038301546004840154600585015488518088018a5260068701546001600160e01b0390811682528a51988901909a5260079096015490981686526001600160a01b0393841697968416969290931694909363ffffffff909216919088565b6001600160a01b03808216600090815260026020526040902080549091166105795760405162461bcd60e51b815260040161017790611038565b805460009081908190610594906001600160a01b03166108d2565b6005870154600154939650919450925063ffffffff90811683039190821610156105d05760405162461bcd60e51b815260040161017790610fae565b60405180602001604052808263ffffffff1687600301548703816105f057fe5b046001600160e01b0390811690915290516006870180546001600160e01b0319169190921617905560408051602081019091526004860154819063ffffffff84169086038161063b57fe5b046001600160e01b0390811690915290516007870180546001600160e01b0319169190921617905550600384019290925560048301556005909101805463ffffffff191663ffffffff90921691909117905550565b600061069a610c15565b506001600160a01b038084166000908152600260208181526040928390208351610100810185528154861681526001820154861681840152928101548516838501526003810154606084015260048101546080840152600581015463ffffffff1660a08401528351808301855260068201546001600160e01b03908116825260c0850191909152845192830190945260070154909216825260e0810191909152805190911661075b5760405162461bcd60e51b815260040161017790611038565b80602001516001600160a01b0316846001600160a01b031614156107a15760c08101516107919061078c9085610aa7565b610b06565b6001600160901b031691506107f5565b80604001516001600160a01b0316846001600160a01b0316146107d65760405162461bcd60e51b815260040161017790610f6c565b60e08101516107e99061078c9085610aa7565b6001600160901b031691505b5092915050565b6004546001600160e01b031681565b6003546001600160e01b031681565b60015481565b6005546001600160a01b031681565b6000546001600160a01b031633146108595760405162461bcd60e51b815260040161017790610f2b565b610e1002600155565b60008060006108718585610b0d565b91509150858282604051602001610889929190610dd1565b604051602081830303815290604052805190602001206040516020016108b0929190610df3565b60408051601f1981840301815291905280516020909101209695505050505050565b60008060006108df610b97565b9050836001600160a01b0316635909c0d56040518163ffffffff1660e01b815260040160206040518083038186803b15801561091a57600080fd5b505afa15801561092e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109529190610db9565b9250836001600160a01b0316635a3d54936040518163ffffffff1660e01b815260040160206040518083038186803b15801561098d57600080fd5b505afa1580156109a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c59190610db9565b91506000806000866001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015610a0557600080fd5b505afa158015610a19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3d9190610d4d565b9250925092508363ffffffff168163ffffffff1614610a9d5780840363ffffffff8116610a6a8486610ba1565b516001600160e01b031602969096019563ffffffff8116610a8b8585610ba1565b516001600160e01b0316029590950194505b5050509193909250565b610aaf610c86565b6000821580610ad557505082516001600160e01b031682810290838281610ad257fe5b04145b610af15760405162461bcd60e51b815260040161017790610ff5565b60408051602081019091529081529392505050565b5160701c90565b600080826001600160a01b0316846001600160a01b03161415610b425760405162461bcd60e51b815260040161017790610eb1565b826001600160a01b0316846001600160a01b031610610b62578284610b65565b83835b90925090506001600160a01b038216610b905760405162461bcd60e51b81526004016101779061106b565b9250929050565b63ffffffff421690565b610ba9610c99565b6000826001600160701b031611610bd25760405162461bcd60e51b8152600401610177906110a2565b6040805160208101909152806001600160701b038416600160701b600160e01b03607087901b1681610c0057fe5b046001600160e01b0316815250905092915050565b60405180610100016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001600063ffffffff168152602001610c74610c99565b8152602001610c81610c99565b905290565b6040518060200160405280600081525090565b60408051602081019091526000815290565b600060208284031215610cbc578081fd5b8135610cc7816110f0565b9392505050565b600060208284031215610cdf578081fd5b8151610cc7816110f0565b60008060408385031215610cfc578081fd5b8235610d07816110f0565b91506020830135610d17816110f0565b809150509250929050565b60008060408385031215610d34578182fd5b8235610d3f816110f0565b946020939093013593505050565b600080600060608486031215610d61578081fd5b8351610d6c81611108565b6020850151909350610d7d81611108565b604085015190925063ffffffff81168114610d96578182fd5b809150509250925092565b600060208284031215610db2578081fd5b5035919050565b600060208284031215610dca578081fd5b5051919050565b6001600160601b0319606093841b811682529190921b16601482015260280190565b6001600160f81b0319815260609290921b6001600160601b031916600183015260158201527f96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f603582015260550190565b6001600160a01b0391909116815260200190565b6001600160a01b03988916815296881660208801529490961660408601526060850192909252608084015263ffffffff1660a083015291516001600160e01b0390811660c0830152915190911660e08201526101000190565b60208082526025908201527f556e697377617056324c6962726172793a204944454e544943414c5f41444452604082015264455353455360d81b606082015260800190565b6020808252818101527f4578616d706c654f7261636c6553696d706c653a204e4f5f5245534552564553604082015260600190565b60208082526021908201527f4f776e61626c653a2063616c6c6572206973206e6f74207468652065726572656040820152603960f91b606082015260800190565b60208082526022908201527f4578616d706c654f7261636c6553696d706c653a20494e56414c49445f544f4b60408201526122a760f11b606082015260800190565b60208082526027908201527f4578616d706c654f7261636c6553696d706c653a20504552494f445f4e4f545f6040820152661153105414d15160ca1b606082015260800190565b60208082526023908201527f4669786564506f696e743a204d554c5449504c49434154494f4e5f4f564552466040820152624c4f5760e81b606082015260800190565b602080825260199082015278746f6b656e206973206e6f7420696e6974207375636365737360381b604082015260600190565b6020808252601e908201527f556e697377617056324c6962726172793a205a45524f5f414444524553530000604082015260600190565b6020808252601790820152764669786564506f696e743a204449565f42595f5a45524f60481b604082015260600190565b6001600160e01b0391909116815260200190565b90815260200190565b6001600160a01b038116811461110557600080fd5b50565b6001600160701b038116811461110557600080fdfea264697066735822122067743cd71d3cb5d75457811acaaa560eb08381b0117f14cfaeff59a58348bdd564736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1372,
        "contract": "contracts/deploy/Oracle.sol:Oracle",
        "label": "dev_address",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1375,
        "contract": "contracts/deploy/Oracle.sol:Oracle",
        "label": "PERIOD",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1396,
        "contract": "contracts/deploy/Oracle.sol:Oracle",
        "label": "tokenInfoList",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(tokenInfo)1392_storage)"
      },
      {
        "astId": 1398,
        "contract": "contracts/deploy/Oracle.sol:Oracle",
        "label": "price0Average",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(uq112x112)558_storage"
      },
      {
        "astId": 1400,
        "contract": "contracts/deploy/Oracle.sol:Oracle",
        "label": "price1Average",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(uq112x112)558_storage"
      },
      {
        "astId": 1403,
        "contract": "contracts/deploy/Oracle.sol:Oracle",
        "label": "factory",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Pair)303": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Pair",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(tokenInfo)1392_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Oracle.tokenInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(tokenInfo)1392_storage"
      },
      "t_struct(tokenInfo)1392_storage": {
        "encoding": "inplace",
        "label": "struct Oracle.tokenInfo",
        "members": [
          {
            "astId": 1377,
            "contract": "contracts/deploy/Oracle.sol:Oracle",
            "label": "pair",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IUniswapV2Pair)303"
          },
          {
            "astId": 1379,
            "contract": "contracts/deploy/Oracle.sol:Oracle",
            "label": "token0",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1381,
            "contract": "contracts/deploy/Oracle.sol:Oracle",
            "label": "token1",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1383,
            "contract": "contracts/deploy/Oracle.sol:Oracle",
            "label": "price0CumulativeLast",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1385,
            "contract": "contracts/deploy/Oracle.sol:Oracle",
            "label": "price1CumulativeLast",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1387,
            "contract": "contracts/deploy/Oracle.sol:Oracle",
            "label": "blockTimestampLast",
            "offset": 0,
            "slot": "5",
            "type": "t_uint32"
          },
          {
            "astId": 1389,
            "contract": "contracts/deploy/Oracle.sol:Oracle",
            "label": "price0Average",
            "offset": 0,
            "slot": "6",
            "type": "t_struct(uq112x112)558_storage"
          },
          {
            "astId": 1391,
            "contract": "contracts/deploy/Oracle.sol:Oracle",
            "label": "price1Average",
            "offset": 0,
            "slot": "7",
            "type": "t_struct(uq112x112)558_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(uq112x112)558_storage": {
        "encoding": "inplace",
        "label": "struct FixedPoint.uq112x112",
        "members": [
          {
            "astId": 557,
            "contract": "contracts/deploy/Oracle.sol:Oracle",
            "label": "_x",
            "offset": 0,
            "slot": "0",
            "type": "t_uint224"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint224": {
        "encoding": "inplace",
        "label": "uint224",
        "numberOfBytes": "28"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}