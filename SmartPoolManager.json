{
  "address": "0xF2C828cE47Be2b9974d2D336CE92199eB20A90F8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "bool1",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "bool2",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "adr",
          "type": "address"
        }
      ],
      "name": "WhitelistHandle",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collectPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "upperCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "initialSupply",
          "type": "uint256"
        }
      ],
      "name": "createPoolHandle",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IBPool",
          "name": "bPool",
          "type": "IBPool"
        },
        {
          "internalType": "uint256",
          "name": "initialSupply",
          "type": "uint256"
        }
      ],
      "name": "createPoolInternalHandle",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IConfigurableRightsPool",
          "name": "self",
          "type": "IConfigurableRightsPool"
        },
        {
          "internalType": "contract IBPool",
          "name": "bPool",
          "type": "IBPool"
        },
        {
          "internalType": "uint256",
          "name": "poolAmountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "minAmountsOut",
          "type": "uint256[]"
        }
      ],
      "name": "exitPool",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "actualAmountsOut",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_endEtfAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endFundAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_beginEtfAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_beginFundAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "poolAmountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalEnd",
          "type": "uint256"
        }
      ],
      "name": "exitPoolHandle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "endEtfAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endFundAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "profitRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IConfigurableRightsPool",
          "name": "self",
          "type": "IConfigurableRightsPool"
        },
        {
          "internalType": "bool",
          "name": "bools",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isCompletedCollect",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "closureEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collectEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_etfAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fundAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "poolAmountIn",
          "type": "uint256"
        }
      ],
      "name": "exitPoolHandleB",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "etfAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fundAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "actualPoolAmountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "swapFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "managerFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "issueFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "redeemFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "perfermanceFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenBalancesLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenWeightsLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "constituentTokensLength",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "initBool",
          "type": "bool"
        }
      ],
      "name": "initRequire",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IConfigurableRightsPool",
          "name": "self",
          "type": "IConfigurableRightsPool"
        },
        {
          "internalType": "contract IBPool",
          "name": "bPool",
          "type": "IBPool"
        },
        {
          "internalType": "uint256",
          "name": "poolAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "maxAmountsIn",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "issueFee",
          "type": "uint256"
        }
      ],
      "name": "joinPool",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "actualAmountsIn",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "canWhitelistLPs",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isList",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "bools",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "collectEndTime",
          "type": "uint256"
        }
      ],
      "name": "joinPoolHandle",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x58b8dfcc82bd67cf3851c21f533fa80bb6d5694ff3f5a1224ba5ca6d4cf3500e",
  "receipt": {
    "to": null,
    "from": "0x595b85b4A418e3B8df897D02F5BD49167D00862F",
    "contractAddress": "0xF2C828cE47Be2b9974d2D336CE92199eB20A90F8",
    "transactionIndex": 1,
    "gasUsed": "2768264",
    "logsBloom": "0x
    "blockHash": "0xe3e03bbad36c7ce4c907e87cd9c0a557611744c5d8e749573b238a6d5b7114af",
    "transactionHash": "0x58b8dfcc82bd67cf3851c21f533fa80bb6d5694ff3f5a1224ba5ca6d4cf3500e",
    "logs": [],
    "blockNumber": 8091157,
    "cumulativeGasUsed": "2825746",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ad611d3edcdf2b99f8b7701d90abc71c",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"bool1\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"bool2\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"WhitelistHandle\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"}],\"name\":\"createPoolHandle\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBPool\",\"name\":\"bPool\",\"type\":\"IBPool\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"}],\"name\":\"createPoolInternalHandle\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConfigurableRightsPool\",\"name\":\"self\",\"type\":\"IConfigurableRightsPool\"},{\"internalType\":\"contract IBPool\",\"name\":\"bPool\",\"type\":\"IBPool\"},{\"internalType\":\"uint256\",\"name\":\"poolAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsOut\",\"type\":\"uint256[]\"}],\"name\":\"exitPool\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"actualAmountsOut\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_endEtfAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endFundAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_beginEtfAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_beginFundAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEnd\",\"type\":\"uint256\"}],\"name\":\"exitPoolHandle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"endEtfAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endFundAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profitRate\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConfigurableRightsPool\",\"name\":\"self\",\"type\":\"IConfigurableRightsPool\"},{\"internalType\":\"bool\",\"name\":\"bools\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCompletedCollect\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"closureEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collectEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_etfAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fundAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolAmountIn\",\"type\":\"uint256\"}],\"name\":\"exitPoolHandleB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"etfAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualPoolAmountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"managerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"issueFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perfermanceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalancesLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenWeightsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"constituentTokensLength\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"initBool\",\"type\":\"bool\"}],\"name\":\"initRequire\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConfigurableRightsPool\",\"name\":\"self\",\"type\":\"IConfigurableRightsPool\"},{\"internalType\":\"contract IBPool\",\"name\":\"bPool\",\"type\":\"IBPool\"},{\"internalType\":\"uint256\",\"name\":\"poolAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"maxAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"issueFee\",\"type\":\"uint256\"}],\"name\":\"joinPool\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"actualAmountsIn\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"canWhitelistLPs\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isList\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"bools\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collectEndTime\",\"type\":\"uint256\"}],\"name\":\"joinPoolHandle\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Desyn Labs\",\"kind\":\"dev\",\"methods\":{\"exitPool(IConfigurableRightsPool,IBPool,uint256,uint256[])\":{\"params\":{\"bPool\":\"- Core BPool the CRP is wrapping\",\"minAmountsOut\":\"- minimum amount of asset tokens to receive\",\"poolAmountIn\":\"- amount of pool tokens to redeem\",\"self\":\"- ConfigurableRightsPool instance calling the library\"},\"returns\":{\"actualAmountsOut\":\"- calculated amounts of each token to pull\"}},\"joinPool(IConfigurableRightsPool,IBPool,uint256,uint256[],uint256)\":{\"params\":{\"bPool\":\"- Core BPool the CRP is wrapping\",\"maxAmountsIn\":\"- Max amount of asset tokens to spend\",\"poolAmountOut\":\"- number of pool tokens to receive\",\"self\":\"- ConfigurableRightsPool instance calling the library\"},\"returns\":{\"actualAmountsIn\":\"- calculated values of the tokens to pull in\"}},\"rebalance(IConfigurableRightsPool,IBPool,address,address,uint256,uint256)\":{\"details\":\"Refactored to library to make CRPFactory deployable\",\"params\":{\"bPool\":\"- Core BPool the CRP is wrapping\",\"self\":\"- ConfigurableRightsPool instance calling the library\",\"tokenA\":\"- token to sell\",\"tokenB\":\"- token to buy\"}},\"verifyTokenCompliance(address)\":{\"details\":\"Will revert if invalid\",\"params\":{\"token\":\"- The prospective token to verify\"}},\"verifyTokenCompliance(address[])\":{\"details\":\"Will revert if invalid - overloaded to save space in the main contract\",\"params\":{\"tokens\":\"- The prospective tokens to verify\"}}},\"title\":\"Factor out the weight updates\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"exitPool(IConfigurableRightsPool,IBPool,uint256,uint256[])\":{\"notice\":\"Exit a pool - redeem pool tokens for underlying assets\"},\"joinPool(IConfigurableRightsPool,IBPool,uint256,uint256[],uint256)\":{\"notice\":\"Join a pool\"},\"rebalance(IConfigurableRightsPool,IBPool,address,address,uint256,uint256)\":{\"notice\":\"Update the weight of an existing token\"},\"verifyTokenCompliance(address)\":{\"notice\":\"Non ERC20-conforming tokens are problematic; don't allow them in pools\"},\"verifyTokenCompliance(address[])\":{\"notice\":\"Non ERC20-conforming tokens are problematic; don't allow them in pools\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/SmartPoolManager.sol\":\"SmartPoolManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IBFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\nimport \\\"../libraries/SmartPoolManager.sol\\\";\\n\\ninterface IBPool {\\n    function rebind(\\n        address token,\\n        uint balance,\\n        uint denorm\\n    ) external;\\n\\n    function rebindSmart(\\n        address tokenA,\\n        address tokenB,\\n        uint deltaWeight,\\n        uint deltaBalance,\\n        bool isSoldout,\\n        uint minAmountOut\\n    ) external;\\n\\n    function execute(\\n        address _target,\\n        uint _value,\\n        bytes calldata _data\\n    ) external returns (bytes memory _returnValue);\\n\\n    function bind(\\n        address token,\\n        uint balance,\\n        uint denorm\\n    ) external;\\n\\n    function unbind(address token) external;\\n\\n    function unbindPure(address token) external;\\n\\n    function isBound(address token) external view returns (bool);\\n\\n    function getBalance(address token) external view returns (uint);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function getSwapFee() external view returns (uint);\\n\\n    function isPublicSwap() external view returns (bool);\\n\\n    function getDenormalizedWeight(address token) external view returns (uint);\\n\\n    function getTotalDenormalizedWeight() external view returns (uint);\\n\\n    function EXIT_FEE() external view returns (uint);\\n\\n    function getCurrentTokens() external view returns (address[] memory tokens);\\n\\n    function setController(address owner) external;\\n}\\n\\ninterface IBFactory {\\n    function newLiquidityPool() external returns (IBPool);\\n\\n    function setBLabs(address b) external;\\n\\n    function collect(IBPool pool) external;\\n\\n    function isBPool(address b) external view returns (bool);\\n\\n    function getBLabs() external view returns (address);\\n\\n    function getSwapRouter() external view returns (address);\\n\\n    function getVault() external view returns (address);\\n\\n    function getUserVault() external view returns (address);\\n\\n    function getVaultAddress() external view returns (address);\\n\\n    function getOracleAddress() external view returns (address);\\n\\n    function getManagerOwner() external view returns (address);\\n\\n    function isTokenWhitelistedForVerify(uint sort, address token) external view returns (bool);\\n\\n    function isTokenWhitelistedForVerify(address token) external view returns (bool);\\n\\n    function getModuleStatus(address etf, address module) external view returns (bool);\\n\\n    function isPaused() external view returns (bool);\\n}\\n\\ninterface IVault {\\n    function depositManagerToken(address[] calldata poolTokens, uint[] calldata tokensAmount) external;\\n\\n    function depositIssueRedeemPToken(\\n        address[] calldata poolTokens,\\n        uint[] calldata tokensAmount,\\n        uint[] calldata tokensAmountP,\\n        bool isPerfermance\\n    ) external;\\n\\n    function managerClaim(address pool) external;\\n\\n    function getManagerClaimBool(address pool) external view returns (bool);\\n}\\n\\ninterface IUserVault {\\n    function recordTokenInfo(\\n        address kol,\\n        address user,\\n        address[] calldata poolTokens,\\n        uint[] calldata tokensAmount\\n    ) external;\\n}\\n\\ninterface Oracles {\\n    function getPrice(address tokenAddress) external returns (uint price);\\n\\n    function getAllPrice(address[] calldata poolTokens, uint[] calldata tokensAmount) external returns (uint);\\n}\",\"keccak256\":\"0xc2cc32bdf691ceddab7a647a98bd481adcf9ae8393d8663a916bf032ef0dbbc6\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IConfigurableRightsPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Interface declarations\\n\\n// Introduce to avoid circularity (otherwise, the CRP and SmartPoolManager include each other)\\n// Removing circularity allows flattener tools to work, which enables Etherscan verification\\ninterface IConfigurableRightsPool {\\n    function mintPoolShareFromLib(uint amount) external;\\n\\n    function pushPoolShareFromLib(address to, uint amount) external;\\n\\n    function pullPoolShareFromLib(address from, uint amount) external;\\n\\n    function burnPoolShareFromLib(uint amount) external;\\n\\n    function balanceOf(address account) external view returns (uint);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function getController() external view returns (address);\\n\\n    function vaultAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0x1326889b57f63cc031e7c9e383b0fd3b172a9b86eb623cf0faba32c0768c4ec4\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Interface declarations\\n\\n/* solhint-disable func-order */\\n\\ninterface IERC20 {\\n    // Emitted when the allowance of a spender for an owner is set by a call to approve.\\n    // Value is the new allowance\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n\\n    // Emitted when value tokens are moved from one account (from) to another (to).\\n    // Note that value may be zero\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    // Returns the amount of tokens in existence\\n    function totalSupply() external view returns (uint);\\n\\n    // Returns the amount of tokens owned by account\\n    function balanceOf(address account) external view returns (uint);\\n\\n    // Returns the decimals of tokens\\n    function decimals() external view returns (uint8);\\n\\n    function symbol() external view returns (string memory);\\n\\n    // Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner\\n    // through transferFrom. This is zero by default\\n    // This value changes when approve or transferFrom are called\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    // Sets amount as the allowance of spender over the caller\\u2019s tokens\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits an Approval event.\\n    function approve(address spender, uint amount) external returns (bool);\\n\\n    // Moves amount tokens from the caller\\u2019s account to recipient\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits a Transfer event.\\n    function transfer(address recipient, uint amount) external returns (bool);\\n\\n    // Moves amount tokens from sender to recipient using the allowance mechanism\\n    // Amount is then deducted from the caller\\u2019s allowance\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits a Transfer event\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xfe22b6d6029b400b9cce7f9b39c546f99cd6922b2fd926e480e2b4d476ab26f8\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/DesynConstants.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n/**\\n * @author Desyn Labs\\n * @title Put all the constants in one place\\n */\\n\\nlibrary DesynConstants {\\n    // State variables (must be constant in a library)\\n\\n    // B \\\"ONE\\\" - all math is in the \\\"realm\\\" of 10 ** 18;\\n    // where numeric 1 = 10 ** 18\\n    uint public constant BONE = 10**18;\\n    uint public constant MIN_WEIGHT = BONE;\\n    uint public constant MAX_WEIGHT = BONE * 50;\\n    uint public constant MAX_TOTAL_WEIGHT = BONE * 50;\\n    uint public constant MIN_BALANCE = 0;\\n    uint public constant MAX_BALANCE = BONE * 10**12;\\n    uint public constant MIN_POOL_SUPPLY = BONE * 100;\\n    uint public constant MAX_POOL_SUPPLY = BONE * 10**9;\\n    uint public constant MIN_FEE = BONE / 10**6;\\n    uint public constant MAX_FEE = BONE / 10;\\n    //Fee Set\\n    uint public constant MANAGER_MIN_FEE = 0;\\n    uint public constant MANAGER_MAX_FEE = BONE / 10;\\n    uint public constant ISSUE_MIN_FEE = BONE / 1000;\\n    uint public constant ISSUE_MAX_FEE = BONE / 10;\\n    uint public constant REDEEM_MIN_FEE = 0;\\n    uint public constant REDEEM_MAX_FEE = BONE / 10;\\n    uint public constant PERFERMANCE_MIN_FEE = 0;\\n    uint public constant PERFERMANCE_MAX_FEE = BONE / 2;\\n    // EXIT_FEE must always be zero, or ConfigurableRightsPool._pushUnderlying will fail\\n    uint public constant EXIT_FEE = 0;\\n    uint public constant MAX_IN_RATIO = BONE / 2;\\n    uint public constant MAX_OUT_RATIO = (BONE / 3) + 1 wei;\\n    // Must match BConst.MIN_BOUND_TOKENS and BConst.MAX_BOUND_TOKENS\\n    uint public constant MIN_ASSET_LIMIT = 1;\\n    uint public constant MAX_ASSET_LIMIT = 16;\\n    uint public constant MAX_UINT = uint(-1);\\n    uint public constant MAX_COLLECT_PERIOD = 60 days;\\n}\\n\",\"keccak256\":\"0xbc396253a5541cd3cc080ca207dfdd2d2bdf963de26e005db36bd752524c1d66\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/DesynSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Imports\\n\\nimport \\\"./DesynConstants.sol\\\";\\n\\n/**\\n * @author Desyn Labs\\n * @title SafeMath - wrap Solidity operators to prevent underflow/overflow\\n * @dev badd and bsub are basically identical to OpenZeppelin SafeMath; mul/div have extra checks\\n */\\nlibrary DesynSafeMath {\\n    /**\\n     * @notice Safe addition\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev if we are adding b to a, the resulting sum must be greater than a\\n     * @return - sum of operands; throws if overflow\\n     */\\n    function badd(uint a, uint b) internal pure returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, \\\"ERR_ADD_OVERFLOW\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned subtraction\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Do a signed subtraction, and check that it produces a positive value\\n     *      (i.e., a - b is valid if b <= a)\\n     * @return - a - b; throws if underflow\\n     */\\n    function bsub(uint a, uint b) internal pure returns (uint) {\\n        (uint c, bool negativeResult) = bsubSign(a, b);\\n        require(!negativeResult, \\\"ERR_SUB_UNDERFLOW\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Safe signed subtraction\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Do a signed subtraction\\n     * @return - difference between a and b, and a flag indicating a negative result\\n     *           (i.e., a - b if a is greater than or equal to b; otherwise b - a)\\n     */\\n    function bsubSign(uint a, uint b) internal pure returns (uint, bool) {\\n        if (b <= a) {\\n            return (a - b, false);\\n        } else {\\n            return (b - a, true);\\n        }\\n    }\\n\\n    /**\\n     * @notice Safe multiplication\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Multiply safely (and efficiently), rounding down\\n     * @return - product of operands; throws if overflow or rounding error\\n     */\\n    function bmul(uint a, uint b) internal pure returns (uint) {\\n        // Gas optimization (see github.com/OpenZeppelin/openzeppelin-contracts/pull/522)\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // Standard overflow check: a/a*b=b\\n        uint c0 = a * b;\\n        require(c0 / a == b, \\\"ERR_MUL_OVERFLOW\\\");\\n\\n        // Round to 0 if x*y < BONE/2?\\n        uint c1 = c0 + (DesynConstants.BONE / 2);\\n        require(c1 >= c0, \\\"ERR_MUL_OVERFLOW\\\");\\n        uint c2 = c1 / DesynConstants.BONE;\\n        return c2;\\n    }\\n\\n    /**\\n     * @notice Safe division\\n     * @param dividend - first operand\\n     * @param divisor - second operand\\n     * @dev Divide safely (and efficiently), rounding down\\n     * @return - quotient; throws if overflow or rounding error\\n     */\\n    function bdiv(uint dividend, uint divisor) internal pure returns (uint) {\\n        require(divisor != 0, \\\"ERR_DIV_ZERO\\\");\\n\\n        // Gas optimization\\n        if (dividend == 0) {\\n            return 0;\\n        }\\n\\n        uint c0 = dividend * DesynConstants.BONE;\\n        require(c0 / dividend == DesynConstants.BONE, \\\"ERR_DIV_INTERNAL\\\"); // bmul overflow\\n\\n        uint c1 = c0 + (divisor / 2);\\n        require(c1 >= c0, \\\"ERR_DIV_INTERNAL\\\"); //  badd require\\n\\n        uint c2 = c1 / divisor;\\n        return c2;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer modulo\\n     * @dev Returns the remainder of dividing two unsigned integers.\\n     *      Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * @param dividend - first operand\\n     * @param divisor - second operand -- cannot be zero\\n     * @return - quotient; throws if overflow or rounding error\\n     */\\n    function bmod(uint dividend, uint divisor) internal pure returns (uint) {\\n        require(divisor != 0, \\\"ERR_MODULO_BY_ZERO\\\");\\n\\n        return dividend % divisor;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer max\\n     * @dev Returns the greater of the two input values\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the maximum of a and b\\n     */\\n    function bmax(uint a, uint b) internal pure returns (uint) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer min\\n     * @dev returns b, if b < a; otherwise returns a\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the lesser of the two input values\\n     */\\n    function bmin(uint a, uint b) internal pure returns (uint) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer average\\n     * @dev Guard against (a+b) overflow by dividing each operand separately\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the average of the two values\\n     */\\n    function baverage(uint a, uint b) internal pure returns (uint) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\\n    }\\n\\n    /**\\n     * @notice Babylonian square root implementation\\n     * @dev (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n     * @param y - operand\\n     * @return z - the square root result\\n     */\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9baf30b98a5f3a8c13ac9c4d5d4b176eabfd936aba8f5172c95b7c568fba68f3\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/SafeApprove.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Imports\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n// Libraries\\n\\n/**\\n * @author PieDAO (ported to Desyn Labs)\\n * @title SafeApprove - set approval for tokens that require 0 prior approval\\n * @dev Perhaps to address the known ERC20 race condition issue\\n *      See https://github.com/crytic/not-so-smart-contracts/tree/master/race_condition\\n *      Some tokens - notably KNC - only allow approvals to be increased from 0\\n */\\nlibrary SafeApprove {\\n    /**\\n     * @notice handle approvals of tokens that require approving from a base of 0\\n     * @param token - the token we're approving\\n     * @param spender - entity the owner (sender) is approving to spend his tokens\\n     * @param amount - number of tokens being approved\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint amount\\n    ) internal returns (bool) {\\n        uint currentAllowance = token.allowance(address(this), spender);\\n\\n        // Do nothing if allowance is already set to this value\\n        if (currentAllowance == amount) {\\n            return true;\\n        }\\n\\n        // If approval is not zero reset it to zero first\\n        if (currentAllowance != 0) {\\n            token.approve(spender, 0);\\n        }\\n\\n        // do the actual approval\\n        return token.approve(spender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xa51ebf770f2676085b89b1636688cc086289cfe27f614dfd0c15142535c26752\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/SmartPoolManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Needed to pass in structs\\npragma experimental ABIEncoderV2;\\n\\n// Imports\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IConfigurableRightsPool.sol\\\";\\nimport \\\"../interfaces/IBFactory.sol\\\"; // unused\\nimport \\\"./DesynSafeMath.sol\\\"; // unused\\nimport \\\"./SafeApprove.sol\\\";\\n\\n/**\\n * @author Desyn Labs\\n * @title Factor out the weight updates\\n */\\nlibrary SmartPoolManager {\\n    using SafeApprove for IERC20;\\n    using DesynSafeMath for uint;\\n\\n    //kol pool params\\n    struct levelParams {\\n        uint level;\\n        uint ratio;\\n    }\\n\\n    struct feeParams {\\n        levelParams firstLevel;\\n        levelParams secondLevel;\\n        levelParams thirdLevel;\\n        levelParams fourLevel;\\n    }\\n    struct KolPoolParams {\\n        feeParams managerFee;\\n        feeParams issueFee;\\n        feeParams redeemFee;\\n        feeParams perfermanceFee;\\n    }\\n\\n    // Type declarations\\n    enum Etypes {\\n        OPENED,\\n        CLOSED\\n    }\\n\\n    enum Period {\\n        HALF,\\n        ONE,\\n        TWO\\n    }\\n\\n    // updateWeight and pokeWeights are unavoidably long\\n    /* solhint-disable function-max-lines */\\n    struct Status {\\n        uint collectPeriod;\\n        uint collectEndTime;\\n        uint closurePeriod;\\n        uint closureEndTime;\\n        uint upperCap;\\n        uint floorCap;\\n        uint managerFee;\\n        uint redeemFee;\\n        uint issueFee;\\n        uint perfermanceFee;\\n        uint startClaimFeeTime;\\n    }\\n\\n    struct PoolParams {\\n        // Desyn Pool Token (representing shares of the pool)\\n        string poolTokenSymbol;\\n        string poolTokenName;\\n        // Tokens inside the Pool\\n        address[] constituentTokens;\\n        uint[] tokenBalances;\\n        uint[] tokenWeights;\\n        uint swapFee;\\n        uint managerFee;\\n        uint redeemFee;\\n        uint issueFee;\\n        uint perfermanceFee;\\n        Etypes etype;\\n    }\\n\\n    struct PoolTokenRange {\\n        uint bspFloor;\\n        uint bspCap;\\n    }\\n\\n    struct Fund {\\n        uint etfAmount;\\n        uint fundAmount;\\n    }\\n\\n    function initRequire(\\n        uint swapFee,\\n        uint managerFee,\\n        uint issueFee,\\n        uint redeemFee,\\n        uint perfermanceFee,\\n        uint tokenBalancesLength,\\n        uint tokenWeightsLength,\\n        uint constituentTokensLength,\\n        bool initBool\\n    ) external pure {\\n        // We don't have a pool yet; check now or it will fail later (in order of likelihood to fail)\\n        // (and be unrecoverable if they don't have permission set to change it)\\n        // Most likely to fail, so check first\\n        require(!initBool, \\\"Init fail\\\");\\n        require(swapFee >= DesynConstants.MIN_FEE, \\\"ERR_INVALID_SWAP_FEE\\\");\\n        require(swapFee <= DesynConstants.MAX_FEE, \\\"ERR_INVALID_SWAP_FEE\\\");\\n        require(managerFee >= DesynConstants.MANAGER_MIN_FEE, \\\"ERR_INVALID_MANAGER_FEE\\\");\\n        require(managerFee <= DesynConstants.MANAGER_MAX_FEE, \\\"ERR_INVALID_MANAGER_FEE\\\");\\n        require(issueFee >= DesynConstants.ISSUE_MIN_FEE, \\\"ERR_INVALID_ISSUE_MIN_FEE\\\");\\n        require(issueFee <= DesynConstants.ISSUE_MAX_FEE, \\\"ERR_INVALID_ISSUE_MAX_FEE\\\");\\n        require(redeemFee >= DesynConstants.REDEEM_MIN_FEE, \\\"ERR_INVALID_REDEEM_MIN_FEE\\\");\\n        require(redeemFee <= DesynConstants.REDEEM_MAX_FEE, \\\"ERR_INVALID_REDEEM_MAX_FEE\\\");\\n        require(perfermanceFee >= DesynConstants.PERFERMANCE_MIN_FEE, \\\"ERR_INVALID_PERFERMANCE_MIN_FEE\\\");\\n        require(perfermanceFee <= DesynConstants.PERFERMANCE_MAX_FEE, \\\"ERR_INVALID_PERFERMANCE_MAX_FEE\\\");\\n\\n        // Arrays must be parallel\\n        require(tokenBalancesLength == constituentTokensLength, \\\"ERR_START_BALANCES_MISMATCH\\\");\\n        require(tokenWeightsLength == constituentTokensLength, \\\"ERR_START_WEIGHTS_MISMATCH\\\");\\n        // Cannot have too many or too few - technically redundant, since BPool.bind() would fail later\\n        // But if we don't check now, we could have a useless contract with no way to create a pool\\n\\n        require(constituentTokensLength >= DesynConstants.MIN_ASSET_LIMIT, \\\"ERR_TOO_FEW_TOKENS\\\");\\n        require(constituentTokensLength <= DesynConstants.MAX_ASSET_LIMIT, \\\"ERR_TOO_MANY_TOKENS\\\");\\n        // There are further possible checks (e.g., if they use the same token twice), but\\n        // we can let bind() catch things like that (i.e., not things that might reasonably work)\\n    }\\n\\n    /**\\n     * @notice Update the weight of an existing token\\n     * @dev Refactored to library to make CRPFactory deployable\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param tokenA - token to sell\\n     * @param tokenB - token to buy\\n     */\\n    function rebalance(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address tokenA,\\n        address tokenB,\\n        uint deltaWeight,\\n        uint minAmountOut\\n    ) external {\\n        uint currentWeightA = bPool.getDenormalizedWeight(tokenA);\\n        uint currentBalanceA = bPool.getBalance(tokenA);\\n        // uint currentWeightB = bPool.getDenormalizedWeight(tokenB);\\n\\n        require(deltaWeight <= currentWeightA, \\\"ERR_DELTA_WEIGHT_TOO_BIG\\\");\\n\\n        // deltaBalance = currentBalance * (deltaWeight / currentWeight)\\n        uint deltaBalanceA = DesynSafeMath.bmul(currentBalanceA, DesynSafeMath.bdiv(deltaWeight, currentWeightA));\\n\\n        // uint currentBalanceB = bPool.getBalance(tokenB);\\n\\n        // uint deltaWeight = DesynSafeMath.bsub(newWeight, currentWeightA);\\n\\n        // uint newWeightB = DesynSafeMath.bsub(currentWeightB, deltaWeight);\\n        // require(newWeightB >= 0, \\\"ERR_INCORRECT_WEIGHT_B\\\");\\n        bool soldout;\\n        if (deltaWeight == currentWeightA) {\\n            // reduct token A\\n            bPool.unbindPure(tokenA);\\n            soldout = true;\\n        }\\n\\n        // Now with the tokens this contract can bind them to the pool it controls\\n        bPool.rebindSmart(tokenA, tokenB, deltaWeight, deltaBalanceA, soldout, minAmountOut);\\n    }\\n\\n    /**\\n     * @notice Non ERC20-conforming tokens are problematic; don't allow them in pools\\n     * @dev Will revert if invalid\\n     * @param token - The prospective token to verify\\n     */\\n    function verifyTokenCompliance(address token) external {\\n        verifyTokenComplianceInternal(token);\\n    }\\n\\n    /**\\n     * @notice Non ERC20-conforming tokens are problematic; don't allow them in pools\\n     * @dev Will revert if invalid - overloaded to save space in the main contract\\n     * @param tokens - The prospective tokens to verify\\n     */\\n    function verifyTokenCompliance(address[] calldata tokens) external {\\n        for (uint i = 0; i < tokens.length; i++) {\\n            verifyTokenComplianceInternal(tokens[i]);\\n        }\\n    }\\n\\n    function createPoolInternalHandle(IBPool bPool, uint initialSupply) external view {\\n        require(initialSupply >= DesynConstants.MIN_POOL_SUPPLY, \\\"ERR_INIT_SUPPLY_MIN\\\");\\n        require(initialSupply <= DesynConstants.MAX_POOL_SUPPLY, \\\"ERR_INIT_SUPPLY_MAX\\\");\\n        require(bPool.EXIT_FEE() == 0, \\\"ERR_NONZERO_EXIT_FEE\\\");\\n        // EXIT_FEE must always be zero, or ConfigurableRightsPool._pushUnderlying will fail\\n        require(DesynConstants.EXIT_FEE == 0, \\\"ERR_NONZERO_EXIT_FEE\\\");\\n    }\\n\\n    function createPoolHandle(\\n        uint collectPeriod,\\n        uint upperCap,\\n        uint initialSupply\\n    ) external pure {\\n        require(collectPeriod <= DesynConstants.MAX_COLLECT_PERIOD, \\\"ERR_EXCEEDS_FUND_RAISING_PERIOD\\\");\\n        require(upperCap >= initialSupply, \\\"ERR_CAP_BIGGER_THAN_INITSUPPLY\\\");\\n    }\\n\\n    function exitPoolHandle(\\n        uint _endEtfAmount,\\n        uint _endFundAmount,\\n        uint _beginEtfAmount,\\n        uint _beginFundAmount,\\n        uint poolAmountIn,\\n        uint totalEnd\\n    )\\n        external\\n        pure\\n        returns (\\n            uint endEtfAmount,\\n            uint endFundAmount,\\n            uint profitRate\\n        )\\n    {\\n        endEtfAmount = DesynSafeMath.badd(_endEtfAmount, poolAmountIn);\\n        endFundAmount = DesynSafeMath.badd(_endFundAmount, totalEnd);\\n        uint amount1 = DesynSafeMath.bdiv(endFundAmount, endEtfAmount);\\n        uint amount2 = DesynSafeMath.bdiv(_beginFundAmount, _beginEtfAmount);\\n        if (amount1 > amount2) {\\n            profitRate = DesynSafeMath.bdiv(\\n                DesynSafeMath.bmul(DesynSafeMath.bsub(DesynSafeMath.bdiv(endFundAmount, endEtfAmount), DesynSafeMath.bdiv(_beginFundAmount, _beginEtfAmount)), poolAmountIn),\\n                totalEnd\\n            );\\n        }\\n    }\\n\\n    function exitPoolHandleA(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address poolToken,\\n        uint _tokenAmountOut,\\n        uint redeemFee,\\n        uint profitRate,\\n        uint perfermanceFee\\n    )\\n        external\\n        returns (\\n            uint redeemAndPerformanceFeeReceived,\\n            uint finalAmountOut,\\n            uint redeemFeeReceived\\n        )\\n    {\\n        // redeem fee\\n        redeemFeeReceived = DesynSafeMath.bmul(_tokenAmountOut, redeemFee);\\n\\n        // performance fee\\n        uint performanceFeeReceived = DesynSafeMath.bmul(DesynSafeMath.bmul(_tokenAmountOut, profitRate), perfermanceFee);\\n        \\n        // redeem fee and performance fee\\n        redeemAndPerformanceFeeReceived = DesynSafeMath.badd(performanceFeeReceived, redeemFeeReceived);\\n\\n        // final amount the user got\\n        finalAmountOut = DesynSafeMath.bsub(_tokenAmountOut, redeemAndPerformanceFeeReceived);\\n\\n        _pushUnderlying(bPool, poolToken, msg.sender, finalAmountOut);\\n\\n        if (redeemFee != 0 || (profitRate > 0 && perfermanceFee != 0)) {\\n            _pushUnderlying(bPool, poolToken, address(this), redeemAndPerformanceFeeReceived);\\n            IERC20(poolToken).safeApprove(self.vaultAddress(), redeemAndPerformanceFeeReceived);\\n        }\\n    }\\n\\n    function exitPoolHandleB(\\n        IConfigurableRightsPool self,\\n        bool bools,\\n        bool isCompletedCollect,\\n        uint closureEndTime,\\n        uint collectEndTime,\\n        uint _etfAmount,\\n        uint _fundAmount,\\n        uint poolAmountIn\\n    ) external view returns (uint etfAmount, uint fundAmount, uint actualPoolAmountIn) {\\n        actualPoolAmountIn = poolAmountIn;\\n        if (bools) {\\n            bool isCloseEtfCollectEndWithFailure = isCompletedCollect == false && block.timestamp >= collectEndTime;\\n            bool isCloseEtfClosureEnd = block.timestamp >= closureEndTime;\\n            require(isCloseEtfCollectEndWithFailure || isCloseEtfClosureEnd, \\\"ERR_CLOSURE_TIME_NOT_ARRIVED!\\\");\\n\\n            actualPoolAmountIn = self.balanceOf(msg.sender);\\n        }\\n        fundAmount = _fundAmount;\\n        etfAmount = _etfAmount;\\n    }\\n\\n    function joinPoolHandle(\\n        bool canWhitelistLPs,\\n        bool isList,\\n        bool bools,\\n        uint collectEndTime\\n    ) external view {\\n        require(!canWhitelistLPs || isList, \\\"ERR_NOT_ON_WHITELIST\\\");\\n\\n        if (bools) {\\n            require(block.timestamp <= collectEndTime, \\\"ERR_COLLECT_PERIOD_FINISHED!\\\");\\n        }\\n    }\\n\\n    function rebalanceHandle(\\n        IBPool bPool,\\n        bool isCompletedCollect,\\n        bool bools,\\n        uint collectEndTime,\\n        uint closureEndTime,\\n        bool canChangeWeights,\\n        address tokenA,\\n        address tokenB\\n    ) external {\\n        require(bPool.isBound(tokenA), \\\"ERR_TOKEN_NOT_BOUND\\\");\\n        if (bools) {\\n            require(isCompletedCollect, \\\"ERROR_COLLECTION_FAILED\\\");\\n            require(block.timestamp > collectEndTime && block.timestamp < closureEndTime, \\\"ERR_NOT_REBALANCE_PERIOD\\\");\\n        }\\n\\n        if (!bPool.isBound(tokenB)) {\\n            bool returnValue = IERC20(tokenB).safeApprove(address(bPool), DesynConstants.MAX_UINT);\\n            require(returnValue, \\\"ERR_ERC20_FALSE\\\");\\n        }\\n\\n        require(canChangeWeights, \\\"ERR_NOT_CONFIGURABLE_WEIGHTS\\\");\\n        require(tokenA != tokenB, \\\"ERR_TOKENS_SAME\\\");\\n    }\\n\\n    /**\\n     * @notice Join a pool\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param poolAmountOut - number of pool tokens to receive\\n     * @param maxAmountsIn - Max amount of asset tokens to spend\\n     * @return actualAmountsIn - calculated values of the tokens to pull in\\n     */\\n    function joinPool(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        uint poolAmountOut,\\n        uint[] calldata maxAmountsIn,\\n        uint issueFee\\n    ) external view returns (uint[] memory actualAmountsIn) {\\n        address[] memory tokens = bPool.getCurrentTokens();\\n\\n        require(maxAmountsIn.length == tokens.length, \\\"ERR_AMOUNTS_MISMATCH\\\");\\n\\n        uint poolTotal = self.totalSupply();\\n        // Subtract  1 to ensure any rounding errors favor the pool\\n        uint ratio = DesynSafeMath.bdiv(poolAmountOut, DesynSafeMath.bsub(poolTotal, 1));\\n\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        // We know the length of the array; initialize it, and fill it below\\n        // Cannot do \\\"push\\\" in memory\\n        actualAmountsIn = new uint[](tokens.length);\\n\\n        // This loop contains external calls\\n        // External calls are to math libraries or the underlying pool, so low risk\\n        uint issueFeeRate = issueFee.bmul(1000);\\n        for (uint i = 0; i < tokens.length; i++) {\\n            address t = tokens[i];\\n            uint bal = bPool.getBalance(t);\\n            // Add 1 to ensure any rounding errors favor the pool\\n            uint virtualTokenAmountIn = DesynSafeMath.bmul(ratio, DesynSafeMath.badd(bal, 1));\\n            uint base = bal.badd(1).bmul(poolAmountOut * uint(1000));\\n            uint tokenAmountIn = base.bdiv(poolTotal.bsub(1) * (uint(1000).bsub(issueFeeRate)));\\n\\n            require(tokenAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountIn <= maxAmountsIn[i], \\\"ERR_LIMIT_IN\\\");\\n\\n            actualAmountsIn[i] = tokenAmountIn;\\n        }\\n    }\\n\\n    /**\\n     * @notice Exit a pool - redeem pool tokens for underlying assets\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param poolAmountIn - amount of pool tokens to redeem\\n     * @param minAmountsOut - minimum amount of asset tokens to receive\\n     * @return actualAmountsOut - calculated amounts of each token to pull\\n     */\\n    function exitPool(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        uint poolAmountIn,\\n        uint[] calldata minAmountsOut\\n    ) external view returns (uint[] memory actualAmountsOut) {\\n        address[] memory tokens = bPool.getCurrentTokens();\\n\\n        require(minAmountsOut.length == tokens.length, \\\"ERR_AMOUNTS_MISMATCH\\\");\\n\\n        uint poolTotal = self.totalSupply();\\n\\n        uint ratio = DesynSafeMath.bdiv(poolAmountIn, DesynSafeMath.badd(poolTotal, 1));\\n\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        actualAmountsOut = new uint[](tokens.length);\\n\\n        // This loop contains external calls\\n        // External calls are to math libraries or the underlying pool, so low risk\\n        for (uint i = 0; i < tokens.length; i++) {\\n            address t = tokens[i];\\n            uint bal = bPool.getBalance(t);\\n            // Subtract 1 to ensure any rounding errors favor the pool\\n            uint tokenAmountOut = DesynSafeMath.bmul(ratio, DesynSafeMath.bsub(bal, 1));\\n\\n            require(tokenAmountOut != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountOut >= minAmountsOut[i], \\\"ERR_LIMIT_OUT\\\");\\n\\n            actualAmountsOut[i] = tokenAmountOut;\\n        }\\n    }\\n\\n    // Internal functions\\n    // Check for zero transfer, and make sure it returns true to returnValue\\n    function verifyTokenComplianceInternal(address token) internal {\\n        bool returnValue = IERC20(token).transfer(msg.sender, 0);\\n        require(returnValue, \\\"ERR_NONCONFORMING_TOKEN\\\");\\n    }\\n\\n    function handleTransferInTokens(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address poolToken,\\n        uint actualAmountIn,\\n        uint _actualIssueFee\\n    ) external returns (uint issueFeeReceived) {\\n        issueFeeReceived = DesynSafeMath.bmul(actualAmountIn, _actualIssueFee);\\n        uint amount = DesynSafeMath.bsub(actualAmountIn, issueFeeReceived);\\n\\n        _pullUnderlying(bPool, poolToken, msg.sender, amount);\\n\\n        if (_actualIssueFee != 0) {\\n            bool xfer = IERC20(poolToken).transferFrom(msg.sender, address(this), issueFeeReceived);\\n            require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n\\n            IERC20(poolToken).safeApprove(self.vaultAddress(), issueFeeReceived);\\n        }\\n    }\\n\\n    function handleClaim(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address[] calldata poolTokens,\\n        uint managerFee,\\n        uint time\\n    ) external returns (uint[] memory tokensAmount) {\\n        for (uint i = 0; i < poolTokens.length; i++) {\\n            address t = poolTokens[i];\\n            uint tokenBalance = bPool.getBalance(t);\\n            uint tokenAmountOut = DesynSafeMath.bmul(tokenBalance, (managerFee * time) / 12);\\n            _pushUnderlying(bPool, t, msg.sender, tokenAmountOut);\\n\\n            IERC20(t).safeApprove(self.vaultAddress(), tokenAmountOut);\\n            tokensAmount[i] = tokenAmountOut;\\n        }\\n    }\\n\\n    function handleCollectionCompleted(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address[] calldata poolTokens,\\n        uint issueFee\\n    ) external {\\n        if (issueFee != 0) {\\n            uint[] memory tokensAmount = new uint[](poolTokens.length);\\n\\n            for (uint i = 0; i < poolTokens.length; i++) {\\n                address t = poolTokens[i];\\n                uint currentAmount = bPool.getBalance(t);\\n                uint currentAmountFee = DesynSafeMath.bmul(currentAmount, issueFee);\\n\\n                _pushUnderlying(bPool, t, address(this), currentAmountFee);\\n                tokensAmount[i] = currentAmountFee;\\n                IERC20(t).safeApprove(self.vaultAddress(), currentAmountFee);\\n            }\\n\\n            IVault(self.vaultAddress()).depositIssueRedeemPToken(poolTokens, tokensAmount, tokensAmount, false);\\n        }\\n    }\\n\\n    function WhitelistHandle(\\n        bool bool1,\\n        bool bool2,\\n        address adr\\n    ) external pure {\\n        require(bool1, \\\"ERR_CANNOT_WHITELIST_LPS\\\");\\n        require(bool2, \\\"ERR_LP_NOT_WHITELISTED\\\");\\n        require(adr != address(0), \\\"ERR_INVALID_ADDRESS\\\");\\n    }\\n\\n    function _pullUnderlying(\\n        IBPool bPool,\\n        address erc20,\\n        address from,\\n        uint amount\\n    ) internal {\\n        uint tokenBalance = bPool.getBalance(erc20);\\n        uint tokenWeight = bPool.getDenormalizedWeight(erc20);\\n\\n        bool xfer = IERC20(erc20).transferFrom(from, address(this), amount);\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n        bPool.rebind(erc20, DesynSafeMath.badd(tokenBalance, amount), tokenWeight);\\n    }\\n\\n    function _pushUnderlying(\\n        IBPool bPool,\\n        address erc20,\\n        address to,\\n        uint amount\\n    ) internal {\\n        uint tokenBalance = bPool.getBalance(erc20);\\n        uint tokenWeight = bPool.getDenormalizedWeight(erc20);\\n        bPool.rebind(erc20, DesynSafeMath.bsub(tokenBalance, amount), tokenWeight);\\n\\n        bool xfer = IERC20(erc20).transfer(to, amount);\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x8c2b81a2b15ca7ca557a532d6390df9d1a60bc015457fb87680a5eb97b6c7819\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100e55760003560e01c80630ff4d58d146100ea5780631c1af1361461010c57806335df184a1461012c5780633e9fc0bd1461016257806350884c91146101755780635471c3e41461019557806377d44349146101a857806380681cab146101c8578063a782948d146101db578063b78e0bc9146101fb578063c026fa3d1461020e578063d03f2a0f14610230578063d378778c14610243578063d3aa471014610270578063dba4989a14610283578063de5bb5fc14610296578063e844db6f146102a9575b600080fd5b8180156100f657600080fd5b5061010a6101053660046124dc565b6102c9565b005b81801561011857600080fd5b5061010a61012736600461209a565b61056d565b81801561013857600080fd5b5061014c610147366004612546565b610579565b6040516101599190612918565b60405180910390f35b61010a6101703660046126ba565b6106b5565b81801561018157600080fd5b5061010a6101903660046123a8565b610706565b61014c6101a33660046125ba565b61091f565b8180156101b457600080fd5b5061010a6101c33660046120d2565b610bde565b61010a6101d6366004612727565b610c1a565b8180156101e757600080fd5b5061010a6101f6366004612271565b610dd7565b61014c61020936600461262a565b610fce565b61022161021c366004612332565b6112e3565b60405161015993929190613088565b61010a61023e366004612307565b6113bb565b81801561024f57600080fd5b5061026361025e366004612415565b6114a1565b604051610159919061307f565b61010a61027e3660046121d7565b611605565b61010a610291366004612221565b611665565b6102216102a43660046126e5565b6116b7565b8180156102b557600080fd5b506102216102c436600461246f565b611737565b8015610566576060826001600160401b03811180156102e757600080fd5b50604051908082528060200260200182016040528015610311578160200160208202803683370190505b50905060005b8381101561048c57600085858381811061032d57fe5b9050602002016020810190610342919061209a565b90506000876001600160a01b031663f8b2cb4f836040518263ffffffff1660e01b815260040161037291906127d4565b60206040518083038186803b15801561038a57600080fd5b505afa15801561039e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c291906126a2565b905060006103d08287611841565b90506103de898430846118c0565b808585815181106103eb57fe5b60200260200101818152505061047c8a6001600160a01b031663430bf08a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561043357600080fd5b505afa158015610447573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046b91906120b6565b6001600160a01b0385169083611ad7565b5050600190920191506103179050565b50856001600160a01b031663430bf08a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156104c657600080fd5b505afa1580156104da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fe91906120b6565b6001600160a01b0316631483d99d8585848560006040518663ffffffff1660e01b8152600401610532959493929190612898565b600060405180830381600087803b15801561054c57600080fd5b505af1158015610560573d6000803e3d6000fd5b50505050505b5050505050565b61057681611c80565b50565b606060005b848110156106aa57600086868381811061059457fe5b90506020020160208101906105a9919061209a565b90506000886001600160a01b031663f8b2cb4f836040518263ffffffff1660e01b81526004016105d991906127d4565b60206040518083038186803b1580156105f157600080fd5b505afa158015610605573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062991906126a2565b9050600061063c82600c89890204611841565b905061064a8a8433846118c0565b6106868b6001600160a01b031663430bf08a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561043357600080fd5b508085858151811061069457fe5b602090810291909101015250505060010161057e565b509695505050505050565b624f1a008311156106e15760405162461bcd60e51b81526004016106d890612ea2565b60405180910390fd5b808210156107015760405162461bcd60e51b81526004016106d890612ae0565b505050565b604051634a46c67360e11b81526000906001600160a01b0387169063948d8ce6906107359088906004016127d4565b60206040518083038186803b15801561074d57600080fd5b505afa158015610761573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078591906126a2565b90506000866001600160a01b031663f8b2cb4f876040518263ffffffff1660e01b81526004016107b591906127d4565b60206040518083038186803b1580156107cd57600080fd5b505afa1580156107e1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080591906126a2565b9050818411156108275760405162461bcd60e51b81526004016106d890612aae565b600061083c826108378786611d22565b611841565b90506000838614156108ab5760405163a61e44f560e01b81526001600160a01b038a169063a61e44f590610874908b906004016127d4565b600060405180830381600087803b15801561088e57600080fd5b505af11580156108a2573d6000803e3d6000fd5b50505050600190505b60405163cbf3a56b60e01b81526001600160a01b038a169063cbf3a56b906108e1908b908b908b90889088908d9060040161283f565b600060405180830381600087803b1580156108fb57600080fd5b505af115801561090f573d6000803e3d6000fd5b5050505050505050505050505050565b606080856001600160a01b031663cc77828d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561095b57600080fd5b505afa15801561096f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109979190810190612111565b805190915083146109ba5760405162461bcd60e51b81526004016106d890612c28565b6000876001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156109f557600080fd5b505afa158015610a09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2d91906126a2565b90506000610a4587610a40846001611db3565b611d22565b905080610a645760405162461bcd60e51b81526004016106d890612a57565b82516001600160401b0381118015610a7b57600080fd5b50604051908082528060200260200182016040528015610aa5578160200160208202803683370190505b50935060005b8351811015610bd1576000848281518110610ac257fe5b6020026020010151905060008a6001600160a01b031663f8b2cb4f836040518263ffffffff1660e01b8152600401610afa91906127d4565b60206040518083038186803b158015610b1257600080fd5b505afa158015610b26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4a91906126a2565b90506000610b5d85610837846001611dd8565b905080610b7c5760405162461bcd60e51b81526004016106d890612a57565b898985818110610b8857fe5b90506020020135811015610bae5760405162461bcd60e51b81526004016106d890612c83565b80888581518110610bbb57fe5b6020908102919091010152505050600101610aab565b5050505095945050505050565b60005b8181101561070157610c12838383818110610bf857fe5b9050602002016020810190610c0d919061209a565b611c80565b600101610be1565b8015610c385760405162461bcd60e51b81526004016106d890612c05565b64e8d4a51000891015610c5d5760405162461bcd60e51b81526004016106d890612f05565b67016345785d8a0000891115610c855760405162461bcd60e51b81526004016106d890612f05565b67016345785d8a0000881115610cad5760405162461bcd60e51b81526004016106d89061295c565b66038d7ea4c68000871015610cd45760405162461bcd60e51b81526004016106d890612a24565b67016345785d8a0000871115610cfc5760405162461bcd60e51b81526004016106d890612d93565b67016345785d8a0000861115610d245760405162461bcd60e51b81526004016106d890613021565b6706f05b59d3b20000851115610d4c5760405162461bcd60e51b81526004016106d890612d0c565b818414610d6b5760405162461bcd60e51b81526004016106d890612caa565b818314610d8a5760405162461bcd60e51b81526004016106d8906129f0565b6001821015610dab5760405162461bcd60e51b81526004016106d890612ed9565b6010821115610dcc5760405162461bcd60e51b81526004016106d890612ff4565b505050505050505050565b604051630bcded8960e21b81526001600160a01b03891690632f37b62490610e039085906004016127d4565b60206040518083038186803b158015610e1b57600080fd5b505afa158015610e2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5391906121bb565b610e6f5760405162461bcd60e51b81526004016106d890612c56565b8515610ebc5786610e925760405162461bcd60e51b81526004016106d8906129bf565b8442118015610ea057508342105b610ebc5760405162461bcd60e51b81526004016106d89061298d565b604051630bcded8960e21b81526001600160a01b03891690632f37b62490610ee89084906004016127d4565b60206040518083038186803b158015610f0057600080fd5b505afa158015610f14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3891906121bb565b610f75576000610f546001600160a01b0383168a600019611ad7565b905080610f735760405162461bcd60e51b81526004016106d890612f33565b505b82610f925760405162461bcd60e51b81526004016106d890612b9f565b806001600160a01b0316826001600160a01b03161415610fc45760405162461bcd60e51b81526004016106d890612b17565b5050505050505050565b606080866001600160a01b031663cc77828d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561100a57600080fd5b505afa15801561101e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110469190810190612111565b805190915084146110695760405162461bcd60e51b81526004016106d890612c28565b6000886001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156110a457600080fd5b505afa1580156110b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110dc91906126a2565b905060006110ef88610a40846001611dd8565b90508061110e5760405162461bcd60e51b81526004016106d890612a57565b82516001600160401b038111801561112557600080fd5b5060405190808252806020026020018201604052801561114f578160200160208202803683370190505b5093506000611160866103e8611841565b905060005b84518110156112d457600085828151811061117c57fe5b6020026020010151905060008c6001600160a01b031663f8b2cb4f836040518263ffffffff1660e01b81526004016111b491906127d4565b60206040518083038186803b1580156111cc57600080fd5b505afa1580156111e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120491906126a2565b9050600061121786610837846001611db3565b905060006112346103e88f0261122e856001611db3565b90611841565b9050600061125a6112476103e889611dd8565b6112528b6001611dd8565b849102611d22565b9050806112795760405162461bcd60e51b81526004016106d890612a57565b8d8d8781811061128557fe5b905060200201358111156112ab5760405162461bcd60e51b81526004016106d890612d6d565b808b87815181106112b857fe5b6020908102919091010152505060019093019250611165915050565b50505050509695505050505050565b6000808289156113a9576000891580156112fd5750874210155b905042891115818061130c5750805b6113285760405162461bcd60e51b81526004016106d890612f92565b6040516370a0823160e01b81526001600160a01b038e16906370a08231906113549033906004016127d4565b60206040518083038186803b15801561136c57600080fd5b505afa158015611380573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a491906126a2565b925050505b949a9399509397509195505050505050565b68056bc75e2d631000008110156113e45760405162461bcd60e51b81526004016106d890612cdf565b676765c793fa10079d601b1b81111561140f5760405162461bcd60e51b81526004016106d890612b40565b816001600160a01b031663c6580d126040518163ffffffff1660e01b815260040160206040518083038186803b15801561144857600080fd5b505afa15801561145c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148091906126a2565b1561149d5760405162461bcd60e51b81526004016106d890612e74565b5050565b60006114ad8383611841565b905060006114bb8483611dd8565b90506114c986863384611e11565b82156115fb576040516323b872dd60e01b81526000906001600160a01b038716906323b872dd90611502903390309088906004016127e8565b602060405180830381600087803b15801561151c57600080fd5b505af1158015611530573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155491906121bb565b9050806115735760405162461bcd60e51b81526004016106d890612f33565b6115f8886001600160a01b031663430bf08a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156115af57600080fd5b505afa1580156115c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e791906120b6565b6001600160a01b0388169085611ad7565b50505b5095945050505050565b826116225760405162461bcd60e51b81526004016106d890612b6d565b8161163f5760405162461bcd60e51b81526004016106d890612bd5565b6001600160a01b0381166107015760405162461bcd60e51b81526004016106d890612dc6565b83158061166f5750825b61168b5760405162461bcd60e51b81526004016106d890612a80565b81156116b157804211156116b15760405162461bcd60e51b81526004016106d890612f5c565b50505050565b60008060006116c68986611db3565b92506116d28885611db3565b915060006116e08385611d22565b905060006116ee888a611d22565b9050808211156117295761172661172061171a61170b8789611d22565b6117158c8e611d22565b611dd8565b89611841565b87611d22565b92505b505096509650969350505050565b60008060006117468787611841565b9050600061175d6117578988611841565b86611841565b90506117698183611db3565b93506117758885611dd8565b92506117838a8a33866118c0565b8615158061179b575060008611801561179b57508415155b15611833576117ac8a8a30876118c0565b6118318b6001600160a01b031663430bf08a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156117e857600080fd5b505afa1580156117fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061182091906120b6565b6001600160a01b038b169086611ad7565b505b509750975097945050505050565b600082611850575060006118ba565b8282028284828161185d57fe5b041461187b5760405162461bcd60e51b81526004016106d890612df3565b6706f05b59d3b200008101818110156118a65760405162461bcd60e51b81526004016106d890612df3565b6000670de0b6b3a7640000825b0493505050505b92915050565b60405163f8b2cb4f60e01b81526000906001600160a01b0386169063f8b2cb4f906118ef9087906004016127d4565b60206040518083038186803b15801561190757600080fd5b505afa15801561191b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061193f91906126a2565b90506000856001600160a01b031663948d8ce6866040518263ffffffff1660e01b815260040161196f91906127d4565b60206040518083038186803b15801561198757600080fd5b505afa15801561199b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119bf91906126a2565b9050856001600160a01b0316633fdddaa2866119db8587611dd8565b846040518463ffffffff1660e01b81526004016119fa93929190612877565b600060405180830381600087803b158015611a1457600080fd5b505af1158015611a28573d6000803e3d6000fd5b505060405163a9059cbb60e01b8152600092506001600160a01b038816915063a9059cbb90611a5d908890889060040161280c565b602060405180830381600087803b158015611a7757600080fd5b505af1158015611a8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aaf91906121bb565b905080611ace5760405162461bcd60e51b81526004016106d890612f33565b50505050505050565b600080846001600160a01b031663dd62ed3e30866040518363ffffffff1660e01b8152600401611b08929190612825565b60206040518083038186803b158015611b2057600080fd5b505afa158015611b34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b5891906126a2565b905082811415611b6c576001915050611c79565b8015611bf55760405163095ea7b360e01b81526001600160a01b0386169063095ea7b390611ba190879060009060040161280c565b602060405180830381600087803b158015611bbb57600080fd5b505af1158015611bcf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf391906121bb565b505b60405163095ea7b360e01b81526001600160a01b0386169063095ea7b390611c23908790879060040161280c565b602060405180830381600087803b158015611c3d57600080fd5b505af1158015611c51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7591906121bb565b9150505b9392505050565b60405163a9059cbb60e01b81526000906001600160a01b0383169063a9059cbb90611cb1903390859060040161280c565b602060405180830381600087803b158015611ccb57600080fd5b505af1158015611cdf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d0391906121bb565b90508061149d5760405162461bcd60e51b81526004016106d890612e1d565b600081611d415760405162461bcd60e51b81526004016106d890612e4e565b82611d4e575060006118ba565b670de0b6b3a764000083810290848281611d6457fe5b0414611d825760405162461bcd60e51b81526004016106d890612d43565b60028304810181811015611da85760405162461bcd60e51b81526004016106d890612d43565b60008482816118b357fe5b600082820183811015611c795760405162461bcd60e51b81526004016106d890613055565b6000806000611de78585612029565b915091508015611e095760405162461bcd60e51b81526004016106d890612fc9565b509392505050565b60405163f8b2cb4f60e01b81526000906001600160a01b0386169063f8b2cb4f90611e409087906004016127d4565b60206040518083038186803b158015611e5857600080fd5b505afa158015611e6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e9091906126a2565b90506000856001600160a01b031663948d8ce6866040518263ffffffff1660e01b8152600401611ec091906127d4565b60206040518083038186803b158015611ed857600080fd5b505afa158015611eec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f1091906126a2565b90506000856001600160a01b03166323b872dd8630876040518463ffffffff1660e01b8152600401611f44939291906127e8565b602060405180830381600087803b158015611f5e57600080fd5b505af1158015611f72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f9691906121bb565b905080611fb55760405162461bcd60e51b81526004016106d890612f33565b866001600160a01b0316633fdddaa287611fcf8688611db3565b856040518463ffffffff1660e01b8152600401611fee93929190612877565b600060405180830381600087803b15801561200857600080fd5b505af115801561201c573d6000803e3d6000fd5b5050505050505050505050565b60008083831161203f5750508082036000612047565b505081810360015b9250929050565b80516118ba816130c4565b60008083601f84011261206a578182fd5b5081356001600160401b03811115612080578182fd5b602083019150836020808302850101111561204757600080fd5b6000602082840312156120ab578081fd5b8135611c79816130c4565b6000602082840312156120c7578081fd5b8151611c79816130c4565b600080602083850312156120e4578081fd5b82356001600160401b038111156120f9578182fd5b61210585828601612059565b90969095509350505050565b60006020808385031215612123578182fd5b82516001600160401b0380821115612139578384fd5b818501915085601f83011261214c578384fd5b81518181111561215a578485fd5b838102915061216a84830161309e565b8181528481019084860184860187018a1015612184578788fd5b8795505b838610156121ae5761219a8a8261204e565b835260019590950194918601918601612188565b5098975050505050505050565b6000602082840312156121cc578081fd5b8151611c79816130d9565b6000806000606084860312156121eb578081fd5b83356121f6816130d9565b92506020840135612206816130d9565b91506040840135612216816130c4565b809150509250925092565b60008060008060808587031215612236578081fd5b8435612241816130d9565b93506020850135612251816130d9565b92506040850135612261816130d9565b9396929550929360600135925050565b600080600080600080600080610100898b03121561228d578384fd5b8835612298816130c4565b975060208901356122a8816130d9565b965060408901356122b8816130d9565b9550606089013594506080890135935060a08901356122d6816130d9565b925060c08901356122e6816130c4565b915060e08901356122f6816130c4565b809150509295985092959890939650565b60008060408385031215612319578182fd5b8235612324816130c4565b946020939093013593505050565b600080600080600080600080610100898b03121561234e578384fd5b8835612359816130c4565b97506020890135612369816130d9565b96506040890135612379816130d9565b979a96995096976060810135975060808101359660a0820135965060c0820135955060e0909101359350915050565b60008060008060008060c087890312156123c0578384fd5b86356123cb816130c4565b955060208701356123db816130c4565b945060408701356123eb816130c4565b935060608701356123fb816130c4565b9598949750929560808101359460a0909101359350915050565b600080600080600060a0868803121561242c578283fd5b8535612437816130c4565b94506020860135612447816130c4565b93506040860135612457816130c4565b94979396509394606081013594506080013592915050565b600080600080600080600060e0888a031215612489578081fd5b8735612494816130c4565b965060208801356124a4816130c4565b955060408801356124b4816130c4565b969995985095966060810135965060808101359560a0820135955060c0909101359350915050565b6000806000806000608086880312156124f3578283fd5b85356124fe816130c4565b9450602086013561250e816130c4565b935060408601356001600160401b03811115612528578384fd5b61253488828901612059565b96999598509660600135949350505050565b60008060008060008060a0878903121561255e578384fd5b8635612569816130c4565b95506020870135612579816130c4565b945060408701356001600160401b03811115612593578485fd5b61259f89828a01612059565b979a9699509760608101359660809091013595509350505050565b6000806000806000608086880312156125d1578283fd5b85356125dc816130c4565b945060208601356125ec816130c4565b93506040860135925060608601356001600160401b0381111561260d578182fd5b61261988828901612059565b969995985093965092949392505050565b60008060008060008060a08789031215612642578384fd5b863561264d816130c4565b9550602087013561265d816130c4565b94506040870135935060608701356001600160401b0381111561267e578283fd5b61268a89828a01612059565b979a9699509497949695608090950135949350505050565b6000602082840312156126b3578081fd5b5051919050565b6000806000606084860312156126ce578081fd5b505081359360208301359350604090920135919050565b60008060008060008060c087890312156126fd578384fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b60008060008060008060008060006101208a8c031215612745578283fd5b8935985060208a0135975060408a0135965060608a0135955060808a0135945060a08a0135935060c08a0135925060e08a013591506101008a0135612789816130d9565b809150509295985092959850929598565b6000815180845260208085019450808401835b838110156127c9578151875295820195908201906001016127ad565b509495945050505050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039687168152949095166020850152604084019290925260608301521515608082015260a081019190915260c00190565b6001600160a01b039390931683526020830191909152604082015260600190565b6080808252810185905260008660a08301825b888110156128db57602083356128c0816130c4565b6001600160a01b0316835292830192909101906001016128ab565b5083810360208501526128ee818861279a565b9150508281036040840152612903818661279a565b91505082151560608301529695505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561295057835183529284019291840191600101612934565b50909695505050505050565b6020808252601790820152764552525f494e56414c49445f4d414e414745525f46454560481b604082015260600190565b60208082526018908201527711549497d393d517d491509053105390d157d411549253d160421b604082015260600190565b60208082526017908201527611549493d497d0d3d3131150d51253d397d19052531151604a1b604082015260600190565b6020808252601a908201527908aa4a4bea6a882a4a8beae8a928e90a8a6be9a92a69a82a886960331b604082015260600190565b6020808252601990820152784552525f494e56414c49445f49535355455f4d494e5f46454560381b604082015260600190565b6020808252600f908201526e08aa4a4be9a82a890be82a0a0a49eb608b1b604082015260600190565b60208082526014908201527311549497d393d517d3d397d5d2125511531254d560621b604082015260600190565b6020808252601890820152774552525f44454c54415f5745494748545f544f4f5f42494760401b604082015260600190565b6020808252601e908201527f4552525f4341505f4249474745525f5448414e5f494e4954535550504c590000604082015260600190565b6020808252600f908201526e4552525f544f4b454e535f53414d4560881b604082015260600190565b60208082526013908201527208aa4a4be929c92a8bea6aaa0a098b2be9a82b606b1b604082015260600190565b6020808252601890820152774552525f43414e4e4f545f57484954454c4953545f4c505360401b604082015260600190565b6020808252601c908201527b4552525f4e4f545f434f4e464947555241424c455f5745494748545360201b604082015260600190565b60208082526016908201527511549497d31417d393d517d5d2125511531254d5115160521b604082015260600190565b602080825260099082015268125b9a5d0819985a5b60ba1b604082015260600190565b60208082526014908201527308aa4a4be829a9eaa9ca8a6be9a92a69a82a886960631b604082015260600190565b60208082526013908201527211549497d513d2d15397d393d517d093d55391606a1b604082015260600190565b6020808252600d908201526c11549497d31253525517d3d555609a1b604082015260600190565b6020808252601b908201527a08aa4a4bea6a882a4a8be848298829c868aa6be9a92a69a82a8869602b1b604082015260600190565b60208082526013908201527222a9292fa4a724aa2fa9aaa828262cafa6a4a760691b604082015260600190565b6020808252601f908201527f4552525f494e56414c49445f5045524645524d414e43455f4d41585f46454500604082015260600190565b60208082526010908201526f11549497d1125597d25395115493905360821b604082015260600190565b6020808252600c908201526b22a9292fa624a6a4aa2fa4a760a11b604082015260600190565b6020808252601990820152784552525f494e56414c49445f49535355455f4d41585f46454560381b604082015260600190565b6020808252601390820152724552525f494e56414c49445f4144445245535360681b604082015260600190565b60208082526010908201526f4552525f4d554c5f4f564552464c4f5760801b604082015260600190565b60208082526017908201527622a9292fa727a721a7a72327a926a4a723afaa27a5a2a760491b604082015260600190565b6020808252600c908201526b4552525f4449565f5a45524f60a01b604082015260600190565b6020808252601490820152734552525f4e4f4e5a45524f5f455849545f46454560601b604082015260600190565b6020808252601f908201527f4552525f455843454544535f46554e445f52414953494e475f504552494f4400604082015260600190565b6020808252601290820152714552525f544f4f5f4645575f544f4b454e5360701b604082015260600190565b6020808252601490820152734552525f494e56414c49445f535741505f46454560601b604082015260600190565b6020808252600f908201526e4552525f45524332305f46414c534560881b604082015260600190565b6020808252601c908201527b4552525f434f4c4c4543545f504552494f445f46494e49534845442160201b604082015260600190565b6020808252601d908201527f4552525f434c4f535552455f54494d455f4e4f545f4152524956454421000000604082015260600190565b6020808252601190820152704552525f5355425f554e444552464c4f5760781b604082015260600190565b6020808252601390820152724552525f544f4f5f4d414e595f544f4b454e5360681b604082015260600190565b6020808252601a90820152794552525f494e56414c49445f52454445454d5f4d41585f46454560301b604082015260600190565b60208082526010908201526f4552525f4144445f4f564552464c4f5760801b604082015260600190565b90815260200190565b9283526020830191909152604082015260600190565b6040518181016001600160401b03811182821017156130bc57600080fd5b604052919050565b6001600160a01b038116811461057657600080fd5b801515811461057657600080fdfea264697066735822122072d118b203b1d34a61abd2bef59c0675b5aebb029250264f8eb716706a0426ac64736f6c634300060c0033",
  "libraries": {},
  "devdoc": {
    "author": "Desyn Labs",
    "kind": "dev",
    "methods": {
      "exitPool(IConfigurableRightsPool,IBPool,uint256,uint256[])": {
        "params": {
          "bPool": "- Core BPool the CRP is wrapping",
          "minAmountsOut": "- minimum amount of asset tokens to receive",
          "poolAmountIn": "- amount of pool tokens to redeem",
          "self": "- ConfigurableRightsPool instance calling the library"
        },
        "returns": {
          "actualAmountsOut": "- calculated amounts of each token to pull"
        }
      },
      "joinPool(IConfigurableRightsPool,IBPool,uint256,uint256[],uint256)": {
        "params": {
          "bPool": "- Core BPool the CRP is wrapping",
          "maxAmountsIn": "- Max amount of asset tokens to spend",
          "poolAmountOut": "- number of pool tokens to receive",
          "self": "- ConfigurableRightsPool instance calling the library"
        },
        "returns": {
          "actualAmountsIn": "- calculated values of the tokens to pull in"
        }
      },
      "rebalance(IConfigurableRightsPool,IBPool,address,address,uint256,uint256)": {
        "details": "Refactored to library to make CRPFactory deployable",
        "params": {
          "bPool": "- Core BPool the CRP is wrapping",
          "self": "- ConfigurableRightsPool instance calling the library",
          "tokenA": "- token to sell",
          "tokenB": "- token to buy"
        }
      },
      "verifyTokenCompliance(address)": {
        "details": "Will revert if invalid",
        "params": {
          "token": "- The prospective token to verify"
        }
      },
      "verifyTokenCompliance(address[])": {
        "details": "Will revert if invalid - overloaded to save space in the main contract",
        "params": {
          "tokens": "- The prospective tokens to verify"
        }
      }
    },
    "title": "Factor out the weight updates",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "exitPool(IConfigurableRightsPool,IBPool,uint256,uint256[])": {
        "notice": "Exit a pool - redeem pool tokens for underlying assets"
      },
      "joinPool(IConfigurableRightsPool,IBPool,uint256,uint256[],uint256)": {
        "notice": "Join a pool"
      },
      "rebalance(IConfigurableRightsPool,IBPool,address,address,uint256,uint256)": {
        "notice": "Update the weight of an existing token"
      },
      "verifyTokenCompliance(address)": {
        "notice": "Non ERC20-conforming tokens are problematic; don't allow them in pools"
      },
      "verifyTokenCompliance(address[])": {
        "notice": "Non ERC20-conforming tokens are problematic; don't allow them in pools"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}